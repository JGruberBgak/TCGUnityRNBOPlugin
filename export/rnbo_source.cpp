/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class rnbomatic : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_173 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_173()
    {
    }
    
    ~RNBOSubpatcher_173()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    number tempo() {
        return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
    }
    
    number tickstoms(number ticks) {
        return ticks / (number)480 * this->safediv(60, this->tempo()) * 1000;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double samplerate) {
        this->translate_01_onSampleRateChanged(samplerate);
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->translate_01_onTempoChanged(tempo);
    }
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void processBBUEvent(MillisecondTime , number , number , number ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& ) {}
    
    void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("ChNoteOld/number_obj-207") == objectId)
                this->numberobj_01_valin_set(payload);
    
            if (TAG("ChNoteOld/number_obj-193") == objectId)
                this->numberobj_02_valin_set(payload);
    
            if (TAG("ChNoteOld/number_obj-4") == objectId)
                this->numberobj_03_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("ChNoteOld/number_obj-207") == objectId)
                this->numberobj_01_format_set(payload);
    
            if (TAG("ChNoteOld/number_obj-193") == objectId)
                this->numberobj_02_format_set(payload);
    
            if (TAG("ChNoteOld/number_obj-4") == objectId)
                this->numberobj_03_format_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("ChNoteOld/message_obj-200") == objectId)
                this->message_01_listin_number_set(payload);
    
            if (TAG("ChNoteOld/message_obj-196") == objectId)
                this->message_02_listin_number_set(payload);
    
            if (TAG("ChNoteOld/message_obj-201") == objectId)
                this->message_03_listin_number_set(payload);
    
            if (TAG("ChNoteOld/message_obj-203") == objectId)
                this->message_04_listin_number_set(payload);
    
            if (TAG("ChNoteOld/message_obj-206") == objectId)
                this->message_05_listin_number_set(payload);
    
            if (TAG("ChNoteOld/message_obj-204") == objectId)
                this->message_06_listin_number_set(payload);
    
            if (TAG("ChNoteOld/message_obj-205") == objectId)
                this->message_07_listin_number_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("ChNoteOld/message_obj-200") == objectId)
                this->message_01_listin_list_set(payload);
    
            if (TAG("ChNoteOld/message_obj-196") == objectId)
                this->message_02_listin_list_set(payload);
    
            if (TAG("ChNoteOld/message_obj-201") == objectId)
                this->message_03_listin_list_set(payload);
    
            if (TAG("ChNoteOld/message_obj-203") == objectId)
                this->message_04_listin_list_set(payload);
    
            if (TAG("ChNoteOld/message_obj-206") == objectId)
                this->message_05_listin_list_set(payload);
    
            if (TAG("ChNoteOld/message_obj-204") == objectId)
                this->message_06_listin_list_set(payload);
    
            if (TAG("ChNoteOld/message_obj-205") == objectId)
                this->message_07_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("ChNoteOld/message_obj-200") == objectId)
                this->message_01_listin_bang_bang();
    
            if (TAG("ChNoteOld/message_obj-196") == objectId)
                this->message_02_listin_bang_bang();
    
            if (TAG("ChNoteOld/message_obj-201") == objectId)
                this->message_03_listin_bang_bang();
    
            if (TAG("ChNoteOld/message_obj-203") == objectId)
                this->message_04_listin_bang_bang();
    
            if (TAG("ChNoteOld/message_obj-206") == objectId)
                this->message_05_listin_bang_bang();
    
            if (TAG("ChNoteOld/message_obj-204") == objectId)
                this->message_06_listin_bang_bang();
    
            if (TAG("ChNoteOld/message_obj-205") == objectId)
                this->message_07_listin_bang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("ChNoteOld/number_obj-207"):
            {
            return "ChNoteOld/number_obj-207";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("ChNoteOld/message_obj-200"):
            {
            return "ChNoteOld/message_obj-200";
            }
        case TAG("ChNoteOld/message_obj-196"):
            {
            return "ChNoteOld/message_obj-196";
            }
        case TAG("ChNoteOld/message_obj-201"):
            {
            return "ChNoteOld/message_obj-201";
            }
        case TAG("ChNoteOld/message_obj-203"):
            {
            return "ChNoteOld/message_obj-203";
            }
        case TAG("ChNoteOld/message_obj-206"):
            {
            return "ChNoteOld/message_obj-206";
            }
        case TAG("ChNoteOld/number_obj-193"):
            {
            return "ChNoteOld/number_obj-193";
            }
        case TAG("ChNoteOld/message_obj-204"):
            {
            return "ChNoteOld/message_obj-204";
            }
        case TAG("ChNoteOld/number_obj-4"):
            {
            return "ChNoteOld/number_obj-4";
            }
        case TAG("ChNoteOld/message_obj-205"):
            {
            return "ChNoteOld/message_obj-205";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_01_out1_bang_bang() {
        this->numberobj_01_value_bang();
    }
    
    void eventinlet_01_out1_number_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void eventinlet_01_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_01_value_set(converted);
        }
    }
    
    void numberobj_01_valin_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void numberobj_01_format_set(number v) {
        this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_01_listin_list_set(const list& v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_number_set(number v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_bang_bang() {
        this->message_01_trigger_bang();
    }
    
    void message_02_listin_list_set(const list& v) {
        this->message_02_set_set(v);
    }
    
    void message_02_listin_number_set(number v) {
        this->message_02_set_set(v);
    }
    
    void message_02_listin_bang_bang() {
        this->message_02_trigger_bang();
    }
    
    void message_03_listin_list_set(const list& v) {
        this->message_03_set_set(v);
    }
    
    void message_03_listin_number_set(number v) {
        this->message_03_set_set(v);
    }
    
    void message_03_listin_bang_bang() {
        this->message_03_trigger_bang();
    }
    
    void message_04_listin_list_set(const list& v) {
        this->message_04_set_set(v);
    }
    
    void message_04_listin_number_set(number v) {
        this->message_04_set_set(v);
    }
    
    void message_04_listin_bang_bang() {
        this->message_04_trigger_bang();
    }
    
    void message_05_listin_list_set(const list& v) {
        this->message_05_set_set(v);
    }
    
    void message_05_listin_number_set(number v) {
        this->message_05_set_set(v);
    }
    
    void message_05_listin_bang_bang() {
        this->message_05_trigger_bang();
    }
    
    void numberobj_02_valin_set(number v) {
        this->numberobj_02_value_set(v);
    }
    
    void numberobj_02_format_set(number v) {
        this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_06_listin_list_set(const list& v) {
        this->message_06_set_set(v);
    }
    
    void message_06_listin_number_set(number v) {
        this->message_06_set_set(v);
    }
    
    void message_06_listin_bang_bang() {
        this->message_06_trigger_bang();
    }
    
    void numberobj_03_valin_set(number v) {
        this->numberobj_03_value_set(v);
    }
    
    void numberobj_03_format_set(number v) {
        this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_07_listin_list_set(const list& v) {
        this->message_07_set_set(v);
    }
    
    void message_07_listin_number_set(number v) {
        this->message_07_set_set(v);
    }
    
    void message_07_listin_bang_bang() {
        this->message_07_trigger_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_01_init();
        this->message_01_init();
        this->message_02_init();
        this->message_03_init();
        this->message_04_init();
        this->message_05_init();
        this->numberobj_02_init();
        this->message_06_init();
        this->numberobj_03_init();
        this->message_07_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {}
    
    void allocateDataRefs() {}
    
    void numberobj_01_output_set(number ) {}
    
    void numberobj_01_value_bang() {
        number v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("ChNoteOld/number_obj-207"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_01_output_set(localvalue);
    }
    
    void numberobj_01_value_set(number v) {
        this->numberobj_01_value_setter(v);
        v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("ChNoteOld/number_obj-207"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_01_output_set(localvalue);
    }
    
    void message_01_set_set(const list& v) {
        this->message_01_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNoteOld/message_obj-200"), v, this->_currentTime);
    }
    
    void numberobj_02_output_set(number ) {}
    
    void numberobj_02_value_set(number v) {
        this->numberobj_02_value_setter(v);
        v = this->numberobj_02_value;
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("ChNoteOld/number_obj-193"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_02_output_set(localvalue);
    }
    
    void numberobj_03_output_set(number ) {}
    
    void numberobj_03_value_set(number v) {
        this->numberobj_03_value_setter(v);
        v = this->numberobj_03_value;
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("ChNoteOld/number_obj-4"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_03_output_set(localvalue);
    }
    
    void message_02_set_set(const list& v) {
        this->message_02_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNoteOld/message_obj-196"), v, this->_currentTime);
    }
    
    void eventoutlet_01_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_33_out1_number_set(v);
    }
    
    void translate_01_out_set(number v) {
        {
            list converted = {v};
            this->message_02_set_set(converted);
        }
    
        this->eventoutlet_01_in1_number_set(v);
    }
    
    void translate_01_value_set(number v) {
        this->translate_01_value = v;
    
        {
            {
                {
                    this->translate_01_out_set(this->tickstoms(v));
                }
            }
        }
    }
    
    void expr_04_out1_set(number v) {
        this->expr_04_out1 = v;
        this->numberobj_03_value_set(this->expr_04_out1);
        this->translate_01_value_set(this->expr_04_out1);
    }
    
    void expr_04_in1_set(number in1) {
        this->expr_04_in1 = in1;
        this->expr_04_out1_set((this->expr_04_in1 == 0. ? 0. : this->expr_04_in2 / this->expr_04_in1));//#map:ChNoteOld/!/_obj-189:1
    }
    
    void expr_03_out1_set(number v) {
        this->expr_03_out1 = v;
        this->numberobj_02_value_set(this->expr_03_out1);
        this->expr_04_in1_set(this->expr_03_out1);
    }
    
    void expr_03_in1_set(number in1) {
        this->expr_03_in1 = in1;
        this->expr_03_out1_set(fixnan(rnbo_pow(2, this->expr_03_in1)));//#map:ChNoteOld/expr_obj-188:1
    }
    
    void message_01_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_03_in1_set(converted);
        }
    }
    
    void message_01_trigger_bang() {
        this->message_01_out_set(this->message_01_set);
    }
    
    void message_02_out_set(const list& ) {}
    
    void message_02_trigger_bang() {
        this->message_02_out_set(this->message_02_set);
    }
    
    void message_03_set_set(const list& v) {
        this->message_03_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNoteOld/message_obj-201"), v, this->_currentTime);
    }
    
    void expr_01_out1_set(number v) {
        this->expr_01_out1 = v;
        this->numberobj_03_value_set(this->expr_01_out1);
        this->translate_01_value_set(this->expr_01_out1);
    }
    
    void expr_01_in1_set(number in1) {
        this->expr_01_in1 = in1;
        this->expr_01_out1_set((this->expr_01_in1 == 0. ? 0. : this->expr_01_in2 / this->expr_01_in1));//#map:ChNoteOld/!/_obj-194:1
    }
    
    void expr_02_out1_set(number v) {
        this->expr_02_out1 = v;
        this->numberobj_02_value_set(this->expr_02_out1);
        this->expr_01_in1_set(this->expr_02_out1);
    }
    
    void expr_02_in1_set(number in1) {
        this->expr_02_in1 = in1;
        this->expr_02_out1_set(fixnan(rnbo_pow(2, this->expr_02_in1)));//#map:ChNoteOld/expr_obj-195:1
    }
    
    void message_03_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_02_in1_set(converted);
        }
    }
    
    void message_03_trigger_bang() {
        this->message_03_out_set(this->message_03_set);
    }
    
    void message_04_set_set(const list& v) {
        this->message_04_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNoteOld/message_obj-203"), v, this->_currentTime);
    }
    
    void message_04_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_03_in1_set(converted);
        }
    }
    
    void message_04_trigger_bang() {
        this->message_04_out_set(this->message_04_set);
    }
    
    void message_05_set_set(const list& v) {
        this->message_05_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNoteOld/message_obj-206"), v, this->_currentTime);
    }
    
    void expr_05_out1_set(number v) {
        this->expr_05_out1 = v;
        this->numberobj_03_value_set(this->expr_05_out1);
        this->translate_01_value_set(this->expr_05_out1);
    }
    
    void expr_05_in1_set(number in1) {
        this->expr_05_in1 = in1;
        this->expr_05_out1_set((this->expr_05_in1 == 0. ? 0. : this->expr_05_in2 / this->expr_05_in1));//#map:ChNoteOld/!/_obj-186:1
    }
    
    void expr_06_out1_set(number v) {
        this->expr_06_out1 = v;
        this->expr_05_in1_set(this->expr_06_out1);
        this->numberobj_02_value_set(this->expr_06_out1);
    }
    
    void expr_06_in1_set(number in1) {
        this->expr_06_in1 = in1;
        this->expr_06_out1_set(fixnan(rnbo_pow(2, this->expr_06_in1)));//#map:ChNoteOld/expr_obj-187:1
    }
    
    void message_05_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_06_in1_set(converted);
        }
    }
    
    void message_05_trigger_bang() {
        this->message_05_out_set(this->message_05_set);
    }
    
    void message_06_set_set(const list& v) {
        this->message_06_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNoteOld/message_obj-204"), v, this->_currentTime);
    }
    
    void message_06_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_02_in1_set(converted);
        }
    }
    
    void message_06_trigger_bang() {
        this->message_06_out_set(this->message_06_set);
    }
    
    void message_07_set_set(const list& v) {
        this->message_07_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNoteOld/message_obj-205"), v, this->_currentTime);
    }
    
    void message_07_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_06_in1_set(converted);
        }
    }
    
    void message_07_trigger_bang() {
        this->message_07_out_set(this->message_07_set);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_01_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_01_value = localvalue;
    }
    
    void numberobj_02_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_02_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_02_value = localvalue;
    }
    
    void numberobj_03_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_03_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_03_value = localvalue;
    }
    
    void numberobj_01_init() {
        this->numberobj_01_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChNoteOld/number_obj-207"), 1, this->_currentTime);
    }
    
    void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_01_value;
    }
    
    void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_01_value_set(preset["value"]);
    }
    
    void message_01_init() {
        this->message_01_set_set({0});
    }
    
    void translate_01_onTempoChanged(number tempo) {
        RNBO_UNUSED(tempo);
    
        {
            this->translate_01_value_set(this->translate_01_value);
        }
    }
    
    void translate_01_onSampleRateChanged(number ) {}
    
    void message_02_init() {
        this->message_02_set_set({0});
    }
    
    void message_03_init() {
        this->message_03_set_set({0});
    }
    
    void message_04_init() {
        this->message_04_set_set({1});
    }
    
    void message_05_init() {
        this->message_05_set_set({0});
    }
    
    void numberobj_02_init() {
        this->numberobj_02_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChNoteOld/number_obj-193"), 1, this->_currentTime);
    }
    
    void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_02_value;
    }
    
    void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_02_value_set(preset["value"]);
    }
    
    void message_06_init() {
        this->message_06_set_set({1});
    }
    
    void numberobj_03_init() {
        this->numberobj_03_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChNoteOld/number_obj-4"), 1, this->_currentTime);
    }
    
    void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_03_value;
    }
    
    void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_03_value_set(preset["value"]);
    }
    
    void message_07_init() {
        this->message_07_set_set({1});
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        numberobj_01_value = 0;
        numberobj_01_value_setter(numberobj_01_value);
        select_01_test1 = 0;
        select_01_test2 = 1;
        select_01_test3 = 2;
        select_01_test4 = 3;
        select_01_test5 = 4;
        select_01_test6 = 5;
        expr_01_in1 = 0;
        expr_01_in2 = 1920;
        expr_01_out1 = 0;
        expr_02_in1 = 0;
        expr_02_out1 = 0;
        translate_01_value = 0;
        expr_03_in1 = 0;
        expr_03_out1 = 0;
        expr_04_in1 = 0;
        expr_04_in2 = 2880;
        expr_04_out1 = 0;
        numberobj_02_value = 0;
        numberobj_02_value_setter(numberobj_02_value);
        expr_05_in1 = 0;
        expr_05_in2 = 1280;
        expr_05_out1 = 0;
        expr_06_in1 = 0;
        expr_06_out1 = 0;
        numberobj_03_value = 0;
        numberobj_03_value_setter(numberobj_03_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_01_currentFormat = 6;
        numberobj_01_lastValue = 0;
        numberobj_02_currentFormat = 6;
        numberobj_02_lastValue = 0;
        numberobj_03_currentFormat = 6;
        numberobj_03_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number numberobj_01_value;
        list message_01_set;
        number select_01_test1;
        number select_01_test2;
        number select_01_test3;
        number select_01_test4;
        number select_01_test5;
        number select_01_test6;
        number expr_01_in1;
        number expr_01_in2;
        number expr_01_out1;
        number expr_02_in1;
        number expr_02_out1;
        number translate_01_value;
        list message_02_set;
        list message_03_set;
        list message_04_set;
        number expr_03_in1;
        number expr_03_out1;
        number expr_04_in1;
        number expr_04_in2;
        number expr_04_out1;
        list message_05_set;
        number numberobj_02_value;
        list message_06_set;
        number expr_05_in1;
        number expr_05_in2;
        number expr_05_out1;
        number expr_06_in1;
        number expr_06_out1;
        number numberobj_03_value;
        list message_07_set;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_01_currentFormat;
        number numberobj_01_lastValue;
        Int numberobj_02_currentFormat;
        number numberobj_02_lastValue;
        Int numberobj_03_currentFormat;
        number numberobj_03_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_174 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_141 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_174;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_141()
            {
            }
            
            ~RNBOSubpatcher_141()
            {
            }
            
            virtual RNBOSubpatcher_174* getPatcher() const {
                return static_cast<RNBOSubpatcher_174 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_01_perform(
                    in2,
                    this->rampsmooth_tilde_01_up,
                    this->rampsmooth_tilde_01_down,
                    this->signals[0],
                    n
                );
            
                this->gen_01_perform(in1, this->signals[0], this->gen_01_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_01_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_01_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_02_out1_bang_bang() {}
            
            void eventinlet_02_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_01_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_01_phase_init();
                this->gen_01_h1_init();
                this->gen_01_h2_init();
                this->gen_01_oldsr_init();
                this->gen_01_freq_init();
                this->gen_01_os_init();
                this->gen_01_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_01_osc_wavetable_buf = this->gen_01_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_01_framesize_set(number v) {
                this->gen_01_framesize = v;
            }
            
            void eventinlet_02_out1_number_set(number v) {
                this->gen_01_framesize_set(v);
            }
            
            void rampsmooth_tilde_01_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_01_increment = this->rampsmooth_tilde_01_increment;
                auto __rampsmooth_tilde_01_index = this->rampsmooth_tilde_01_index;
                auto __rampsmooth_tilde_01_prev = this->rampsmooth_tilde_01_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_01_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_01_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_01_index = _up;
                            __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_01_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_01_index = _down;
                            __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_01_index > 0) {
                        __rampsmooth_tilde_01_prev += __rampsmooth_tilde_01_increment;
                        __rampsmooth_tilde_01_index -= 1;
                    } else {
                        __rampsmooth_tilde_01_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_01_prev;
                }
            
                this->rampsmooth_tilde_01_prev = __rampsmooth_tilde_01_prev;
                this->rampsmooth_tilde_01_index = __rampsmooth_tilde_01_index;
                this->rampsmooth_tilde_01_increment = __rampsmooth_tilde_01_increment;
            }
            
            void gen_01_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_01_h1_value = this->gen_01_h1_value;
                auto __gen_01_h2_value = this->gen_01_h2_value;
                auto __gen_01_phase_value = this->gen_01_phase_value;
                auto __gen_01_realsr_value = this->gen_01_realsr_value;
                auto __gen_01_os_value = this->gen_01_os_value;
                auto __gen_01_freq_value = this->gen_01_freq_value;
                auto __gen_01_oldsr_value = this->gen_01_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_01_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_01_osc_wavetable_buf));
            
                    if (__gen_01_oldsr_value != this->samplerate() || __gen_01_freq_value != in1[(Index)i0]) {
                        __gen_01_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_01_os_value == 0) {
                            __gen_01_os_value = 1;
                        }
            
                        __gen_01_realsr_value = this->samplerate() * __gen_01_os_value;
                        __gen_01_oldsr_value = this->samplerate();
                        __gen_01_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_01_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_01_phase_value, 0, 1);
            
                        __gen_01_phase_value = fixdenorm(
                            t_1 + ((__gen_01_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_01_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_01_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_01_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_01_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_01_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_01_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_01_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_01_h2_value * a1_26 + __gen_01_h1_value * a2_25 - (__gen_01_h1_value * b2_28 + __gen_01_h2_value * b1_27);
                        __gen_01_h1_value = fixdenorm(__gen_01_h2_value);
                        __gen_01_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_01_oldsr_value = __gen_01_oldsr_value;
                this->gen_01_freq_value = __gen_01_freq_value;
                this->gen_01_os_value = __gen_01_os_value;
                this->gen_01_realsr_value = __gen_01_realsr_value;
                this->gen_01_phase_value = __gen_01_phase_value;
                this->gen_01_h2_value = __gen_01_h2_value;
                this->gen_01_h1_value = __gen_01_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_01_phase_getvalue() {
                return this->gen_01_phase_value;
            }
            
            void gen_01_phase_setvalue(number val) {
                this->gen_01_phase_value = val;
            }
            
            void gen_01_phase_reset() {
                this->gen_01_phase_value = 0;
            }
            
            void gen_01_phase_init() {
                this->gen_01_phase_value = 0;
            }
            
            number gen_01_h1_getvalue() {
                return this->gen_01_h1_value;
            }
            
            void gen_01_h1_setvalue(number val) {
                this->gen_01_h1_value = val;
            }
            
            void gen_01_h1_reset() {
                this->gen_01_h1_value = 0;
            }
            
            void gen_01_h1_init() {
                this->gen_01_h1_value = 0;
            }
            
            number gen_01_h2_getvalue() {
                return this->gen_01_h2_value;
            }
            
            void gen_01_h2_setvalue(number val) {
                this->gen_01_h2_value = val;
            }
            
            void gen_01_h2_reset() {
                this->gen_01_h2_value = 0;
            }
            
            void gen_01_h2_init() {
                this->gen_01_h2_value = 0;
            }
            
            number gen_01_oldsr_getvalue() {
                return this->gen_01_oldsr_value;
            }
            
            void gen_01_oldsr_setvalue(number val) {
                this->gen_01_oldsr_value = val;
            }
            
            void gen_01_oldsr_reset() {
                this->gen_01_oldsr_value = 0;
            }
            
            void gen_01_oldsr_init() {
                this->gen_01_oldsr_value = 0;
            }
            
            number gen_01_freq_getvalue() {
                return this->gen_01_freq_value;
            }
            
            void gen_01_freq_setvalue(number val) {
                this->gen_01_freq_value = val;
            }
            
            void gen_01_freq_reset() {
                this->gen_01_freq_value = 0;
            }
            
            void gen_01_freq_init() {
                this->gen_01_freq_value = 0;
            }
            
            number gen_01_os_getvalue() {
                return this->gen_01_os_value;
            }
            
            void gen_01_os_setvalue(number val) {
                this->gen_01_os_value = val;
            }
            
            void gen_01_os_reset() {
                this->gen_01_os_value = 0;
            }
            
            void gen_01_os_init() {
                this->gen_01_os_value = 4;
            }
            
            number gen_01_realsr_getvalue() {
                return this->gen_01_realsr_value;
            }
            
            void gen_01_realsr_setvalue(number val) {
                this->gen_01_realsr_value = val;
            }
            
            void gen_01_realsr_reset() {
                this->gen_01_realsr_value = 0;
            }
            
            void gen_01_realsr_init() {
                this->gen_01_realsr_value = 0;
            }
            
            number rampsmooth_tilde_01_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_01_d_prev);
                this->rampsmooth_tilde_01_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_01_d_dspsetup() {
                this->rampsmooth_tilde_01_d_reset();
            }
            
            void rampsmooth_tilde_01_d_reset() {
                this->rampsmooth_tilde_01_d_prev = 0;
            }
            
            void rampsmooth_tilde_01_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_01_setupDone = true;
                this->rampsmooth_tilde_01_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_01_in1 = 0;
                gen_01_in2 = 0;
                gen_01_framesize = 256;
                rampsmooth_tilde_01_x = 0;
                rampsmooth_tilde_01_up = 1000;
                rampsmooth_tilde_01_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_01_phase_value = 0;
                gen_01_h1_value = 0;
                gen_01_h2_value = 0;
                gen_01_oldsr_value = 0;
                gen_01_freq_value = 0;
                gen_01_os_value = 0;
                gen_01_realsr_value = 0;
                rampsmooth_tilde_01_prev = 0;
                rampsmooth_tilde_01_index = 0;
                rampsmooth_tilde_01_increment = 0;
                rampsmooth_tilde_01_d_prev = 0;
                rampsmooth_tilde_01_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_01_in1;
                number gen_01_in2;
                number gen_01_framesize;
                number rampsmooth_tilde_01_x;
                number rampsmooth_tilde_01_up;
                number rampsmooth_tilde_01_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_01_phase_value;
                number gen_01_h1_value;
                number gen_01_h2_value;
                number gen_01_oldsr_value;
                number gen_01_freq_value;
                number gen_01_os_value;
                number gen_01_realsr_value;
                Float32BufferRef gen_01_osc_wavetable_buf;
                number rampsmooth_tilde_01_prev;
                number rampsmooth_tilde_01_index;
                number rampsmooth_tilde_01_increment;
                number rampsmooth_tilde_01_d_prev;
                bool rampsmooth_tilde_01_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_142 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_174;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_142()
            {
            }
            
            ~RNBOSubpatcher_142()
            {
            }
            
            virtual RNBOSubpatcher_174* getPatcher() const {
                return static_cast<RNBOSubpatcher_174 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_02_perform(
                    in2,
                    this->rampsmooth_tilde_02_up,
                    this->rampsmooth_tilde_02_down,
                    this->signals[0],
                    n
                );
            
                this->gen_02_perform(in1, this->signals[0], this->gen_02_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_02_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_02_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_03_out1_bang_bang() {}
            
            void eventinlet_03_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_02_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_02_phase_init();
                this->gen_02_h1_init();
                this->gen_02_h2_init();
                this->gen_02_oldsr_init();
                this->gen_02_freq_init();
                this->gen_02_os_init();
                this->gen_02_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_02_osc_wavetable_buf = this->gen_02_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_02_framesize_set(number v) {
                this->gen_02_framesize = v;
            }
            
            void eventinlet_03_out1_number_set(number v) {
                this->gen_02_framesize_set(v);
            }
            
            void rampsmooth_tilde_02_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_02_increment = this->rampsmooth_tilde_02_increment;
                auto __rampsmooth_tilde_02_index = this->rampsmooth_tilde_02_index;
                auto __rampsmooth_tilde_02_prev = this->rampsmooth_tilde_02_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_02_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_02_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_02_index = _up;
                            __rampsmooth_tilde_02_increment = (x[(Index)i] - __rampsmooth_tilde_02_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_02_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_02_index = _down;
                            __rampsmooth_tilde_02_increment = (x[(Index)i] - __rampsmooth_tilde_02_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_02_index > 0) {
                        __rampsmooth_tilde_02_prev += __rampsmooth_tilde_02_increment;
                        __rampsmooth_tilde_02_index -= 1;
                    } else {
                        __rampsmooth_tilde_02_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_02_prev;
                }
            
                this->rampsmooth_tilde_02_prev = __rampsmooth_tilde_02_prev;
                this->rampsmooth_tilde_02_index = __rampsmooth_tilde_02_index;
                this->rampsmooth_tilde_02_increment = __rampsmooth_tilde_02_increment;
            }
            
            void gen_02_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_02_h1_value = this->gen_02_h1_value;
                auto __gen_02_h2_value = this->gen_02_h2_value;
                auto __gen_02_phase_value = this->gen_02_phase_value;
                auto __gen_02_realsr_value = this->gen_02_realsr_value;
                auto __gen_02_os_value = this->gen_02_os_value;
                auto __gen_02_freq_value = this->gen_02_freq_value;
                auto __gen_02_oldsr_value = this->gen_02_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_02_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_02_osc_wavetable_buf));
            
                    if (__gen_02_oldsr_value != this->samplerate() || __gen_02_freq_value != in1[(Index)i0]) {
                        __gen_02_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_02_os_value == 0) {
                            __gen_02_os_value = 1;
                        }
            
                        __gen_02_realsr_value = this->samplerate() * __gen_02_os_value;
                        __gen_02_oldsr_value = this->samplerate();
                        __gen_02_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_02_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_02_phase_value, 0, 1);
            
                        __gen_02_phase_value = fixdenorm(
                            t_1 + ((__gen_02_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_02_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_02_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_02_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_02_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_02_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_02_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_02_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_02_h2_value * a1_26 + __gen_02_h1_value * a2_25 - (__gen_02_h1_value * b2_28 + __gen_02_h2_value * b1_27);
                        __gen_02_h1_value = fixdenorm(__gen_02_h2_value);
                        __gen_02_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_02_oldsr_value = __gen_02_oldsr_value;
                this->gen_02_freq_value = __gen_02_freq_value;
                this->gen_02_os_value = __gen_02_os_value;
                this->gen_02_realsr_value = __gen_02_realsr_value;
                this->gen_02_phase_value = __gen_02_phase_value;
                this->gen_02_h2_value = __gen_02_h2_value;
                this->gen_02_h1_value = __gen_02_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_02_phase_getvalue() {
                return this->gen_02_phase_value;
            }
            
            void gen_02_phase_setvalue(number val) {
                this->gen_02_phase_value = val;
            }
            
            void gen_02_phase_reset() {
                this->gen_02_phase_value = 0;
            }
            
            void gen_02_phase_init() {
                this->gen_02_phase_value = 0;
            }
            
            number gen_02_h1_getvalue() {
                return this->gen_02_h1_value;
            }
            
            void gen_02_h1_setvalue(number val) {
                this->gen_02_h1_value = val;
            }
            
            void gen_02_h1_reset() {
                this->gen_02_h1_value = 0;
            }
            
            void gen_02_h1_init() {
                this->gen_02_h1_value = 0;
            }
            
            number gen_02_h2_getvalue() {
                return this->gen_02_h2_value;
            }
            
            void gen_02_h2_setvalue(number val) {
                this->gen_02_h2_value = val;
            }
            
            void gen_02_h2_reset() {
                this->gen_02_h2_value = 0;
            }
            
            void gen_02_h2_init() {
                this->gen_02_h2_value = 0;
            }
            
            number gen_02_oldsr_getvalue() {
                return this->gen_02_oldsr_value;
            }
            
            void gen_02_oldsr_setvalue(number val) {
                this->gen_02_oldsr_value = val;
            }
            
            void gen_02_oldsr_reset() {
                this->gen_02_oldsr_value = 0;
            }
            
            void gen_02_oldsr_init() {
                this->gen_02_oldsr_value = 0;
            }
            
            number gen_02_freq_getvalue() {
                return this->gen_02_freq_value;
            }
            
            void gen_02_freq_setvalue(number val) {
                this->gen_02_freq_value = val;
            }
            
            void gen_02_freq_reset() {
                this->gen_02_freq_value = 0;
            }
            
            void gen_02_freq_init() {
                this->gen_02_freq_value = 0;
            }
            
            number gen_02_os_getvalue() {
                return this->gen_02_os_value;
            }
            
            void gen_02_os_setvalue(number val) {
                this->gen_02_os_value = val;
            }
            
            void gen_02_os_reset() {
                this->gen_02_os_value = 0;
            }
            
            void gen_02_os_init() {
                this->gen_02_os_value = 4;
            }
            
            number gen_02_realsr_getvalue() {
                return this->gen_02_realsr_value;
            }
            
            void gen_02_realsr_setvalue(number val) {
                this->gen_02_realsr_value = val;
            }
            
            void gen_02_realsr_reset() {
                this->gen_02_realsr_value = 0;
            }
            
            void gen_02_realsr_init() {
                this->gen_02_realsr_value = 0;
            }
            
            number rampsmooth_tilde_02_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_02_d_prev);
                this->rampsmooth_tilde_02_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_02_d_dspsetup() {
                this->rampsmooth_tilde_02_d_reset();
            }
            
            void rampsmooth_tilde_02_d_reset() {
                this->rampsmooth_tilde_02_d_prev = 0;
            }
            
            void rampsmooth_tilde_02_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_02_setupDone = true;
                this->rampsmooth_tilde_02_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_02_in1 = 0;
                gen_02_in2 = 0;
                gen_02_framesize = 256;
                rampsmooth_tilde_02_x = 0;
                rampsmooth_tilde_02_up = 1000;
                rampsmooth_tilde_02_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_02_phase_value = 0;
                gen_02_h1_value = 0;
                gen_02_h2_value = 0;
                gen_02_oldsr_value = 0;
                gen_02_freq_value = 0;
                gen_02_os_value = 0;
                gen_02_realsr_value = 0;
                rampsmooth_tilde_02_prev = 0;
                rampsmooth_tilde_02_index = 0;
                rampsmooth_tilde_02_increment = 0;
                rampsmooth_tilde_02_d_prev = 0;
                rampsmooth_tilde_02_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_02_in1;
                number gen_02_in2;
                number gen_02_framesize;
                number rampsmooth_tilde_02_x;
                number rampsmooth_tilde_02_up;
                number rampsmooth_tilde_02_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_02_phase_value;
                number gen_02_h1_value;
                number gen_02_h2_value;
                number gen_02_oldsr_value;
                number gen_02_freq_value;
                number gen_02_os_value;
                number gen_02_realsr_value;
                Float32BufferRef gen_02_osc_wavetable_buf;
                number rampsmooth_tilde_02_prev;
                number rampsmooth_tilde_02_index;
                number rampsmooth_tilde_02_increment;
                number rampsmooth_tilde_02_d_prev;
                bool rampsmooth_tilde_02_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_143 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_174;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_143()
            {
            }
            
            ~RNBOSubpatcher_143()
            {
            }
            
            virtual RNBOSubpatcher_174* getPatcher() const {
                return static_cast<RNBOSubpatcher_174 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_03_perform(
                    in2,
                    this->rampsmooth_tilde_03_up,
                    this->rampsmooth_tilde_03_down,
                    this->signals[0],
                    n
                );
            
                this->gen_03_perform(in1, this->signals[0], this->gen_03_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_03_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_03_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_03_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_04_out1_bang_bang() {}
            
            void eventinlet_04_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_03_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_03_phase_init();
                this->gen_03_h1_init();
                this->gen_03_h2_init();
                this->gen_03_oldsr_init();
                this->gen_03_freq_init();
                this->gen_03_os_init();
                this->gen_03_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_03_osc_wavetable_buf = this->gen_03_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_03_framesize_set(number v) {
                this->gen_03_framesize = v;
            }
            
            void eventinlet_04_out1_number_set(number v) {
                this->gen_03_framesize_set(v);
            }
            
            void rampsmooth_tilde_03_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_03_increment = this->rampsmooth_tilde_03_increment;
                auto __rampsmooth_tilde_03_index = this->rampsmooth_tilde_03_index;
                auto __rampsmooth_tilde_03_prev = this->rampsmooth_tilde_03_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_03_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_03_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_03_index = _up;
                            __rampsmooth_tilde_03_increment = (x[(Index)i] - __rampsmooth_tilde_03_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_03_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_03_index = _down;
                            __rampsmooth_tilde_03_increment = (x[(Index)i] - __rampsmooth_tilde_03_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_03_index > 0) {
                        __rampsmooth_tilde_03_prev += __rampsmooth_tilde_03_increment;
                        __rampsmooth_tilde_03_index -= 1;
                    } else {
                        __rampsmooth_tilde_03_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_03_prev;
                }
            
                this->rampsmooth_tilde_03_prev = __rampsmooth_tilde_03_prev;
                this->rampsmooth_tilde_03_index = __rampsmooth_tilde_03_index;
                this->rampsmooth_tilde_03_increment = __rampsmooth_tilde_03_increment;
            }
            
            void gen_03_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_03_h1_value = this->gen_03_h1_value;
                auto __gen_03_h2_value = this->gen_03_h2_value;
                auto __gen_03_phase_value = this->gen_03_phase_value;
                auto __gen_03_realsr_value = this->gen_03_realsr_value;
                auto __gen_03_os_value = this->gen_03_os_value;
                auto __gen_03_freq_value = this->gen_03_freq_value;
                auto __gen_03_oldsr_value = this->gen_03_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_03_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_03_osc_wavetable_buf));
            
                    if (__gen_03_oldsr_value != this->samplerate() || __gen_03_freq_value != in1[(Index)i0]) {
                        __gen_03_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_03_os_value == 0) {
                            __gen_03_os_value = 1;
                        }
            
                        __gen_03_realsr_value = this->samplerate() * __gen_03_os_value;
                        __gen_03_oldsr_value = this->samplerate();
                        __gen_03_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_03_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_03_phase_value, 0, 1);
            
                        __gen_03_phase_value = fixdenorm(
                            t_1 + ((__gen_03_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_03_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_03_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_03_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_03_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_03_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_03_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_03_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_03_h2_value * a1_26 + __gen_03_h1_value * a2_25 - (__gen_03_h1_value * b2_28 + __gen_03_h2_value * b1_27);
                        __gen_03_h1_value = fixdenorm(__gen_03_h2_value);
                        __gen_03_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_03_oldsr_value = __gen_03_oldsr_value;
                this->gen_03_freq_value = __gen_03_freq_value;
                this->gen_03_os_value = __gen_03_os_value;
                this->gen_03_realsr_value = __gen_03_realsr_value;
                this->gen_03_phase_value = __gen_03_phase_value;
                this->gen_03_h2_value = __gen_03_h2_value;
                this->gen_03_h1_value = __gen_03_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_03_phase_getvalue() {
                return this->gen_03_phase_value;
            }
            
            void gen_03_phase_setvalue(number val) {
                this->gen_03_phase_value = val;
            }
            
            void gen_03_phase_reset() {
                this->gen_03_phase_value = 0;
            }
            
            void gen_03_phase_init() {
                this->gen_03_phase_value = 0;
            }
            
            number gen_03_h1_getvalue() {
                return this->gen_03_h1_value;
            }
            
            void gen_03_h1_setvalue(number val) {
                this->gen_03_h1_value = val;
            }
            
            void gen_03_h1_reset() {
                this->gen_03_h1_value = 0;
            }
            
            void gen_03_h1_init() {
                this->gen_03_h1_value = 0;
            }
            
            number gen_03_h2_getvalue() {
                return this->gen_03_h2_value;
            }
            
            void gen_03_h2_setvalue(number val) {
                this->gen_03_h2_value = val;
            }
            
            void gen_03_h2_reset() {
                this->gen_03_h2_value = 0;
            }
            
            void gen_03_h2_init() {
                this->gen_03_h2_value = 0;
            }
            
            number gen_03_oldsr_getvalue() {
                return this->gen_03_oldsr_value;
            }
            
            void gen_03_oldsr_setvalue(number val) {
                this->gen_03_oldsr_value = val;
            }
            
            void gen_03_oldsr_reset() {
                this->gen_03_oldsr_value = 0;
            }
            
            void gen_03_oldsr_init() {
                this->gen_03_oldsr_value = 0;
            }
            
            number gen_03_freq_getvalue() {
                return this->gen_03_freq_value;
            }
            
            void gen_03_freq_setvalue(number val) {
                this->gen_03_freq_value = val;
            }
            
            void gen_03_freq_reset() {
                this->gen_03_freq_value = 0;
            }
            
            void gen_03_freq_init() {
                this->gen_03_freq_value = 0;
            }
            
            number gen_03_os_getvalue() {
                return this->gen_03_os_value;
            }
            
            void gen_03_os_setvalue(number val) {
                this->gen_03_os_value = val;
            }
            
            void gen_03_os_reset() {
                this->gen_03_os_value = 0;
            }
            
            void gen_03_os_init() {
                this->gen_03_os_value = 4;
            }
            
            number gen_03_realsr_getvalue() {
                return this->gen_03_realsr_value;
            }
            
            void gen_03_realsr_setvalue(number val) {
                this->gen_03_realsr_value = val;
            }
            
            void gen_03_realsr_reset() {
                this->gen_03_realsr_value = 0;
            }
            
            void gen_03_realsr_init() {
                this->gen_03_realsr_value = 0;
            }
            
            number rampsmooth_tilde_03_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_03_d_prev);
                this->rampsmooth_tilde_03_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_03_d_dspsetup() {
                this->rampsmooth_tilde_03_d_reset();
            }
            
            void rampsmooth_tilde_03_d_reset() {
                this->rampsmooth_tilde_03_d_prev = 0;
            }
            
            void rampsmooth_tilde_03_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_03_setupDone = true;
                this->rampsmooth_tilde_03_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_03_in1 = 0;
                gen_03_in2 = 0;
                gen_03_framesize = 256;
                rampsmooth_tilde_03_x = 0;
                rampsmooth_tilde_03_up = 1000;
                rampsmooth_tilde_03_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_03_phase_value = 0;
                gen_03_h1_value = 0;
                gen_03_h2_value = 0;
                gen_03_oldsr_value = 0;
                gen_03_freq_value = 0;
                gen_03_os_value = 0;
                gen_03_realsr_value = 0;
                rampsmooth_tilde_03_prev = 0;
                rampsmooth_tilde_03_index = 0;
                rampsmooth_tilde_03_increment = 0;
                rampsmooth_tilde_03_d_prev = 0;
                rampsmooth_tilde_03_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_03_in1;
                number gen_03_in2;
                number gen_03_framesize;
                number rampsmooth_tilde_03_x;
                number rampsmooth_tilde_03_up;
                number rampsmooth_tilde_03_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_03_phase_value;
                number gen_03_h1_value;
                number gen_03_h2_value;
                number gen_03_oldsr_value;
                number gen_03_freq_value;
                number gen_03_os_value;
                number gen_03_realsr_value;
                Float32BufferRef gen_03_osc_wavetable_buf;
                number rampsmooth_tilde_03_prev;
                number rampsmooth_tilde_03_index;
                number rampsmooth_tilde_03_increment;
                number rampsmooth_tilde_03_d_prev;
                bool rampsmooth_tilde_03_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_144 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_174;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_144()
            {
            }
            
            ~RNBOSubpatcher_144()
            {
            }
            
            virtual RNBOSubpatcher_174* getPatcher() const {
                return static_cast<RNBOSubpatcher_174 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_04_perform(
                    in2,
                    this->rampsmooth_tilde_04_up,
                    this->rampsmooth_tilde_04_down,
                    this->signals[0],
                    n
                );
            
                this->gen_04_perform(in1, this->signals[0], this->gen_04_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_04_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_04_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_04_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_05_out1_bang_bang() {}
            
            void eventinlet_05_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_04_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_04_phase_init();
                this->gen_04_h1_init();
                this->gen_04_h2_init();
                this->gen_04_oldsr_init();
                this->gen_04_freq_init();
                this->gen_04_os_init();
                this->gen_04_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_04_osc_wavetable_buf = this->gen_04_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_04_framesize_set(number v) {
                this->gen_04_framesize = v;
            }
            
            void eventinlet_05_out1_number_set(number v) {
                this->gen_04_framesize_set(v);
            }
            
            void rampsmooth_tilde_04_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_04_increment = this->rampsmooth_tilde_04_increment;
                auto __rampsmooth_tilde_04_index = this->rampsmooth_tilde_04_index;
                auto __rampsmooth_tilde_04_prev = this->rampsmooth_tilde_04_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_04_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_04_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_04_index = _up;
                            __rampsmooth_tilde_04_increment = (x[(Index)i] - __rampsmooth_tilde_04_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_04_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_04_index = _down;
                            __rampsmooth_tilde_04_increment = (x[(Index)i] - __rampsmooth_tilde_04_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_04_index > 0) {
                        __rampsmooth_tilde_04_prev += __rampsmooth_tilde_04_increment;
                        __rampsmooth_tilde_04_index -= 1;
                    } else {
                        __rampsmooth_tilde_04_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_04_prev;
                }
            
                this->rampsmooth_tilde_04_prev = __rampsmooth_tilde_04_prev;
                this->rampsmooth_tilde_04_index = __rampsmooth_tilde_04_index;
                this->rampsmooth_tilde_04_increment = __rampsmooth_tilde_04_increment;
            }
            
            void gen_04_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_04_h1_value = this->gen_04_h1_value;
                auto __gen_04_h2_value = this->gen_04_h2_value;
                auto __gen_04_phase_value = this->gen_04_phase_value;
                auto __gen_04_realsr_value = this->gen_04_realsr_value;
                auto __gen_04_os_value = this->gen_04_os_value;
                auto __gen_04_freq_value = this->gen_04_freq_value;
                auto __gen_04_oldsr_value = this->gen_04_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_04_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_04_osc_wavetable_buf));
            
                    if (__gen_04_oldsr_value != this->samplerate() || __gen_04_freq_value != in1[(Index)i0]) {
                        __gen_04_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_04_os_value == 0) {
                            __gen_04_os_value = 1;
                        }
            
                        __gen_04_realsr_value = this->samplerate() * __gen_04_os_value;
                        __gen_04_oldsr_value = this->samplerate();
                        __gen_04_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_04_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_04_phase_value, 0, 1);
            
                        __gen_04_phase_value = fixdenorm(
                            t_1 + ((__gen_04_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_04_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_04_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_04_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_04_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_04_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_04_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_04_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_04_h2_value * a1_26 + __gen_04_h1_value * a2_25 - (__gen_04_h1_value * b2_28 + __gen_04_h2_value * b1_27);
                        __gen_04_h1_value = fixdenorm(__gen_04_h2_value);
                        __gen_04_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_04_oldsr_value = __gen_04_oldsr_value;
                this->gen_04_freq_value = __gen_04_freq_value;
                this->gen_04_os_value = __gen_04_os_value;
                this->gen_04_realsr_value = __gen_04_realsr_value;
                this->gen_04_phase_value = __gen_04_phase_value;
                this->gen_04_h2_value = __gen_04_h2_value;
                this->gen_04_h1_value = __gen_04_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_04_phase_getvalue() {
                return this->gen_04_phase_value;
            }
            
            void gen_04_phase_setvalue(number val) {
                this->gen_04_phase_value = val;
            }
            
            void gen_04_phase_reset() {
                this->gen_04_phase_value = 0;
            }
            
            void gen_04_phase_init() {
                this->gen_04_phase_value = 0;
            }
            
            number gen_04_h1_getvalue() {
                return this->gen_04_h1_value;
            }
            
            void gen_04_h1_setvalue(number val) {
                this->gen_04_h1_value = val;
            }
            
            void gen_04_h1_reset() {
                this->gen_04_h1_value = 0;
            }
            
            void gen_04_h1_init() {
                this->gen_04_h1_value = 0;
            }
            
            number gen_04_h2_getvalue() {
                return this->gen_04_h2_value;
            }
            
            void gen_04_h2_setvalue(number val) {
                this->gen_04_h2_value = val;
            }
            
            void gen_04_h2_reset() {
                this->gen_04_h2_value = 0;
            }
            
            void gen_04_h2_init() {
                this->gen_04_h2_value = 0;
            }
            
            number gen_04_oldsr_getvalue() {
                return this->gen_04_oldsr_value;
            }
            
            void gen_04_oldsr_setvalue(number val) {
                this->gen_04_oldsr_value = val;
            }
            
            void gen_04_oldsr_reset() {
                this->gen_04_oldsr_value = 0;
            }
            
            void gen_04_oldsr_init() {
                this->gen_04_oldsr_value = 0;
            }
            
            number gen_04_freq_getvalue() {
                return this->gen_04_freq_value;
            }
            
            void gen_04_freq_setvalue(number val) {
                this->gen_04_freq_value = val;
            }
            
            void gen_04_freq_reset() {
                this->gen_04_freq_value = 0;
            }
            
            void gen_04_freq_init() {
                this->gen_04_freq_value = 0;
            }
            
            number gen_04_os_getvalue() {
                return this->gen_04_os_value;
            }
            
            void gen_04_os_setvalue(number val) {
                this->gen_04_os_value = val;
            }
            
            void gen_04_os_reset() {
                this->gen_04_os_value = 0;
            }
            
            void gen_04_os_init() {
                this->gen_04_os_value = 4;
            }
            
            number gen_04_realsr_getvalue() {
                return this->gen_04_realsr_value;
            }
            
            void gen_04_realsr_setvalue(number val) {
                this->gen_04_realsr_value = val;
            }
            
            void gen_04_realsr_reset() {
                this->gen_04_realsr_value = 0;
            }
            
            void gen_04_realsr_init() {
                this->gen_04_realsr_value = 0;
            }
            
            number rampsmooth_tilde_04_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_04_d_prev);
                this->rampsmooth_tilde_04_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_04_d_dspsetup() {
                this->rampsmooth_tilde_04_d_reset();
            }
            
            void rampsmooth_tilde_04_d_reset() {
                this->rampsmooth_tilde_04_d_prev = 0;
            }
            
            void rampsmooth_tilde_04_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_04_setupDone = true;
                this->rampsmooth_tilde_04_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_04_in1 = 0;
                gen_04_in2 = 0;
                gen_04_framesize = 256;
                rampsmooth_tilde_04_x = 0;
                rampsmooth_tilde_04_up = 1000;
                rampsmooth_tilde_04_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_04_phase_value = 0;
                gen_04_h1_value = 0;
                gen_04_h2_value = 0;
                gen_04_oldsr_value = 0;
                gen_04_freq_value = 0;
                gen_04_os_value = 0;
                gen_04_realsr_value = 0;
                rampsmooth_tilde_04_prev = 0;
                rampsmooth_tilde_04_index = 0;
                rampsmooth_tilde_04_increment = 0;
                rampsmooth_tilde_04_d_prev = 0;
                rampsmooth_tilde_04_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_04_in1;
                number gen_04_in2;
                number gen_04_framesize;
                number rampsmooth_tilde_04_x;
                number rampsmooth_tilde_04_up;
                number rampsmooth_tilde_04_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_04_phase_value;
                number gen_04_h1_value;
                number gen_04_h2_value;
                number gen_04_oldsr_value;
                number gen_04_freq_value;
                number gen_04_os_value;
                number gen_04_realsr_value;
                Float32BufferRef gen_04_osc_wavetable_buf;
                number rampsmooth_tilde_04_prev;
                number rampsmooth_tilde_04_index;
                number rampsmooth_tilde_04_increment;
                number rampsmooth_tilde_04_d_prev;
                bool rampsmooth_tilde_04_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_145 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_174;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_145()
            {
            }
            
            ~RNBOSubpatcher_145()
            {
            }
            
            virtual RNBOSubpatcher_174* getPatcher() const {
                return static_cast<RNBOSubpatcher_174 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_05_perform(
                    in2,
                    this->rampsmooth_tilde_05_up,
                    this->rampsmooth_tilde_05_down,
                    this->signals[0],
                    n
                );
            
                this->gen_05_perform(in1, this->signals[0], this->gen_05_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_05_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_05_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_05_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_06_out1_bang_bang() {}
            
            void eventinlet_06_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_05_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_05_phase_init();
                this->gen_05_h1_init();
                this->gen_05_h2_init();
                this->gen_05_oldsr_init();
                this->gen_05_freq_init();
                this->gen_05_os_init();
                this->gen_05_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_05_osc_wavetable_buf = this->gen_05_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_05_framesize_set(number v) {
                this->gen_05_framesize = v;
            }
            
            void eventinlet_06_out1_number_set(number v) {
                this->gen_05_framesize_set(v);
            }
            
            void rampsmooth_tilde_05_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_05_increment = this->rampsmooth_tilde_05_increment;
                auto __rampsmooth_tilde_05_index = this->rampsmooth_tilde_05_index;
                auto __rampsmooth_tilde_05_prev = this->rampsmooth_tilde_05_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_05_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_05_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_05_index = _up;
                            __rampsmooth_tilde_05_increment = (x[(Index)i] - __rampsmooth_tilde_05_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_05_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_05_index = _down;
                            __rampsmooth_tilde_05_increment = (x[(Index)i] - __rampsmooth_tilde_05_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_05_index > 0) {
                        __rampsmooth_tilde_05_prev += __rampsmooth_tilde_05_increment;
                        __rampsmooth_tilde_05_index -= 1;
                    } else {
                        __rampsmooth_tilde_05_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_05_prev;
                }
            
                this->rampsmooth_tilde_05_prev = __rampsmooth_tilde_05_prev;
                this->rampsmooth_tilde_05_index = __rampsmooth_tilde_05_index;
                this->rampsmooth_tilde_05_increment = __rampsmooth_tilde_05_increment;
            }
            
            void gen_05_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_05_h1_value = this->gen_05_h1_value;
                auto __gen_05_h2_value = this->gen_05_h2_value;
                auto __gen_05_phase_value = this->gen_05_phase_value;
                auto __gen_05_realsr_value = this->gen_05_realsr_value;
                auto __gen_05_os_value = this->gen_05_os_value;
                auto __gen_05_freq_value = this->gen_05_freq_value;
                auto __gen_05_oldsr_value = this->gen_05_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_05_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_05_osc_wavetable_buf));
            
                    if (__gen_05_oldsr_value != this->samplerate() || __gen_05_freq_value != in1[(Index)i0]) {
                        __gen_05_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_05_os_value == 0) {
                            __gen_05_os_value = 1;
                        }
            
                        __gen_05_realsr_value = this->samplerate() * __gen_05_os_value;
                        __gen_05_oldsr_value = this->samplerate();
                        __gen_05_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_05_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_05_phase_value, 0, 1);
            
                        __gen_05_phase_value = fixdenorm(
                            t_1 + ((__gen_05_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_05_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_05_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_05_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_05_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_05_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_05_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_05_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_05_h2_value * a1_26 + __gen_05_h1_value * a2_25 - (__gen_05_h1_value * b2_28 + __gen_05_h2_value * b1_27);
                        __gen_05_h1_value = fixdenorm(__gen_05_h2_value);
                        __gen_05_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_05_oldsr_value = __gen_05_oldsr_value;
                this->gen_05_freq_value = __gen_05_freq_value;
                this->gen_05_os_value = __gen_05_os_value;
                this->gen_05_realsr_value = __gen_05_realsr_value;
                this->gen_05_phase_value = __gen_05_phase_value;
                this->gen_05_h2_value = __gen_05_h2_value;
                this->gen_05_h1_value = __gen_05_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_05_phase_getvalue() {
                return this->gen_05_phase_value;
            }
            
            void gen_05_phase_setvalue(number val) {
                this->gen_05_phase_value = val;
            }
            
            void gen_05_phase_reset() {
                this->gen_05_phase_value = 0;
            }
            
            void gen_05_phase_init() {
                this->gen_05_phase_value = 0;
            }
            
            number gen_05_h1_getvalue() {
                return this->gen_05_h1_value;
            }
            
            void gen_05_h1_setvalue(number val) {
                this->gen_05_h1_value = val;
            }
            
            void gen_05_h1_reset() {
                this->gen_05_h1_value = 0;
            }
            
            void gen_05_h1_init() {
                this->gen_05_h1_value = 0;
            }
            
            number gen_05_h2_getvalue() {
                return this->gen_05_h2_value;
            }
            
            void gen_05_h2_setvalue(number val) {
                this->gen_05_h2_value = val;
            }
            
            void gen_05_h2_reset() {
                this->gen_05_h2_value = 0;
            }
            
            void gen_05_h2_init() {
                this->gen_05_h2_value = 0;
            }
            
            number gen_05_oldsr_getvalue() {
                return this->gen_05_oldsr_value;
            }
            
            void gen_05_oldsr_setvalue(number val) {
                this->gen_05_oldsr_value = val;
            }
            
            void gen_05_oldsr_reset() {
                this->gen_05_oldsr_value = 0;
            }
            
            void gen_05_oldsr_init() {
                this->gen_05_oldsr_value = 0;
            }
            
            number gen_05_freq_getvalue() {
                return this->gen_05_freq_value;
            }
            
            void gen_05_freq_setvalue(number val) {
                this->gen_05_freq_value = val;
            }
            
            void gen_05_freq_reset() {
                this->gen_05_freq_value = 0;
            }
            
            void gen_05_freq_init() {
                this->gen_05_freq_value = 0;
            }
            
            number gen_05_os_getvalue() {
                return this->gen_05_os_value;
            }
            
            void gen_05_os_setvalue(number val) {
                this->gen_05_os_value = val;
            }
            
            void gen_05_os_reset() {
                this->gen_05_os_value = 0;
            }
            
            void gen_05_os_init() {
                this->gen_05_os_value = 4;
            }
            
            number gen_05_realsr_getvalue() {
                return this->gen_05_realsr_value;
            }
            
            void gen_05_realsr_setvalue(number val) {
                this->gen_05_realsr_value = val;
            }
            
            void gen_05_realsr_reset() {
                this->gen_05_realsr_value = 0;
            }
            
            void gen_05_realsr_init() {
                this->gen_05_realsr_value = 0;
            }
            
            number rampsmooth_tilde_05_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_05_d_prev);
                this->rampsmooth_tilde_05_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_05_d_dspsetup() {
                this->rampsmooth_tilde_05_d_reset();
            }
            
            void rampsmooth_tilde_05_d_reset() {
                this->rampsmooth_tilde_05_d_prev = 0;
            }
            
            void rampsmooth_tilde_05_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_05_setupDone = true;
                this->rampsmooth_tilde_05_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_05_in1 = 0;
                gen_05_in2 = 0;
                gen_05_framesize = 256;
                rampsmooth_tilde_05_x = 0;
                rampsmooth_tilde_05_up = 1000;
                rampsmooth_tilde_05_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_05_phase_value = 0;
                gen_05_h1_value = 0;
                gen_05_h2_value = 0;
                gen_05_oldsr_value = 0;
                gen_05_freq_value = 0;
                gen_05_os_value = 0;
                gen_05_realsr_value = 0;
                rampsmooth_tilde_05_prev = 0;
                rampsmooth_tilde_05_index = 0;
                rampsmooth_tilde_05_increment = 0;
                rampsmooth_tilde_05_d_prev = 0;
                rampsmooth_tilde_05_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_05_in1;
                number gen_05_in2;
                number gen_05_framesize;
                number rampsmooth_tilde_05_x;
                number rampsmooth_tilde_05_up;
                number rampsmooth_tilde_05_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_05_phase_value;
                number gen_05_h1_value;
                number gen_05_h2_value;
                number gen_05_oldsr_value;
                number gen_05_freq_value;
                number gen_05_os_value;
                number gen_05_realsr_value;
                Float32BufferRef gen_05_osc_wavetable_buf;
                number rampsmooth_tilde_05_prev;
                number rampsmooth_tilde_05_index;
                number rampsmooth_tilde_05_increment;
                number rampsmooth_tilde_05_d_prev;
                bool rampsmooth_tilde_05_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_174()
    {
    }
    
    ~RNBOSubpatcher_174()
    {
        delete this->p_01;
        delete this->p_02;
        delete this->p_03;
        delete this->p_04;
        delete this->p_05;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1357044121, false);
        getEngine()->flushClockEvents(this, 892732297, false);
        getEngine()->flushClockEvents(this, -708766484, false);
        getEngine()->flushClockEvents(this, -281953904, false);
        getEngine()->flushClockEvents(this, 694892522, false);
        getEngine()->flushClockEvents(this, 1396722025, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, -6936981, false);
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    Index vectorsize() const {
        return this->vs;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->numbertilde_01_perform(this->zeroBuffer, this->signals[0], n);
    
        this->cycle_tilde_01_perform(
            this->cycle_tilde_01_frequency,
            this->cycle_tilde_01_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->linetilde_01_perform(this->signals[1], n);
        this->numbertilde_02_perform(this->zeroBuffer, this->signals[2], n);
    
        this->cycle_tilde_02_perform(
            this->cycle_tilde_02_frequency,
            this->cycle_tilde_02_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_03_perform(this->zeroBuffer, this->signals[3], n);
    
        this->cycle_tilde_03_perform(
            this->cycle_tilde_03_frequency,
            this->cycle_tilde_03_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_04_perform(this->zeroBuffer, this->signals[4], n);
    
        this->cycle_tilde_04_perform(
            this->cycle_tilde_04_frequency,
            this->cycle_tilde_04_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_05_perform(this->zeroBuffer, this->signals[5], n);
    
        this->cycle_tilde_05_perform(
            this->cycle_tilde_05_frequency,
            this->cycle_tilde_05_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_06_perform(this->zeroBuffer, this->signals[6], n);
        this->p_02_perform(this->signals[2], this->signals[6], this->signals[7], n);
        this->p_01_perform(this->signals[0], this->signals[6], this->signals[2], n);
        this->p_03_perform(this->signals[3], this->signals[6], this->signals[0], n);
        this->p_04_perform(this->signals[4], this->signals[6], this->signals[3], n);
        this->p_05_perform(this->signals[5], this->signals[6], this->signals[4], n);
    
        this->signaladder_03_perform(
            this->signals[7],
            this->signals[2],
            this->signals[0],
            this->signals[3],
            this->signals[4],
            this->signals[4],
            n
        );
    
        this->dspexpr_01_perform(this->signals[4], this->signals[1], out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 8; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->numbertilde_01_dspsetup(forceDSPSetup);
        this->cycle_tilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_02_dspsetup(forceDSPSetup);
        this->cycle_tilde_02_dspsetup(forceDSPSetup);
        this->data_01_dspsetup(forceDSPSetup);
        this->numbertilde_03_dspsetup(forceDSPSetup);
        this->cycle_tilde_03_dspsetup(forceDSPSetup);
        this->numbertilde_04_dspsetup(forceDSPSetup);
        this->cycle_tilde_04_dspsetup(forceDSPSetup);
        this->numbertilde_05_dspsetup(forceDSPSetup);
        this->cycle_tilde_05_dspsetup(forceDSPSetup);
        this->numbertilde_06_dspsetup(forceDSPSetup);
        this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_01 = new RNBOSubpatcher_141();
        this->p_01->setEngineAndPatcher(this->getEngine(), this);
        this->p_01->initialize();
        this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
        this->p_02 = new RNBOSubpatcher_142();
        this->p_02->setEngineAndPatcher(this->getEngine(), this);
        this->p_02->initialize();
        this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
        this->p_03 = new RNBOSubpatcher_143();
        this->p_03->setEngineAndPatcher(this->getEngine(), this);
        this->p_03->initialize();
        this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
        this->p_04 = new RNBOSubpatcher_144();
        this->p_04->setEngineAndPatcher(this->getEngine(), this);
        this->p_04->initialize();
        this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
        this->p_05 = new RNBOSubpatcher_145();
        this->p_05->setEngineAndPatcher(this->getEngine(), this);
        this->p_05->initialize();
        this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_01_getPresetValue(getSubState(preset, "sSize"));
        this->param_02_getPresetValue(getSubState(preset, "tablePos"));
        this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "Osc[1]"));
        this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "Osc"));
        this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "Osc[2]"));
        this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "Osc[3]"));
        this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "Osc[4]"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_01_value_set(v);
            break;
            }
        case 1:
            {
            this->param_02_value_set(v);
            break;
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                this->p_01->setParameterValue(index, v, time);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                this->p_02->setParameterValue(index, v, time);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                this->p_03->setParameterValue(index, v, time);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                this->p_04->setParameterValue(index, v, time);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                this->p_05->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_01_value;
            }
        case 1:
            {
            return this->param_02_value;
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterValue(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterValue(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterValue(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterValue(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 2 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "sSize";
            }
        case 1:
            {
            return "tablePos";
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterName(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterName(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterName(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterName(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ChInst/sSize";
            }
        case 1:
            {
            return "ChInst/tablePos";
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterId(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterId(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterId(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterId(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 256;
                info->min = 1;
                info->max = 8196;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 2;
    
                if (index < this->p_01->getNumParameters())
                    this->p_01->getParameterInfo(index, info);
    
                index -= this->p_01->getNumParameters();
    
                if (index < this->p_02->getNumParameters())
                    this->p_02->getParameterInfo(index, info);
    
                index -= this->p_02->getNumParameters();
    
                if (index < this->p_03->getNumParameters())
                    this->p_03->getParameterInfo(index, info);
    
                index -= this->p_03->getNumParameters();
    
                if (index < this->p_04->getNumParameters())
                    this->p_04->getParameterInfo(index, info);
    
                index -= this->p_04->getNumParameters();
    
                if (index < this->p_05->getNumParameters())
                    this->p_05->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_01)
            return 2;
    
        if (subpatcher == this->p_02)
            return 2 + this->p_01->getNumParameters();
    
        if (subpatcher == this->p_03)
            return 2 + this->p_01->getNumParameters() + this->p_02->getNumParameters();
    
        if (subpatcher == this->p_04)
            return 2 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters();
    
        if (subpatcher == this->p_05)
            return 2 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
            {
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
            }
        case 0:
            {
            {
                value = (value < 1 ? 1 : (value > 8196 ? 8196 : value));
                ParameterValue normalizedValue = (value - 1) / (8196 - 1);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
            {
            {
                {
                    return 0 + value * (1 - 0);
                }
            }
            }
        case 0:
            {
            {
                {
                    return 1 + value * (8196 - 1);
                }
            }
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_01_value_constrain(value);
            }
        case 1:
            {
            return this->param_02_value_constrain(value);
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->constrainParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->constrainParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->constrainParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->constrainParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1357044121:
            {
            this->delay_01_out_bang();
            break;
            }
        case 892732297:
            {
            this->loadmess_01_startupbang_bang();
            break;
            }
        case -708766484:
            {
            this->numbertilde_01_value_set(value);
            break;
            }
        case -281953904:
            {
            this->linetilde_01_target_bang();
            break;
            }
        case 694892522:
            {
            this->numbertilde_02_value_set(value);
            break;
            }
        case 1396722025:
            {
            this->numbertilde_03_value_set(value);
            break;
            }
        case 2098551528:
            {
            this->numbertilde_04_value_set(value);
            break;
            }
        case -1494586265:
            {
            this->numbertilde_05_value_set(value);
            break;
            }
        case -6936981:
            {
            this->numbertilde_06_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("ChInst/number~_obj-25") == objectId)
                this->numbertilde_01_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-31") == objectId)
                this->numbertilde_02_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-32") == objectId)
                this->numbertilde_03_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-33") == objectId)
                this->numbertilde_04_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-34") == objectId)
                this->numbertilde_05_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-19") == objectId)
                this->numbertilde_06_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("ChInst/number~_obj-25") == objectId)
                this->numbertilde_01_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-31") == objectId)
                this->numbertilde_02_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-32") == objectId)
                this->numbertilde_03_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-33") == objectId)
                this->numbertilde_04_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-34") == objectId)
                this->numbertilde_05_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-19") == objectId)
                this->numbertilde_06_mode_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("ChInst/message_obj-141") == objectId)
                this->message_08_listin_number_set(payload);
    
            if (TAG("ChInst/message_obj-17") == objectId)
                this->message_09_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("ChInst/number_obj-21") == objectId)
                this->numberobj_04_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("ChInst/number_obj-21") == objectId)
                this->numberobj_04_format_set(payload);
    
            break;
            }
        }
    
        this->p_01->processNumMessage(tag, objectId, time, payload);
        this->p_02->processNumMessage(tag, objectId, time, payload);
        this->p_03->processNumMessage(tag, objectId, time, payload);
        this->p_04->processNumMessage(tag, objectId, time, payload);
        this->p_05->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("ChInst/number~_obj-25") == objectId)
                this->numbertilde_01_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-31") == objectId)
                this->numbertilde_02_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-32") == objectId)
                this->numbertilde_03_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-33") == objectId)
                this->numbertilde_04_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-34") == objectId)
                this->numbertilde_05_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-19") == objectId)
                this->numbertilde_06_sig_list_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("ChInst/message_obj-141") == objectId)
                this->message_08_listin_list_set(payload);
    
            if (TAG("ChInst/message_obj-17") == objectId)
                this->message_09_listin_list_set(payload);
    
            break;
            }
        }
    
        this->p_01->processListMessage(tag, objectId, time, payload);
        this->p_02->processListMessage(tag, objectId, time, payload);
        this->p_03->processListMessage(tag, objectId, time, payload);
        this->p_04->processListMessage(tag, objectId, time, payload);
        this->p_05->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("bangin"):
            {
            if (TAG("ChInst/button_obj-13") == objectId)
                this->button_01_bangin_bang();
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("ChInst/message_obj-141") == objectId)
                this->message_08_listin_bang_bang();
    
            if (TAG("ChInst/message_obj-17") == objectId)
                this->message_09_listin_bang_bang();
    
            break;
            }
        case TAG("startupbang"):
            {
            if (TAG("ChInst/loadmess_obj-20") == objectId)
                this->loadmess_01_startupbang_bang();
    
            break;
            }
        }
    
        this->p_01->processBangMessage(tag, objectId, time);
        this->p_02->processBangMessage(tag, objectId, time);
        this->p_03->processBangMessage(tag, objectId, time);
        this->p_04->processBangMessage(tag, objectId, time);
        this->p_05->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("ChInst/number~_obj-25"):
            {
            return "ChInst/number~_obj-25";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("ChInst/button_obj-13"):
            {
            return "ChInst/button_obj-13";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("ChInst/message_obj-141"):
            {
            return "ChInst/message_obj-141";
            }
        case TAG("ChInst/number~_obj-31"):
            {
            return "ChInst/number~_obj-31";
            }
        case TAG("ChInst/message_obj-17"):
            {
            return "ChInst/message_obj-17";
            }
        case TAG("ChInst/number~_obj-32"):
            {
            return "ChInst/number~_obj-32";
            }
        case TAG("ChInst/number~_obj-33"):
            {
            return "ChInst/number~_obj-33";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("ChInst/number_obj-21"):
            {
            return "ChInst/number_obj-21";
            }
        case TAG("ChInst/number~_obj-34"):
            {
            return "ChInst/number~_obj-34";
            }
        case TAG("ChInst/number~_obj-19"):
            {
            return "ChInst/number~_obj-19";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("ChInst/loadmess_obj-20"):
            {
            return "ChInst/loadmess_obj-20";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        auto subpatchResult_0 = this->p_01->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_02->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_03->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_04->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_05->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->data_01_buffer = new Float32Buffer(this->getPatcher()->osc_wavetable_buf);
            this->data_01_bufferUpdated();
        }
    
        if (index == 1) {
            this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_01_bufferUpdated();
            this->cycle_tilde_02_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_02_bufferUpdated();
            this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_03_bufferUpdated();
            this->cycle_tilde_04_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_04_bufferUpdated();
            this->cycle_tilde_05_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_05_bufferUpdated();
        }
    
        this->p_01->processDataViewUpdate(index, time);
        this->p_02->processDataViewUpdate(index, time);
        this->p_03->processDataViewUpdate(index, time);
        this->p_04->processDataViewUpdate(index, time);
        this->p_05->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->data_01_buffer = new Float32Buffer(this->getPatcher()->osc_wavetable_buf);
        this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_02_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_04_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_05_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void param_01_value_set(number v) {
        v = this->param_01_value_constrain(v);
        this->param_01_value = v;
        this->sendParameter(0, false);
    
        if (this->param_01_value != this->param_01_lastValue) {
            this->getEngine()->presetTouched();
            this->param_01_lastValue = this->param_01_value;
        }
    
        this->numberobj_04_value_set(v);
    }
    
    void param_02_value_set(number v) {
        v = this->param_02_value_constrain(v);
        this->param_02_value = v;
        this->sendParameter(1, false);
    
        if (this->param_02_value != this->param_02_lastValue) {
            this->getEngine()->presetTouched();
            this->param_02_lastValue = this->param_02_value;
        }
    
        this->numbertilde_06_input_number_set(v);
    }
    
    void numbertilde_01_sig_number_set(number v) {
        this->numbertilde_01_outValue = v;
    }
    
    void numbertilde_01_sig_list_set(const list& v) {
        this->numbertilde_01_outValue = v[0];
    }
    
    void numbertilde_01_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_01_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_01_currentMode = 1;
        }
    }
    
    void eventinlet_07_out1_bang_bang() {}
    
    void eventinlet_07_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_01_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_01_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_01_input_number_set(converted);
        }
    }
    
    void delay_01_out_bang() {
        this->button_01_bangval_bang();
    }
    
    void button_01_bangin_bang() {
        this->button_01_bangval_bang();
    }
    
    void message_08_listin_list_set(const list& v) {
        this->message_08_set_set(v);
    }
    
    void message_08_listin_number_set(number v) {
        this->message_08_set_set(v);
    }
    
    void message_08_listin_bang_bang() {
        this->message_08_trigger_bang();
    }
    
    void numbertilde_02_sig_number_set(number v) {
        this->numbertilde_02_outValue = v;
    }
    
    void numbertilde_02_sig_list_set(const list& v) {
        this->numbertilde_02_outValue = v[0];
    }
    
    void numbertilde_02_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_02_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_02_currentMode = 1;
        }
    }
    
    void eventinlet_08_out1_bang_bang() {}
    
    void eventinlet_08_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_02_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_02_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_02_input_number_set(converted);
        }
    }
    
    void message_09_listin_list_set(const list& v) {
        this->message_09_set_set(v);
    }
    
    void message_09_listin_number_set(number v) {
        this->message_09_set_set(v);
    }
    
    void message_09_listin_bang_bang() {
        this->message_09_trigger_bang();
    }
    
    void numbertilde_03_sig_number_set(number v) {
        this->numbertilde_03_outValue = v;
    }
    
    void numbertilde_03_sig_list_set(const list& v) {
        this->numbertilde_03_outValue = v[0];
    }
    
    void numbertilde_03_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_03_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_03_currentMode = 1;
        }
    }
    
    void eventinlet_09_out1_bang_bang() {}
    
    void eventinlet_09_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_03_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_03_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_03_input_number_set(converted);
        }
    }
    
    void numbertilde_04_sig_number_set(number v) {
        this->numbertilde_04_outValue = v;
    }
    
    void numbertilde_04_sig_list_set(const list& v) {
        this->numbertilde_04_outValue = v[0];
    }
    
    void numbertilde_04_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_04_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_04_currentMode = 1;
        }
    }
    
    void eventinlet_10_out1_bang_bang() {}
    
    void eventinlet_10_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_04_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_04_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_04_input_number_set(converted);
        }
    }
    
    void loadmess_01_startupbang_bang() {
        this->loadmess_01_message_bang();
    }
    
    void numberobj_04_valin_set(number v) {
        this->numberobj_04_value_set(v);
    }
    
    void numberobj_04_format_set(number v) {
        this->numberobj_04_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_05_sig_number_set(number v) {
        this->numbertilde_05_outValue = v;
    }
    
    void numbertilde_05_sig_list_set(const list& v) {
        this->numbertilde_05_outValue = v[0];
    }
    
    void numbertilde_05_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_05_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_05_currentMode = 1;
        }
    }
    
    void numbertilde_06_sig_number_set(number v) {
        this->numbertilde_06_outValue = v;
    }
    
    void numbertilde_06_sig_list_set(const list& v) {
        this->numbertilde_06_outValue = v[0];
    }
    
    void numbertilde_06_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_06_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_06_currentMode = 1;
        }
    }
    
    void numbertilde_01_value_set(number ) {}
    
    void linetilde_01_target_bang() {}
    
    void numbertilde_02_value_set(number ) {}
    
    void numbertilde_03_value_set(number ) {}
    
    void numbertilde_04_value_set(number ) {}
    
    void numbertilde_05_value_set(number ) {}
    
    void numbertilde_06_value_set(number ) {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->numbertilde_01_init();
        this->message_08_init();
        this->numbertilde_02_init();
        this->message_09_init();
        this->data_01_init();
        this->numbertilde_03_init();
        this->numbertilde_04_init();
        this->numberobj_04_init();
        this->numbertilde_05_init();
        this->numbertilde_06_init();
        this->p_01->initializeObjects();
        this->p_02->initializeObjects();
        this->p_03->initializeObjects();
        this->p_04->initializeObjects();
        this->p_05->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_01->startup();
        this->p_02->startup();
        this->p_03->startup();
        this->p_04->startup();
        this->p_05->startup();
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_01->allocateDataRefs();
        this->p_02->allocateDataRefs();
        this->p_03->allocateDataRefs();
        this->p_04->allocateDataRefs();
        this->p_05->allocateDataRefs();
        this->cycle_tilde_01_buffer->requestSize(16384, 1);
        this->cycle_tilde_01_buffer->setSampleRate(this->sr);
        this->cycle_tilde_02_buffer->requestSize(16384, 1);
        this->cycle_tilde_02_buffer->setSampleRate(this->sr);
        this->cycle_tilde_03_buffer->requestSize(16384, 1);
        this->cycle_tilde_03_buffer->setSampleRate(this->sr);
        this->cycle_tilde_04_buffer->requestSize(16384, 1);
        this->cycle_tilde_04_buffer->setSampleRate(this->sr);
        this->cycle_tilde_05_buffer->requestSize(16384, 1);
        this->cycle_tilde_05_buffer->setSampleRate(this->sr);
        this->data_01_buffer = this->data_01_buffer->allocateIfNeeded();
        this->cycle_tilde_01_buffer = this->cycle_tilde_01_buffer->allocateIfNeeded();
        this->cycle_tilde_02_buffer = this->cycle_tilde_02_buffer->allocateIfNeeded();
        this->cycle_tilde_03_buffer = this->cycle_tilde_03_buffer->allocateIfNeeded();
        this->cycle_tilde_04_buffer = this->cycle_tilde_04_buffer->allocateIfNeeded();
        this->cycle_tilde_05_buffer = this->cycle_tilde_05_buffer->allocateIfNeeded();
    }
    
    void append_01_b_set(const list& v) {
        this->append_01_b = jsCreateListCopy(v);
    }
    
    void receive_02_output_number_set(number v) {
        this->receive_02_output_number = v;
    
        {
            list converted = {v};
            this->append_01_b_set(converted);
        }
    }
    
    void delay_01_stop_bang() {
        this->getEngine()->flushClockEvents(this, -1357044121, false);;
    }
    
    void delay_01_input_bang() {
        if ((bool)(!(bool)(this->delay_01_delayall)))
            this->delay_01_stop_bang();
    
        this->getEngine()->scheduleClockEvent(this, -1357044121, this->delay_01_time + this->_currentTime);;
    }
    
    void receive_01_output_bang_bang() {
        this->delay_01_input_bang();
    }
    
    void cycle_tilde_04_frequency_set(number v) {
        this->cycle_tilde_04_frequency = v;
    }
    
    void numbertilde_04_input_number_set(number v) {
        this->numbertilde_04_input_number = v;
        this->numbertilde_04_outValue = v;
    
        if (this->numbertilde_04_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-33"),
                {this->numbertilde_04_outValue},
                this->_currentTime
            );
        }
    }
    
    void eventinlet_10_out1_number_set(number v) {
        this->cycle_tilde_04_frequency_set(v);
        this->numbertilde_04_input_number_set(v);
    }
    
    void cycle_tilde_05_frequency_set(number v) {
        this->cycle_tilde_05_frequency = v;
    }
    
    void numbertilde_05_input_number_set(number v) {
        this->numbertilde_05_input_number = v;
        this->numbertilde_05_outValue = v;
    
        if (this->numbertilde_05_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-34"),
                {this->numbertilde_05_outValue},
                this->_currentTime
            );
        }
    }
    
    void cycle_tilde_05_phase_offset_set(number v) {
        this->cycle_tilde_05_phase_offset = v;
    }
    
    void receive_03_output_list_set(const list& v) {
        this->receive_03_output_list = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->cycle_tilde_05_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_05_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_05_input_number_set(converted);
        }
    }
    
    void cycle_tilde_03_frequency_set(number v) {
        this->cycle_tilde_03_frequency = v;
    }
    
    void numbertilde_03_input_number_set(number v) {
        this->numbertilde_03_input_number = v;
        this->numbertilde_03_outValue = v;
    
        if (this->numbertilde_03_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-32"),
                {this->numbertilde_03_outValue},
                this->_currentTime
            );
        }
    }
    
    void eventinlet_09_out1_number_set(number v) {
        this->cycle_tilde_03_frequency_set(v);
        this->numbertilde_03_input_number_set(v);
    }
    
    void cycle_tilde_02_frequency_set(number v) {
        this->cycle_tilde_02_frequency = v;
    }
    
    void numbertilde_02_input_number_set(number v) {
        this->numbertilde_02_input_number = v;
        this->numbertilde_02_outValue = v;
    
        if (this->numbertilde_02_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-31"),
                {this->numbertilde_02_outValue},
                this->_currentTime
            );
        }
    }
    
    void eventinlet_08_out1_number_set(number v) {
        this->cycle_tilde_02_frequency_set(v);
        this->numbertilde_02_input_number_set(v);
    }
    
    void cycle_tilde_01_frequency_set(number v) {
        this->cycle_tilde_01_frequency = v;
    }
    
    void numbertilde_01_input_number_set(number v) {
        this->numbertilde_01_input_number = v;
        this->numbertilde_01_outValue = v;
    
        if (this->numbertilde_01_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-25"),
                {this->numbertilde_01_outValue},
                this->_currentTime
            );
        }
    }
    
    void eventinlet_07_out1_number_set(number v) {
        this->cycle_tilde_01_frequency_set(v);
        this->numbertilde_01_input_number_set(v);
    }
    
    number param_01_value_constrain(number v) const {
        v = (v > 8196 ? 8196 : (v < 1 ? 1 : v));
        return v;
    }
    
    void p_05_in3_number_set(number v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_06_out1_number_set(v);
    }
    
    void p_04_in3_number_set(number v) {
        this->p_04->updateTime(this->_currentTime);
        this->p_04->eventinlet_05_out1_number_set(v);
    }
    
    void p_03_in3_number_set(number v) {
        this->p_03->updateTime(this->_currentTime);
        this->p_03->eventinlet_04_out1_number_set(v);
    }
    
    void p_02_in3_number_set(number v) {
        this->p_02->updateTime(this->_currentTime);
        this->p_02->eventinlet_03_out1_number_set(v);
    }
    
    void p_01_in3_number_set(number v) {
        this->p_01->updateTime(this->_currentTime);
        this->p_01->eventinlet_02_out1_number_set(v);
    }
    
    void numberobj_04_output_set(number v) {
        this->p_05_in3_number_set(v);
        this->p_04_in3_number_set(v);
        this->p_03_in3_number_set(v);
        this->p_02_in3_number_set(v);
        this->p_01_in3_number_set(v);
    }
    
    void numberobj_04_value_set(number v) {
        this->numberobj_04_value_setter(v);
        v = this->numberobj_04_value;
        number localvalue = v;
    
        if (this->numberobj_04_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("ChInst/number_obj-21"), localvalue, this->_currentTime);
        this->numberobj_04_output_set(localvalue);
    }
    
    number param_02_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0 ? 0 : v));
        return v;
    }
    
    void numbertilde_06_input_number_set(number v) {
        this->numbertilde_06_input_number = v;
        this->numbertilde_06_outValue = v;
    
        if (this->numbertilde_06_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-19"),
                {this->numbertilde_06_outValue},
                this->_currentTime
            );
        }
    }
    
    void cycle_tilde_01_phase_offset_set(number v) {
        this->cycle_tilde_01_phase_offset = v;
    }
    
    void message_09_set_set(const list& v) {
        this->message_09_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChInst/message_obj-17"), v, this->_currentTime);
    }
    
    void linetilde_01_time_set(number v) {
        this->linetilde_01_time = v;
    }
    
    void linetilde_01_segments_set(const list& v) {
        this->linetilde_01_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_01_time == 0) {
                this->linetilde_01_activeRamps->length = 0;
                this->linetilde_01_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_01_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_01_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_01_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_01_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_01_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_01_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_01_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_01_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_01_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_01_activeRamps->push(lastRampValue);
                    this->linetilde_01_activeRamps->push(0);
                    this->linetilde_01_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_01_keepramp)) {
                            this->linetilde_01_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_01_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_01_activeRamps->push(destinationValue);
                    this->linetilde_01_activeRamps->push(inc);
                    this->linetilde_01_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void append_01_out1_set(const list& v) {
        this->message_09_set_set(v);
        this->linetilde_01_segments_set(v);
    }
    
    void append_01_a_set(const list& _a) {
        RNBO_UNUSED(_a);
        list a = createListCopy(_a);
        this->append_01_a = jsCreateListCopy(a);
        auto b = this->append_01_b;
    
        {
            this->append_01_out1_set(a->concat(b));
            return;
        }
    }
    
    void message_08_out_set(const list& v) {
        this->append_01_a_set(v);
    }
    
    void message_08_trigger_bang() {
        this->message_08_out_set(this->message_08_set);
    }
    
    void button_01_output_bang() {
        this->message_08_trigger_bang();
    }
    
    void button_01_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("ChInst/button_obj-13"), this->_currentTime);;
        this->button_01_output_bang();
    }
    
    void message_08_set_set(const list& v) {
        this->message_08_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChInst/message_obj-141"), v, this->_currentTime);
    }
    
    void cycle_tilde_02_phase_offset_set(number v) {
        this->cycle_tilde_02_phase_offset = v;
    }
    
    void message_09_out_set(const list& ) {}
    
    void message_09_trigger_bang() {
        this->message_09_out_set(this->message_09_set);
    }
    
    void cycle_tilde_03_phase_offset_set(number v) {
        this->cycle_tilde_03_phase_offset = v;
    }
    
    void cycle_tilde_04_phase_offset_set(number v) {
        this->cycle_tilde_04_phase_offset = v;
    }
    
    void loadmess_01_message_bang() {
        list v = this->loadmess_01_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_04_value_set(converted);
        }
    }
    
    void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
        auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
        auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
        auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
        auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
        auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_01_currentMode == 0) {
                output[(Index)i] = this->numbertilde_01_smooth_next(
                    __numbertilde_01_outValue,
                    __numbertilde_01_rampInSamples,
                    __numbertilde_01_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_01_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
            __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -708766484,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_01_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-25"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
        this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
    }
    
    void cycle_tilde_01_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_01_f2i = this->cycle_tilde_01_f2i;
        auto __cycle_tilde_01_buffer = this->cycle_tilde_01_buffer;
        auto __cycle_tilde_01_phasei = this->cycle_tilde_01_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_01_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_01_buffer[(Index)idx];
                number y1 = __cycle_tilde_01_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_01_f2i));
                    __cycle_tilde_01_phasei = uint32_add(__cycle_tilde_01_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_01_phasei = __cycle_tilde_01_phasei;
    }
    
    void linetilde_01_perform(SampleValue * out, Index n) {
        auto __linetilde_01_time = this->linetilde_01_time;
        auto __linetilde_01_keepramp = this->linetilde_01_keepramp;
        auto __linetilde_01_currentValue = this->linetilde_01_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_01_activeRamps->length)) {
            while ((bool)(this->linetilde_01_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_01_activeRamps[0];
                number inc = this->linetilde_01_activeRamps[1];
                number rampTimeInSamples = this->linetilde_01_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_01_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_01_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_01_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -281953904,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_01_keepramp))) {
                            __linetilde_01_time = 0;
                        }
                    }
                }
    
                __linetilde_01_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_01_currentValue;
            i++;
        }
    
        this->linetilde_01_currentValue = __linetilde_01_currentValue;
        this->linetilde_01_time = __linetilde_01_time;
    }
    
    void numbertilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_02_currentIntervalInSamples = this->numbertilde_02_currentIntervalInSamples;
        auto __numbertilde_02_lastValue = this->numbertilde_02_lastValue;
        auto __numbertilde_02_currentInterval = this->numbertilde_02_currentInterval;
        auto __numbertilde_02_rampInSamples = this->numbertilde_02_rampInSamples;
        auto __numbertilde_02_outValue = this->numbertilde_02_outValue;
        auto __numbertilde_02_currentMode = this->numbertilde_02_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_02_currentMode == 0) {
                output[(Index)i] = this->numbertilde_02_smooth_next(
                    __numbertilde_02_outValue,
                    __numbertilde_02_rampInSamples,
                    __numbertilde_02_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_02_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_02_lastValue && __numbertilde_02_currentInterval <= 0) {
            __numbertilde_02_currentInterval = __numbertilde_02_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                694892522,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_02_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-31"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_02_currentInterval = __numbertilde_02_currentInterval;
        this->numbertilde_02_lastValue = __numbertilde_02_lastValue;
    }
    
    void cycle_tilde_02_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_02_f2i = this->cycle_tilde_02_f2i;
        auto __cycle_tilde_02_buffer = this->cycle_tilde_02_buffer;
        auto __cycle_tilde_02_phasei = this->cycle_tilde_02_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_02_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_02_buffer[(Index)idx];
                number y1 = __cycle_tilde_02_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_02_f2i));
                    __cycle_tilde_02_phasei = uint32_add(__cycle_tilde_02_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_02_phasei = __cycle_tilde_02_phasei;
    }
    
    void numbertilde_03_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_03_currentIntervalInSamples = this->numbertilde_03_currentIntervalInSamples;
        auto __numbertilde_03_lastValue = this->numbertilde_03_lastValue;
        auto __numbertilde_03_currentInterval = this->numbertilde_03_currentInterval;
        auto __numbertilde_03_rampInSamples = this->numbertilde_03_rampInSamples;
        auto __numbertilde_03_outValue = this->numbertilde_03_outValue;
        auto __numbertilde_03_currentMode = this->numbertilde_03_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_03_currentMode == 0) {
                output[(Index)i] = this->numbertilde_03_smooth_next(
                    __numbertilde_03_outValue,
                    __numbertilde_03_rampInSamples,
                    __numbertilde_03_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_03_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_03_lastValue && __numbertilde_03_currentInterval <= 0) {
            __numbertilde_03_currentInterval = __numbertilde_03_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                1396722025,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_03_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-32"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_03_currentInterval = __numbertilde_03_currentInterval;
        this->numbertilde_03_lastValue = __numbertilde_03_lastValue;
    }
    
    void cycle_tilde_03_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_03_f2i = this->cycle_tilde_03_f2i;
        auto __cycle_tilde_03_buffer = this->cycle_tilde_03_buffer;
        auto __cycle_tilde_03_phasei = this->cycle_tilde_03_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_03_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_03_buffer[(Index)idx];
                number y1 = __cycle_tilde_03_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_03_f2i));
                    __cycle_tilde_03_phasei = uint32_add(__cycle_tilde_03_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_03_phasei = __cycle_tilde_03_phasei;
    }
    
    void numbertilde_04_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_04_currentIntervalInSamples = this->numbertilde_04_currentIntervalInSamples;
        auto __numbertilde_04_lastValue = this->numbertilde_04_lastValue;
        auto __numbertilde_04_currentInterval = this->numbertilde_04_currentInterval;
        auto __numbertilde_04_rampInSamples = this->numbertilde_04_rampInSamples;
        auto __numbertilde_04_outValue = this->numbertilde_04_outValue;
        auto __numbertilde_04_currentMode = this->numbertilde_04_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_04_currentMode == 0) {
                output[(Index)i] = this->numbertilde_04_smooth_next(
                    __numbertilde_04_outValue,
                    __numbertilde_04_rampInSamples,
                    __numbertilde_04_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_04_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_04_lastValue && __numbertilde_04_currentInterval <= 0) {
            __numbertilde_04_currentInterval = __numbertilde_04_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_04_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-33"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_04_currentInterval = __numbertilde_04_currentInterval;
        this->numbertilde_04_lastValue = __numbertilde_04_lastValue;
    }
    
    void cycle_tilde_04_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_04_f2i = this->cycle_tilde_04_f2i;
        auto __cycle_tilde_04_buffer = this->cycle_tilde_04_buffer;
        auto __cycle_tilde_04_phasei = this->cycle_tilde_04_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_04_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_04_buffer[(Index)idx];
                number y1 = __cycle_tilde_04_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_04_f2i));
                    __cycle_tilde_04_phasei = uint32_add(__cycle_tilde_04_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_04_phasei = __cycle_tilde_04_phasei;
    }
    
    void numbertilde_05_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_05_currentIntervalInSamples = this->numbertilde_05_currentIntervalInSamples;
        auto __numbertilde_05_lastValue = this->numbertilde_05_lastValue;
        auto __numbertilde_05_currentInterval = this->numbertilde_05_currentInterval;
        auto __numbertilde_05_rampInSamples = this->numbertilde_05_rampInSamples;
        auto __numbertilde_05_outValue = this->numbertilde_05_outValue;
        auto __numbertilde_05_currentMode = this->numbertilde_05_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_05_currentMode == 0) {
                output[(Index)i] = this->numbertilde_05_smooth_next(
                    __numbertilde_05_outValue,
                    __numbertilde_05_rampInSamples,
                    __numbertilde_05_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_05_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_05_lastValue && __numbertilde_05_currentInterval <= 0) {
            __numbertilde_05_currentInterval = __numbertilde_05_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_05_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-34"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_05_currentInterval = __numbertilde_05_currentInterval;
        this->numbertilde_05_lastValue = __numbertilde_05_lastValue;
    }
    
    void cycle_tilde_05_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_05_f2i = this->cycle_tilde_05_f2i;
        auto __cycle_tilde_05_buffer = this->cycle_tilde_05_buffer;
        auto __cycle_tilde_05_phasei = this->cycle_tilde_05_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_05_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_05_buffer[(Index)idx];
                number y1 = __cycle_tilde_05_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_05_f2i));
                    __cycle_tilde_05_phasei = uint32_add(__cycle_tilde_05_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_05_phasei = __cycle_tilde_05_phasei;
    }
    
    void numbertilde_06_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_06_currentIntervalInSamples = this->numbertilde_06_currentIntervalInSamples;
        auto __numbertilde_06_lastValue = this->numbertilde_06_lastValue;
        auto __numbertilde_06_currentInterval = this->numbertilde_06_currentInterval;
        auto __numbertilde_06_rampInSamples = this->numbertilde_06_rampInSamples;
        auto __numbertilde_06_outValue = this->numbertilde_06_outValue;
        auto __numbertilde_06_currentMode = this->numbertilde_06_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_06_currentMode == 0) {
                output[(Index)i] = this->numbertilde_06_smooth_next(
                    __numbertilde_06_outValue,
                    __numbertilde_06_rampInSamples,
                    __numbertilde_06_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_06_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_06_lastValue && __numbertilde_06_currentInterval <= 0) {
            __numbertilde_06_currentInterval = __numbertilde_06_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -6936981,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_06_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-19"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_06_currentInterval = __numbertilde_06_currentInterval;
        this->numbertilde_06_lastValue = __numbertilde_06_lastValue;
    }
    
    void p_02_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_02->process(ins, 2, outs, 1, n);
    }
    
    void p_01_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_01->process(ins, 2, outs, 1, n);
    }
    
    void p_03_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_03->process(ins, 2, outs, 1, n);
    }
    
    void p_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_04->process(ins, 2, outs, 1, n);
    }
    
    void p_05_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_05->process(ins, 2, outs, 1, n);
    }
    
    void signaladder_03_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i] + in5[(Index)i];
        }
    }
    
    void dspexpr_01_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void data_01_srout_set(number ) {}
    
    void data_01_chanout_set(number ) {}
    
    void data_01_sizeout_set(number v) {
        this->data_01_sizeout = v;
    }
    
    void numberobj_04_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_04_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_04_value = localvalue;
    }
    
    number numbertilde_01_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
        this->numbertilde_01_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_01_smooth_d_dspsetup() {
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_smooth_d_reset() {
        this->numbertilde_01_smooth_d_prev = 0;
    }
    
    number numbertilde_01_smooth_next(number x, number up, number down) {
        if (this->numbertilde_01_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_01_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_01_smooth_index = _up;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
            } else if (x < this->numbertilde_01_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_01_smooth_index = _down;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_01_smooth_index > 0) {
            this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
            this->numbertilde_01_smooth_index -= 1;
        } else {
            this->numbertilde_01_smooth_prev = x;
        }
    
        return this->numbertilde_01_smooth_prev;
    }
    
    void numbertilde_01_smooth_reset() {
        this->numbertilde_01_smooth_prev = 0;
        this->numbertilde_01_smooth_index = 0;
        this->numbertilde_01_smooth_increment = 0;
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_init() {
        this->numbertilde_01_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-25"), 1, this->_currentTime);
    }
    
    void numbertilde_01_dspsetup(bool force) {
        if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
        this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
        this->numbertilde_01_setupDone = true;
        this->numbertilde_01_smooth_d_dspsetup();
    }
    
    number cycle_tilde_01_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_01_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_01_ph_conv;
    
        if (this->cycle_tilde_01_ph_currentPhase < 0.)
            this->cycle_tilde_01_ph_currentPhase = 1. + this->cycle_tilde_01_ph_currentPhase;
    
        if (this->cycle_tilde_01_ph_currentPhase > 1.)
            this->cycle_tilde_01_ph_currentPhase = this->cycle_tilde_01_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_01_ph_currentPhase;
        this->cycle_tilde_01_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_01_ph_reset() {
        this->cycle_tilde_01_ph_currentPhase = 0;
    }
    
    void cycle_tilde_01_ph_dspsetup() {
        this->cycle_tilde_01_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_01_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_01_phasei = 0;
        this->cycle_tilde_01_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
        this->cycle_tilde_01_setupDone = true;
        this->cycle_tilde_01_ph_dspsetup();
    }
    
    void cycle_tilde_01_bufferUpdated() {
        this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
    }
    
    void message_08_init() {
        this->message_08_set_set({0.25, 100, 0});
    }
    
    number numbertilde_02_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_02_smooth_d_prev);
        this->numbertilde_02_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_02_smooth_d_dspsetup() {
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_smooth_d_reset() {
        this->numbertilde_02_smooth_d_prev = 0;
    }
    
    number numbertilde_02_smooth_next(number x, number up, number down) {
        if (this->numbertilde_02_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_02_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_02_smooth_index = _up;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _up;
            } else if (x < this->numbertilde_02_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_02_smooth_index = _down;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_02_smooth_index > 0) {
            this->numbertilde_02_smooth_prev += this->numbertilde_02_smooth_increment;
            this->numbertilde_02_smooth_index -= 1;
        } else {
            this->numbertilde_02_smooth_prev = x;
        }
    
        return this->numbertilde_02_smooth_prev;
    }
    
    void numbertilde_02_smooth_reset() {
        this->numbertilde_02_smooth_prev = 0;
        this->numbertilde_02_smooth_index = 0;
        this->numbertilde_02_smooth_increment = 0;
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_init() {
        this->numbertilde_02_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-31"), 1, this->_currentTime);
    }
    
    void numbertilde_02_dspsetup(bool force) {
        if ((bool)(this->numbertilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_02_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_02_currentInterval = this->numbertilde_02_currentIntervalInSamples;
        this->numbertilde_02_rampInSamples = this->mstosamps(this->numbertilde_02_ramp);
        this->numbertilde_02_setupDone = true;
        this->numbertilde_02_smooth_d_dspsetup();
    }
    
    number cycle_tilde_02_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_02_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_02_ph_conv;
    
        if (this->cycle_tilde_02_ph_currentPhase < 0.)
            this->cycle_tilde_02_ph_currentPhase = 1. + this->cycle_tilde_02_ph_currentPhase;
    
        if (this->cycle_tilde_02_ph_currentPhase > 1.)
            this->cycle_tilde_02_ph_currentPhase = this->cycle_tilde_02_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_02_ph_currentPhase;
        this->cycle_tilde_02_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_02_ph_reset() {
        this->cycle_tilde_02_ph_currentPhase = 0;
    }
    
    void cycle_tilde_02_ph_dspsetup() {
        this->cycle_tilde_02_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_02_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_02_phasei = 0;
        this->cycle_tilde_02_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
        this->cycle_tilde_02_setupDone = true;
        this->cycle_tilde_02_ph_dspsetup();
    }
    
    void cycle_tilde_02_bufferUpdated() {
        this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
    }
    
    void message_09_init() {
        this->message_09_set_set({0.25, 100, 0, 3000});
    }
    
    void data_01_init() {
        this->data_01_buffer->setWantsFill(true);
    }
    
    Index data_01_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        number size = 0;
        return (Index)(size);
    }
    
    void data_01_dspsetup(bool force) {
        if ((bool)(this->data_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        if (this->data_01_sizemode == 2) {
            this->data_01_buffer = this->data_01_buffer->setSize((Index)(this->mstosamps(this->data_01_sizems)));
            updateDataRef(this, this->data_01_buffer);
        } else if (this->data_01_sizemode == 3) {
            this->data_01_buffer = this->data_01_buffer->setSize(this->data_01_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
            updateDataRef(this, this->data_01_buffer);
        }
    
        this->data_01_setupDone = true;
    }
    
    void data_01_bufferUpdated() {
        this->data_01_report();
    }
    
    void data_01_report() {
        this->data_01_srout_set(this->data_01_buffer->getSampleRate());
        this->data_01_chanout_set(this->data_01_buffer->getChannels());
        this->data_01_sizeout_set(this->data_01_buffer->getSize());
    }
    
    number numbertilde_03_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_03_smooth_d_prev);
        this->numbertilde_03_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_03_smooth_d_dspsetup() {
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_smooth_d_reset() {
        this->numbertilde_03_smooth_d_prev = 0;
    }
    
    number numbertilde_03_smooth_next(number x, number up, number down) {
        if (this->numbertilde_03_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_03_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_03_smooth_index = _up;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _up;
            } else if (x < this->numbertilde_03_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_03_smooth_index = _down;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_03_smooth_index > 0) {
            this->numbertilde_03_smooth_prev += this->numbertilde_03_smooth_increment;
            this->numbertilde_03_smooth_index -= 1;
        } else {
            this->numbertilde_03_smooth_prev = x;
        }
    
        return this->numbertilde_03_smooth_prev;
    }
    
    void numbertilde_03_smooth_reset() {
        this->numbertilde_03_smooth_prev = 0;
        this->numbertilde_03_smooth_index = 0;
        this->numbertilde_03_smooth_increment = 0;
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_init() {
        this->numbertilde_03_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-32"), 1, this->_currentTime);
    }
    
    void numbertilde_03_dspsetup(bool force) {
        if ((bool)(this->numbertilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_03_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_03_currentInterval = this->numbertilde_03_currentIntervalInSamples;
        this->numbertilde_03_rampInSamples = this->mstosamps(this->numbertilde_03_ramp);
        this->numbertilde_03_setupDone = true;
        this->numbertilde_03_smooth_d_dspsetup();
    }
    
    number cycle_tilde_03_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_03_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_03_ph_conv;
    
        if (this->cycle_tilde_03_ph_currentPhase < 0.)
            this->cycle_tilde_03_ph_currentPhase = 1. + this->cycle_tilde_03_ph_currentPhase;
    
        if (this->cycle_tilde_03_ph_currentPhase > 1.)
            this->cycle_tilde_03_ph_currentPhase = this->cycle_tilde_03_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_03_ph_currentPhase;
        this->cycle_tilde_03_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_03_ph_reset() {
        this->cycle_tilde_03_ph_currentPhase = 0;
    }
    
    void cycle_tilde_03_ph_dspsetup() {
        this->cycle_tilde_03_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_03_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_03_phasei = 0;
        this->cycle_tilde_03_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
        this->cycle_tilde_03_setupDone = true;
        this->cycle_tilde_03_ph_dspsetup();
    }
    
    void cycle_tilde_03_bufferUpdated() {
        this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
    }
    
    number numbertilde_04_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_04_smooth_d_prev);
        this->numbertilde_04_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_04_smooth_d_dspsetup() {
        this->numbertilde_04_smooth_d_reset();
    }
    
    void numbertilde_04_smooth_d_reset() {
        this->numbertilde_04_smooth_d_prev = 0;
    }
    
    number numbertilde_04_smooth_next(number x, number up, number down) {
        if (this->numbertilde_04_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_04_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_04_smooth_index = _up;
                this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _up;
            } else if (x < this->numbertilde_04_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_04_smooth_index = _down;
                this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_04_smooth_index > 0) {
            this->numbertilde_04_smooth_prev += this->numbertilde_04_smooth_increment;
            this->numbertilde_04_smooth_index -= 1;
        } else {
            this->numbertilde_04_smooth_prev = x;
        }
    
        return this->numbertilde_04_smooth_prev;
    }
    
    void numbertilde_04_smooth_reset() {
        this->numbertilde_04_smooth_prev = 0;
        this->numbertilde_04_smooth_index = 0;
        this->numbertilde_04_smooth_increment = 0;
        this->numbertilde_04_smooth_d_reset();
    }
    
    void numbertilde_04_init() {
        this->numbertilde_04_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-33"), 1, this->_currentTime);
    }
    
    void numbertilde_04_dspsetup(bool force) {
        if ((bool)(this->numbertilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_04_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_04_currentInterval = this->numbertilde_04_currentIntervalInSamples;
        this->numbertilde_04_rampInSamples = this->mstosamps(this->numbertilde_04_ramp);
        this->numbertilde_04_setupDone = true;
        this->numbertilde_04_smooth_d_dspsetup();
    }
    
    number cycle_tilde_04_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_04_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_04_ph_conv;
    
        if (this->cycle_tilde_04_ph_currentPhase < 0.)
            this->cycle_tilde_04_ph_currentPhase = 1. + this->cycle_tilde_04_ph_currentPhase;
    
        if (this->cycle_tilde_04_ph_currentPhase > 1.)
            this->cycle_tilde_04_ph_currentPhase = this->cycle_tilde_04_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_04_ph_currentPhase;
        this->cycle_tilde_04_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_04_ph_reset() {
        this->cycle_tilde_04_ph_currentPhase = 0;
    }
    
    void cycle_tilde_04_ph_dspsetup() {
        this->cycle_tilde_04_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_04_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_04_phasei = 0;
        this->cycle_tilde_04_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_04_wrap = (long)(this->cycle_tilde_04_buffer->getSize()) - 1;
        this->cycle_tilde_04_setupDone = true;
        this->cycle_tilde_04_ph_dspsetup();
    }
    
    void cycle_tilde_04_bufferUpdated() {
        this->cycle_tilde_04_wrap = (long)(this->cycle_tilde_04_buffer->getSize()) - 1;
    }
    
    void numberobj_04_init() {
        this->numberobj_04_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_04_value;
    }
    
    void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_04_value_set(preset["value"]);
    }
    
    void param_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_01_value;
    }
    
    void param_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_01_value_set(preset["value"]);
    }
    
    number numbertilde_05_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_05_smooth_d_prev);
        this->numbertilde_05_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_05_smooth_d_dspsetup() {
        this->numbertilde_05_smooth_d_reset();
    }
    
    void numbertilde_05_smooth_d_reset() {
        this->numbertilde_05_smooth_d_prev = 0;
    }
    
    number numbertilde_05_smooth_next(number x, number up, number down) {
        if (this->numbertilde_05_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_05_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_05_smooth_index = _up;
                this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _up;
            } else if (x < this->numbertilde_05_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_05_smooth_index = _down;
                this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_05_smooth_index > 0) {
            this->numbertilde_05_smooth_prev += this->numbertilde_05_smooth_increment;
            this->numbertilde_05_smooth_index -= 1;
        } else {
            this->numbertilde_05_smooth_prev = x;
        }
    
        return this->numbertilde_05_smooth_prev;
    }
    
    void numbertilde_05_smooth_reset() {
        this->numbertilde_05_smooth_prev = 0;
        this->numbertilde_05_smooth_index = 0;
        this->numbertilde_05_smooth_increment = 0;
        this->numbertilde_05_smooth_d_reset();
    }
    
    void numbertilde_05_init() {
        this->numbertilde_05_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-34"), 1, this->_currentTime);
    }
    
    void numbertilde_05_dspsetup(bool force) {
        if ((bool)(this->numbertilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_05_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_05_currentInterval = this->numbertilde_05_currentIntervalInSamples;
        this->numbertilde_05_rampInSamples = this->mstosamps(this->numbertilde_05_ramp);
        this->numbertilde_05_setupDone = true;
        this->numbertilde_05_smooth_d_dspsetup();
    }
    
    number cycle_tilde_05_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_05_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_05_ph_conv;
    
        if (this->cycle_tilde_05_ph_currentPhase < 0.)
            this->cycle_tilde_05_ph_currentPhase = 1. + this->cycle_tilde_05_ph_currentPhase;
    
        if (this->cycle_tilde_05_ph_currentPhase > 1.)
            this->cycle_tilde_05_ph_currentPhase = this->cycle_tilde_05_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_05_ph_currentPhase;
        this->cycle_tilde_05_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_05_ph_reset() {
        this->cycle_tilde_05_ph_currentPhase = 0;
    }
    
    void cycle_tilde_05_ph_dspsetup() {
        this->cycle_tilde_05_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_05_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_05_phasei = 0;
        this->cycle_tilde_05_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_05_wrap = (long)(this->cycle_tilde_05_buffer->getSize()) - 1;
        this->cycle_tilde_05_setupDone = true;
        this->cycle_tilde_05_ph_dspsetup();
    }
    
    void cycle_tilde_05_bufferUpdated() {
        this->cycle_tilde_05_wrap = (long)(this->cycle_tilde_05_buffer->getSize()) - 1;
    }
    
    void param_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_02_value;
    }
    
    void param_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_02_value_set(preset["value"]);
    }
    
    number numbertilde_06_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_06_smooth_d_prev);
        this->numbertilde_06_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_06_smooth_d_dspsetup() {
        this->numbertilde_06_smooth_d_reset();
    }
    
    void numbertilde_06_smooth_d_reset() {
        this->numbertilde_06_smooth_d_prev = 0;
    }
    
    number numbertilde_06_smooth_next(number x, number up, number down) {
        if (this->numbertilde_06_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_06_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_06_smooth_index = _up;
                this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _up;
            } else if (x < this->numbertilde_06_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_06_smooth_index = _down;
                this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_06_smooth_index > 0) {
            this->numbertilde_06_smooth_prev += this->numbertilde_06_smooth_increment;
            this->numbertilde_06_smooth_index -= 1;
        } else {
            this->numbertilde_06_smooth_prev = x;
        }
    
        return this->numbertilde_06_smooth_prev;
    }
    
    void numbertilde_06_smooth_reset() {
        this->numbertilde_06_smooth_prev = 0;
        this->numbertilde_06_smooth_index = 0;
        this->numbertilde_06_smooth_increment = 0;
        this->numbertilde_06_smooth_d_reset();
    }
    
    void numbertilde_06_init() {
        this->numbertilde_06_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-19"), 1, this->_currentTime);
    }
    
    void numbertilde_06_dspsetup(bool force) {
        if ((bool)(this->numbertilde_06_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_06_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_06_currentInterval = this->numbertilde_06_currentIntervalInSamples;
        this->numbertilde_06_rampInSamples = this->mstosamps(this->numbertilde_06_ramp);
        this->numbertilde_06_setupDone = true;
        this->numbertilde_06_smooth_d_dspsetup();
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        p_01_target = 0;
        numbertilde_01_input_number = 0;
        numbertilde_01_ramp = 0;
        cycle_tilde_01_frequency = 0;
        cycle_tilde_01_phase_offset = 0;
        delay_01_time = 20;
        delay_01_delayall = 1;
        receive_01_output_number = 0;
        linetilde_01_time = 0;
        linetilde_01_keepramp = 0;
        receive_02_output_number = 0;
        p_02_target = 0;
        numbertilde_02_input_number = 0;
        numbertilde_02_ramp = 0;
        dspexpr_01_in1 = 0;
        dspexpr_01_in2 = 0.25;
        cycle_tilde_02_frequency = 0;
        cycle_tilde_02_phase_offset = 0;
        data_01_sizeout = 0;
        data_01_size = 0;
        data_01_sizems = 0;
        data_01_normalize = 0.995;
        data_01_channels = 1;
        p_03_target = 0;
        numbertilde_03_input_number = 0;
        numbertilde_03_ramp = 0;
        cycle_tilde_03_frequency = 0;
        cycle_tilde_03_phase_offset = 0;
        p_04_target = 0;
        numbertilde_04_input_number = 0;
        numbertilde_04_ramp = 0;
        cycle_tilde_04_frequency = 0;
        cycle_tilde_04_phase_offset = 0;
        loadmess_01_message = { 256 };
        numberobj_04_value = 0;
        numberobj_04_value_setter(numberobj_04_value);
        param_01_value = 256;
        p_05_target = 0;
        numbertilde_05_input_number = 0;
        numbertilde_05_ramp = 0;
        receive_03_output_number = 0;
        cycle_tilde_05_frequency = 0;
        cycle_tilde_05_phase_offset = 0;
        param_02_value = 1;
        numbertilde_06_input_number = 0;
        numbertilde_06_ramp = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        signals[7] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numbertilde_01_currentInterval = 0;
        numbertilde_01_currentIntervalInSamples = 0;
        numbertilde_01_lastValue = 0;
        numbertilde_01_outValue = 0;
        numbertilde_01_rampInSamples = 0;
        numbertilde_01_currentMode = 0;
        numbertilde_01_smooth_d_prev = 0;
        numbertilde_01_smooth_prev = 0;
        numbertilde_01_smooth_index = 0;
        numbertilde_01_smooth_increment = 0;
        numbertilde_01_setupDone = false;
        cycle_tilde_01_wrap = 0;
        cycle_tilde_01_ph_currentPhase = 0;
        cycle_tilde_01_ph_conv = 0;
        cycle_tilde_01_setupDone = false;
        linetilde_01_currentValue = 0;
        numbertilde_02_currentInterval = 0;
        numbertilde_02_currentIntervalInSamples = 0;
        numbertilde_02_lastValue = 0;
        numbertilde_02_outValue = 0;
        numbertilde_02_rampInSamples = 0;
        numbertilde_02_currentMode = 0;
        numbertilde_02_smooth_d_prev = 0;
        numbertilde_02_smooth_prev = 0;
        numbertilde_02_smooth_index = 0;
        numbertilde_02_smooth_increment = 0;
        numbertilde_02_setupDone = false;
        cycle_tilde_02_wrap = 0;
        cycle_tilde_02_ph_currentPhase = 0;
        cycle_tilde_02_ph_conv = 0;
        cycle_tilde_02_setupDone = false;
        data_01_sizemode = 0;
        data_01_setupDone = false;
        numbertilde_03_currentInterval = 0;
        numbertilde_03_currentIntervalInSamples = 0;
        numbertilde_03_lastValue = 0;
        numbertilde_03_outValue = 0;
        numbertilde_03_rampInSamples = 0;
        numbertilde_03_currentMode = 0;
        numbertilde_03_smooth_d_prev = 0;
        numbertilde_03_smooth_prev = 0;
        numbertilde_03_smooth_index = 0;
        numbertilde_03_smooth_increment = 0;
        numbertilde_03_setupDone = false;
        cycle_tilde_03_wrap = 0;
        cycle_tilde_03_ph_currentPhase = 0;
        cycle_tilde_03_ph_conv = 0;
        cycle_tilde_03_setupDone = false;
        numbertilde_04_currentInterval = 0;
        numbertilde_04_currentIntervalInSamples = 0;
        numbertilde_04_lastValue = 0;
        numbertilde_04_outValue = 0;
        numbertilde_04_rampInSamples = 0;
        numbertilde_04_currentMode = 0;
        numbertilde_04_smooth_d_prev = 0;
        numbertilde_04_smooth_prev = 0;
        numbertilde_04_smooth_index = 0;
        numbertilde_04_smooth_increment = 0;
        numbertilde_04_setupDone = false;
        cycle_tilde_04_wrap = 0;
        cycle_tilde_04_ph_currentPhase = 0;
        cycle_tilde_04_ph_conv = 0;
        cycle_tilde_04_setupDone = false;
        numberobj_04_currentFormat = 6;
        numberobj_04_lastValue = 0;
        param_01_lastValue = 0;
        numbertilde_05_currentInterval = 0;
        numbertilde_05_currentIntervalInSamples = 0;
        numbertilde_05_lastValue = 0;
        numbertilde_05_outValue = 0;
        numbertilde_05_rampInSamples = 0;
        numbertilde_05_currentMode = 0;
        numbertilde_05_smooth_d_prev = 0;
        numbertilde_05_smooth_prev = 0;
        numbertilde_05_smooth_index = 0;
        numbertilde_05_smooth_increment = 0;
        numbertilde_05_setupDone = false;
        cycle_tilde_05_wrap = 0;
        cycle_tilde_05_ph_currentPhase = 0;
        cycle_tilde_05_ph_conv = 0;
        cycle_tilde_05_setupDone = false;
        param_02_lastValue = 0;
        numbertilde_06_currentInterval = 0;
        numbertilde_06_currentIntervalInSamples = 0;
        numbertilde_06_lastValue = 0;
        numbertilde_06_outValue = 0;
        numbertilde_06_rampInSamples = 0;
        numbertilde_06_currentMode = 0;
        numbertilde_06_smooth_d_prev = 0;
        numbertilde_06_smooth_prev = 0;
        numbertilde_06_smooth_index = 0;
        numbertilde_06_smooth_increment = 0;
        numbertilde_06_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number p_01_target;
        number numbertilde_01_input_number;
        number numbertilde_01_ramp;
        number cycle_tilde_01_frequency;
        number cycle_tilde_01_phase_offset;
        list append_01_a;
        list append_01_b;
        number delay_01_time;
        number delay_01_delayall;
        number receive_01_output_number;
        list receive_01_output_list;
        list message_08_set;
        list linetilde_01_segments;
        number linetilde_01_time;
        number linetilde_01_keepramp;
        number receive_02_output_number;
        list receive_02_output_list;
        number p_02_target;
        number numbertilde_02_input_number;
        number numbertilde_02_ramp;
        number dspexpr_01_in1;
        number dspexpr_01_in2;
        number cycle_tilde_02_frequency;
        number cycle_tilde_02_phase_offset;
        list message_09_set;
        number data_01_sizeout;
        number data_01_size;
        number data_01_sizems;
        number data_01_normalize;
        number data_01_channels;
        number p_03_target;
        number numbertilde_03_input_number;
        number numbertilde_03_ramp;
        number cycle_tilde_03_frequency;
        number cycle_tilde_03_phase_offset;
        number p_04_target;
        number numbertilde_04_input_number;
        number numbertilde_04_ramp;
        number cycle_tilde_04_frequency;
        number cycle_tilde_04_phase_offset;
        list loadmess_01_message;
        number numberobj_04_value;
        number param_01_value;
        number p_05_target;
        number numbertilde_05_input_number;
        number numbertilde_05_ramp;
        number receive_03_output_number;
        list receive_03_output_list;
        number cycle_tilde_05_frequency;
        number cycle_tilde_05_phase_offset;
        number param_02_value;
        number numbertilde_06_input_number;
        number numbertilde_06_ramp;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[8];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        SampleIndex numbertilde_01_currentInterval;
        SampleIndex numbertilde_01_currentIntervalInSamples;
        number numbertilde_01_lastValue;
        number numbertilde_01_outValue;
        number numbertilde_01_rampInSamples;
        Int numbertilde_01_currentMode;
        number numbertilde_01_smooth_d_prev;
        number numbertilde_01_smooth_prev;
        number numbertilde_01_smooth_index;
        number numbertilde_01_smooth_increment;
        bool numbertilde_01_setupDone;
        Float64BufferRef cycle_tilde_01_buffer;
        long cycle_tilde_01_wrap;
        uint32_t cycle_tilde_01_phasei;
        SampleValue cycle_tilde_01_f2i;
        number cycle_tilde_01_ph_currentPhase;
        number cycle_tilde_01_ph_conv;
        bool cycle_tilde_01_setupDone;
        list linetilde_01_activeRamps;
        number linetilde_01_currentValue;
        SampleIndex numbertilde_02_currentInterval;
        SampleIndex numbertilde_02_currentIntervalInSamples;
        number numbertilde_02_lastValue;
        number numbertilde_02_outValue;
        number numbertilde_02_rampInSamples;
        Int numbertilde_02_currentMode;
        number numbertilde_02_smooth_d_prev;
        number numbertilde_02_smooth_prev;
        number numbertilde_02_smooth_index;
        number numbertilde_02_smooth_increment;
        bool numbertilde_02_setupDone;
        Float64BufferRef cycle_tilde_02_buffer;
        long cycle_tilde_02_wrap;
        uint32_t cycle_tilde_02_phasei;
        SampleValue cycle_tilde_02_f2i;
        number cycle_tilde_02_ph_currentPhase;
        number cycle_tilde_02_ph_conv;
        bool cycle_tilde_02_setupDone;
        Float32BufferRef data_01_buffer;
        Int data_01_sizemode;
        bool data_01_setupDone;
        SampleIndex numbertilde_03_currentInterval;
        SampleIndex numbertilde_03_currentIntervalInSamples;
        number numbertilde_03_lastValue;
        number numbertilde_03_outValue;
        number numbertilde_03_rampInSamples;
        Int numbertilde_03_currentMode;
        number numbertilde_03_smooth_d_prev;
        number numbertilde_03_smooth_prev;
        number numbertilde_03_smooth_index;
        number numbertilde_03_smooth_increment;
        bool numbertilde_03_setupDone;
        Float64BufferRef cycle_tilde_03_buffer;
        long cycle_tilde_03_wrap;
        uint32_t cycle_tilde_03_phasei;
        SampleValue cycle_tilde_03_f2i;
        number cycle_tilde_03_ph_currentPhase;
        number cycle_tilde_03_ph_conv;
        bool cycle_tilde_03_setupDone;
        SampleIndex numbertilde_04_currentInterval;
        SampleIndex numbertilde_04_currentIntervalInSamples;
        number numbertilde_04_lastValue;
        number numbertilde_04_outValue;
        number numbertilde_04_rampInSamples;
        Int numbertilde_04_currentMode;
        number numbertilde_04_smooth_d_prev;
        number numbertilde_04_smooth_prev;
        number numbertilde_04_smooth_index;
        number numbertilde_04_smooth_increment;
        bool numbertilde_04_setupDone;
        Float64BufferRef cycle_tilde_04_buffer;
        long cycle_tilde_04_wrap;
        uint32_t cycle_tilde_04_phasei;
        SampleValue cycle_tilde_04_f2i;
        number cycle_tilde_04_ph_currentPhase;
        number cycle_tilde_04_ph_conv;
        bool cycle_tilde_04_setupDone;
        Int numberobj_04_currentFormat;
        number numberobj_04_lastValue;
        number param_01_lastValue;
        SampleIndex numbertilde_05_currentInterval;
        SampleIndex numbertilde_05_currentIntervalInSamples;
        number numbertilde_05_lastValue;
        number numbertilde_05_outValue;
        number numbertilde_05_rampInSamples;
        Int numbertilde_05_currentMode;
        number numbertilde_05_smooth_d_prev;
        number numbertilde_05_smooth_prev;
        number numbertilde_05_smooth_index;
        number numbertilde_05_smooth_increment;
        bool numbertilde_05_setupDone;
        Float64BufferRef cycle_tilde_05_buffer;
        long cycle_tilde_05_wrap;
        uint32_t cycle_tilde_05_phasei;
        SampleValue cycle_tilde_05_f2i;
        number cycle_tilde_05_ph_currentPhase;
        number cycle_tilde_05_ph_conv;
        bool cycle_tilde_05_setupDone;
        number param_02_lastValue;
        SampleIndex numbertilde_06_currentInterval;
        SampleIndex numbertilde_06_currentIntervalInSamples;
        number numbertilde_06_lastValue;
        number numbertilde_06_outValue;
        number numbertilde_06_rampInSamples;
        Int numbertilde_06_currentMode;
        number numbertilde_06_smooth_d_prev;
        number numbertilde_06_smooth_prev;
        number numbertilde_06_smooth_index;
        number numbertilde_06_smooth_increment;
        bool numbertilde_06_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_141* p_01;
        RNBOSubpatcher_142* p_02;
        RNBOSubpatcher_143* p_03;
        RNBOSubpatcher_144* p_04;
        RNBOSubpatcher_145* p_05;
    
};

class RNBOSubpatcher_175 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_147 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_175;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_146 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_147;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_146()
                        {
                        }
                        
                        ~RNBOSubpatcher_146()
                        {
                        }
                        
                        virtual RNBOSubpatcher_147* getPatcher() const {
                            return static_cast<RNBOSubpatcher_147 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                            getEngine()->flushClockEvents(this, -871642103, false);
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return globalrandom() * range + low;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                            RNBO_UNUSED(value);
                            RNBO_UNUSED(hasValue);
                            this->updateTime(time);
                        
                            switch (index) {
                            case -871642103:
                                {
                                this->loadbang_01_startupbang_bang();
                                break;
                                }
                            }
                        }
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/number_obj-14") == objectId)
                                    this->numberobj_05_valin_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/number_obj-6") == objectId)
                                    this->numberobj_06_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/number_obj-14") == objectId)
                                    this->numberobj_05_format_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/number_obj-6") == objectId)
                                    this->numberobj_06_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_10_listin_number_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_11_listin_number_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_12_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_10_listin_list_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_11_listin_list_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_12_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/button_obj-16") == objectId)
                                    this->button_02_bangin_bang();
                        
                                break;
                                }
                            case TAG("startupbang"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/loadbang_obj-197") == objectId)
                                    this->loadbang_01_startupbang_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_10_listin_bang_bang();
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_11_listin_bang_bang();
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_12_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/button_obj-16"):
                                {
                                return "Chords/ChordColl/I_chordVariants/button_obj-16";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/number_obj-14"):
                                {
                                return "Chords/ChordColl/I_chordVariants/number_obj-14";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/message_obj-43"):
                                {
                                return "Chords/ChordColl/I_chordVariants/message_obj-43";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/message_obj-3"):
                                {
                                return "Chords/ChordColl/I_chordVariants/message_obj-3";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/message_obj-8"):
                                {
                                return "Chords/ChordColl/I_chordVariants/message_obj-8";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/number_obj-6"):
                                {
                                return "Chords/ChordColl/I_chordVariants/number_obj-6";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("startupbang"):
                                {
                                return "startupbang";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/loadbang_obj-197"):
                                {
                                return "Chords/ChordColl/I_chordVariants/loadbang_obj-197";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->liststore_01_storage_storageobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 1;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->liststore_01_storage_storage = new Float64Buffer(this->liststore_01_storage_storageobj);
                            }
                        }
                        
                        void initialize() {
                            this->liststore_01_storage_storageobj = initDataRef("liststore_01_storage_storageobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->liststore_01_storage_storageobj->setIndex(6);
                            this->liststore_01_storage_storage = new Float64Buffer(this->liststore_01_storage_storageobj);
                        }
                        
                        protected:
                        
                        void button_02_bangin_bang() {
                            this->button_02_bangval_bang();
                        }
                        
                        void numberobj_05_valin_set(number v) {
                            this->numberobj_05_value_set(v);
                        }
                        
                        void numberobj_05_format_set(number v) {
                            this->numberobj_05_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_11_out1_number_set(number v) {
                            this->trigger_01_input_number_set(v);
                        }
                        
                        void eventinlet_11_out1_list_set(const list& v) {
                            this->trigger_01_input_list_set(v);
                        }
                        
                        void loadbang_01_startupbang_bang() {
                            this->loadbang_01_output_bang();
                        }
                        
                        void message_10_listin_list_set(const list& v) {
                            this->message_10_set_set(v);
                        }
                        
                        void message_10_listin_number_set(number v) {
                            this->message_10_set_set(v);
                        }
                        
                        void message_10_listin_bang_bang() {
                            this->message_10_trigger_bang();
                        }
                        
                        void message_11_listin_list_set(const list& v) {
                            this->message_11_set_set(v);
                        }
                        
                        void message_11_listin_number_set(number v) {
                            this->message_11_set_set(v);
                        }
                        
                        void message_11_listin_bang_bang() {
                            this->message_11_trigger_bang();
                        }
                        
                        void message_12_listin_list_set(const list& v) {
                            this->message_12_set_set(v);
                        }
                        
                        void message_12_listin_number_set(number v) {
                            this->message_12_set_set(v);
                        }
                        
                        void message_12_listin_bang_bang() {
                            this->message_12_trigger_bang();
                        }
                        
                        void numberobj_06_valin_set(number v) {
                            this->numberobj_06_value_set(v);
                        }
                        
                        void numberobj_06_format_set(number v) {
                            this->numberobj_06_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->numberobj_05_init();
                            this->random_01_nz_init();
                            this->liststore_01_storage_init();
                            this->message_10_init();
                            this->message_11_init();
                            this->message_12_init();
                            this->numberobj_06_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
                        }
                        
                        void allocateDataRefs() {
                            this->liststore_01_storage_storage = this->liststore_01_storage_storage->allocateIfNeeded();
                        
                            if (this->liststore_01_storage_storageobj->hasRequestedSize()) {
                                if (this->liststore_01_storage_storageobj->wantsFill())
                                    this->zeroDataRef(this->liststore_01_storage_storageobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        }
                        
                        void liststore_01_storeidx_set(number v) {
                            this->liststore_01_storeidx = v;
                        }
                        
                        void numberobj_06_output_set(number v) {
                            this->liststore_01_storeidx_set(v);
                        }
                        
                        void numberobj_06_value_set(number v) {
                            this->numberobj_06_value_setter(v);
                            v = this->numberobj_06_value;
                            number localvalue = v;
                        
                            if (this->numberobj_06_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Chords/ChordColl/I_chordVariants/number_obj-6"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_06_output_set(localvalue);
                        }
                        
                        void liststore_01_storelist_set(const list& v) {
                            this->liststore_01_storelist = jsCreateListCopy(v);
                            this->liststore_01_storage_store(this->liststore_01_storeidx, v);
                        }
                        
                        void message_10_out_set(const list& v) {
                            this->liststore_01_storelist_set(v);
                        }
                        
                        void message_10_trigger_bang() {
                            this->message_10_out_set(this->message_10_set);
                        }
                        
                        void select_02_match1_bang() {
                            this->message_10_trigger_bang();
                        }
                        
                        void message_11_out_set(const list& v) {
                            this->liststore_01_storelist_set(v);
                        }
                        
                        void message_11_trigger_bang() {
                            this->message_11_out_set(this->message_11_set);
                        }
                        
                        void select_02_match2_bang() {
                            this->message_11_trigger_bang();
                        }
                        
                        void select_02_nomatch_number_set(number ) {}
                        
                        void select_02_input_number_set(number v) {
                            if (v == this->select_02_test1)
                                this->select_02_match1_bang();
                            else if (v == this->select_02_test2)
                                this->select_02_match2_bang();
                            else
                                this->select_02_nomatch_number_set(v);
                        }
                        
                        void uzi_01_index_set(number v) {
                            this->numberobj_06_value_set(v);
                            this->select_02_input_number_set(v);
                        }
                        
                        void uzi_01_out_bang() {}
                        
                        void uzi_01_carry_bang() {}
                        
                        void uzi_01_start_bang_bang() {
                            this->uzi_01_gobang(0);
                        }
                        
                        void loadbang_01_output_bang() {
                            this->uzi_01_start_bang_bang();
                        }
                        
                        void loadbang_01_input_bang() {
                            this->loadbang_01_output_bang();
                        }
                        
                        void trigger_01_out2_bang() {
                            this->loadbang_01_input_bang();
                        }
                        
                        void liststore_01_out3_set(number ) {}
                        
                        void message_12_set_set(const list& v) {
                            this->message_12_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Chords/ChordColl/I_chordVariants/message_obj-8"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventoutlet_02_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_06_out1_list_set((list)v);
                        }
                        
                        void liststore_01_out1_set(const list& v) {
                            this->message_12_set_set(v);
                            this->eventoutlet_02_in1_list_set(v);
                        }
                        
                        void liststore_01_out2_bang() {}
                        
                        void liststore_01_lookupidx_set(number v) {
                            this->liststore_01_lookupidx = v;
                            list val = this->liststore_01_storage_lookup(v);
                            this->liststore_01_out3_set(v);
                        
                            if ((bool)(val->length)) {
                                this->liststore_01_out1_set(this->liststore_01_storage_lookup(v));
                            } else {
                                this->liststore_01_out2_bang();
                            }
                        }
                        
                        void numberobj_05_output_set(number v) {
                            this->liststore_01_lookupidx_set(v);
                        }
                        
                        void numberobj_05_value_set(number v) {
                            this->numberobj_05_value_setter(v);
                            v = this->numberobj_05_value;
                            number localvalue = v;
                        
                            if (this->numberobj_05_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Chords/ChordColl/I_chordVariants/number_obj-14"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_05_output_set(localvalue);
                        }
                        
                        void random_01_result_set(number v) {
                            this->numberobj_05_value_set(v);
                        }
                        
                        void random_01_trigger_bang() {
                            this->random_01_result_set(rnbo_abs(this->random_01_nz_next()) * this->random_01_limit);
                        }
                        
                        void button_02_output_bang() {
                            this->random_01_trigger_bang();
                        }
                        
                        void button_02_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Chords/ChordColl/I_chordVariants/button_obj-16"),
                                this->_currentTime
                            );;
                        
                            this->button_02_output_bang();
                        }
                        
                        void trigger_01_out1_bang() {
                            this->button_02_bangval_bang();
                        }
                        
                        void trigger_01_input_bang_bang() {
                            this->trigger_01_out2_bang();
                            this->trigger_01_out1_bang();
                        }
                        
                        void eventinlet_11_out1_bang_bang() {
                            this->trigger_01_input_bang_bang();
                        }
                        
                        void trigger_01_input_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->trigger_01_out2_bang();
                            this->trigger_01_out1_bang();
                        }
                        
                        void trigger_01_input_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->trigger_01_out2_bang();
                            this->trigger_01_out1_bang();
                        }
                        
                        void message_10_set_set(const list& v) {
                            this->message_10_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Chords/ChordColl/I_chordVariants/message_obj-43"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_11_set_set(const list& v) {
                            this->message_11_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Chords/ChordColl/I_chordVariants/message_obj-3"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_12_out_set(const list& ) {}
                        
                        void message_12_trigger_bang() {
                            this->message_12_out_set(this->message_12_set);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_05_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_05_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_05_value = localvalue;
                        }
                        
                        void random_01_limit_setter(number v) {
                            if (v >= 0)
                                this->random_01_limit = v;
                        }
                        
                        void numberobj_06_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_06_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_06_value = localvalue;
                        }
                        
                        void numberobj_05_init() {
                            this->numberobj_05_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Chords/ChordColl/I_chordVariants/number_obj-14"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_05_value;
                        }
                        
                        void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_05_value_set(preset["value"]);
                        }
                        
                        void random_01_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_01_nz_state
                            );
                        }
                        
                        void random_01_nz_init() {
                            this->random_01_nz_reset();
                        }
                        
                        void random_01_nz_seed(number v) {
                            xoshiro_reset(v, this->random_01_nz_state);
                        }
                        
                        number random_01_nz_next() {
                            return xoshiro_next(this->random_01_nz_state);
                        }
                        
                        list liststore_01_storage_next(number index) {
                            return this->liststore_01_storage_lookup(index);
                        }
                        
                        list liststore_01_storage_lookup(number index) {
                            list tmp1 = {};
                            int64_t idx = (int64_t)(index);
                        
                            if (index >= 0 && index < this->liststore_01_storage__slotcount) {
                                number entrylength = this->liststore_01_storage_storage[(Index)(idx * this->liststore_01_storage__entrysize)];
                        
                                if (entrylength > 0) {
                                    for (number i = 0; i < entrylength; i++) {
                                        tmp1->push(
                                            this->liststore_01_storage_storage[(Index)(idx * this->liststore_01_storage__entrysize + i + 1)]
                                        );
                                    }
                                }
                            }
                        
                            return tmp1;
                        }
                        
                        void liststore_01_storage_store(number index, list value) {
                            int64_t idx = (int64_t)(index);
                        
                            if (index >= 0 && index < this->liststore_01_storage__slotcount) {
                                number entrylength = value->length;
                                this->liststore_01_storage_storage[(Index)(idx * this->liststore_01_storage__entrysize)] = entrylength;
                        
                                if (entrylength > 0) {
                                    for (number i = 0; i < entrylength; i++) {
                                        this->liststore_01_storage_storage[(Index)(idx * this->liststore_01_storage__entrysize + i + 1)] = value[(Index)i];
                                    }
                                }
                            }
                        }
                        
                        void liststore_01_storage_init() {
                            this->liststore_01_storage__entrysize = 4 + 1;
                            this->liststore_01_storage__slotcount = 2;
                            int64_t storagesize = (int64_t)(2 * this->liststore_01_storage__entrysize);
                            this->liststore_01_storage_storage->requestSize((Index)(storagesize), 1);
                        }
                        
                        void liststore_01_storage_clear() {
                            this->liststore_01_storage_storage->setZero();
                        }
                        
                        void liststore_01_storage_reset() {
                            this->liststore_01_storage_init();
                            this->liststore_01_storage_clear();
                        }
                        
                        void uzi_01_gobang(number start) {
                            this->uzi_01_doPause = 0;
                            this->uzi_01_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_01_count; i++) {
                                if ((bool)(this->uzi_01_doPause)) {
                                    this->uzi_01_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_01_index_set(i + this->uzi_01_base);
                                    this->uzi_01_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_01_carry_bang();
                        }
                        
                        void message_10_init() {
                            this->message_10_set_set({48, 55, 64, 59});
                        }
                        
                        void message_11_init() {
                            this->message_11_set_set({48, 55, 64, 69});
                        }
                        
                        void message_12_init() {
                            this->message_12_set_set({48, 55, 64, 69});
                        }
                        
                        void numberobj_06_init() {
                            this->numberobj_06_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Chords/ChordColl/I_chordVariants/number_obj-6"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_06_value;
                        }
                        
                        void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_06_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            numberobj_05_value = 0;
                            numberobj_05_value_setter(numberobj_05_value);
                            random_01_limit = 2;
                            random_01_limit_setter(random_01_limit);
                            random_01_seed = 0;
                            liststore_01_lookupidx = 0;
                            liststore_01_storeidx = 0;
                            uzi_01_start_number = 0;
                            uzi_01_count = 2;
                            uzi_01_base = 0;
                            select_02_test1 = 0;
                            select_02_test2 = 1;
                            numberobj_06_value = 0;
                            numberobj_06_value_setter(numberobj_06_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_05_currentFormat = 6;
                            numberobj_05_lastValue = 0;
                            liststore_01_storage__slotcount = 1024;
                            liststore_01_storage__entrysize = 65;
                            uzi_01_doPause = 0;
                            uzi_01_pausecount = 0;
                            numberobj_06_currentFormat = 6;
                            numberobj_06_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number numberobj_05_value;
                            number random_01_limit;
                            number random_01_seed;
                            number liststore_01_lookupidx;
                            list liststore_01_storelist;
                            number liststore_01_storeidx;
                            number uzi_01_start_number;
                            number uzi_01_count;
                            number uzi_01_base;
                            number select_02_test1;
                            number select_02_test2;
                            list message_10_set;
                            list message_11_set;
                            list message_12_set;
                            number numberobj_06_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_05_currentFormat;
                            number numberobj_05_lastValue;
                            UInt random_01_nz_state[4] = { };
                            Float64BufferRef liststore_01_storage_storage;
                            number liststore_01_storage__slotcount;
                            number liststore_01_storage__entrysize;
                            number uzi_01_doPause;
                            long uzi_01_pausecount;
                            Int numberobj_06_currentFormat;
                            number numberobj_06_lastValue;
                            number stackprotect_count;
                            DataRef liststore_01_storage_storageobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_147()
            {
            }
            
            ~RNBOSubpatcher_147()
            {
                delete this->p_06;
            }
            
            virtual RNBOSubpatcher_175* getPatcher() const {
                return static_cast<RNBOSubpatcher_175 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 1964277200, false);
                getEngine()->flushClockEvents(this, 1592269969, false);
                getEngine()->flushClockEvents(this, -871642103, false);
                getEngine()->flushClockEvents(this, 1220262738, false);
                getEngine()->flushClockEvents(this, 848255507, false);
                getEngine()->flushClockEvents(this, -1735137014, false);
            }
            
            MillisecondTime currenttime() {
                return this->_currentTime;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_06_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_06 = new RNBOSubpatcher_146();
                this->p_06->setEngineAndPatcher(this->getEngine(), this);
                this->p_06->initialize();
                this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "I_chordVariants"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        this->p_06->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_06->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_06->getNumParameters())
                            this->p_06->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_06)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 1964277200:
                    {
                    this->line_01_tick_set(value);
                    break;
                    }
                case 1592269969:
                    {
                    this->line_02_tick_set(value);
                    break;
                    }
                case -871642103:
                    {
                    this->loadbang_02_startupbang_bang();
                    break;
                    }
                case 1220262738:
                    {
                    this->line_03_tick_set(value);
                    break;
                    }
                case 848255507:
                    {
                    this->line_04_tick_set(value);
                    break;
                    }
                case -1735137014:
                    {
                    this->loadbang_03_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Chords/ChordColl/message_obj-16") == objectId)
                        this->message_13_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-80") == objectId)
                        this->message_14_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-85") == objectId)
                        this->message_15_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-108") == objectId)
                        this->message_16_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-24") == objectId)
                        this->message_17_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-107") == objectId)
                        this->message_18_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-110") == objectId)
                        this->message_19_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-109") == objectId)
                        this->message_20_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-203") == objectId)
                        this->message_21_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-46") == objectId)
                        this->message_22_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-45") == objectId)
                        this->message_23_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-66") == objectId)
                        this->message_24_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-65") == objectId)
                        this->message_25_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-201") == objectId)
                        this->message_26_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-71") == objectId)
                        this->message_27_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-77") == objectId)
                        this->message_28_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-75") == objectId)
                        this->message_29_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-91") == objectId)
                        this->message_30_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-93") == objectId)
                        this->message_31_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-92") == objectId)
                        this->message_32_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-81") == objectId)
                        this->message_33_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-79") == objectId)
                        this->message_34_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-78") == objectId)
                        this->message_35_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-119") == objectId)
                        this->message_36_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("Chords/ChordColl/number_obj-62") == objectId)
                        this->numberobj_07_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-61") == objectId)
                        this->numberobj_08_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-60") == objectId)
                        this->numberobj_09_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-100") == objectId)
                        this->numberobj_10_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-112") == objectId)
                        this->numberobj_11_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-55") == objectId)
                        this->numberobj_12_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-111") == objectId)
                        this->numberobj_13_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-114") == objectId)
                        this->numberobj_14_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-113") == objectId)
                        this->numberobj_15_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-44") == objectId)
                        this->numberobj_16_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-28") == objectId)
                        this->numberobj_17_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-32") == objectId)
                        this->numberobj_18_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Chords/ChordColl/number_obj-62") == objectId)
                        this->numberobj_07_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-61") == objectId)
                        this->numberobj_08_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-60") == objectId)
                        this->numberobj_09_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-100") == objectId)
                        this->numberobj_10_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-112") == objectId)
                        this->numberobj_11_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-55") == objectId)
                        this->numberobj_12_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-111") == objectId)
                        this->numberobj_13_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-114") == objectId)
                        this->numberobj_14_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-113") == objectId)
                        this->numberobj_15_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-44") == objectId)
                        this->numberobj_16_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-28") == objectId)
                        this->numberobj_17_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-32") == objectId)
                        this->numberobj_18_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_06->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Chords/ChordColl/message_obj-16") == objectId)
                        this->message_13_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-80") == objectId)
                        this->message_14_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-85") == objectId)
                        this->message_15_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-108") == objectId)
                        this->message_16_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-24") == objectId)
                        this->message_17_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-107") == objectId)
                        this->message_18_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-110") == objectId)
                        this->message_19_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-109") == objectId)
                        this->message_20_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-203") == objectId)
                        this->message_21_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-46") == objectId)
                        this->message_22_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-45") == objectId)
                        this->message_23_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-66") == objectId)
                        this->message_24_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-65") == objectId)
                        this->message_25_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-201") == objectId)
                        this->message_26_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-71") == objectId)
                        this->message_27_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-77") == objectId)
                        this->message_28_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-75") == objectId)
                        this->message_29_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-91") == objectId)
                        this->message_30_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-93") == objectId)
                        this->message_31_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-92") == objectId)
                        this->message_32_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-81") == objectId)
                        this->message_33_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-79") == objectId)
                        this->message_34_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-78") == objectId)
                        this->message_35_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-119") == objectId)
                        this->message_36_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_06->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Chords/ChordColl/message_obj-16") == objectId)
                        this->message_13_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-80") == objectId)
                        this->message_14_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-85") == objectId)
                        this->message_15_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-108") == objectId)
                        this->message_16_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-24") == objectId)
                        this->message_17_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-107") == objectId)
                        this->message_18_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-110") == objectId)
                        this->message_19_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-109") == objectId)
                        this->message_20_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-203") == objectId)
                        this->message_21_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-46") == objectId)
                        this->message_22_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-45") == objectId)
                        this->message_23_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-66") == objectId)
                        this->message_24_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-65") == objectId)
                        this->message_25_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-201") == objectId)
                        this->message_26_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-71") == objectId)
                        this->message_27_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-77") == objectId)
                        this->message_28_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-75") == objectId)
                        this->message_29_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-91") == objectId)
                        this->message_30_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-93") == objectId)
                        this->message_31_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-92") == objectId)
                        this->message_32_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-81") == objectId)
                        this->message_33_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-79") == objectId)
                        this->message_34_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-78") == objectId)
                        this->message_35_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-119") == objectId)
                        this->message_36_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("Chords/ChordColl/button_obj-35") == objectId)
                        this->button_03_bangin_bang();
            
                    if (TAG("Chords/ChordColl/button_obj-27") == objectId)
                        this->button_04_bangin_bang();
            
                    if (TAG("Chords/ChordColl/button_obj-29") == objectId)
                        this->button_05_bangin_bang();
            
                    if (TAG("Chords/ChordColl/button_obj-8") == objectId)
                        this->button_06_bangin_bang();
            
                    if (TAG("Chords/ChordColl/button_obj-186") == objectId)
                        this->button_07_bangin_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("Chords/ChordColl/loadbang_obj-6") == objectId)
                        this->loadbang_02_startupbang_bang();
            
                    if (TAG("Chords/ChordColl/loadbang_obj-197") == objectId)
                        this->loadbang_03_startupbang_bang();
            
                    break;
                    }
                }
            
                this->p_06->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Chords/ChordColl/message_obj-16"):
                    {
                    return "Chords/ChordColl/message_obj-16";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Chords/ChordColl/number_obj-62"):
                    {
                    return "Chords/ChordColl/number_obj-62";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Chords/ChordColl/number_obj-61"):
                    {
                    return "Chords/ChordColl/number_obj-61";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Chords/ChordColl/button_obj-35"):
                    {
                    return "Chords/ChordColl/button_obj-35";
                    }
                case TAG("Chords/ChordColl/message_obj-80"):
                    {
                    return "Chords/ChordColl/message_obj-80";
                    }
                case TAG("Chords/ChordColl/button_obj-27"):
                    {
                    return "Chords/ChordColl/button_obj-27";
                    }
                case TAG("Chords/ChordColl/number_obj-60"):
                    {
                    return "Chords/ChordColl/number_obj-60";
                    }
                case TAG("Chords/ChordColl/number_obj-100"):
                    {
                    return "Chords/ChordColl/number_obj-100";
                    }
                case TAG("Chords/ChordColl/message_obj-85"):
                    {
                    return "Chords/ChordColl/message_obj-85";
                    }
                case TAG("Chords/ChordColl/number_obj-112"):
                    {
                    return "Chords/ChordColl/number_obj-112";
                    }
                case TAG("Chords/ChordColl/message_obj-108"):
                    {
                    return "Chords/ChordColl/message_obj-108";
                    }
                case TAG("Chords/ChordColl/message_obj-24"):
                    {
                    return "Chords/ChordColl/message_obj-24";
                    }
                case TAG("Chords/ChordColl/button_obj-29"):
                    {
                    return "Chords/ChordColl/button_obj-29";
                    }
                case TAG("Chords/ChordColl/number_obj-55"):
                    {
                    return "Chords/ChordColl/number_obj-55";
                    }
                case TAG("Chords/ChordColl/number_obj-111"):
                    {
                    return "Chords/ChordColl/number_obj-111";
                    }
                case TAG("Chords/ChordColl/message_obj-107"):
                    {
                    return "Chords/ChordColl/message_obj-107";
                    }
                case TAG("Chords/ChordColl/button_obj-8"):
                    {
                    return "Chords/ChordColl/button_obj-8";
                    }
                case TAG("Chords/ChordColl/number_obj-114"):
                    {
                    return "Chords/ChordColl/number_obj-114";
                    }
                case TAG("Chords/ChordColl/message_obj-110"):
                    {
                    return "Chords/ChordColl/message_obj-110";
                    }
                case TAG("Chords/ChordColl/number_obj-113"):
                    {
                    return "Chords/ChordColl/number_obj-113";
                    }
                case TAG("Chords/ChordColl/message_obj-109"):
                    {
                    return "Chords/ChordColl/message_obj-109";
                    }
                case TAG("Chords/ChordColl/number_obj-44"):
                    {
                    return "Chords/ChordColl/number_obj-44";
                    }
                case TAG("Chords/ChordColl/message_obj-203"):
                    {
                    return "Chords/ChordColl/message_obj-203";
                    }
                case TAG("Chords/ChordColl/message_obj-46"):
                    {
                    return "Chords/ChordColl/message_obj-46";
                    }
                case TAG("Chords/ChordColl/number_obj-28"):
                    {
                    return "Chords/ChordColl/number_obj-28";
                    }
                case TAG("Chords/ChordColl/message_obj-45"):
                    {
                    return "Chords/ChordColl/message_obj-45";
                    }
                case TAG("Chords/ChordColl/button_obj-186"):
                    {
                    return "Chords/ChordColl/button_obj-186";
                    }
                case TAG("Chords/ChordColl/message_obj-66"):
                    {
                    return "Chords/ChordColl/message_obj-66";
                    }
                case TAG("Chords/ChordColl/message_obj-65"):
                    {
                    return "Chords/ChordColl/message_obj-65";
                    }
                case TAG("Chords/ChordColl/message_obj-201"):
                    {
                    return "Chords/ChordColl/message_obj-201";
                    }
                case TAG("Chords/ChordColl/message_obj-71"):
                    {
                    return "Chords/ChordColl/message_obj-71";
                    }
                case TAG("Chords/ChordColl/number_obj-32"):
                    {
                    return "Chords/ChordColl/number_obj-32";
                    }
                case TAG("Chords/ChordColl/message_obj-77"):
                    {
                    return "Chords/ChordColl/message_obj-77";
                    }
                case TAG("Chords/ChordColl/message_obj-75"):
                    {
                    return "Chords/ChordColl/message_obj-75";
                    }
                case TAG("Chords/ChordColl/message_obj-91"):
                    {
                    return "Chords/ChordColl/message_obj-91";
                    }
                case TAG("Chords/ChordColl/message_obj-93"):
                    {
                    return "Chords/ChordColl/message_obj-93";
                    }
                case TAG("Chords/ChordColl/message_obj-92"):
                    {
                    return "Chords/ChordColl/message_obj-92";
                    }
                case TAG("Chords/ChordColl/message_obj-81"):
                    {
                    return "Chords/ChordColl/message_obj-81";
                    }
                case TAG("Chords/ChordColl/message_obj-79"):
                    {
                    return "Chords/ChordColl/message_obj-79";
                    }
                case TAG("Chords/ChordColl/message_obj-78"):
                    {
                    return "Chords/ChordColl/message_obj-78";
                    }
                case TAG("Chords/ChordColl/message_obj-119"):
                    {
                    return "Chords/ChordColl/message_obj-119";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("Chords/ChordColl/loadbang_obj-6"):
                    {
                    return "Chords/ChordColl/loadbang_obj-6";
                    }
                case TAG("Chords/ChordColl/loadbang_obj-197"):
                    {
                    return "Chords/ChordColl/loadbang_obj-197";
                    }
                }
            
                auto subpatchResult_0 = this->p_06->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 3:
                    {
                    return addressOf(this->liststore_02_storage_storageobj);
                    break;
                    }
                case 4:
                    {
                    return addressOf(this->liststore_03_storage_storageobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->liststore_04_storage_storageobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 3;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 3) {
                    this->liststore_02_storage_storage = new Float64Buffer(this->liststore_02_storage_storageobj);
                }
            
                if (index == 4) {
                    this->liststore_03_storage_storage = new Float64Buffer(this->liststore_03_storage_storageobj);
                }
            
                if (index == 5) {
                    this->liststore_04_storage_storage = new Float64Buffer(this->liststore_04_storage_storageobj);
                }
            
                this->p_06->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->liststore_02_storage_storageobj = initDataRef("liststore_02_storage_storageobj", true, nullptr, "buffer~");
                this->liststore_03_storage_storageobj = initDataRef("liststore_03_storage_storageobj", true, nullptr, "buffer~");
                this->liststore_04_storage_storageobj = initDataRef("liststore_04_storage_storageobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->liststore_02_storage_storageobj->setIndex(3);
                this->liststore_02_storage_storage = new Float64Buffer(this->liststore_02_storage_storageobj);
                this->liststore_03_storage_storageobj->setIndex(4);
                this->liststore_03_storage_storage = new Float64Buffer(this->liststore_03_storage_storageobj);
                this->liststore_04_storage_storageobj->setIndex(5);
                this->liststore_04_storage_storage = new Float64Buffer(this->liststore_04_storage_storageobj);
            }
            
            protected:
            
            void message_13_listin_list_set(const list& v) {
                this->message_13_set_set(v);
            }
            
            void message_13_listin_number_set(number v) {
                this->message_13_set_set(v);
            }
            
            void message_13_listin_bang_bang() {
                this->message_13_trigger_bang();
            }
            
            void numberobj_07_valin_set(number v) {
                this->numberobj_07_value_set(v);
            }
            
            void numberobj_07_format_set(number v) {
                this->numberobj_07_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_12_out1_bang_bang() {
                this->trigger_02_input_bang_bang();
            }
            
            void eventinlet_12_out1_list_set(const list& v) {
                this->trigger_02_input_list_set(v);
            }
            
            void numberobj_08_valin_set(number v) {
                this->numberobj_08_value_set(v);
            }
            
            void numberobj_08_format_set(number v) {
                this->numberobj_08_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void line_01_tick_set(number v) {
                this->line_01_output_set(v);
            
                if ((bool)(this->line_01_isFinished(v))) {
                    this->line_01_slope = 0;
                    this->line_01_startValue = v;
                    this->line_01_startPendingRamp();
                } else {
                    this->line_01_scheduleNext();
                }
            }
            
            void button_03_bangin_bang() {
                this->button_03_bangval_bang();
            }
            
            void message_14_listin_list_set(const list& v) {
                this->message_14_set_set(v);
            }
            
            void message_14_listin_number_set(number v) {
                this->message_14_set_set(v);
            }
            
            void message_14_listin_bang_bang() {
                this->message_14_trigger_bang();
            }
            
            void button_04_bangin_bang() {
                this->button_04_bangval_bang();
            }
            
            void numberobj_09_valin_set(number v) {
                this->numberobj_09_value_set(v);
            }
            
            void numberobj_09_format_set(number v) {
                this->numberobj_09_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_10_valin_set(number v) {
                this->numberobj_10_value_set(v);
            }
            
            void numberobj_10_format_set(number v) {
                this->numberobj_10_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_15_listin_list_set(const list& v) {
                this->message_15_set_set(v);
            }
            
            void message_15_listin_number_set(number v) {
                this->message_15_set_set(v);
            }
            
            void message_15_listin_bang_bang() {
                this->message_15_trigger_bang();
            }
            
            void numberobj_11_valin_set(number v) {
                this->numberobj_11_value_set(v);
            }
            
            void numberobj_11_format_set(number v) {
                this->numberobj_11_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void line_02_tick_set(number v) {
                this->line_02_output_set(v);
            
                if ((bool)(this->line_02_isFinished(v))) {
                    this->line_02_slope = 0;
                    this->line_02_startValue = v;
                    this->line_02_startPendingRamp();
                } else {
                    this->line_02_scheduleNext();
                }
            }
            
            void message_16_listin_list_set(const list& v) {
                this->message_16_set_set(v);
            }
            
            void message_16_listin_number_set(number v) {
                this->message_16_set_set(v);
            }
            
            void message_16_listin_bang_bang() {
                this->message_16_trigger_bang();
            }
            
            void message_17_listin_list_set(const list& v) {
                this->message_17_set_set(v);
            }
            
            void message_17_listin_number_set(number v) {
                this->message_17_set_set(v);
            }
            
            void message_17_listin_bang_bang() {
                this->message_17_trigger_bang();
            }
            
            void button_05_bangin_bang() {
                this->button_05_bangval_bang();
            }
            
            void numberobj_12_valin_set(number v) {
                this->numberobj_12_value_set(v);
            }
            
            void numberobj_12_format_set(number v) {
                this->numberobj_12_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_13_valin_set(number v) {
                this->numberobj_13_value_set(v);
            }
            
            void numberobj_13_format_set(number v) {
                this->numberobj_13_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_18_listin_list_set(const list& v) {
                this->message_18_set_set(v);
            }
            
            void message_18_listin_number_set(number v) {
                this->message_18_set_set(v);
            }
            
            void message_18_listin_bang_bang() {
                this->message_18_trigger_bang();
            }
            
            void loadbang_02_startupbang_bang() {
                this->loadbang_02_output_bang();
            }
            
            void button_06_bangin_bang() {
                this->button_06_bangval_bang();
            }
            
            void line_03_tick_set(number v) {
                this->line_03_output_set(v);
            
                if ((bool)(this->line_03_isFinished(v))) {
                    this->line_03_slope = 0;
                    this->line_03_startValue = v;
                    this->line_03_startPendingRamp();
                } else {
                    this->line_03_scheduleNext();
                }
            }
            
            void numberobj_14_valin_set(number v) {
                this->numberobj_14_value_set(v);
            }
            
            void numberobj_14_format_set(number v) {
                this->numberobj_14_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_19_listin_list_set(const list& v) {
                this->message_19_set_set(v);
            }
            
            void message_19_listin_number_set(number v) {
                this->message_19_set_set(v);
            }
            
            void message_19_listin_bang_bang() {
                this->message_19_trigger_bang();
            }
            
            void numberobj_15_valin_set(number v) {
                this->numberobj_15_value_set(v);
            }
            
            void numberobj_15_format_set(number v) {
                this->numberobj_15_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_20_listin_list_set(const list& v) {
                this->message_20_set_set(v);
            }
            
            void message_20_listin_number_set(number v) {
                this->message_20_set_set(v);
            }
            
            void message_20_listin_bang_bang() {
                this->message_20_trigger_bang();
            }
            
            void numberobj_16_valin_set(number v) {
                this->numberobj_16_value_set(v);
            }
            
            void numberobj_16_format_set(number v) {
                this->numberobj_16_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void line_04_tick_set(number v) {
                this->line_04_output_set(v);
            
                if ((bool)(this->line_04_isFinished(v))) {
                    this->line_04_slope = 0;
                    this->line_04_startValue = v;
                    this->line_04_startPendingRamp();
                } else {
                    this->line_04_scheduleNext();
                }
            }
            
            void message_21_listin_list_set(const list& v) {
                this->message_21_set_set(v);
            }
            
            void message_21_listin_number_set(number v) {
                this->message_21_set_set(v);
            }
            
            void message_21_listin_bang_bang() {
                this->message_21_trigger_bang();
            }
            
            void message_22_listin_list_set(const list& v) {
                this->message_22_set_set(v);
            }
            
            void message_22_listin_number_set(number v) {
                this->message_22_set_set(v);
            }
            
            void message_22_listin_bang_bang() {
                this->message_22_trigger_bang();
            }
            
            void numberobj_17_valin_set(number v) {
                this->numberobj_17_value_set(v);
            }
            
            void numberobj_17_format_set(number v) {
                this->numberobj_17_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_23_listin_list_set(const list& v) {
                this->message_23_set_set(v);
            }
            
            void message_23_listin_number_set(number v) {
                this->message_23_set_set(v);
            }
            
            void message_23_listin_bang_bang() {
                this->message_23_trigger_bang();
            }
            
            void loadbang_03_startupbang_bang() {
                this->loadbang_03_output_bang();
            }
            
            void button_07_bangin_bang() {
                this->button_07_bangval_bang();
            }
            
            void message_24_listin_list_set(const list& v) {
                this->message_24_set_set(v);
            }
            
            void message_24_listin_number_set(number v) {
                this->message_24_set_set(v);
            }
            
            void message_24_listin_bang_bang() {
                this->message_24_trigger_bang();
            }
            
            void message_25_listin_list_set(const list& v) {
                this->message_25_set_set(v);
            }
            
            void message_25_listin_number_set(number v) {
                this->message_25_set_set(v);
            }
            
            void message_25_listin_bang_bang() {
                this->message_25_trigger_bang();
            }
            
            void message_26_listin_list_set(const list& v) {
                this->message_26_set_set(v);
            }
            
            void message_26_listin_number_set(number v) {
                this->message_26_set_set(v);
            }
            
            void message_26_listin_bang_bang() {
                this->message_26_trigger_bang();
            }
            
            void message_27_listin_list_set(const list& v) {
                this->message_27_set_set(v);
            }
            
            void message_27_listin_number_set(number v) {
                this->message_27_set_set(v);
            }
            
            void message_27_listin_bang_bang() {
                this->message_27_trigger_bang();
            }
            
            void numberobj_18_valin_set(number v) {
                this->numberobj_18_value_set(v);
            }
            
            void numberobj_18_format_set(number v) {
                this->numberobj_18_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_28_listin_list_set(const list& v) {
                this->message_28_set_set(v);
            }
            
            void message_28_listin_number_set(number v) {
                this->message_28_set_set(v);
            }
            
            void message_28_listin_bang_bang() {
                this->message_28_trigger_bang();
            }
            
            void message_29_listin_list_set(const list& v) {
                this->message_29_set_set(v);
            }
            
            void message_29_listin_number_set(number v) {
                this->message_29_set_set(v);
            }
            
            void message_29_listin_bang_bang() {
                this->message_29_trigger_bang();
            }
            
            void message_30_listin_list_set(const list& v) {
                this->message_30_set_set(v);
            }
            
            void message_30_listin_number_set(number v) {
                this->message_30_set_set(v);
            }
            
            void message_30_listin_bang_bang() {
                this->message_30_trigger_bang();
            }
            
            void message_31_listin_list_set(const list& v) {
                this->message_31_set_set(v);
            }
            
            void message_31_listin_number_set(number v) {
                this->message_31_set_set(v);
            }
            
            void message_31_listin_bang_bang() {
                this->message_31_trigger_bang();
            }
            
            void message_32_listin_list_set(const list& v) {
                this->message_32_set_set(v);
            }
            
            void message_32_listin_number_set(number v) {
                this->message_32_set_set(v);
            }
            
            void message_32_listin_bang_bang() {
                this->message_32_trigger_bang();
            }
            
            void message_33_listin_list_set(const list& v) {
                this->message_33_set_set(v);
            }
            
            void message_33_listin_number_set(number v) {
                this->message_33_set_set(v);
            }
            
            void message_33_listin_bang_bang() {
                this->message_33_trigger_bang();
            }
            
            void message_34_listin_list_set(const list& v) {
                this->message_34_set_set(v);
            }
            
            void message_34_listin_number_set(number v) {
                this->message_34_set_set(v);
            }
            
            void message_34_listin_bang_bang() {
                this->message_34_trigger_bang();
            }
            
            void message_35_listin_list_set(const list& v) {
                this->message_35_set_set(v);
            }
            
            void message_35_listin_number_set(number v) {
                this->message_35_set_set(v);
            }
            
            void message_35_listin_bang_bang() {
                this->message_35_trigger_bang();
            }
            
            void message_36_listin_list_set(const list& v) {
                this->message_36_set_set(v);
            }
            
            void message_36_listin_number_set(number v) {
                this->message_36_set_set(v);
            }
            
            void message_36_listin_bang_bang() {
                this->message_36_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_13_init();
                this->liststore_02_storage_init();
                this->numberobj_07_init();
                this->numberobj_08_init();
                this->liststore_03_storage_init();
                this->message_14_init();
                this->numberobj_09_init();
                this->numberobj_10_init();
                this->message_15_init();
                this->numberobj_11_init();
                this->message_16_init();
                this->liststore_04_storage_init();
                this->message_17_init();
                this->numberobj_12_init();
                this->numberobj_13_init();
                this->message_18_init();
                this->numberobj_14_init();
                this->message_19_init();
                this->numberobj_15_init();
                this->change_01_init();
                this->message_20_init();
                this->numberobj_16_init();
                this->message_21_init();
                this->message_22_init();
                this->numberobj_17_init();
                this->message_23_init();
                this->message_24_init();
                this->message_25_init();
                this->message_26_init();
                this->message_27_init();
                this->numberobj_18_init();
                this->message_28_init();
                this->message_29_init();
                this->message_30_init();
                this->message_31_init();
                this->message_32_init();
                this->message_33_init();
                this->message_34_init();
                this->message_35_init();
                this->message_36_init();
                this->p_06->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_06->startup();
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
                this->getEngine()->scheduleClockEvent(this, -1735137014, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->p_06->allocateDataRefs();
                this->liststore_02_storage_storage = this->liststore_02_storage_storage->allocateIfNeeded();
            
                if (this->liststore_02_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_02_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_02_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(3);
                }
            
                this->liststore_03_storage_storage = this->liststore_03_storage_storage->allocateIfNeeded();
            
                if (this->liststore_03_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_03_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_03_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->liststore_04_storage_storage = this->liststore_04_storage_storage->allocateIfNeeded();
            
                if (this->liststore_04_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_04_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_04_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            }
            
            void liststore_03_storeidx_set(number v) {
                this->liststore_03_storeidx = v;
            }
            
            void numberobj_18_output_set(number v) {
                this->liststore_03_storeidx_set(v);
            }
            
            void numberobj_18_value_set(number v) {
                this->numberobj_18_value_setter(v);
                v = this->numberobj_18_value;
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-32"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_18_output_set(localvalue);
            }
            
            void liststore_03_storelist_set(const list& v) {
                this->liststore_03_storelist = jsCreateListCopy(v);
                this->liststore_03_storage_store(this->liststore_03_storeidx, v);
            }
            
            void p_06_out1_list_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void p_06_in1_bang_bang() {
                this->p_06->updateTime(this->_currentTime);
                this->p_06->eventinlet_11_out1_bang_bang();
            }
            
            void select_04_match1_bang() {
                this->p_06_in1_bang_bang();
            }
            
            void message_24_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_24_trigger_bang() {
                this->message_24_out_set(this->message_24_set);
            }
            
            void select_04_match2_bang() {
                this->message_24_trigger_bang();
            }
            
            void message_25_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_25_trigger_bang() {
                this->message_25_out_set(this->message_25_set);
            }
            
            void select_04_match3_bang() {
                this->message_25_trigger_bang();
            }
            
            void message_27_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_27_trigger_bang() {
                this->message_27_out_set(this->message_27_set);
            }
            
            void select_04_match4_bang() {
                this->message_27_trigger_bang();
            }
            
            void message_28_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_28_trigger_bang() {
                this->message_28_out_set(this->message_28_set);
            }
            
            void select_04_match5_bang() {
                this->message_28_trigger_bang();
            }
            
            void message_29_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_29_trigger_bang() {
                this->message_29_out_set(this->message_29_set);
            }
            
            void select_04_match6_bang() {
                this->message_29_trigger_bang();
            }
            
            void message_30_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_30_trigger_bang() {
                this->message_30_out_set(this->message_30_set);
            }
            
            void select_04_match7_bang() {
                this->message_30_trigger_bang();
            }
            
            void message_31_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_31_trigger_bang() {
                this->message_31_out_set(this->message_31_set);
            }
            
            void select_04_match8_bang() {
                this->message_31_trigger_bang();
            }
            
            void message_32_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_32_trigger_bang() {
                this->message_32_out_set(this->message_32_set);
            }
            
            void select_04_match9_bang() {
                this->message_32_trigger_bang();
            }
            
            void message_33_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_33_trigger_bang() {
                this->message_33_out_set(this->message_33_set);
            }
            
            void select_04_match10_bang() {
                this->message_33_trigger_bang();
            }
            
            void message_34_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_34_trigger_bang() {
                this->message_34_out_set(this->message_34_set);
            }
            
            void select_04_match11_bang() {
                this->message_34_trigger_bang();
            }
            
            void message_35_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_35_trigger_bang() {
                this->message_35_out_set(this->message_35_set);
            }
            
            void select_04_match12_bang() {
                this->message_35_trigger_bang();
            }
            
            void message_36_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_36_trigger_bang() {
                this->message_36_out_set(this->message_36_set);
            }
            
            void select_04_match13_bang() {
                this->message_36_trigger_bang();
            }
            
            void select_04_nomatch_number_set(number ) {}
            
            void select_04_input_number_set(number v) {
                if (v == this->select_04_test1)
                    this->select_04_match1_bang();
                else if (v == this->select_04_test2)
                    this->select_04_match2_bang();
                else if (v == this->select_04_test3)
                    this->select_04_match3_bang();
                else if (v == this->select_04_test4)
                    this->select_04_match4_bang();
                else if (v == this->select_04_test5)
                    this->select_04_match5_bang();
                else if (v == this->select_04_test6)
                    this->select_04_match6_bang();
                else if (v == this->select_04_test7)
                    this->select_04_match7_bang();
                else if (v == this->select_04_test8)
                    this->select_04_match8_bang();
                else if (v == this->select_04_test9)
                    this->select_04_match9_bang();
                else if (v == this->select_04_test10)
                    this->select_04_match10_bang();
                else if (v == this->select_04_test11)
                    this->select_04_match11_bang();
                else if (v == this->select_04_test12)
                    this->select_04_match12_bang();
                else if (v == this->select_04_test13)
                    this->select_04_match13_bang();
                else
                    this->select_04_nomatch_number_set(v);
            }
            
            void uzi_03_index_set(number v) {
                this->numberobj_18_value_set(v);
                this->select_04_input_number_set(v);
            }
            
            void uzi_03_out_bang() {}
            
            void uzi_03_carry_bang() {}
            
            void uzi_03_start_bang_bang() {
                this->uzi_03_gobang(0);
            }
            
            void loadbang_03_output_bang() {
                this->uzi_03_start_bang_bang();
            }
            
            void loadbang_03_input_bang() {
                this->loadbang_03_output_bang();
            }
            
            void button_07_output_bang() {
                this->loadbang_03_input_bang();
            }
            
            void button_07_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-186"), this->_currentTime);;
                this->button_07_output_bang();
            }
            
            void trigger_02_out2_bang() {
                this->button_07_bangval_bang();
            }
            
            void message_21_set_set(const list& v) {
                this->message_21_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-203"),
                    v,
                    this->_currentTime
                );
            }
            
            void change_01_zero_set(number ) {}
            
            void change_01_nonzero_set(number ) {}
            
            void eventoutlet_06_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out5_number_set(v);
            }
            
            void change_01_out_set(number v) {
                this->change_01_out = v;
                this->eventoutlet_06_in1_number_set(v);
            }
            
            void change_01_input_set(number v) {
                this->change_01_input = v;
            
                if (v != this->change_01_prev) {
                    number prev = this->change_01_prev;
                    this->change_01_prev = v;
            
                    if (v == 0) {
                        this->change_01_zero_set(1);
                    } else if (this->change_01_out == 0) {
                        this->change_01_nonzero_set(1);
                    }
            
                    {
                        this->change_01_out_set(v);
                    }
                } else {
                    this->change_01_prev = v;
                }
            }
            
            void liststore_03_out3_set(number v) {
                {
                    list converted = {v};
                    this->message_21_set_set(converted);
                }
            
                this->change_01_input_set(v);
            }
            
            void message_17_set_set(const list& v) {
                this->message_17_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-24"),
                    v,
                    this->_currentTime
                );
            }
            
            void pack_08_in2_set(number v) {
                this->pack_08_in2 = v;
            }
            
            void message_23_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_08_in2_set(converted);
                }
            }
            
            void message_23_trigger_bang() {
                this->message_23_out_set(this->message_23_set);
            }
            
            void listjoin_04_in2_set(const list& v) {
                this->listjoin_04_in2 = jsCreateListCopy(v);
            }
            
            void pack_08_out_set(const list& v) {
                this->listjoin_04_in2_set(v);
            }
            
            void pack_08_in1_set(number v) {
                this->pack_08_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_08_in1;
                array[1] = this->pack_08_in2;
                this->pack_08_out_set(array);
            }
            
            void numberobj_17_output_set(number v) {
                this->message_23_trigger_bang();
                this->pack_08_in1_set(v);
            }
            
            void numberobj_17_value_set(number v) {
                this->numberobj_17_value_setter(v);
                v = this->numberobj_17_value;
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-28"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_17_output_set(localvalue);
            }
            
            void unpack_02_out4_set(number v) {
                this->unpack_02_out4 = v;
                this->numberobj_17_value_set(v);
            }
            
            void pack_06_in2_set(number v) {
                this->pack_06_in2 = v;
            }
            
            void message_20_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_06_in2_set(converted);
                }
            }
            
            void message_20_trigger_bang() {
                this->message_20_out_set(this->message_20_set);
            }
            
            void listjoin_03_in2_set(const list& v) {
                this->listjoin_03_in2 = jsCreateListCopy(v);
            }
            
            void pack_06_out_set(const list& v) {
                this->listjoin_03_in2_set(v);
            }
            
            void pack_06_in1_set(number v) {
                this->pack_06_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_06_in1;
                array[1] = this->pack_06_in2;
                this->pack_06_out_set(array);
            }
            
            void numberobj_15_output_set(number v) {
                this->message_20_trigger_bang();
                this->pack_06_in1_set(v);
            }
            
            void numberobj_15_value_set(number v) {
                this->numberobj_15_value_setter(v);
                v = this->numberobj_15_value;
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-113"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_15_output_set(localvalue);
            }
            
            void unpack_02_out3_set(number v) {
                this->unpack_02_out3 = v;
                this->numberobj_15_value_set(v);
            }
            
            void pack_04_in2_set(number v) {
                this->pack_04_in2 = v;
            }
            
            void message_18_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_04_in2_set(converted);
                }
            }
            
            void message_18_trigger_bang() {
                this->message_18_out_set(this->message_18_set);
            }
            
            void listjoin_02_in2_set(const list& v) {
                this->listjoin_02_in2 = jsCreateListCopy(v);
            }
            
            void pack_04_out_set(const list& v) {
                this->listjoin_02_in2_set(v);
            }
            
            void pack_04_in1_set(number v) {
                this->pack_04_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_04_in1;
                array[1] = this->pack_04_in2;
                this->pack_04_out_set(array);
            }
            
            void numberobj_13_output_set(number v) {
                this->message_18_trigger_bang();
                this->pack_04_in1_set(v);
            }
            
            void numberobj_13_value_set(number v) {
                this->numberobj_13_value_setter(v);
                v = this->numberobj_13_value;
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-111"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_13_output_set(localvalue);
            }
            
            void unpack_02_out2_set(number v) {
                this->unpack_02_out2 = v;
                this->numberobj_13_value_set(v);
            }
            
            void pack_02_in2_set(number v) {
                this->pack_02_in2 = v;
            }
            
            void message_15_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_02_in2_set(converted);
                }
            }
            
            void message_15_trigger_bang() {
                this->message_15_out_set(this->message_15_set);
            }
            
            void listjoin_01_in2_set(const list& v) {
                this->listjoin_01_in2 = jsCreateListCopy(v);
            }
            
            void pack_02_out_set(const list& v) {
                this->listjoin_01_in2_set(v);
            }
            
            void pack_02_in1_set(number v) {
                this->pack_02_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_02_in1;
                array[1] = this->pack_02_in2;
                this->pack_02_out_set(array);
            }
            
            void numberobj_10_output_set(number v) {
                this->message_15_trigger_bang();
                this->pack_02_in1_set(v);
            }
            
            void numberobj_10_value_set(number v) {
                this->numberobj_10_value_setter(v);
                v = this->numberobj_10_value;
                number localvalue = v;
            
                if (this->numberobj_10_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-100"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_10_output_set(localvalue);
            }
            
            void unpack_02_out1_set(number v) {
                this->unpack_02_out1 = v;
                this->numberobj_10_value_set(v);
            }
            
            void unpack_02_input_list_set(const list& v) {
                if (v->length > 3)
                    this->unpack_02_out4_set(v[3]);
            
                if (v->length > 2)
                    this->unpack_02_out3_set(v[2]);
            
                if (v->length > 1)
                    this->unpack_02_out2_set(v[1]);
            
                if (v->length > 0)
                    this->unpack_02_out1_set(v[0]);
            }
            
            void listchange_01_compare_set(const list& v) {
                this->listchange_01_compare = jsCreateListCopy(v);
            }
            
            void listchange_01_changeflag_set(number ) {}
            
            void liststore_02_storelist_set(const list& v) {
                this->liststore_02_storelist = jsCreateListCopy(v);
                this->liststore_02_storage_store(this->liststore_02_storeidx, v);
            }
            
            void trigger_03_out3_set(const list& v) {
                this->liststore_02_storelist_set(v);
            }
            
            void liststore_02_storeidx_set(number v) {
                this->liststore_02_storeidx = v;
            }
            
            void message_13_set_set(const list& v) {
                this->message_13_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-16"),
                    v,
                    this->_currentTime
                );
            }
            
            void counter_01_output_set(number v) {
                this->counter_01_output = v;
                this->liststore_02_storeidx_set(v);
            
                {
                    list converted = {v};
                    this->message_13_set_set(converted);
                }
            }
            
            void counter_01_overflow_bang_bang() {}
            
            number counter_01_overflow_number_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                if (v > 1)
                    v = 1;
            
                return v;
            }
            
            void counter_01_overflow_number_set(number v) {
                v = this->counter_01_overflow_number_constrain(v);
                this->counter_01_overflow_number = v;
            }
            
            void counter_01_carry_set(number v) {
                this->counter_01_carry = v;
            }
            
            void counter_01_underflow_bang_bang() {}
            
            number counter_01_underflow_number_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                if (v > 1)
                    v = 1;
            
                return v;
            }
            
            void counter_01_underflow_number_set(number v) {
                v = this->counter_01_underflow_number_constrain(v);
                this->counter_01_underflow_number = v;
            }
            
            void counter_01_input_bang() {
                this->counter_01_output_set(this->counter_01_count);
                this->counter_01_inc();
            
                if (this->counter_01_count > this->counter_01_maximum) {
                    if (this->counter_01_direction == 2) {
                        this->counter_01_phase = !(bool)(this->counter_01_phase);
                        this->counter_01_count = this->counter_01_maximum;
                        this->counter_01_inc();
                    } else
                        this->counter_01_count = this->counter_01_minimum;
            
                    if ((bool)(!(bool)(this->counter_01_overflow_number))) {
                        if (this->counter_01_carryflag == 1)
                            this->counter_01_overflow_bang_bang();
                        else
                            this->counter_01_overflow_number_set(1);
                    }
            
                    this->counter_01_carry_set(this->counter_01_carry + 1);
                } else if ((bool)(this->counter_01_overflow_number) && this->counter_01_carryflag == 0)
                    this->counter_01_overflow_number_set(0);
            
                if (this->counter_01_count < this->counter_01_minimum) {
                    if (this->counter_01_direction == 2) {
                        this->counter_01_phase = !(bool)(this->counter_01_phase);
                        this->counter_01_count = this->counter_01_minimum;
                        this->counter_01_inc();
                    } else
                        this->counter_01_count = this->counter_01_maximum;
            
                    if ((bool)(!(bool)(this->counter_01_underflow_number))) {
                        if (this->counter_01_carryflag == 1)
                            this->counter_01_underflow_bang_bang();
                        else
                            this->counter_01_underflow_number_set(1);
                    }
            
                    this->counter_01_carry_set(this->counter_01_carry + 1);
                } else if ((bool)(this->counter_01_underflow_number) && this->counter_01_carryflag == 0)
                    this->counter_01_underflow_number_set(0);
            }
            
            void trigger_03_out2_bang() {
                this->counter_01_input_bang();
            }
            
            void liststore_02_out3_set(number ) {}
            
            void pack_07_in2_set(number v) {
                this->pack_07_in2 = v;
            }
            
            void message_22_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_07_in2_set(converted);
                }
            }
            
            void message_22_trigger_bang() {
                this->message_22_out_set(this->message_22_set);
            }
            
            number line_04_time_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_04_time_set(number v) {
                v = this->line_04_time_constrain(v);
                this->line_04_time = v;
            }
            
            void eventoutlet_07_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out4_number_set(v);
            }
            
            void line_04_output_set(number v) {
                this->line_04_output = v;
                this->eventoutlet_07_in1_number_set(v);
            }
            
            void line_04_stop_bang() {
                this->getEngine()->flushClockEvents(this, 848255507, false);;
                this->line_04_pendingRamps->length = 0;
                this->line_04_startValue = this->line_04_output;
                this->line_04_slope = 0;
                this->line_04__time = 0;
                this->line_04_time_set(0);
            }
            
            number line_04_grain_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_04_grain_set(number v) {
                v = this->line_04_grain_constrain(v);
                this->line_04_grain = v;
            
                if ((bool)(!(bool)(this->line_04_isFinished(this->line_04_startValue)))) {
                    this->getEngine()->flushClockEvents(this, 848255507, false);;
                    this->line_04_scheduleNext();
                }
            }
            
            void line_04_end_bang() {}
            
            void line_04_target_set(const list& v) {
                this->line_04_target = jsCreateListCopy(v);
                this->line_04_pendingRamps->length = 0;
            
                if (v->length == 1) {
                    this->line_04__time = this->line_04_time;
                    this->line_04_time_set(0);
            
                    if ((bool)(this->line_04__time)) {
                        this->line_04_startRamp(v[0], this->line_04__time);
                    } else {
                        this->line_04_output_set(v[0]);
                        this->line_04_startValue = v[0];
                        this->line_04_stop_bang();
                    }
                } else if (v->length == 2) {
                    this->line_04_time_set(0);
                    this->line_04__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_04_startRamp(v[0], this->line_04__time);
                } else if (v->length == 3) {
                    this->line_04_time_set(0);
                    this->line_04_grain_set(v[2]);
                    this->line_04__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_04_startRamp(v[0], this->line_04__time);
                } else {
                    this->line_04_time_set(0);
                    this->line_04_pendingRamps = jsCreateListCopy(v);
                    this->line_04_startPendingRamp();
                }
            }
            
            void listjoin_04_out1_set(const list& v) {
                this->line_04_target_set(v);
            }
            
            void listjoin_04_in1_set(const list& _in1) {
                RNBO_UNUSED(_in1);
                list in1 = createListCopy(_in1);
                this->listjoin_04_in1 = jsCreateListCopy(in1);
                auto in2 = this->listjoin_04_in2;
            
                {
                    this->listjoin_04_out1_set(in1->concat(in2));
                    return;
                }
            }
            
            void pack_07_out_set(const list& v) {
                this->listjoin_04_in1_set(v);
            }
            
            void pack_07_in1_set(number v) {
                this->pack_07_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_07_in1;
                array[1] = this->pack_07_in2;
                this->pack_07_out_set(array);
            }
            
            void numberobj_16_output_set(number v) {
                this->message_22_trigger_bang();
                this->pack_07_in1_set(v);
            }
            
            void numberobj_16_value_set(number v) {
                this->numberobj_16_value_setter(v);
                v = this->numberobj_16_value;
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-44"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_16_output_set(localvalue);
            }
            
            void unpack_01_out4_set(number v) {
                this->unpack_01_out4 = v;
                this->numberobj_16_value_set(v);
            }
            
            void pack_05_in2_set(number v) {
                this->pack_05_in2 = v;
            }
            
            void message_19_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_05_in2_set(converted);
                }
            }
            
            void message_19_trigger_bang() {
                this->message_19_out_set(this->message_19_set);
            }
            
            number line_03_time_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_03_time_set(number v) {
                v = this->line_03_time_constrain(v);
                this->line_03_time = v;
            }
            
            void eventoutlet_05_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out3_number_set(v);
            }
            
            void line_03_output_set(number v) {
                this->line_03_output = v;
                this->eventoutlet_05_in1_number_set(v);
            }
            
            void line_03_stop_bang() {
                this->getEngine()->flushClockEvents(this, 1220262738, false);;
                this->line_03_pendingRamps->length = 0;
                this->line_03_startValue = this->line_03_output;
                this->line_03_slope = 0;
                this->line_03__time = 0;
                this->line_03_time_set(0);
            }
            
            number line_03_grain_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_03_grain_set(number v) {
                v = this->line_03_grain_constrain(v);
                this->line_03_grain = v;
            
                if ((bool)(!(bool)(this->line_03_isFinished(this->line_03_startValue)))) {
                    this->getEngine()->flushClockEvents(this, 1220262738, false);;
                    this->line_03_scheduleNext();
                }
            }
            
            void line_03_end_bang() {}
            
            void line_03_target_set(const list& v) {
                this->line_03_target = jsCreateListCopy(v);
                this->line_03_pendingRamps->length = 0;
            
                if (v->length == 1) {
                    this->line_03__time = this->line_03_time;
                    this->line_03_time_set(0);
            
                    if ((bool)(this->line_03__time)) {
                        this->line_03_startRamp(v[0], this->line_03__time);
                    } else {
                        this->line_03_output_set(v[0]);
                        this->line_03_startValue = v[0];
                        this->line_03_stop_bang();
                    }
                } else if (v->length == 2) {
                    this->line_03_time_set(0);
                    this->line_03__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_03_startRamp(v[0], this->line_03__time);
                } else if (v->length == 3) {
                    this->line_03_time_set(0);
                    this->line_03_grain_set(v[2]);
                    this->line_03__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_03_startRamp(v[0], this->line_03__time);
                } else {
                    this->line_03_time_set(0);
                    this->line_03_pendingRamps = jsCreateListCopy(v);
                    this->line_03_startPendingRamp();
                }
            }
            
            void listjoin_03_out1_set(const list& v) {
                this->line_03_target_set(v);
            }
            
            void listjoin_03_in1_set(const list& _in1) {
                RNBO_UNUSED(_in1);
                list in1 = createListCopy(_in1);
                this->listjoin_03_in1 = jsCreateListCopy(in1);
                auto in2 = this->listjoin_03_in2;
            
                {
                    this->listjoin_03_out1_set(in1->concat(in2));
                    return;
                }
            }
            
            void pack_05_out_set(const list& v) {
                this->listjoin_03_in1_set(v);
            }
            
            void pack_05_in1_set(number v) {
                this->pack_05_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_05_in1;
                array[1] = this->pack_05_in2;
                this->pack_05_out_set(array);
            }
            
            void numberobj_14_output_set(number v) {
                this->message_19_trigger_bang();
                this->pack_05_in1_set(v);
            }
            
            void numberobj_14_value_set(number v) {
                this->numberobj_14_value_setter(v);
                v = this->numberobj_14_value;
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-114"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_14_output_set(localvalue);
            }
            
            void unpack_01_out3_set(number v) {
                this->unpack_01_out3 = v;
                this->numberobj_14_value_set(v);
            }
            
            void pack_03_in2_set(number v) {
                this->pack_03_in2 = v;
            }
            
            void message_16_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_03_in2_set(converted);
                }
            }
            
            void message_16_trigger_bang() {
                this->message_16_out_set(this->message_16_set);
            }
            
            number line_02_time_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_02_time_set(number v) {
                v = this->line_02_time_constrain(v);
                this->line_02_time = v;
            }
            
            void eventoutlet_04_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out2_number_set(v);
            }
            
            void line_02_output_set(number v) {
                this->line_02_output = v;
                this->eventoutlet_04_in1_number_set(v);
            }
            
            void line_02_stop_bang() {
                this->getEngine()->flushClockEvents(this, 1592269969, false);;
                this->line_02_pendingRamps->length = 0;
                this->line_02_startValue = this->line_02_output;
                this->line_02_slope = 0;
                this->line_02__time = 0;
                this->line_02_time_set(0);
            }
            
            number line_02_grain_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_02_grain_set(number v) {
                v = this->line_02_grain_constrain(v);
                this->line_02_grain = v;
            
                if ((bool)(!(bool)(this->line_02_isFinished(this->line_02_startValue)))) {
                    this->getEngine()->flushClockEvents(this, 1592269969, false);;
                    this->line_02_scheduleNext();
                }
            }
            
            void line_02_end_bang() {}
            
            void line_02_target_set(const list& v) {
                this->line_02_target = jsCreateListCopy(v);
                this->line_02_pendingRamps->length = 0;
            
                if (v->length == 1) {
                    this->line_02__time = this->line_02_time;
                    this->line_02_time_set(0);
            
                    if ((bool)(this->line_02__time)) {
                        this->line_02_startRamp(v[0], this->line_02__time);
                    } else {
                        this->line_02_output_set(v[0]);
                        this->line_02_startValue = v[0];
                        this->line_02_stop_bang();
                    }
                } else if (v->length == 2) {
                    this->line_02_time_set(0);
                    this->line_02__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_02_startRamp(v[0], this->line_02__time);
                } else if (v->length == 3) {
                    this->line_02_time_set(0);
                    this->line_02_grain_set(v[2]);
                    this->line_02__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_02_startRamp(v[0], this->line_02__time);
                } else {
                    this->line_02_time_set(0);
                    this->line_02_pendingRamps = jsCreateListCopy(v);
                    this->line_02_startPendingRamp();
                }
            }
            
            void listjoin_02_out1_set(const list& v) {
                this->line_02_target_set(v);
            }
            
            void listjoin_02_in1_set(const list& _in1) {
                RNBO_UNUSED(_in1);
                list in1 = createListCopy(_in1);
                this->listjoin_02_in1 = jsCreateListCopy(in1);
                auto in2 = this->listjoin_02_in2;
            
                {
                    this->listjoin_02_out1_set(in1->concat(in2));
                    return;
                }
            }
            
            void pack_03_out_set(const list& v) {
                this->listjoin_02_in1_set(v);
            }
            
            void pack_03_in1_set(number v) {
                this->pack_03_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_03_in1;
                array[1] = this->pack_03_in2;
                this->pack_03_out_set(array);
            }
            
            void numberobj_11_output_set(number v) {
                this->message_16_trigger_bang();
                this->pack_03_in1_set(v);
            }
            
            void numberobj_11_value_set(number v) {
                this->numberobj_11_value_setter(v);
                v = this->numberobj_11_value;
                number localvalue = v;
            
                if (this->numberobj_11_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_11_output_set(localvalue);
            }
            
            void unpack_01_out2_set(number v) {
                this->unpack_01_out2 = v;
                this->numberobj_11_value_set(v);
            }
            
            void pack_01_in2_set(number v) {
                this->pack_01_in2 = v;
            }
            
            void message_14_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_01_in2_set(converted);
                }
            }
            
            void message_14_trigger_bang() {
                this->message_14_out_set(this->message_14_set);
            }
            
            number line_01_time_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_01_time_set(number v) {
                v = this->line_01_time_constrain(v);
                this->line_01_time = v;
            }
            
            void eventoutlet_03_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out1_number_set(v);
            }
            
            void line_01_output_set(number v) {
                this->line_01_output = v;
                this->eventoutlet_03_in1_number_set(v);
            }
            
            void line_01_stop_bang() {
                this->getEngine()->flushClockEvents(this, 1964277200, false);;
                this->line_01_pendingRamps->length = 0;
                this->line_01_startValue = this->line_01_output;
                this->line_01_slope = 0;
                this->line_01__time = 0;
                this->line_01_time_set(0);
            }
            
            number line_01_grain_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_01_grain_set(number v) {
                v = this->line_01_grain_constrain(v);
                this->line_01_grain = v;
            
                if ((bool)(!(bool)(this->line_01_isFinished(this->line_01_startValue)))) {
                    this->getEngine()->flushClockEvents(this, 1964277200, false);;
                    this->line_01_scheduleNext();
                }
            }
            
            void line_01_end_bang() {}
            
            void line_01_target_set(const list& v) {
                this->line_01_target = jsCreateListCopy(v);
                this->line_01_pendingRamps->length = 0;
            
                if (v->length == 1) {
                    this->line_01__time = this->line_01_time;
                    this->line_01_time_set(0);
            
                    if ((bool)(this->line_01__time)) {
                        this->line_01_startRamp(v[0], this->line_01__time);
                    } else {
                        this->line_01_output_set(v[0]);
                        this->line_01_startValue = v[0];
                        this->line_01_stop_bang();
                    }
                } else if (v->length == 2) {
                    this->line_01_time_set(0);
                    this->line_01__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_01_startRamp(v[0], this->line_01__time);
                } else if (v->length == 3) {
                    this->line_01_time_set(0);
                    this->line_01_grain_set(v[2]);
                    this->line_01__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_01_startRamp(v[0], this->line_01__time);
                } else {
                    this->line_01_time_set(0);
                    this->line_01_pendingRamps = jsCreateListCopy(v);
                    this->line_01_startPendingRamp();
                }
            }
            
            void listjoin_01_out1_set(const list& v) {
                this->line_01_target_set(v);
            }
            
            void listjoin_01_in1_set(const list& _in1) {
                RNBO_UNUSED(_in1);
                list in1 = createListCopy(_in1);
                this->listjoin_01_in1 = jsCreateListCopy(in1);
                auto in2 = this->listjoin_01_in2;
            
                {
                    this->listjoin_01_out1_set(in1->concat(in2));
                    return;
                }
            }
            
            void pack_01_out_set(const list& v) {
                this->listjoin_01_in1_set(v);
            }
            
            void pack_01_in1_set(number v) {
                this->pack_01_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_01_in1;
                array[1] = this->pack_01_in2;
                this->pack_01_out_set(array);
            }
            
            void numberobj_07_output_set(number v) {
                this->message_14_trigger_bang();
                this->pack_01_in1_set(v);
            }
            
            void numberobj_07_value_set(number v) {
                this->numberobj_07_value_setter(v);
                v = this->numberobj_07_value;
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-62"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_07_output_set(localvalue);
            }
            
            void unpack_01_out1_set(number v) {
                this->unpack_01_out1 = v;
                this->numberobj_07_value_set(v);
            }
            
            void unpack_01_input_list_set(const list& v) {
                if (v->length > 3)
                    this->unpack_01_out4_set(v[3]);
            
                if (v->length > 2)
                    this->unpack_01_out3_set(v[2]);
            
                if (v->length > 1)
                    this->unpack_01_out2_set(v[1]);
            
                if (v->length > 0)
                    this->unpack_01_out1_set(v[0]);
            }
            
            void liststore_02_out1_set(const list& v) {
                this->unpack_01_input_list_set(v);
            }
            
            void liststore_02_out2_bang() {}
            
            void liststore_02_lookupidx_set(number v) {
                this->liststore_02_lookupidx = v;
                list val = this->liststore_02_storage_lookup(v);
                this->liststore_02_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_02_out1_set(this->liststore_02_storage_lookup(v));
                } else {
                    this->liststore_02_out2_bang();
                }
            }
            
            void message_13_out_set(const list& v) {
                {
                    if (v->length > 2)
                        this->liststore_02_storeidx_set(v[2]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->liststore_02_lookupidx_set(converted);
                }
            }
            
            void message_13_trigger_bang() {
                this->message_13_out_set(this->message_13_set);
            }
            
            void trigger_03_out1_bang() {
                this->message_13_trigger_bang();
            }
            
            void trigger_03_input_list_set(const list& v) {
                this->trigger_03_out3_set(v);
                this->trigger_03_out2_bang();
                this->trigger_03_out1_bang();
            }
            
            void listchange_01_out_set(const list& v) {
                this->trigger_03_input_list_set(v);
            }
            
            void listchange_01_input_set(const list& v) {
                this->listchange_01_input = jsCreateListCopy(v);
                bool changed = false;
            
                if (v->length != this->listchange_01_compare->length) {
                    changed = true;
                } else {
                    for (int i = 0; i < v->length; i++) {
                        if (v[(Index)i] != this->listchange_01_compare[(Index)i]) {
                            changed = true;
                            break;
                        }
                    }
                }
            
                this->listchange_01_compare_set(v);
            
                if ((bool)(changed)) {
                    this->listchange_01_changeflag_set(1);
                    this->listchange_01_out_set(v);
                } else {
                    this->listchange_01_changeflag_set(0);
                }
            }
            
            void liststore_03_out1_set(const list& v) {
                this->message_17_set_set(v);
                this->unpack_02_input_list_set(v);
                this->listchange_01_input_set(v);
            }
            
            void liststore_03_out2_bang() {}
            
            void liststore_03_lookupidx_set(number v) {
                this->liststore_03_lookupidx = v;
                list val = this->liststore_03_storage_lookup(v);
                this->liststore_03_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_03_out1_set(this->liststore_03_storage_lookup(v));
                } else {
                    this->liststore_03_out2_bang();
                }
            }
            
            void numberobj_08_output_set(number v) {
                this->liststore_03_lookupidx_set(v);
            }
            
            void numberobj_08_value_set(number v) {
                this->numberobj_08_value_setter(v);
                v = this->numberobj_08_value;
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 12) {
                    localvalue = 12;
                }
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-61"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_08_output_set(localvalue);
            }
            
            void trigger_02_out1_set(number v) {
                this->numberobj_08_value_set(v);
            }
            
            void trigger_02_input_number_set(number v) {
                this->trigger_02_out2_bang();
                this->trigger_02_out1_set(trunc(v));
            }
            
            void eventinlet_12_out1_number_set(number v) {
                this->trigger_02_input_number_set(v);
            }
            
            void trigger_02_input_bang_bang() {
                this->trigger_02_out2_bang();
                this->trigger_02_out1_set(0);
            }
            
            void trigger_02_input_list_set(const list& v) {
                this->trigger_02_out2_bang();
                this->trigger_02_out1_set((v->length > 0 ? trunc(v[0]) : 0));
            }
            
            void message_26_set_set(const list& v) {
                this->message_26_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-201"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_03_out4_set(number v) {
                {
                    list converted = {v};
                    this->message_26_set_set(converted);
                }
            }
            
            void liststore_03_count_bang() {
                number n = 0;
            
                for (number i = 0; i < 13; i++) {
                    if (this->liststore_03_storage_lookup(i)->length > 0)
                        n++;
                }
            
                this->liststore_03_out4_set(n);
            }
            
            void button_03_output_bang() {
                this->liststore_03_count_bang();
            }
            
            void button_03_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-35"), this->_currentTime);;
                this->button_03_output_bang();
            }
            
            void message_14_set_set(const list& v) {
                this->message_14_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-80"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_03_dump_bang() {
                for (number i = 0; i < 13; i++) {
                    list val = this->liststore_03_storage_lookup(i);
            
                    if (val->length > 0) {
                        this->liststore_03_out3_set(i);
                        this->liststore_03_out1_set(val);
                    }
                }
            }
            
            void button_04_output_bang() {
                this->liststore_03_dump_bang();
            }
            
            void button_04_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-27"), this->_currentTime);;
                this->button_04_output_bang();
            }
            
            void numberobj_09_output_set(number v) {
                this->trigger_02_input_number_set(v);
            }
            
            void numberobj_09_value_set(number v) {
                this->numberobj_09_value_setter(v);
                v = this->numberobj_09_value;
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-60"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_09_output_set(localvalue);
            }
            
            void message_15_set_set(const list& v) {
                this->message_15_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-85"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_16_set_set(const list& v) {
                this->message_16_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-108"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_17_out_set(const list& ) {}
            
            void message_17_trigger_bang() {
                this->message_17_out_set(this->message_17_set);
            }
            
            void liststore_03_reset_bang() {
                this->liststore_03_storage_reset();
            }
            
            void button_05_output_bang() {
                this->liststore_03_reset_bang();
            }
            
            void button_05_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-29"), this->_currentTime);;
                this->button_05_output_bang();
            }
            
            void liststore_03_remove_set(number v) {
                this->liststore_03_storage_store(v, {});
            }
            
            void numberobj_12_output_set(number v) {
                this->liststore_03_remove_set(v);
            }
            
            void numberobj_12_value_set(number v) {
                this->numberobj_12_value_setter(v);
                v = this->numberobj_12_value;
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-55"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_12_output_set(localvalue);
            }
            
            void message_18_set_set(const list& v) {
                this->message_18_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-107"),
                    v,
                    this->_currentTime
                );
            }
            
            void select_03_match1_bang() {}
            
            void select_03_match2_bang() {}
            
            void select_03_match3_bang() {}
            
            void select_03_nomatch_number_set(number ) {}
            
            void select_03_input_number_set(number v) {
                if (v == this->select_03_test1)
                    this->select_03_match1_bang();
                else if (v == this->select_03_test2)
                    this->select_03_match2_bang();
                else if (v == this->select_03_test3)
                    this->select_03_match3_bang();
                else
                    this->select_03_nomatch_number_set(v);
            }
            
            void uzi_02_index_set(number v) {
                this->select_03_input_number_set(v);
            }
            
            void uzi_02_out_bang() {}
            
            void uzi_02_carry_bang() {}
            
            void uzi_02_start_bang_bang() {
                this->uzi_02_gobang(0);
            }
            
            void loadbang_02_output_bang() {
                this->uzi_02_start_bang_bang();
            }
            
            void loadbang_02_input_bang() {
                this->loadbang_02_output_bang();
            }
            
            void button_06_output_bang() {
                this->loadbang_02_input_bang();
            }
            
            void button_06_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-8"), this->_currentTime);;
                this->button_06_output_bang();
            }
            
            void message_19_set_set(const list& v) {
                this->message_19_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-110"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_20_set_set(const list& v) {
                this->message_20_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-109"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_21_out_set(const list& ) {}
            
            void message_21_trigger_bang() {
                this->message_21_out_set(this->message_21_set);
            }
            
            void message_22_set_set(const list& v) {
                this->message_22_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-46"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_23_set_set(const list& v) {
                this->message_23_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-45"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_24_set_set(const list& v) {
                this->message_24_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_25_set_set(const list& v) {
                this->message_25_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-65"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_26_out_set(const list& ) {}
            
            void message_26_trigger_bang() {
                this->message_26_out_set(this->message_26_set);
            }
            
            void message_27_set_set(const list& v) {
                this->message_27_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-71"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_28_set_set(const list& v) {
                this->message_28_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-77"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_29_set_set(const list& v) {
                this->message_29_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-75"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_30_set_set(const list& v) {
                this->message_30_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-91"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_31_set_set(const list& v) {
                this->message_31_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-93"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_32_set_set(const list& v) {
                this->message_32_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-92"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_33_set_set(const list& v) {
                this->message_33_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-81"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_34_set_set(const list& v) {
                this->message_34_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-79"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_35_set_set(const list& v) {
                this->message_35_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-78"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_36_set_set(const list& v) {
                this->message_36_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-119"),
                    v,
                    this->_currentTime
                );
            }
            
            void p_06_perform(Index n) {
                // subpatcher: I_chordVariants
                this->p_06->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_07_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_07_value = localvalue;
            }
            
            void numberobj_08_value_setter(number v) {
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 12) {
                    localvalue = 12;
                }
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_08_value = localvalue;
            }
            
            void numberobj_09_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_09_value = localvalue;
            }
            
            void numberobj_10_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_10_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_10_value = localvalue;
            }
            
            void numberobj_11_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_11_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_11_value = localvalue;
            }
            
            void numberobj_12_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_12_value = localvalue;
            }
            
            void numberobj_13_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_13_value = localvalue;
            }
            
            void numberobj_14_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_14_value = localvalue;
            }
            
            void numberobj_15_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_15_value = localvalue;
            }
            
            void numberobj_16_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_16_value = localvalue;
            }
            
            void numberobj_17_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_17_value = localvalue;
            }
            
            void numberobj_18_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_18_value = localvalue;
            }
            
            void message_13_init() {
                this->message_13_set_set({0});
            }
            
            list liststore_02_storage_next(number index) {
                return this->liststore_02_storage_lookup(index);
            }
            
            list liststore_02_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_02_storage__slotcount) {
                    number entrylength = this->liststore_02_storage_storage[(Index)(idx * this->liststore_02_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_02_storage_storage[(Index)(idx * this->liststore_02_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_02_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_02_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_02_storage_storage[(Index)(idx * this->liststore_02_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_02_storage_storage[(Index)(idx * this->liststore_02_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_02_storage_init() {
                this->liststore_02_storage__entrysize = 4 + 1;
                this->liststore_02_storage__slotcount = 2;
                int64_t storagesize = (int64_t)(2 * this->liststore_02_storage__entrysize);
                this->liststore_02_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_02_storage_clear() {
                this->liststore_02_storage_storage->setZero();
            }
            
            void liststore_02_storage_reset() {
                this->liststore_02_storage_init();
                this->liststore_02_storage_clear();
            }
            
            void numberobj_07_init() {
                this->numberobj_07_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-62"), 1, this->_currentTime);
            }
            
            void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_07_value;
            }
            
            void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_07_value_set(preset["value"]);
            }
            
            void numberobj_08_init() {
                this->numberobj_08_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-61"), 1, this->_currentTime);
            }
            
            void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_08_value;
            }
            
            void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_08_value_set(preset["value"]);
            }
            
            list liststore_03_storage_next(number index) {
                return this->liststore_03_storage_lookup(index);
            }
            
            list liststore_03_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_03_storage__slotcount) {
                    number entrylength = this->liststore_03_storage_storage[(Index)(idx * this->liststore_03_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_03_storage_storage[(Index)(idx * this->liststore_03_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_03_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_03_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_03_storage_storage[(Index)(idx * this->liststore_03_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_03_storage_storage[(Index)(idx * this->liststore_03_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_03_storage_init() {
                this->liststore_03_storage__entrysize = 4 + 1;
                this->liststore_03_storage__slotcount = 13;
                int64_t storagesize = (int64_t)(13 * this->liststore_03_storage__entrysize);
                this->liststore_03_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_03_storage_clear() {
                this->liststore_03_storage_storage->setZero();
            }
            
            void liststore_03_storage_reset() {
                this->liststore_03_storage_init();
                this->liststore_03_storage_clear();
            }
            
            number line_01_valueAtTime(MillisecondTime time) {
                return this->line_01_startValue + this->line_01_slope * (time - this->line_01_startTime);
            }
            
            void line_01_scheduleNext() {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                number nextTime = currentTime + this->line_01_grain;
                number nextValue;
            
                if (nextTime - this->line_01_startTime >= this->line_01__time || this->line_01_grain == 0) {
                    nextTime = this->line_01_startTime + this->line_01__time;
                    nextValue = this->line_01_currentTarget;
                } else {
                    nextValue = this->line_01_valueAtTime(nextTime);
                }
            
                this->getEngine()->scheduleClockEventWithValue(this, 1964277200, nextTime - currentTime + this->_currentTime, nextValue);;
            }
            
            void line_01_startRamp(number target, MillisecondTime time) {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                this->line_01_startValue = this->line_01_valueAtTime(currentTime);
                this->line_01_startTime = currentTime;
                this->line_01_currentTarget = target;
                this->getEngine()->flushClockEvents(this, 1964277200, false);;
                number rise = target - this->line_01_startValue;
                this->line_01_slope = rise / time;
                this->line_01_scheduleNext();
            }
            
            bool line_01_isFinished(number value) {
                return value == this->line_01_currentTarget && this->currenttime() - this->line_01_startTime >= this->line_01__time;
            }
            
            void line_01_startPendingRamp() {
                if (this->line_01_pendingRamps->length < 2) {
                    this->line_01_pendingRamps->length = 0;
                    this->line_01__time = 0;
                    this->line_01_time_set(0);
                    this->line_01_end_bang();
                    return;
                }
            
                if (this->line_01_pendingRamps->length > 1) {
                    number target = this->line_01_pendingRamps->shift();
                    this->line_01__time = this->line_01_pendingRamps->shift();
                    this->line_01__time = (this->line_01__time < 0 ? 0 : this->line_01__time);
                    this->line_01_startRamp(target, this->line_01__time);
                }
            }
            
            void counter_01_inc() {
                this->counter_01_count = ((bool)(this->counter_01_phase) ? this->counter_01_count + 1 : this->counter_01_count - 1);
            }
            
            void message_14_init() {
                this->message_14_set_set({0});
            }
            
            void numberobj_09_init() {
                this->numberobj_09_currentFormat = 0;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-60"), 1, this->_currentTime);
            }
            
            void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_09_value;
            }
            
            void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_09_value_set(preset["value"]);
            }
            
            void numberobj_10_init() {
                this->numberobj_10_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-100"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_10_value;
            }
            
            void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_10_value_set(preset["value"]);
            }
            
            void message_15_init() {
                this->message_15_set_set({250});
            }
            
            void numberobj_11_init() {
                this->numberobj_11_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-112"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_11_value;
            }
            
            void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_11_value_set(preset["value"]);
            }
            
            number line_02_valueAtTime(MillisecondTime time) {
                return this->line_02_startValue + this->line_02_slope * (time - this->line_02_startTime);
            }
            
            void line_02_scheduleNext() {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                number nextTime = currentTime + this->line_02_grain;
                number nextValue;
            
                if (nextTime - this->line_02_startTime >= this->line_02__time || this->line_02_grain == 0) {
                    nextTime = this->line_02_startTime + this->line_02__time;
                    nextValue = this->line_02_currentTarget;
                } else {
                    nextValue = this->line_02_valueAtTime(nextTime);
                }
            
                this->getEngine()->scheduleClockEventWithValue(this, 1592269969, nextTime - currentTime + this->_currentTime, nextValue);;
            }
            
            void line_02_startRamp(number target, MillisecondTime time) {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                this->line_02_startValue = this->line_02_valueAtTime(currentTime);
                this->line_02_startTime = currentTime;
                this->line_02_currentTarget = target;
                this->getEngine()->flushClockEvents(this, 1592269969, false);;
                number rise = target - this->line_02_startValue;
                this->line_02_slope = rise / time;
                this->line_02_scheduleNext();
            }
            
            bool line_02_isFinished(number value) {
                return value == this->line_02_currentTarget && this->currenttime() - this->line_02_startTime >= this->line_02__time;
            }
            
            void line_02_startPendingRamp() {
                if (this->line_02_pendingRamps->length < 2) {
                    this->line_02_pendingRamps->length = 0;
                    this->line_02__time = 0;
                    this->line_02_time_set(0);
                    this->line_02_end_bang();
                    return;
                }
            
                if (this->line_02_pendingRamps->length > 1) {
                    number target = this->line_02_pendingRamps->shift();
                    this->line_02__time = this->line_02_pendingRamps->shift();
                    this->line_02__time = (this->line_02__time < 0 ? 0 : this->line_02__time);
                    this->line_02_startRamp(target, this->line_02__time);
                }
            }
            
            void message_16_init() {
                this->message_16_set_set({0});
            }
            
            list liststore_04_storage_next(number index) {
                return this->liststore_04_storage_lookup(index);
            }
            
            list liststore_04_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_04_storage__slotcount) {
                    number entrylength = this->liststore_04_storage_storage[(Index)(idx * this->liststore_04_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_04_storage_storage[(Index)(idx * this->liststore_04_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_04_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_04_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_04_storage_storage[(Index)(idx * this->liststore_04_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_04_storage_storage[(Index)(idx * this->liststore_04_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_04_storage_init() {
                this->liststore_04_storage__entrysize = 3 + 1;
                this->liststore_04_storage__slotcount = 5;
                int64_t storagesize = (int64_t)(5 * this->liststore_04_storage__entrysize);
                this->liststore_04_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_04_storage_clear() {
                this->liststore_04_storage_storage->setZero();
            }
            
            void liststore_04_storage_reset() {
                this->liststore_04_storage_init();
                this->liststore_04_storage_clear();
            }
            
            void message_17_init() {
                this->message_17_set_set({52, 59, 67, 62});
            }
            
            void numberobj_12_init() {
                this->numberobj_12_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-55"), 1, this->_currentTime);
            }
            
            void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_12_value;
            }
            
            void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_12_value_set(preset["value"]);
            }
            
            void numberobj_13_init() {
                this->numberobj_13_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-111"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_13_value;
            }
            
            void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_13_value_set(preset["value"]);
            }
            
            void message_18_init() {
                this->message_18_set_set({250});
            }
            
            void uzi_02_gobang(number start) {
                this->uzi_02_doPause = 0;
                this->uzi_02_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_02_count; i++) {
                    if ((bool)(this->uzi_02_doPause)) {
                        this->uzi_02_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_02_index_set(i + this->uzi_02_base);
                        this->uzi_02_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_02_carry_bang();
            }
            
            number line_03_valueAtTime(MillisecondTime time) {
                return this->line_03_startValue + this->line_03_slope * (time - this->line_03_startTime);
            }
            
            void line_03_scheduleNext() {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                number nextTime = currentTime + this->line_03_grain;
                number nextValue;
            
                if (nextTime - this->line_03_startTime >= this->line_03__time || this->line_03_grain == 0) {
                    nextTime = this->line_03_startTime + this->line_03__time;
                    nextValue = this->line_03_currentTarget;
                } else {
                    nextValue = this->line_03_valueAtTime(nextTime);
                }
            
                this->getEngine()->scheduleClockEventWithValue(this, 1220262738, nextTime - currentTime + this->_currentTime, nextValue);;
            }
            
            void line_03_startRamp(number target, MillisecondTime time) {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                this->line_03_startValue = this->line_03_valueAtTime(currentTime);
                this->line_03_startTime = currentTime;
                this->line_03_currentTarget = target;
                this->getEngine()->flushClockEvents(this, 1220262738, false);;
                number rise = target - this->line_03_startValue;
                this->line_03_slope = rise / time;
                this->line_03_scheduleNext();
            }
            
            bool line_03_isFinished(number value) {
                return value == this->line_03_currentTarget && this->currenttime() - this->line_03_startTime >= this->line_03__time;
            }
            
            void line_03_startPendingRamp() {
                if (this->line_03_pendingRamps->length < 2) {
                    this->line_03_pendingRamps->length = 0;
                    this->line_03__time = 0;
                    this->line_03_time_set(0);
                    this->line_03_end_bang();
                    return;
                }
            
                if (this->line_03_pendingRamps->length > 1) {
                    number target = this->line_03_pendingRamps->shift();
                    this->line_03__time = this->line_03_pendingRamps->shift();
                    this->line_03__time = (this->line_03__time < 0 ? 0 : this->line_03__time);
                    this->line_03_startRamp(target, this->line_03__time);
                }
            }
            
            void numberobj_14_init() {
                this->numberobj_14_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-114"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_14_value;
            }
            
            void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_14_value_set(preset["value"]);
            }
            
            void message_19_init() {
                this->message_19_set_set({0});
            }
            
            void numberobj_15_init() {
                this->numberobj_15_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-113"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_15_value;
            }
            
            void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_15_value_set(preset["value"]);
            }
            
            void change_01_init() {
                this->change_01_prev = this->change_01_input;
            }
            
            void message_20_init() {
                this->message_20_set_set({250});
            }
            
            void numberobj_16_init() {
                this->numberobj_16_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-44"), 1, this->_currentTime);
            }
            
            void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_16_value;
            }
            
            void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_16_value_set(preset["value"]);
            }
            
            number line_04_valueAtTime(MillisecondTime time) {
                return this->line_04_startValue + this->line_04_slope * (time - this->line_04_startTime);
            }
            
            void line_04_scheduleNext() {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                number nextTime = currentTime + this->line_04_grain;
                number nextValue;
            
                if (nextTime - this->line_04_startTime >= this->line_04__time || this->line_04_grain == 0) {
                    nextTime = this->line_04_startTime + this->line_04__time;
                    nextValue = this->line_04_currentTarget;
                } else {
                    nextValue = this->line_04_valueAtTime(nextTime);
                }
            
                this->getEngine()->scheduleClockEventWithValue(this, 848255507, nextTime - currentTime + this->_currentTime, nextValue);;
            }
            
            void line_04_startRamp(number target, MillisecondTime time) {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                this->line_04_startValue = this->line_04_valueAtTime(currentTime);
                this->line_04_startTime = currentTime;
                this->line_04_currentTarget = target;
                this->getEngine()->flushClockEvents(this, 848255507, false);;
                number rise = target - this->line_04_startValue;
                this->line_04_slope = rise / time;
                this->line_04_scheduleNext();
            }
            
            bool line_04_isFinished(number value) {
                return value == this->line_04_currentTarget && this->currenttime() - this->line_04_startTime >= this->line_04__time;
            }
            
            void line_04_startPendingRamp() {
                if (this->line_04_pendingRamps->length < 2) {
                    this->line_04_pendingRamps->length = 0;
                    this->line_04__time = 0;
                    this->line_04_time_set(0);
                    this->line_04_end_bang();
                    return;
                }
            
                if (this->line_04_pendingRamps->length > 1) {
                    number target = this->line_04_pendingRamps->shift();
                    this->line_04__time = this->line_04_pendingRamps->shift();
                    this->line_04__time = (this->line_04__time < 0 ? 0 : this->line_04__time);
                    this->line_04_startRamp(target, this->line_04__time);
                }
            }
            
            void message_21_init() {
                this->message_21_set_set({1});
            }
            
            void message_22_init() {
                this->message_22_set_set({0});
            }
            
            void numberobj_17_init() {
                this->numberobj_17_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-28"), 1, this->_currentTime);
            }
            
            void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_17_value;
            }
            
            void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_17_value_set(preset["value"]);
            }
            
            void message_23_init() {
                this->message_23_set_set({250});
            }
            
            void uzi_03_gobang(number start) {
                this->uzi_03_doPause = 0;
                this->uzi_03_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_03_count; i++) {
                    if ((bool)(this->uzi_03_doPause)) {
                        this->uzi_03_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_03_index_set(i + this->uzi_03_base);
                        this->uzi_03_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_03_carry_bang();
            }
            
            void message_24_init() {
                this->message_24_set_set({52, 59, 67, 62});
            }
            
            void message_25_init() {
                this->message_25_set_set({57, 64, 72, 67});
            }
            
            void message_26_init() {
                this->message_26_set_set({7});
            }
            
            void message_27_init() {
                this->message_27_set_set({50, 57, 65, 72});
            }
            
            void numberobj_18_init() {
                this->numberobj_18_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-32"), 1, this->_currentTime);
            }
            
            void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_18_value;
            }
            
            void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_18_value_set(preset["value"]);
            }
            
            void message_28_init() {
                this->message_28_set_set({53, 60, 69, 64});
            }
            
            void message_29_init() {
                this->message_29_set_set({47, 53, 62, 69});
            }
            
            void message_30_init() {
                this->message_30_set_set({55, 62, 59, 65});
            }
            
            void message_31_init() {
                this->message_31_set_set({57, 64, 73, 79});
            }
            
            void message_32_init() {
                this->message_32_set_set({59, 66, 75, 81});
            }
            
            void message_33_init() {
                this->message_33_set_set({60, 67, 76, 82});
            }
            
            void message_34_init() {
                this->message_34_set_set({62, 69, 78, 84});
            }
            
            void message_35_init() {
                this->message_35_set_set({64, 71, 80, 86});
            }
            
            void message_36_init() {
                this->message_36_set_set({53, 60, 69, 75});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                listchange_01_compare = { 0 };
                liststore_02_lookupidx = 0;
                liststore_02_storeidx = 0;
                pack_01_in1 = 0;
                pack_01_in2 = 0;
                numberobj_07_value = 0;
                numberobj_07_value_setter(numberobj_07_value);
                unpack_01_out1 = 0;
                unpack_01_out2 = 0;
                unpack_01_out3 = 0;
                unpack_01_out4 = 0;
                numberobj_08_value = 0;
                numberobj_08_value_setter(numberobj_08_value);
                liststore_03_lookupidx = 0;
                liststore_03_storeidx = 0;
                line_01_time = 0;
                line_01_grain = 20;
                line_01_output = 0;
                counter_01_carryflag = 0;
                counter_01_direction = 0;
                counter_01_resetnext_number = 0;
                counter_01_resetnow_number = 0;
                counter_01_maximum = 1;
                counter_01_output = 0;
                counter_01_underflow_number = 0;
                counter_01_overflow_number = 0;
                counter_01_carry = 0;
                counter_01_minimum = 0;
                numberobj_09_value = 0;
                numberobj_09_value_setter(numberobj_09_value);
                unpack_02_out1 = 0;
                unpack_02_out2 = 0;
                unpack_02_out3 = 0;
                unpack_02_out4 = 0;
                numberobj_10_value = 0;
                numberobj_10_value_setter(numberobj_10_value);
                pack_02_in1 = 0;
                pack_02_in2 = 0;
                numberobj_11_value = 0;
                numberobj_11_value_setter(numberobj_11_value);
                pack_03_in1 = 0;
                pack_03_in2 = 0;
                line_02_time = 0;
                line_02_grain = 20;
                line_02_output = 0;
                liststore_04_lookupidx = 0;
                liststore_04_storeidx = 0;
                numberobj_12_value = 0;
                numberobj_12_value_setter(numberobj_12_value);
                numberobj_13_value = 0;
                numberobj_13_value_setter(numberobj_13_value);
                pack_04_in1 = 0;
                pack_04_in2 = 0;
                uzi_02_start_number = 0;
                uzi_02_count = 7;
                uzi_02_base = 0;
                line_03_time = 0;
                line_03_grain = 20;
                line_03_output = 0;
                numberobj_14_value = 0;
                numberobj_14_value_setter(numberobj_14_value);
                pack_05_in1 = 0;
                pack_05_in2 = 0;
                select_03_test1 = 0;
                select_03_test2 = 1;
                select_03_test3 = 2;
                numberobj_15_value = 0;
                numberobj_15_value_setter(numberobj_15_value);
                pack_06_in1 = 0;
                pack_06_in2 = 0;
                change_01_input = 0;
                change_01_out = 0;
                numberobj_16_value = 0;
                numberobj_16_value_setter(numberobj_16_value);
                line_04_time = 0;
                line_04_grain = 20;
                line_04_output = 0;
                pack_07_in1 = 0;
                pack_07_in2 = 0;
                numberobj_17_value = 0;
                numberobj_17_value_setter(numberobj_17_value);
                pack_08_in1 = 0;
                pack_08_in2 = 0;
                uzi_03_start_number = 0;
                uzi_03_count = 13;
                uzi_03_base = 0;
                select_04_test1 = 0;
                select_04_test2 = 1;
                select_04_test3 = 2;
                select_04_test4 = 3;
                select_04_test5 = 4;
                select_04_test6 = 5;
                select_04_test7 = 6;
                select_04_test8 = 7;
                select_04_test9 = 8;
                select_04_test10 = 9;
                select_04_test11 = 10;
                select_04_test12 = 11;
                select_04_test13 = 12;
                p_06_target = 0;
                numberobj_18_value = 0;
                numberobj_18_value_setter(numberobj_18_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                liststore_02_storage__slotcount = 1024;
                liststore_02_storage__entrysize = 65;
                numberobj_07_currentFormat = 6;
                numberobj_07_lastValue = 0;
                numberobj_08_currentFormat = 6;
                numberobj_08_lastValue = 0;
                liststore_03_storage__slotcount = 1024;
                liststore_03_storage__entrysize = 65;
                line_01_startTime = 0;
                line_01_startValue = 0;
                line_01_currentTarget = 0;
                line_01_slope = 0;
                line_01__time = 0;
                counter_01_count = 0;
                counter_01_phase = true;
                numberobj_09_currentFormat = 6;
                numberobj_09_lastValue = 0;
                numberobj_10_currentFormat = 6;
                numberobj_10_lastValue = 0;
                numberobj_11_currentFormat = 6;
                numberobj_11_lastValue = 0;
                line_02_startTime = 0;
                line_02_startValue = 0;
                line_02_currentTarget = 0;
                line_02_slope = 0;
                line_02__time = 0;
                liststore_04_storage__slotcount = 1024;
                liststore_04_storage__entrysize = 65;
                numberobj_12_currentFormat = 6;
                numberobj_12_lastValue = 0;
                numberobj_13_currentFormat = 6;
                numberobj_13_lastValue = 0;
                uzi_02_doPause = 0;
                uzi_02_pausecount = 0;
                line_03_startTime = 0;
                line_03_startValue = 0;
                line_03_currentTarget = 0;
                line_03_slope = 0;
                line_03__time = 0;
                numberobj_14_currentFormat = 6;
                numberobj_14_lastValue = 0;
                numberobj_15_currentFormat = 6;
                numberobj_15_lastValue = 0;
                numberobj_16_currentFormat = 6;
                numberobj_16_lastValue = 0;
                line_04_startTime = 0;
                line_04_startValue = 0;
                line_04_currentTarget = 0;
                line_04_slope = 0;
                line_04__time = 0;
                numberobj_17_currentFormat = 6;
                numberobj_17_lastValue = 0;
                uzi_03_doPause = 0;
                uzi_03_pausecount = 0;
                numberobj_18_currentFormat = 6;
                numberobj_18_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list message_13_set;
                list listchange_01_input;
                list listchange_01_compare;
                number liststore_02_lookupidx;
                list liststore_02_storelist;
                number liststore_02_storeidx;
                number pack_01_in1;
                number pack_01_in2;
                number numberobj_07_value;
                number unpack_01_out1;
                number unpack_01_out2;
                number unpack_01_out3;
                number unpack_01_out4;
                number numberobj_08_value;
                number liststore_03_lookupidx;
                list liststore_03_storelist;
                number liststore_03_storeidx;
                list listjoin_01_in1;
                list listjoin_01_in2;
                list line_01_target;
                number line_01_time;
                number line_01_grain;
                number line_01_output;
                Int counter_01_carryflag;
                number counter_01_direction;
                number counter_01_resetnext_number;
                number counter_01_resetnow_number;
                number counter_01_maximum;
                number counter_01_output;
                number counter_01_underflow_number;
                number counter_01_overflow_number;
                number counter_01_carry;
                number counter_01_minimum;
                list message_14_set;
                number numberobj_09_value;
                number unpack_02_out1;
                number unpack_02_out2;
                number unpack_02_out3;
                number unpack_02_out4;
                number numberobj_10_value;
                number pack_02_in1;
                number pack_02_in2;
                list message_15_set;
                number numberobj_11_value;
                number pack_03_in1;
                number pack_03_in2;
                list listjoin_02_in1;
                list listjoin_02_in2;
                list line_02_target;
                number line_02_time;
                number line_02_grain;
                number line_02_output;
                list message_16_set;
                number liststore_04_lookupidx;
                list liststore_04_storelist;
                number liststore_04_storeidx;
                list message_17_set;
                number numberobj_12_value;
                number numberobj_13_value;
                number pack_04_in1;
                number pack_04_in2;
                list message_18_set;
                number uzi_02_start_number;
                number uzi_02_count;
                number uzi_02_base;
                list listjoin_03_in1;
                list listjoin_03_in2;
                list line_03_target;
                number line_03_time;
                number line_03_grain;
                number line_03_output;
                number numberobj_14_value;
                number pack_05_in1;
                number pack_05_in2;
                number select_03_test1;
                number select_03_test2;
                number select_03_test3;
                list message_19_set;
                number numberobj_15_value;
                number pack_06_in1;
                number pack_06_in2;
                number change_01_input;
                number change_01_out;
                list message_20_set;
                number numberobj_16_value;
                list listjoin_04_in1;
                list listjoin_04_in2;
                list line_04_target;
                number line_04_time;
                number line_04_grain;
                number line_04_output;
                number pack_07_in1;
                number pack_07_in2;
                list message_21_set;
                list message_22_set;
                number numberobj_17_value;
                number pack_08_in1;
                number pack_08_in2;
                list message_23_set;
                number uzi_03_start_number;
                number uzi_03_count;
                number uzi_03_base;
                number select_04_test1;
                number select_04_test2;
                number select_04_test3;
                number select_04_test4;
                number select_04_test5;
                number select_04_test6;
                number select_04_test7;
                number select_04_test8;
                number select_04_test9;
                number select_04_test10;
                number select_04_test11;
                number select_04_test12;
                number select_04_test13;
                number p_06_target;
                list message_24_set;
                list message_25_set;
                list message_26_set;
                list message_27_set;
                number numberobj_18_value;
                list message_28_set;
                list message_29_set;
                list message_30_set;
                list message_31_set;
                list message_32_set;
                list message_33_set;
                list message_34_set;
                list message_35_set;
                list message_36_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef liststore_02_storage_storage;
                number liststore_02_storage__slotcount;
                number liststore_02_storage__entrysize;
                Int numberobj_07_currentFormat;
                number numberobj_07_lastValue;
                Int numberobj_08_currentFormat;
                number numberobj_08_lastValue;
                Float64BufferRef liststore_03_storage_storage;
                number liststore_03_storage__slotcount;
                number liststore_03_storage__entrysize;
                MillisecondTime line_01_startTime;
                number line_01_startValue;
                number line_01_currentTarget;
                number line_01_slope;
                MillisecondTime line_01__time;
                list line_01_pendingRamps;
                number counter_01_count;
                bool counter_01_phase;
                Int numberobj_09_currentFormat;
                number numberobj_09_lastValue;
                Int numberobj_10_currentFormat;
                number numberobj_10_lastValue;
                Int numberobj_11_currentFormat;
                number numberobj_11_lastValue;
                MillisecondTime line_02_startTime;
                number line_02_startValue;
                number line_02_currentTarget;
                number line_02_slope;
                MillisecondTime line_02__time;
                list line_02_pendingRamps;
                Float64BufferRef liststore_04_storage_storage;
                number liststore_04_storage__slotcount;
                number liststore_04_storage__entrysize;
                Int numberobj_12_currentFormat;
                number numberobj_12_lastValue;
                Int numberobj_13_currentFormat;
                number numberobj_13_lastValue;
                number uzi_02_doPause;
                long uzi_02_pausecount;
                MillisecondTime line_03_startTime;
                number line_03_startValue;
                number line_03_currentTarget;
                number line_03_slope;
                MillisecondTime line_03__time;
                list line_03_pendingRamps;
                Int numberobj_14_currentFormat;
                number numberobj_14_lastValue;
                Int numberobj_15_currentFormat;
                number numberobj_15_lastValue;
                number change_01_prev;
                Int numberobj_16_currentFormat;
                number numberobj_16_lastValue;
                MillisecondTime line_04_startTime;
                number line_04_startValue;
                number line_04_currentTarget;
                number line_04_slope;
                MillisecondTime line_04__time;
                list line_04_pendingRamps;
                Int numberobj_17_currentFormat;
                number numberobj_17_lastValue;
                number uzi_03_doPause;
                long uzi_03_pausecount;
                Int numberobj_18_currentFormat;
                number numberobj_18_lastValue;
                number stackprotect_count;
                DataRef liststore_02_storage_storageobj;
                DataRef liststore_03_storage_storageobj;
                DataRef liststore_04_storage_storageobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_146* p_06;
            
    };
    
    class RNBOSubpatcher_148 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_175;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_148()
            {
            }
            
            ~RNBOSubpatcher_148()
            {
            }
            
            virtual RNBOSubpatcher_175* getPatcher() const {
                return static_cast<RNBOSubpatcher_175 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -871642103, false);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -871642103:
                    {
                    this->loadbang_04_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Chords/NextChord/number_obj-61") == objectId)
                        this->numberobj_19_valin_set(payload);
            
                    if (TAG("Chords/NextChord/number_obj-55") == objectId)
                        this->numberobj_20_valin_set(payload);
            
                    if (TAG("Chords/NextChord/number_obj-32") == objectId)
                        this->numberobj_21_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Chords/NextChord/number_obj-61") == objectId)
                        this->numberobj_19_format_set(payload);
            
                    if (TAG("Chords/NextChord/number_obj-55") == objectId)
                        this->numberobj_20_format_set(payload);
            
                    if (TAG("Chords/NextChord/number_obj-32") == objectId)
                        this->numberobj_21_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Chords/NextChord/message_obj-22") == objectId)
                        this->message_37_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-21") == objectId)
                        this->message_38_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-17") == objectId)
                        this->message_39_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-25") == objectId)
                        this->message_40_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-66") == objectId)
                        this->message_41_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-65") == objectId)
                        this->message_42_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-203") == objectId)
                        this->message_43_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-71") == objectId)
                        this->message_44_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-2") == objectId)
                        this->message_45_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-77") == objectId)
                        this->message_46_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-75") == objectId)
                        this->message_47_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-91") == objectId)
                        this->message_48_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-93") == objectId)
                        this->message_49_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-201") == objectId)
                        this->message_50_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-92") == objectId)
                        this->message_51_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-81") == objectId)
                        this->message_52_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-79") == objectId)
                        this->message_53_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-78") == objectId)
                        this->message_54_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-28") == objectId)
                        this->message_55_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Chords/NextChord/message_obj-22") == objectId)
                        this->message_37_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-21") == objectId)
                        this->message_38_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-17") == objectId)
                        this->message_39_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-25") == objectId)
                        this->message_40_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-66") == objectId)
                        this->message_41_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-65") == objectId)
                        this->message_42_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-203") == objectId)
                        this->message_43_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-71") == objectId)
                        this->message_44_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-2") == objectId)
                        this->message_45_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-77") == objectId)
                        this->message_46_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-75") == objectId)
                        this->message_47_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-91") == objectId)
                        this->message_48_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-93") == objectId)
                        this->message_49_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-201") == objectId)
                        this->message_50_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-92") == objectId)
                        this->message_51_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-81") == objectId)
                        this->message_52_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-79") == objectId)
                        this->message_53_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-78") == objectId)
                        this->message_54_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-28") == objectId)
                        this->message_55_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("Chords/NextChord/button_obj-35") == objectId)
                        this->button_08_bangin_bang();
            
                    if (TAG("Chords/NextChord/button_obj-27") == objectId)
                        this->button_09_bangin_bang();
            
                    if (TAG("Chords/NextChord/button_obj-29") == objectId)
                        this->button_10_bangin_bang();
            
                    if (TAG("Chords/NextChord/button_obj-186") == objectId)
                        this->button_11_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Chords/NextChord/message_obj-22") == objectId)
                        this->message_37_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-21") == objectId)
                        this->message_38_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-17") == objectId)
                        this->message_39_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-25") == objectId)
                        this->message_40_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-66") == objectId)
                        this->message_41_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-65") == objectId)
                        this->message_42_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-203") == objectId)
                        this->message_43_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-71") == objectId)
                        this->message_44_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-2") == objectId)
                        this->message_45_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-77") == objectId)
                        this->message_46_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-75") == objectId)
                        this->message_47_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-91") == objectId)
                        this->message_48_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-93") == objectId)
                        this->message_49_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-201") == objectId)
                        this->message_50_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-92") == objectId)
                        this->message_51_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-81") == objectId)
                        this->message_52_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-79") == objectId)
                        this->message_53_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-78") == objectId)
                        this->message_54_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-28") == objectId)
                        this->message_55_listin_bang_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("Chords/NextChord/loadbang_obj-197") == objectId)
                        this->loadbang_04_startupbang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Chords/NextChord/number_obj-61"):
                    {
                    return "Chords/NextChord/number_obj-61";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Chords/NextChord/button_obj-35"):
                    {
                    return "Chords/NextChord/button_obj-35";
                    }
                case TAG("Chords/NextChord/button_obj-27"):
                    {
                    return "Chords/NextChord/button_obj-27";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Chords/NextChord/message_obj-22"):
                    {
                    return "Chords/NextChord/message_obj-22";
                    }
                case TAG("Chords/NextChord/button_obj-29"):
                    {
                    return "Chords/NextChord/button_obj-29";
                    }
                case TAG("Chords/NextChord/message_obj-21"):
                    {
                    return "Chords/NextChord/message_obj-21";
                    }
                case TAG("Chords/NextChord/number_obj-55"):
                    {
                    return "Chords/NextChord/number_obj-55";
                    }
                case TAG("Chords/NextChord/message_obj-17"):
                    {
                    return "Chords/NextChord/message_obj-17";
                    }
                case TAG("Chords/NextChord/button_obj-186"):
                    {
                    return "Chords/NextChord/button_obj-186";
                    }
                case TAG("Chords/NextChord/message_obj-25"):
                    {
                    return "Chords/NextChord/message_obj-25";
                    }
                case TAG("Chords/NextChord/message_obj-66"):
                    {
                    return "Chords/NextChord/message_obj-66";
                    }
                case TAG("Chords/NextChord/message_obj-65"):
                    {
                    return "Chords/NextChord/message_obj-65";
                    }
                case TAG("Chords/NextChord/message_obj-203"):
                    {
                    return "Chords/NextChord/message_obj-203";
                    }
                case TAG("Chords/NextChord/message_obj-71"):
                    {
                    return "Chords/NextChord/message_obj-71";
                    }
                case TAG("Chords/NextChord/message_obj-2"):
                    {
                    return "Chords/NextChord/message_obj-2";
                    }
                case TAG("Chords/NextChord/message_obj-77"):
                    {
                    return "Chords/NextChord/message_obj-77";
                    }
                case TAG("Chords/NextChord/message_obj-75"):
                    {
                    return "Chords/NextChord/message_obj-75";
                    }
                case TAG("Chords/NextChord/message_obj-91"):
                    {
                    return "Chords/NextChord/message_obj-91";
                    }
                case TAG("Chords/NextChord/message_obj-93"):
                    {
                    return "Chords/NextChord/message_obj-93";
                    }
                case TAG("Chords/NextChord/message_obj-201"):
                    {
                    return "Chords/NextChord/message_obj-201";
                    }
                case TAG("Chords/NextChord/message_obj-92"):
                    {
                    return "Chords/NextChord/message_obj-92";
                    }
                case TAG("Chords/NextChord/number_obj-32"):
                    {
                    return "Chords/NextChord/number_obj-32";
                    }
                case TAG("Chords/NextChord/message_obj-81"):
                    {
                    return "Chords/NextChord/message_obj-81";
                    }
                case TAG("Chords/NextChord/message_obj-79"):
                    {
                    return "Chords/NextChord/message_obj-79";
                    }
                case TAG("Chords/NextChord/message_obj-78"):
                    {
                    return "Chords/NextChord/message_obj-78";
                    }
                case TAG("Chords/NextChord/message_obj-28"):
                    {
                    return "Chords/NextChord/message_obj-28";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("Chords/NextChord/loadbang_obj-197"):
                    {
                    return "Chords/NextChord/loadbang_obj-197";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 3:
                    {
                    return addressOf(this->liststore_05_storage_storageobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 1;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 3) {
                    this->liststore_05_storage_storage = new Float64Buffer(this->liststore_05_storage_storageobj);
                }
            }
            
            void initialize() {
                this->liststore_05_storage_storageobj = initDataRef("liststore_05_storage_storageobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->liststore_05_storage_storageobj->setIndex(3);
                this->liststore_05_storage_storage = new Float64Buffer(this->liststore_05_storage_storageobj);
            }
            
            protected:
            
            void numberobj_19_valin_set(number v) {
                this->numberobj_19_value_set(v);
            }
            
            void numberobj_19_format_set(number v) {
                this->numberobj_19_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_13_out1_bang_bang() {
                this->numberobj_19_value_bang();
            }
            
            void eventinlet_13_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_19_value_set(converted);
                }
            }
            
            void button_08_bangin_bang() {
                this->button_08_bangval_bang();
            }
            
            void button_09_bangin_bang() {
                this->button_09_bangval_bang();
            }
            
            void message_37_listin_list_set(const list& v) {
                this->message_37_set_set(v);
            }
            
            void message_37_listin_number_set(number v) {
                this->message_37_set_set(v);
            }
            
            void message_37_listin_bang_bang() {
                this->message_37_trigger_bang();
            }
            
            void button_10_bangin_bang() {
                this->button_10_bangval_bang();
            }
            
            void message_38_listin_list_set(const list& v) {
                this->message_38_set_set(v);
            }
            
            void message_38_listin_number_set(number v) {
                this->message_38_set_set(v);
            }
            
            void message_38_listin_bang_bang() {
                this->message_38_trigger_bang();
            }
            
            void numberobj_20_valin_set(number v) {
                this->numberobj_20_value_set(v);
            }
            
            void numberobj_20_format_set(number v) {
                this->numberobj_20_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_39_listin_list_set(const list& v) {
                this->message_39_set_set(v);
            }
            
            void message_39_listin_number_set(number v) {
                this->message_39_set_set(v);
            }
            
            void message_39_listin_bang_bang() {
                this->message_39_trigger_bang();
            }
            
            void loadbang_04_startupbang_bang() {
                this->loadbang_04_output_bang();
            }
            
            void button_11_bangin_bang() {
                this->button_11_bangval_bang();
            }
            
            void message_40_listin_list_set(const list& v) {
                this->message_40_set_set(v);
            }
            
            void message_40_listin_number_set(number v) {
                this->message_40_set_set(v);
            }
            
            void message_40_listin_bang_bang() {
                this->message_40_trigger_bang();
            }
            
            void message_41_listin_list_set(const list& v) {
                this->message_41_set_set(v);
            }
            
            void message_41_listin_number_set(number v) {
                this->message_41_set_set(v);
            }
            
            void message_41_listin_bang_bang() {
                this->message_41_trigger_bang();
            }
            
            void message_42_listin_list_set(const list& v) {
                this->message_42_set_set(v);
            }
            
            void message_42_listin_number_set(number v) {
                this->message_42_set_set(v);
            }
            
            void message_42_listin_bang_bang() {
                this->message_42_trigger_bang();
            }
            
            void message_43_listin_list_set(const list& v) {
                this->message_43_set_set(v);
            }
            
            void message_43_listin_number_set(number v) {
                this->message_43_set_set(v);
            }
            
            void message_43_listin_bang_bang() {
                this->message_43_trigger_bang();
            }
            
            void message_44_listin_list_set(const list& v) {
                this->message_44_set_set(v);
            }
            
            void message_44_listin_number_set(number v) {
                this->message_44_set_set(v);
            }
            
            void message_44_listin_bang_bang() {
                this->message_44_trigger_bang();
            }
            
            void message_45_listin_list_set(const list& v) {
                this->message_45_set_set(v);
            }
            
            void message_45_listin_number_set(number v) {
                this->message_45_set_set(v);
            }
            
            void message_45_listin_bang_bang() {
                this->message_45_trigger_bang();
            }
            
            void message_46_listin_list_set(const list& v) {
                this->message_46_set_set(v);
            }
            
            void message_46_listin_number_set(number v) {
                this->message_46_set_set(v);
            }
            
            void message_46_listin_bang_bang() {
                this->message_46_trigger_bang();
            }
            
            void message_47_listin_list_set(const list& v) {
                this->message_47_set_set(v);
            }
            
            void message_47_listin_number_set(number v) {
                this->message_47_set_set(v);
            }
            
            void message_47_listin_bang_bang() {
                this->message_47_trigger_bang();
            }
            
            void message_48_listin_list_set(const list& v) {
                this->message_48_set_set(v);
            }
            
            void message_48_listin_number_set(number v) {
                this->message_48_set_set(v);
            }
            
            void message_48_listin_bang_bang() {
                this->message_48_trigger_bang();
            }
            
            void message_49_listin_list_set(const list& v) {
                this->message_49_set_set(v);
            }
            
            void message_49_listin_number_set(number v) {
                this->message_49_set_set(v);
            }
            
            void message_49_listin_bang_bang() {
                this->message_49_trigger_bang();
            }
            
            void message_50_listin_list_set(const list& v) {
                this->message_50_set_set(v);
            }
            
            void message_50_listin_number_set(number v) {
                this->message_50_set_set(v);
            }
            
            void message_50_listin_bang_bang() {
                this->message_50_trigger_bang();
            }
            
            void message_51_listin_list_set(const list& v) {
                this->message_51_set_set(v);
            }
            
            void message_51_listin_number_set(number v) {
                this->message_51_set_set(v);
            }
            
            void message_51_listin_bang_bang() {
                this->message_51_trigger_bang();
            }
            
            void numberobj_21_valin_set(number v) {
                this->numberobj_21_value_set(v);
            }
            
            void numberobj_21_format_set(number v) {
                this->numberobj_21_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_52_listin_list_set(const list& v) {
                this->message_52_set_set(v);
            }
            
            void message_52_listin_number_set(number v) {
                this->message_52_set_set(v);
            }
            
            void message_52_listin_bang_bang() {
                this->message_52_trigger_bang();
            }
            
            void message_53_listin_list_set(const list& v) {
                this->message_53_set_set(v);
            }
            
            void message_53_listin_number_set(number v) {
                this->message_53_set_set(v);
            }
            
            void message_53_listin_bang_bang() {
                this->message_53_trigger_bang();
            }
            
            void message_54_listin_list_set(const list& v) {
                this->message_54_set_set(v);
            }
            
            void message_54_listin_number_set(number v) {
                this->message_54_set_set(v);
            }
            
            void message_54_listin_bang_bang() {
                this->message_54_trigger_bang();
            }
            
            void message_55_listin_list_set(const list& v) {
                this->message_55_set_set(v);
            }
            
            void message_55_listin_number_set(number v) {
                this->message_55_set_set(v);
            }
            
            void message_55_listin_bang_bang() {
                this->message_55_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_19_init();
                this->liststore_05_storage_init();
                this->message_37_init();
                this->message_38_init();
                this->numberobj_20_init();
                this->message_39_init();
                this->message_40_init();
                this->message_41_init();
                this->message_42_init();
                this->message_43_init();
                this->message_44_init();
                this->message_45_init();
                this->message_46_init();
                this->message_47_init();
                this->message_48_init();
                this->message_49_init();
                this->message_50_init();
                this->message_51_init();
                this->numberobj_21_init();
                this->message_52_init();
                this->message_53_init();
                this->message_54_init();
                this->message_55_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->liststore_05_storage_storage = this->liststore_05_storage_storage->allocateIfNeeded();
            
                if (this->liststore_05_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_05_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_05_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(3);
                }
            }
            
            void message_43_set_set(const list& v) {
                this->message_43_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-203"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_05_out3_set(number v) {
                {
                    list converted = {v};
                    this->message_43_set_set(converted);
                }
            }
            
            void eventoutlet_08_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_08_out1_list_set((list)v);
            }
            
            void liststore_05_out1_set(const list& v) {
                this->eventoutlet_08_in1_list_set(v);
            }
            
            void liststore_05_out2_bang() {}
            
            void liststore_05_lookupidx_set(number v) {
                this->liststore_05_lookupidx = v;
                list val = this->liststore_05_storage_lookup(v);
                this->liststore_05_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_05_out1_set(this->liststore_05_storage_lookup(v));
                } else {
                    this->liststore_05_out2_bang();
                }
            }
            
            void numberobj_19_output_set(number v) {
                this->liststore_05_lookupidx_set(v);
            }
            
            void numberobj_19_value_set(number v) {
                this->numberobj_19_value_setter(v);
                v = this->numberobj_19_value;
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/NextChord/number_obj-61"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_19_output_set(localvalue);
            }
            
            void eventinlet_13_out1_number_set(number v) {
                this->numberobj_19_value_set(v);
            }
            
            void numberobj_19_value_bang() {
                number v = this->numberobj_19_value;
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/NextChord/number_obj-61"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_19_output_set(localvalue);
            }
            
            void message_50_set_set(const list& v) {
                this->message_50_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-201"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_05_out4_set(number v) {
                {
                    list converted = {v};
                    this->message_50_set_set(converted);
                }
            }
            
            void liststore_05_count_bang() {
                number n = 0;
            
                for (number i = 0; i < 13; i++) {
                    if (this->liststore_05_storage_lookup(i)->length > 0)
                        n++;
                }
            
                this->liststore_05_out4_set(n);
            }
            
            void button_08_output_bang() {
                this->liststore_05_count_bang();
            }
            
            void button_08_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/NextChord/button_obj-35"), this->_currentTime);;
                this->button_08_output_bang();
            }
            
            void liststore_05_dump_bang() {
                for (number i = 0; i < 13; i++) {
                    list val = this->liststore_05_storage_lookup(i);
            
                    if (val->length > 0) {
                        this->liststore_05_out3_set(i);
                        this->liststore_05_out1_set(val);
                    }
                }
            }
            
            void button_09_output_bang() {
                this->liststore_05_dump_bang();
            }
            
            void button_09_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/NextChord/button_obj-27"), this->_currentTime);;
                this->button_09_output_bang();
            }
            
            void message_37_set_set(const list& v) {
                this->message_37_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-22"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_37_out_set(const list& ) {}
            
            void message_37_trigger_bang() {
                this->message_37_out_set(this->message_37_set);
            }
            
            void liststore_05_reset_bang() {
                this->liststore_05_storage_reset();
            }
            
            void button_10_output_bang() {
                this->liststore_05_reset_bang();
            }
            
            void button_10_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/NextChord/button_obj-29"), this->_currentTime);;
                this->button_10_output_bang();
            }
            
            void message_38_set_set(const list& v) {
                this->message_38_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-21"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_38_out_set(const list& ) {}
            
            void message_38_trigger_bang() {
                this->message_38_out_set(this->message_38_set);
            }
            
            void liststore_05_remove_set(number v) {
                this->liststore_05_storage_store(v, {});
            }
            
            void numberobj_20_output_set(number v) {
                this->liststore_05_remove_set(v);
            }
            
            void numberobj_20_value_set(number v) {
                this->numberobj_20_value_setter(v);
                v = this->numberobj_20_value;
                number localvalue = v;
            
                if (this->numberobj_20_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/NextChord/number_obj-55"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_20_output_set(localvalue);
            }
            
            void message_39_set_set(const list& v) {
                this->message_39_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-17"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_39_out_set(const list& ) {}
            
            void message_39_trigger_bang() {
                this->message_39_out_set(this->message_39_set);
            }
            
            void liststore_05_storeidx_set(number v) {
                this->liststore_05_storeidx = v;
            }
            
            void numberobj_21_output_set(number v) {
                this->liststore_05_storeidx_set(v);
            }
            
            void numberobj_21_value_set(number v) {
                this->numberobj_21_value_setter(v);
                v = this->numberobj_21_value;
                number localvalue = v;
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/NextChord/number_obj-32"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_21_output_set(localvalue);
            }
            
            void liststore_05_storelist_set(const list& v) {
                this->liststore_05_storelist = jsCreateListCopy(v);
                this->liststore_05_storage_store(this->liststore_05_storeidx, v);
            }
            
            void message_40_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_40_trigger_bang() {
                this->message_40_out_set(this->message_40_set);
            }
            
            void select_05_match1_bang() {
                this->message_40_trigger_bang();
            }
            
            void message_41_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_41_trigger_bang() {
                this->message_41_out_set(this->message_41_set);
            }
            
            void select_05_match2_bang() {
                this->message_41_trigger_bang();
            }
            
            void message_42_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_42_trigger_bang() {
                this->message_42_out_set(this->message_42_set);
            }
            
            void select_05_match3_bang() {
                this->message_42_trigger_bang();
            }
            
            void message_44_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_44_trigger_bang() {
                this->message_44_out_set(this->message_44_set);
            }
            
            void select_05_match4_bang() {
                this->message_44_trigger_bang();
            }
            
            void message_46_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_46_trigger_bang() {
                this->message_46_out_set(this->message_46_set);
            }
            
            void select_05_match5_bang() {
                this->message_46_trigger_bang();
            }
            
            void message_47_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_47_trigger_bang() {
                this->message_47_out_set(this->message_47_set);
            }
            
            void select_05_match6_bang() {
                this->message_47_trigger_bang();
            }
            
            void message_48_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_48_trigger_bang() {
                this->message_48_out_set(this->message_48_set);
            }
            
            void select_05_match7_bang() {
                this->message_48_trigger_bang();
            }
            
            void message_49_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_49_trigger_bang() {
                this->message_49_out_set(this->message_49_set);
            }
            
            void select_05_match8_bang() {
                this->message_49_trigger_bang();
            }
            
            void message_51_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_51_trigger_bang() {
                this->message_51_out_set(this->message_51_set);
            }
            
            void select_05_match9_bang() {
                this->message_51_trigger_bang();
            }
            
            void message_52_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_52_trigger_bang() {
                this->message_52_out_set(this->message_52_set);
            }
            
            void select_05_match10_bang() {
                this->message_52_trigger_bang();
            }
            
            void message_53_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_53_trigger_bang() {
                this->message_53_out_set(this->message_53_set);
            }
            
            void select_05_match11_bang() {
                this->message_53_trigger_bang();
            }
            
            void message_54_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_54_trigger_bang() {
                this->message_54_out_set(this->message_54_set);
            }
            
            void select_05_match12_bang() {
                this->message_54_trigger_bang();
            }
            
            void message_55_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_55_trigger_bang() {
                this->message_55_out_set(this->message_55_set);
            }
            
            void select_05_match13_bang() {
                this->message_55_trigger_bang();
            }
            
            void select_05_nomatch_number_set(number ) {}
            
            void select_05_input_number_set(number v) {
                if (v == this->select_05_test1)
                    this->select_05_match1_bang();
                else if (v == this->select_05_test2)
                    this->select_05_match2_bang();
                else if (v == this->select_05_test3)
                    this->select_05_match3_bang();
                else if (v == this->select_05_test4)
                    this->select_05_match4_bang();
                else if (v == this->select_05_test5)
                    this->select_05_match5_bang();
                else if (v == this->select_05_test6)
                    this->select_05_match6_bang();
                else if (v == this->select_05_test7)
                    this->select_05_match7_bang();
                else if (v == this->select_05_test8)
                    this->select_05_match8_bang();
                else if (v == this->select_05_test9)
                    this->select_05_match9_bang();
                else if (v == this->select_05_test10)
                    this->select_05_match10_bang();
                else if (v == this->select_05_test11)
                    this->select_05_match11_bang();
                else if (v == this->select_05_test12)
                    this->select_05_match12_bang();
                else if (v == this->select_05_test13)
                    this->select_05_match13_bang();
                else
                    this->select_05_nomatch_number_set(v);
            }
            
            void uzi_04_index_set(number v) {
                this->numberobj_21_value_set(v);
                this->select_05_input_number_set(v);
            }
            
            void uzi_04_out_bang() {}
            
            void uzi_04_carry_bang() {}
            
            void uzi_04_start_bang_bang() {
                this->uzi_04_gobang(0);
            }
            
            void loadbang_04_output_bang() {
                this->uzi_04_start_bang_bang();
            }
            
            void loadbang_04_input_bang() {
                this->loadbang_04_output_bang();
            }
            
            void button_11_output_bang() {
                this->loadbang_04_input_bang();
            }
            
            void button_11_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/NextChord/button_obj-186"), this->_currentTime);;
                this->button_11_output_bang();
            }
            
            void message_40_set_set(const list& v) {
                this->message_40_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-25"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_41_set_set(const list& v) {
                this->message_41_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_42_set_set(const list& v) {
                this->message_42_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-65"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_43_out_set(const list& ) {}
            
            void message_43_trigger_bang() {
                this->message_43_out_set(this->message_43_set);
            }
            
            void message_44_set_set(const list& v) {
                this->message_44_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-71"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_45_set_set(const list& v) {
                this->message_45_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-2"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_45_out_set(const list& ) {}
            
            void message_45_trigger_bang() {
                this->message_45_out_set(this->message_45_set);
            }
            
            void message_46_set_set(const list& v) {
                this->message_46_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-77"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_47_set_set(const list& v) {
                this->message_47_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-75"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_48_set_set(const list& v) {
                this->message_48_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-91"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_49_set_set(const list& v) {
                this->message_49_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-93"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_50_out_set(const list& ) {}
            
            void message_50_trigger_bang() {
                this->message_50_out_set(this->message_50_set);
            }
            
            void message_51_set_set(const list& v) {
                this->message_51_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-92"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_52_set_set(const list& v) {
                this->message_52_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-81"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_53_set_set(const list& v) {
                this->message_53_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-79"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_54_set_set(const list& v) {
                this->message_54_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-78"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_55_set_set(const list& v) {
                this->message_55_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-28"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_19_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_19_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_19_value = localvalue;
            }
            
            void numberobj_20_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_20_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_20_value = localvalue;
            }
            
            void numberobj_21_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_21_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_21_value = localvalue;
            }
            
            void numberobj_19_init() {
                this->numberobj_19_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/NextChord/number_obj-61"), 1, this->_currentTime);
            }
            
            void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_19_value;
            }
            
            void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_19_value_set(preset["value"]);
            }
            
            list liststore_05_storage_next(number index) {
                return this->liststore_05_storage_lookup(index);
            }
            
            list liststore_05_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_05_storage__slotcount) {
                    number entrylength = this->liststore_05_storage_storage[(Index)(idx * this->liststore_05_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_05_storage_storage[(Index)(idx * this->liststore_05_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_05_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_05_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_05_storage_storage[(Index)(idx * this->liststore_05_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_05_storage_storage[(Index)(idx * this->liststore_05_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_05_storage_init() {
                this->liststore_05_storage__entrysize = 16 + 1;
                this->liststore_05_storage__slotcount = 13;
                int64_t storagesize = (int64_t)(13 * this->liststore_05_storage__entrysize);
                this->liststore_05_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_05_storage_clear() {
                this->liststore_05_storage_storage->setZero();
            }
            
            void liststore_05_storage_reset() {
                this->liststore_05_storage_init();
                this->liststore_05_storage_clear();
            }
            
            void message_37_init() {
                this->message_37_set_set({0, 1, 1, 1, 2, 2, 2});
            }
            
            void message_38_init() {
                this->message_38_set_set({0, 0, 2, 2, 2});
            }
            
            void numberobj_20_init() {
                this->numberobj_20_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/NextChord/number_obj-55"), 1, this->_currentTime);
            }
            
            void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_20_value;
            }
            
            void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_20_value_set(preset["value"]);
            }
            
            void message_39_init() {
                this->message_39_set_set({0, 0, 1});
            }
            
            void uzi_04_gobang(number start) {
                this->uzi_04_doPause = 0;
                this->uzi_04_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_04_count; i++) {
                    if ((bool)(this->uzi_04_doPause)) {
                        this->uzi_04_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_04_index_set(i + this->uzi_04_base);
                        this->uzi_04_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_04_carry_bang();
            }
            
            void message_40_init() {
                this->message_40_set_set({1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5});
            }
            
            void message_41_init() {
                this->message_41_set_set({2, 2, 2, 3, 3, 3, 3, 4, 4, 4});
            }
            
            void message_42_init() {
                this->message_42_set_set({3, 3, 3, 4, 4, 4, 4, 4, 5, 5});
            }
            
            void message_43_init() {
                this->message_43_set_set({1});
            }
            
            void message_44_init() {
                this->message_44_set_set({0, 0, 0, 1, 1, 1, 1});
            }
            
            void message_45_init() {
                this->message_45_set_set({2, 2, 2, 3, 3, 3, 3, 7});
            }
            
            void message_46_init() {
                this->message_46_set_set({0, 0, 0, 0, 3, 3, 3, 5});
            }
            
            void message_47_init() {
                this->message_47_set_set({0, 0, 0, 0, 0, 1});
            }
            
            void message_48_init() {
                this->message_48_set_set({0, 0, 0, 0, 1, 2, 2, 5});
            }
            
            void message_49_init() {
                this->message_49_set_set({3});
            }
            
            void message_50_init() {
                this->message_50_set_set({7});
            }
            
            void message_51_init() {
                this->message_51_set_set({1});
            }
            
            void numberobj_21_init() {
                this->numberobj_21_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/NextChord/number_obj-32"), 1, this->_currentTime);
            }
            
            void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_21_value;
            }
            
            void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_21_value_set(preset["value"]);
            }
            
            void message_52_init() {
                this->message_52_set_set({4});
            }
            
            void message_53_init() {
                this->message_53_set_set({6});
            }
            
            void message_54_init() {
                this->message_54_set_set({2});
            }
            
            void message_55_init() {
                this->message_55_set_set({1, 1, 1, 6, 0, 0});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                numberobj_19_value = 0;
                numberobj_19_value_setter(numberobj_19_value);
                liststore_05_lookupidx = 0;
                liststore_05_storeidx = 0;
                numberobj_20_value = 0;
                numberobj_20_value_setter(numberobj_20_value);
                uzi_04_start_number = 0;
                uzi_04_count = 13;
                uzi_04_base = 0;
                select_05_test1 = 0;
                select_05_test2 = 1;
                select_05_test3 = 2;
                select_05_test4 = 3;
                select_05_test5 = 4;
                select_05_test6 = 5;
                select_05_test7 = 6;
                select_05_test8 = 7;
                select_05_test9 = 8;
                select_05_test10 = 9;
                select_05_test11 = 10;
                select_05_test12 = 11;
                select_05_test13 = 12;
                numberobj_21_value = 0;
                numberobj_21_value_setter(numberobj_21_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_19_currentFormat = 6;
                numberobj_19_lastValue = 0;
                liststore_05_storage__slotcount = 1024;
                liststore_05_storage__entrysize = 65;
                numberobj_20_currentFormat = 6;
                numberobj_20_lastValue = 0;
                uzi_04_doPause = 0;
                uzi_04_pausecount = 0;
                numberobj_21_currentFormat = 6;
                numberobj_21_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number numberobj_19_value;
                number liststore_05_lookupidx;
                list liststore_05_storelist;
                number liststore_05_storeidx;
                list message_37_set;
                list message_38_set;
                number numberobj_20_value;
                list message_39_set;
                number uzi_04_start_number;
                number uzi_04_count;
                number uzi_04_base;
                list message_40_set;
                number select_05_test1;
                number select_05_test2;
                number select_05_test3;
                number select_05_test4;
                number select_05_test5;
                number select_05_test6;
                number select_05_test7;
                number select_05_test8;
                number select_05_test9;
                number select_05_test10;
                number select_05_test11;
                number select_05_test12;
                number select_05_test13;
                list message_41_set;
                list message_42_set;
                list message_43_set;
                list message_44_set;
                list message_45_set;
                list message_46_set;
                list message_47_set;
                list message_48_set;
                list message_49_set;
                list message_50_set;
                list message_51_set;
                number numberobj_21_value;
                list message_52_set;
                list message_53_set;
                list message_54_set;
                list message_55_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_19_currentFormat;
                number numberobj_19_lastValue;
                Float64BufferRef liststore_05_storage_storage;
                number liststore_05_storage__slotcount;
                number liststore_05_storage__entrysize;
                Int numberobj_20_currentFormat;
                number numberobj_20_lastValue;
                number uzi_04_doPause;
                long uzi_04_pausecount;
                Int numberobj_21_currentFormat;
                number numberobj_21_lastValue;
                number stackprotect_count;
                DataRef liststore_05_storage_storageobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_175()
    {
    }
    
    ~RNBOSubpatcher_175()
    {
        delete this->p_07;
        delete this->p_08;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_07_perform(n);
        this->p_08_perform(n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_07 = new RNBOSubpatcher_147();
        this->p_07->setEngineAndPatcher(this->getEngine(), this);
        this->p_07->initialize();
        this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
        this->p_08 = new RNBOSubpatcher_148();
        this->p_08->setEngineAndPatcher(this->getEngine(), this);
        this->p_08->initialize();
        this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "ChordColl"));
        this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "NextChord"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                this->p_07->setParameterValue(index, v, time);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                this->p_08->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterValue(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_07->getNumParameters() + this->p_08->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterName(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterId(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_07->getNumParameters())
                    this->p_07->getParameterInfo(index, info);
    
                index -= this->p_07->getNumParameters();
    
                if (index < this->p_08->getNumParameters())
                    this->p_08->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_07)
            return 0;
    
        if (subpatcher == this->p_08)
            return 0 + this->p_07->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->constrainParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Chords/message_obj-11") == objectId)
                this->message_56_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-8") == objectId)
                this->message_57_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-20") == objectId)
                this->message_58_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-9") == objectId)
                this->message_59_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-38") == objectId)
                this->message_60_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-42") == objectId)
                this->message_61_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-3") == objectId)
                this->message_62_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("Chords/number_obj-29") == objectId)
                this->numberobj_22_valin_set(payload);
    
            if (TAG("Chords/number_obj-32") == objectId)
                this->numberobj_23_valin_set(payload);
    
            if (TAG("Chords/number_obj-6") == objectId)
                this->numberobj_24_valin_set(payload);
    
            if (TAG("Chords/number_obj-14") == objectId)
                this->numberobj_25_valin_set(payload);
    
            if (TAG("Chords/number_obj-37") == objectId)
                this->numberobj_26_valin_set(payload);
    
            if (TAG("Chords/number_obj-40") == objectId)
                this->numberobj_27_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Chords/number_obj-29") == objectId)
                this->numberobj_22_format_set(payload);
    
            if (TAG("Chords/number_obj-32") == objectId)
                this->numberobj_23_format_set(payload);
    
            if (TAG("Chords/number_obj-6") == objectId)
                this->numberobj_24_format_set(payload);
    
            if (TAG("Chords/number_obj-14") == objectId)
                this->numberobj_25_format_set(payload);
    
            if (TAG("Chords/number_obj-37") == objectId)
                this->numberobj_26_format_set(payload);
    
            if (TAG("Chords/number_obj-40") == objectId)
                this->numberobj_27_format_set(payload);
    
            break;
            }
        }
    
        this->p_07->processNumMessage(tag, objectId, time, payload);
        this->p_08->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Chords/message_obj-11") == objectId)
                this->message_56_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-8") == objectId)
                this->message_57_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-20") == objectId)
                this->message_58_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-9") == objectId)
                this->message_59_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-38") == objectId)
                this->message_60_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-42") == objectId)
                this->message_61_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-3") == objectId)
                this->message_62_listin_list_set(payload);
    
            break;
            }
        }
    
        this->p_07->processListMessage(tag, objectId, time, payload);
        this->p_08->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Chords/message_obj-11") == objectId)
                this->message_56_listin_bang_bang();
    
            if (TAG("Chords/message_obj-8") == objectId)
                this->message_57_listin_bang_bang();
    
            if (TAG("Chords/message_obj-20") == objectId)
                this->message_58_listin_bang_bang();
    
            if (TAG("Chords/message_obj-9") == objectId)
                this->message_59_listin_bang_bang();
    
            if (TAG("Chords/message_obj-38") == objectId)
                this->message_60_listin_bang_bang();
    
            if (TAG("Chords/message_obj-42") == objectId)
                this->message_61_listin_bang_bang();
    
            if (TAG("Chords/message_obj-3") == objectId)
                this->message_62_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("Chords/button_obj-26") == objectId)
                this->button_12_bangin_bang();
    
            break;
            }
        }
    
        this->p_07->processBangMessage(tag, objectId, time);
        this->p_08->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("Chords/message_obj-11"):
            {
            return "Chords/message_obj-11";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Chords/number_obj-29"):
            {
            return "Chords/number_obj-29";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("Chords/button_obj-26"):
            {
            return "Chords/button_obj-26";
            }
        case TAG("Chords/message_obj-8"):
            {
            return "Chords/message_obj-8";
            }
        case TAG("Chords/number_obj-32"):
            {
            return "Chords/number_obj-32";
            }
        case TAG("Chords/number_obj-6"):
            {
            return "Chords/number_obj-6";
            }
        case TAG("Chords/number_obj-14"):
            {
            return "Chords/number_obj-14";
            }
        case TAG("Chords/number_obj-37"):
            {
            return "Chords/number_obj-37";
            }
        case TAG("Chords/message_obj-20"):
            {
            return "Chords/message_obj-20";
            }
        case TAG("Chords/message_obj-9"):
            {
            return "Chords/message_obj-9";
            }
        case TAG("Chords/number_obj-40"):
            {
            return "Chords/number_obj-40";
            }
        case TAG("Chords/message_obj-38"):
            {
            return "Chords/message_obj-38";
            }
        case TAG("Chords/message_obj-42"):
            {
            return "Chords/message_obj-42";
            }
        case TAG("Chords/message_obj-3"):
            {
            return "Chords/message_obj-3";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_07->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_08->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 2) {
            this->mtof_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
            this->mtof_02_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
            this->mtof_03_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
            this->mtof_04_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
            this->mtof_05_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        this->p_07->processDataViewUpdate(index, time);
        this->p_08->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->mtof_02_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->mtof_03_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->mtof_04_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->mtof_05_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
    }
    
    protected:
    
    void message_56_listin_list_set(const list& v) {
        this->message_56_set_set(v);
    }
    
    void message_56_listin_number_set(number v) {
        this->message_56_set_set(v);
    }
    
    void message_56_listin_bang_bang() {
        this->message_56_trigger_bang();
    }
    
    void numberobj_22_valin_set(number v) {
        this->numberobj_22_value_set(v);
    }
    
    void numberobj_22_format_set(number v) {
        this->numberobj_22_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_12_bangin_bang() {
        this->button_12_bangval_bang();
    }
    
    void eventinlet_14_out1_number_set(number v) {
        this->numberobj_24_value_set(v);
        this->button_12_bangval_bang();
    }
    
    void eventinlet_14_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_24_value_set(converted);
        }
    
        this->button_12_bangval_bang();
    }
    
    void message_57_listin_list_set(const list& v) {
        this->message_57_set_set(v);
    }
    
    void message_57_listin_number_set(number v) {
        this->message_57_set_set(v);
    }
    
    void message_57_listin_bang_bang() {
        this->message_57_trigger_bang();
    }
    
    void numberobj_23_valin_set(number v) {
        this->numberobj_23_value_set(v);
    }
    
    void numberobj_23_format_set(number v) {
        this->numberobj_23_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_24_valin_set(number v) {
        this->numberobj_24_value_set(v);
    }
    
    void numberobj_24_format_set(number v) {
        this->numberobj_24_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_25_valin_set(number v) {
        this->numberobj_25_value_set(v);
    }
    
    void numberobj_25_format_set(number v) {
        this->numberobj_25_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_26_valin_set(number v) {
        this->numberobj_26_value_set(v);
    }
    
    void numberobj_26_format_set(number v) {
        this->numberobj_26_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_58_listin_list_set(const list& v) {
        this->message_58_set_set(v);
    }
    
    void message_58_listin_number_set(number v) {
        this->message_58_set_set(v);
    }
    
    void message_58_listin_bang_bang() {
        this->message_58_trigger_bang();
    }
    
    void message_59_listin_list_set(const list& v) {
        this->message_59_set_set(v);
    }
    
    void message_59_listin_number_set(number v) {
        this->message_59_set_set(v);
    }
    
    void message_59_listin_bang_bang() {
        this->message_59_trigger_bang();
    }
    
    void numberobj_27_valin_set(number v) {
        this->numberobj_27_value_set(v);
    }
    
    void numberobj_27_format_set(number v) {
        this->numberobj_27_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_60_listin_list_set(const list& v) {
        this->message_60_set_set(v);
    }
    
    void message_60_listin_number_set(number v) {
        this->message_60_set_set(v);
    }
    
    void message_60_listin_bang_bang() {
        this->message_60_trigger_bang();
    }
    
    void message_61_listin_list_set(const list& v) {
        this->message_61_set_set(v);
    }
    
    void message_61_listin_number_set(number v) {
        this->message_61_set_set(v);
    }
    
    void message_61_listin_bang_bang() {
        this->message_61_trigger_bang();
    }
    
    void message_62_listin_list_set(const list& v) {
        this->message_62_set_set(v);
    }
    
    void message_62_listin_number_set(number v) {
        this->message_62_set_set(v);
    }
    
    void message_62_listin_bang_bang() {
        this->message_62_trigger_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->message_56_init();
        this->numberobj_22_init();
        this->mtof_01_innerScala_init();
        this->mtof_01_init();
        this->message_57_init();
        this->numberobj_23_init();
        this->mtof_02_innerScala_init();
        this->mtof_02_init();
        this->change_02_init();
        this->numberobj_24_init();
        this->numberobj_25_init();
        this->random_02_nz_init();
        this->numberobj_26_init();
        this->mtof_03_innerScala_init();
        this->mtof_03_init();
        this->message_58_init();
        this->message_59_init();
        this->numberobj_27_init();
        this->message_60_init();
        this->mtof_04_innerScala_init();
        this->mtof_04_init();
        this->mtof_05_innerScala_init();
        this->mtof_05_init();
        this->message_61_init();
        this->message_62_init();
        this->p_07->initializeObjects();
        this->p_08->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_07->startup();
        this->p_08->startup();
    }
    
    void allocateDataRefs() {
        this->p_07->allocateDataRefs();
        this->p_08->allocateDataRefs();
        this->mtof_01_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_01_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_02_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_02_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_03_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_03_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_04_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_04_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_05_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_05_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_01_innerMtoF_buffer = this->mtof_01_innerMtoF_buffer->allocateIfNeeded();
        this->mtof_02_innerMtoF_buffer = this->mtof_02_innerMtoF_buffer->allocateIfNeeded();
        this->mtof_03_innerMtoF_buffer = this->mtof_03_innerMtoF_buffer->allocateIfNeeded();
        this->mtof_04_innerMtoF_buffer = this->mtof_04_innerMtoF_buffer->allocateIfNeeded();
        this->mtof_05_innerMtoF_buffer = this->mtof_05_innerMtoF_buffer->allocateIfNeeded();
    }
    
    void change_02_zero_set(number ) {}
    
    void change_02_nonzero_set(number ) {}
    
    void change_02_out_set(number v) {
        this->change_02_out = v;
    }
    
    void change_02_input_set(number v) {
        this->change_02_input = v;
    
        if (v != this->change_02_prev) {
            number prev = this->change_02_prev;
            this->change_02_prev = v;
    
            if (v == 0) {
                this->change_02_zero_set(1);
            } else if (this->change_02_out == 0) {
                this->change_02_nonzero_set(1);
            }
    
            {
                this->change_02_out_set(v);
            }
        } else {
            this->change_02_prev = v;
        }
    }
    
    void numberobj_24_output_set(number v) {
        this->change_02_input_set(v);
    }
    
    void numberobj_24_value_bang() {
        number v = this->numberobj_24_value;
        number localvalue = v;
    
        if (this->numberobj_24_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-6"), localvalue, this->_currentTime);
        this->numberobj_24_output_set(localvalue);
    }
    
    void message_59_set_set(const list& v) {
        this->message_59_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-9"), v, this->_currentTime);
    }
    
    void random_02_limit_set(number v) {
        this->random_02_limit_setter(v);
        v = this->random_02_limit;
    }
    
    void listlen_01_out1_set(number v) {
        this->random_02_limit_set(v);
    }
    
    void listlen_01_input_set(const list& input) {
        this->listlen_01_input = jsCreateListCopy(input);
    
        {
            this->listlen_01_out1_set(input->length);
            return;
        }
    }
    
    void trigger_04_out3_set(const list& v) {
        this->listlen_01_input_set(v);
    }
    
    void listindex_01_index_set(const list& v) {
        this->listindex_01_index = jsCreateListCopy(v);
    }
    
    void numberobj_25_output_set(number v) {
        {
            list converted = {v};
            this->listindex_01_index_set(converted);
        }
    }
    
    void numberobj_25_value_set(number v) {
        this->numberobj_25_value_setter(v);
        v = this->numberobj_25_value;
        number localvalue = v;
    
        if (this->numberobj_25_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-14"), localvalue, this->_currentTime);
        this->numberobj_25_output_set(localvalue);
    }
    
    void random_02_result_set(number v) {
        this->numberobj_25_value_set(v);
    }
    
    void random_02_trigger_bang() {
        this->random_02_result_set(rnbo_abs(this->random_02_nz_next()) * this->random_02_limit);
    }
    
    void trigger_04_out2_bang() {
        this->random_02_trigger_bang();
    }
    
    void listindex_01_out2_set(const list& ) {}
    
    void message_57_set_set(const list& v) {
        this->message_57_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-8"), v, this->_currentTime);
    }
    
    void intnum_01_value_set(number v) {
        this->intnum_01_value = v;
        this->intnum_01_stored = v;
    }
    
    void listindex_01_out1_set(number v) {
        {
            list converted = {v};
            this->message_57_set_set(converted);
        }
    
        this->intnum_01_value_set(v);
    }
    
    void listindex_01_input_set(const list& v) {
        this->listindex_01_input = jsCreateListCopy(v);
        list result = jsCreateListCopy(v);
    
        if (this->listindex_01_index->length > 0 && this->listindex_01_index[0] < v->length && this->listindex_01_index[0] >= 0) {
            number nth = v[(Index)this->listindex_01_index[0]];
    
            if (this->listindex_01_index->length == 1)
                result->splice(this->listindex_01_index[0], 1);
            else
                result->splice(this->listindex_01_index[0], 1, this->listindex_01_index[1]);
    
            this->listindex_01_out2_set(result);
            this->listindex_01_out1_set(nth);
        } else if ((bool)(this->listindex_01_input->length))
            this->listindex_01_out2_set(v);
    }
    
    void trigger_04_out1_set(const list& v) {
        this->listindex_01_input_set(v);
    }
    
    void trigger_04_input_list_set(const list& v) {
        this->trigger_04_out3_set(v);
        this->trigger_04_out2_bang();
        this->trigger_04_out1_set(v);
    }
    
    void p_08_out1_list_set(const list& v) {
        this->message_59_set_set(v);
        this->trigger_04_input_list_set(v);
    }
    
    void p_08_in1_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->eventinlet_13_out1_number_set(v);
    }
    
    void receive_04_output_number_set(number v) {
        this->receive_04_output_number = v;
        this->p_08_in1_number_set(v);
    }
    
    void send_03_input_number_set(number v) {
        this->send_03_input_number = v;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_35_source_currentChord_Index_number_set(v);
        this->receive_04_output_number_set(v);
    }
    
    void message_62_set_set(const list& v) {
        this->message_62_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-3"), v, this->_currentTime);
    }
    
    void send_02_input_bang_bang() {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_35_source_BassBang_bang_bang();
    }
    
    void message_61_set_set(const list& v) {
        this->message_61_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-42"), v, this->_currentTime);
    }
    
    void counter_02_output_set(number v) {
        this->counter_02_output = v;
    
        {
            list converted = {v};
            this->message_61_set_set(converted);
        }
    }
    
    void counter_02_overflow_bang_bang() {}
    
    number counter_02_overflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_02_overflow_number_set(number v) {
        v = this->counter_02_overflow_number_constrain(v);
        this->counter_02_overflow_number = v;
    }
    
    void counter_02_carry_set(number v) {
        this->counter_02_carry = v;
    }
    
    void counter_02_underflow_bang_bang() {}
    
    number counter_02_underflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_02_underflow_number_set(number v) {
        v = this->counter_02_underflow_number_constrain(v);
        this->counter_02_underflow_number = v;
    }
    
    void counter_02_input_bang() {
        this->counter_02_output_set(this->counter_02_count);
        this->counter_02_inc();
    
        if (this->counter_02_count > this->counter_02_maximum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_maximum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_minimum;
    
            if ((bool)(!(bool)(this->counter_02_overflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_overflow_bang_bang();
                else
                    this->counter_02_overflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_overflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_overflow_number_set(0);
    
        if (this->counter_02_count < this->counter_02_minimum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_minimum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_maximum;
    
            if ((bool)(!(bool)(this->counter_02_underflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_underflow_bang_bang();
                else
                    this->counter_02_underflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_underflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_underflow_number_set(0);
    }
    
    void trigger_05_out2_bang() {
        this->send_02_input_bang_bang();
        this->counter_02_input_bang();
    }
    
    void switchobj_01_onoff_set(number v) {
        this->switchobj_01_onoff = v;
    }
    
    void expr_12_out1_set(number v) {
        this->expr_12_out1 = v;
        this->switchobj_01_onoff_set(this->expr_12_out1);
    }
    
    void expr_12_in1_set(number in1) {
        this->expr_12_in1 = in1;
        this->expr_12_out1_set(this->expr_12_in1 + this->expr_12_in2);//#map:Chords/+_obj-47:1
    }
    
    void expr_12_in2_set(number v) {
        this->expr_12_in2 = v;
    }
    
    void message_61_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_12_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_12_in1_set(converted);
        }
    }
    
    void message_61_trigger_bang() {
        this->message_61_out_set(this->message_61_set);
    }
    
    void trigger_05_out1_bang() {
        this->message_61_trigger_bang();
    }
    
    void trigger_05_input_number_set(number v) {
        RNBO_UNUSED(v);
        this->trigger_05_out2_bang();
        this->trigger_05_out1_bang();
    }
    
    void p_07_out5_number_set(number v) {
        this->send_03_input_number_set(v);
    
        {
            list converted = {v};
            this->message_62_set_set(converted);
        }
    
        this->trigger_05_input_number_set(v);
    }
    
    void eventoutlet_12_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_35_out4_number_set(v);
    }
    
    void expr_10_out1_set(number v) {
        this->expr_10_out1 = v;
        this->eventoutlet_12_in1_number_set(this->expr_10_out1);
    }
    
    void expr_10_in1_set(number in1) {
        this->expr_10_in1 = in1;
        this->expr_10_out1_set(this->expr_10_in1 + this->expr_10_in2);//#map:Chords/+_obj-4:1
    }
    
    void numberobj_27_output_set(number v) {
        this->expr_10_in1_set(v);
    }
    
    void numberobj_27_value_set(number v) {
        this->numberobj_27_value_setter(v);
        v = this->numberobj_27_value;
        number localvalue = v;
    
        if (this->numberobj_27_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-40"), localvalue, this->_currentTime);
        this->numberobj_27_output_set(localvalue);
    }
    
    void mtof_04_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_27_value_set(converted);
        }
    }
    
    void mtof_04_midivalue_set(const list& v) {
        this->mtof_04_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_04_midivalue->length; i++) {
            tmp->push(
                this->mtof_04_innerMtoF_next(this->mtof_04_midivalue[(Index)i], this->mtof_04_base)
            );
        }
    
        this->mtof_04_out_set(tmp);
    }
    
    void p_07_out4_number_set(number v) {
        {
            list converted = {v};
            this->mtof_04_midivalue_set(converted);
        }
    }
    
    void send_01_input_list_set(const list& v) {
        this->send_01_input_list = jsCreateListCopy(v);
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_35_source_Bass_list_set(v);
    }
    
    void message_58_set_set(const list& v) {
        this->message_58_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-20"), v, this->_currentTime);
    }
    
    void mtof_05_out_set(const list& v) {
        this->send_01_input_list_set(v);
        this->message_58_set_set(v);
    }
    
    void mtof_05_midivalue_set(const list& v) {
        this->mtof_05_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_05_midivalue->length; i++) {
            tmp->push(
                this->mtof_05_innerMtoF_next(this->mtof_05_midivalue[(Index)i], this->mtof_05_base)
            );
        }
    
        this->mtof_05_out_set(tmp);
    }
    
    void message_60_set_set(const list& v) {
        this->message_60_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-38"), v, this->_currentTime);
    }
    
    void expr_11_out1_set(number v) {
        this->expr_11_out1 = v;
    
        {
            list converted = {this->expr_11_out1};
            this->mtof_05_midivalue_set(converted);
        }
    
        {
            list converted = {this->expr_11_out1};
            this->message_60_set_set(converted);
        }
    }
    
    void expr_11_in1_set(number in1) {
        this->expr_11_in1 = in1;
        this->expr_11_out1_set(this->expr_11_in1 - this->expr_11_in2);//#map:Chords/-_obj-35:1
    }
    
    void switchobj_01_out_number_set(number v) {
        this->expr_11_in1_set(v);
    }
    
    void switchobj_01_in3_number_set(number v) {
        if (this->switchobj_01_onoff == 3) {
            this->switchobj_01_out_number_set(v);
        }
    }
    
    void expr_13_out1_set(number v) {
        this->expr_13_out1 = v;
        this->switchobj_01_in3_number_set(this->expr_13_out1);
    }
    
    void expr_13_in1_set(number in1) {
        this->expr_13_in1 = in1;
        this->expr_13_out1_set(this->expr_13_in1 - this->expr_13_in2);//#map:Chords/-_obj-49:1
    }
    
    void eventoutlet_11_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_35_out3_number_set(v);
    }
    
    void expr_09_out1_set(number v) {
        this->expr_09_out1 = v;
        this->eventoutlet_11_in1_number_set(this->expr_09_out1);
    }
    
    void expr_09_in1_set(number in1) {
        this->expr_09_in1 = in1;
        this->expr_09_out1_set(this->expr_09_in1 + this->expr_09_in2);//#map:Chords/+_obj-220:1
    }
    
    void numberobj_26_output_set(number v) {
        this->expr_09_in1_set(v);
    }
    
    void numberobj_26_value_set(number v) {
        this->numberobj_26_value_setter(v);
        v = this->numberobj_26_value;
        number localvalue = v;
    
        if (this->numberobj_26_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-37"), localvalue, this->_currentTime);
        this->numberobj_26_output_set(localvalue);
    }
    
    void mtof_03_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_26_value_set(converted);
        }
    }
    
    void mtof_03_midivalue_set(const list& v) {
        this->mtof_03_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_03_midivalue->length; i++) {
            tmp->push(
                this->mtof_03_innerMtoF_next(this->mtof_03_midivalue[(Index)i], this->mtof_03_base)
            );
        }
    
        this->mtof_03_out_set(tmp);
    }
    
    void p_07_out3_number_set(number v) {
        this->expr_13_in1_set(v);
    
        {
            list converted = {v};
            this->mtof_03_midivalue_set(converted);
        }
    }
    
    void switchobj_01_in2_number_set(number v) {
        if (this->switchobj_01_onoff == 2) {
            this->switchobj_01_out_number_set(v);
        }
    }
    
    void eventoutlet_10_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_35_out2_number_set(v);
    }
    
    void expr_08_out1_set(number v) {
        this->expr_08_out1 = v;
        this->eventoutlet_10_in1_number_set(this->expr_08_out1);
    }
    
    void expr_08_in1_set(number in1) {
        this->expr_08_in1 = in1;
        this->expr_08_out1_set(this->expr_08_in1 + this->expr_08_in2);//#map:Chords/+_obj-224:1
    }
    
    void numberobj_23_output_set(number v) {
        this->expr_08_in1_set(v);
    }
    
    void numberobj_23_value_set(number v) {
        this->numberobj_23_value_setter(v);
        v = this->numberobj_23_value;
        number localvalue = v;
    
        if (this->numberobj_23_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-32"), localvalue, this->_currentTime);
        this->numberobj_23_output_set(localvalue);
    }
    
    void mtof_02_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_23_value_set(converted);
        }
    }
    
    void mtof_02_midivalue_set(const list& v) {
        this->mtof_02_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_02_midivalue->length; i++) {
            tmp->push(
                this->mtof_02_innerMtoF_next(this->mtof_02_midivalue[(Index)i], this->mtof_02_base)
            );
        }
    
        this->mtof_02_out_set(tmp);
    }
    
    void p_07_out2_number_set(number v) {
        this->switchobj_01_in2_number_set(v);
    
        {
            list converted = {v};
            this->mtof_02_midivalue_set(converted);
        }
    }
    
    void switchobj_01_in1_number_set(number v) {
        if (this->switchobj_01_onoff == 1) {
            this->switchobj_01_out_number_set(v);
        }
    }
    
    void eventoutlet_09_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_35_out1_number_set(v);
    }
    
    void expr_07_out1_set(number v) {
        this->expr_07_out1 = v;
        this->eventoutlet_09_in1_number_set(this->expr_07_out1);
    }
    
    void expr_07_in1_set(number in1) {
        this->expr_07_in1 = in1;
        this->expr_07_out1_set(this->expr_07_in1 + this->expr_07_in2);//#map:Chords/+_obj-225:1
    }
    
    void numberobj_22_output_set(number v) {
        this->expr_07_in1_set(v);
    }
    
    void numberobj_22_value_set(number v) {
        this->numberobj_22_value_setter(v);
        v = this->numberobj_22_value;
        number localvalue = v;
    
        if (this->numberobj_22_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-29"), localvalue, this->_currentTime);
        this->numberobj_22_output_set(localvalue);
    }
    
    void mtof_01_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_22_value_set(converted);
        }
    }
    
    void mtof_01_midivalue_set(const list& v) {
        this->mtof_01_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_01_midivalue->length; i++) {
            tmp->push(
                this->mtof_01_innerMtoF_next(this->mtof_01_midivalue[(Index)i], this->mtof_01_base)
            );
        }
    
        this->mtof_01_out_set(tmp);
    }
    
    void p_07_out1_number_set(number v) {
        this->switchobj_01_in1_number_set(v);
    
        {
            list converted = {v};
            this->mtof_01_midivalue_set(converted);
        }
    }
    
    void p_07_in1_number_set(number v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_12_out1_number_set(v);
    }
    
    void message_56_set_set(const list& v) {
        this->message_56_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-11"), v, this->_currentTime);
    }
    
    void intnum_01_out_set(number v) {
        this->p_07_in1_number_set(v);
    
        {
            list converted = {v};
            this->message_56_set_set(converted);
        }
    }
    
    void intnum_01_input_bang_bang() {
        this->intnum_01_out_set(trunc(this->intnum_01_stored));
    }
    
    void button_12_output_bang() {
        this->intnum_01_input_bang_bang();
    }
    
    void button_12_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/button_obj-26"), this->_currentTime);;
        this->button_12_output_bang();
    }
    
    void eventinlet_14_out1_bang_bang() {
        this->numberobj_24_value_bang();
        this->button_12_bangval_bang();
    }
    
    void message_56_out_set(const list& ) {}
    
    void message_56_trigger_bang() {
        this->message_56_out_set(this->message_56_set);
    }
    
    void numberobj_24_value_set(number v) {
        this->numberobj_24_value_setter(v);
        v = this->numberobj_24_value;
        number localvalue = v;
    
        if (this->numberobj_24_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-6"), localvalue, this->_currentTime);
        this->numberobj_24_output_set(localvalue);
    }
    
    void message_57_out_set(const list& ) {}
    
    void message_57_trigger_bang() {
        this->message_57_out_set(this->message_57_set);
    }
    
    void message_58_out_set(const list& ) {}
    
    void message_58_trigger_bang() {
        this->message_58_out_set(this->message_58_set);
    }
    
    void message_59_out_set(const list& ) {}
    
    void message_59_trigger_bang() {
        this->message_59_out_set(this->message_59_set);
    }
    
    void message_60_out_set(const list& ) {}
    
    void message_60_trigger_bang() {
        this->message_60_out_set(this->message_60_set);
    }
    
    void message_62_out_set(const list& ) {}
    
    void message_62_trigger_bang() {
        this->message_62_out_set(this->message_62_set);
    }
    
    void p_07_perform(Index n) {
        // subpatcher: ChordColl
        this->p_07->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_08_perform(Index n) {
        // subpatcher: NextChord
        this->p_08->process(nullptr, 0, nullptr, 0, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_22_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_22_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_22_value = localvalue;
    }
    
    void numberobj_23_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_23_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_23_value = localvalue;
    }
    
    void numberobj_24_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_24_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_24_value = localvalue;
    }
    
    void numberobj_25_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_25_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_25_value = localvalue;
    }
    
    void random_02_limit_setter(number v) {
        if (v >= 0)
            this->random_02_limit = v;
    }
    
    void numberobj_26_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_26_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_26_value = localvalue;
    }
    
    void numberobj_27_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_27_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_27_value = localvalue;
    }
    
    void message_56_init() {
        this->message_56_set_set({1});
    }
    
    void numberobj_22_init() {
        this->numberobj_22_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-29"), 1, this->_currentTime);
    }
    
    void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_22_value;
    }
    
    void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_22_value_set(preset["value"]);
    }
    
    number mtof_01_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_01_innerMtoF_lastInValue && tuning == this->mtof_01_innerMtoF_lastTuning)
            return this->mtof_01_innerMtoF_lastOutValue;
    
        this->mtof_01_innerMtoF_lastInValue = midivalue;
        this->mtof_01_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_01_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_01_innerMtoF_lastOutValue;
    }
    
    void mtof_01_innerMtoF_reset() {
        this->mtof_01_innerMtoF_lastInValue = 0;
        this->mtof_01_innerMtoF_lastOutValue = 0;
        this->mtof_01_innerMtoF_lastTuning = 0;
    }
    
    void mtof_01_innerScala_mid(int v) {
        this->mtof_01_innerScala_kbmMid = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_ref(int v) {
        this->mtof_01_innerScala_kbmRefNum = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_base(number v) {
        this->mtof_01_innerScala_kbmRefFreq = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_01_innerScala_updateScale(sclValid);
    }
    
    void mtof_01_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_01_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_01_innerScala_updateMap(map);
        }
    }
    
    number mtof_01_innerScala_mtof(number note) {
        if ((bool)(this->mtof_01_innerScala_lastValid) && this->mtof_01_innerScala_lastNote == note) {
            return this->mtof_01_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_01_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_01_innerScala_applySCL(degoct[0], fract(note), this->mtof_01_innerScala_refFreq);
        }
    
        this->mtof_01_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_01_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_01_innerScala_lastValid) && this->mtof_01_innerScala_lastFreq == hz) {
            return this->mtof_01_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_01_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_01_innerScala_kbmSize == 0) {
            out = this->mtof_01_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_01_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_01_innerScala_kbmValid[(Index)(i + this->mtof_01_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_01_innerScala_kbmSize + entry + this->mtof_01_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_01_innerScala_updateLast(out, hz);
        return this->mtof_01_innerScala_lastNote;
    }
    
    int mtof_01_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_01_innerScala_lastValid = false;
            this->mtof_01_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_01_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_01_innerScala_sclOctaveMul = last;
            this->mtof_01_innerScala_sclEntryCount = (int)(this->mtof_01_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_01_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_01_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_01_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_01_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_01_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_01_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_01_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_01_innerScala_kbmSize = (int)(size);
            this->mtof_01_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_01_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_01_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_01_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_01_innerScala_kbmRefFreq = kbm[5];
            this->mtof_01_innerScala_kbmOctaveDegree = octave;
            this->mtof_01_innerScala_kbmValid = kbm;
            this->mtof_01_innerScala_kbmMapSize = (kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET));
            this->mtof_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_01_innerScala_updateLast(number note, number freq) {
        this->mtof_01_innerScala_lastValid = true;
        this->mtof_01_innerScala_lastNote = note;
        this->mtof_01_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_01_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_01_innerScala_refFreq) / this->mtof_01_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_01_innerScala_sclEntryCount; i++) {
            number c = this->mtof_01_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_01_innerScala_refFreq);
            n = this->mtof_01_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_01_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_01_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_01_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_01_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_01_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_01_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_01_innerScala_applyKBM(number note) {
        if ((this->mtof_01_innerScala_kbmMin == this->mtof_01_innerScala_kbmMax && this->mtof_01_innerScala_kbmMax == 0) || (note >= this->mtof_01_innerScala_kbmMin && note <= this->mtof_01_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_01_innerScala_kbmMid));
    
            if (this->mtof_01_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_01_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_01_innerScala_kbmValid[(Index)(this->mtof_01_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_01_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_01_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_sclEntryCount);
        return this->mtof_01_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_01_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_01_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_01_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_01_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_01_innerScala_sclOctaveMul);
    }
    
    void mtof_01_innerScala_updateRefFreq() {
        this->mtof_01_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_01_innerScala_kbmRefNum - this->mtof_01_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_01_innerScala_refFreq = this->mtof_01_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_01_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_01_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_01_innerScala_kbmSize) {
                if (index < this->mtof_01_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_01_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_01_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_01_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_01_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_01_innerScala_refFreq = this->mtof_01_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_01_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_01_innerScala_reset() {
        this->mtof_01_innerScala_lastValid = false;
        this->mtof_01_innerScala_lastNote = 0;
        this->mtof_01_innerScala_lastFreq = 0;
        this->mtof_01_innerScala_sclEntryCount = 0;
        this->mtof_01_innerScala_sclOctaveMul = 1;
        this->mtof_01_innerScala_sclExpMul = {};
        this->mtof_01_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_01_innerScala_kbmMid = 60;
        this->mtof_01_innerScala_kbmRefNum = 69;
        this->mtof_01_innerScala_kbmRefFreq = 440;
        this->mtof_01_innerScala_kbmSize = 0;
        this->mtof_01_innerScala_kbmMin = 0;
        this->mtof_01_innerScala_kbmMax = 0;
        this->mtof_01_innerScala_kbmOctaveDegree = 12;
        this->mtof_01_innerScala_kbmMapSize = 0;
        this->mtof_01_innerScala_refFreq = 261.63;
    }
    
    void mtof_01_init() {
        this->mtof_01_innerScala_update(this->mtof_01_scale, this->mtof_01_map);
    }
    
    void message_57_init() {
        this->message_57_set_set({3});
    }
    
    void numberobj_23_init() {
        this->numberobj_23_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-32"), 1, this->_currentTime);
    }
    
    void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_23_value;
    }
    
    void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_23_value_set(preset["value"]);
    }
    
    number mtof_02_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_02_innerMtoF_lastInValue && tuning == this->mtof_02_innerMtoF_lastTuning)
            return this->mtof_02_innerMtoF_lastOutValue;
    
        this->mtof_02_innerMtoF_lastInValue = midivalue;
        this->mtof_02_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_02_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_02_innerMtoF_lastOutValue;
    }
    
    void mtof_02_innerMtoF_reset() {
        this->mtof_02_innerMtoF_lastInValue = 0;
        this->mtof_02_innerMtoF_lastOutValue = 0;
        this->mtof_02_innerMtoF_lastTuning = 0;
    }
    
    void mtof_02_innerScala_mid(int v) {
        this->mtof_02_innerScala_kbmMid = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_ref(int v) {
        this->mtof_02_innerScala_kbmRefNum = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_base(number v) {
        this->mtof_02_innerScala_kbmRefFreq = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_02_innerScala_updateScale(sclValid);
    }
    
    void mtof_02_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_02_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_02_innerScala_updateMap(map);
        }
    }
    
    number mtof_02_innerScala_mtof(number note) {
        if ((bool)(this->mtof_02_innerScala_lastValid) && this->mtof_02_innerScala_lastNote == note) {
            return this->mtof_02_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_02_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_02_innerScala_applySCL(degoct[0], fract(note), this->mtof_02_innerScala_refFreq);
        }
    
        this->mtof_02_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_02_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_02_innerScala_lastValid) && this->mtof_02_innerScala_lastFreq == hz) {
            return this->mtof_02_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_02_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_02_innerScala_kbmSize == 0) {
            out = this->mtof_02_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_02_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_02_innerScala_kbmValid[(Index)(i + this->mtof_02_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_02_innerScala_kbmSize + entry + this->mtof_02_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_02_innerScala_updateLast(out, hz);
        return this->mtof_02_innerScala_lastNote;
    }
    
    int mtof_02_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_02_innerScala_lastValid = false;
            this->mtof_02_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_02_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_02_innerScala_sclOctaveMul = last;
            this->mtof_02_innerScala_sclEntryCount = (int)(this->mtof_02_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_02_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_02_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_02_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_02_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_02_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_02_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_02_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_02_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_02_innerScala_kbmSize = (int)(size);
            this->mtof_02_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_02_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_02_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_02_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_02_innerScala_kbmRefFreq = kbm[5];
            this->mtof_02_innerScala_kbmOctaveDegree = octave;
            this->mtof_02_innerScala_kbmValid = kbm;
            this->mtof_02_innerScala_kbmMapSize = (kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET));
            this->mtof_02_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_02_innerScala_updateLast(number note, number freq) {
        this->mtof_02_innerScala_lastValid = true;
        this->mtof_02_innerScala_lastNote = note;
        this->mtof_02_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_02_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_02_innerScala_refFreq) / this->mtof_02_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_02_innerScala_sclEntryCount; i++) {
            number c = this->mtof_02_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_02_innerScala_refFreq);
            n = this->mtof_02_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_02_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_02_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_02_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_02_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_02_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_02_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_02_innerScala_applyKBM(number note) {
        if ((this->mtof_02_innerScala_kbmMin == this->mtof_02_innerScala_kbmMax && this->mtof_02_innerScala_kbmMax == 0) || (note >= this->mtof_02_innerScala_kbmMin && note <= this->mtof_02_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_02_innerScala_kbmMid));
    
            if (this->mtof_02_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_02_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_02_innerScala_kbmValid[(Index)(this->mtof_02_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_02_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_02_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_sclEntryCount);
        return this->mtof_02_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_02_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_02_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_02_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_02_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_02_innerScala_sclOctaveMul);
    }
    
    void mtof_02_innerScala_updateRefFreq() {
        this->mtof_02_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_02_innerScala_kbmRefNum - this->mtof_02_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_02_innerScala_refFreq = this->mtof_02_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_02_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_02_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_02_innerScala_kbmSize) {
                if (index < this->mtof_02_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_02_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_02_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_02_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_02_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_02_innerScala_refFreq = this->mtof_02_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_02_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_02_innerScala_reset() {
        this->mtof_02_innerScala_lastValid = false;
        this->mtof_02_innerScala_lastNote = 0;
        this->mtof_02_innerScala_lastFreq = 0;
        this->mtof_02_innerScala_sclEntryCount = 0;
        this->mtof_02_innerScala_sclOctaveMul = 1;
        this->mtof_02_innerScala_sclExpMul = {};
        this->mtof_02_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_02_innerScala_kbmMid = 60;
        this->mtof_02_innerScala_kbmRefNum = 69;
        this->mtof_02_innerScala_kbmRefFreq = 440;
        this->mtof_02_innerScala_kbmSize = 0;
        this->mtof_02_innerScala_kbmMin = 0;
        this->mtof_02_innerScala_kbmMax = 0;
        this->mtof_02_innerScala_kbmOctaveDegree = 12;
        this->mtof_02_innerScala_kbmMapSize = 0;
        this->mtof_02_innerScala_refFreq = 261.63;
    }
    
    void mtof_02_init() {
        this->mtof_02_innerScala_update(this->mtof_02_scale, this->mtof_02_map);
    }
    
    void change_02_init() {
        this->change_02_prev = this->change_02_input;
    }
    
    void numberobj_24_init() {
        this->numberobj_24_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-6"), 1, this->_currentTime);
    }
    
    void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_24_value;
    }
    
    void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_24_value_set(preset["value"]);
    }
    
    void numberobj_25_init() {
        this->numberobj_25_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-14"), 1, this->_currentTime);
    }
    
    void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_25_value;
    }
    
    void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_25_value_set(preset["value"]);
    }
    
    void random_02_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_02_nz_state
        );
    }
    
    void random_02_nz_init() {
        this->random_02_nz_reset();
    }
    
    void random_02_nz_seed(number v) {
        xoshiro_reset(v, this->random_02_nz_state);
    }
    
    number random_02_nz_next() {
        return xoshiro_next(this->random_02_nz_state);
    }
    
    void numberobj_26_init() {
        this->numberobj_26_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-37"), 1, this->_currentTime);
    }
    
    void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_26_value;
    }
    
    void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_26_value_set(preset["value"]);
    }
    
    number mtof_03_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_03_innerMtoF_lastInValue && tuning == this->mtof_03_innerMtoF_lastTuning)
            return this->mtof_03_innerMtoF_lastOutValue;
    
        this->mtof_03_innerMtoF_lastInValue = midivalue;
        this->mtof_03_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_03_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_03_innerMtoF_lastOutValue;
    }
    
    void mtof_03_innerMtoF_reset() {
        this->mtof_03_innerMtoF_lastInValue = 0;
        this->mtof_03_innerMtoF_lastOutValue = 0;
        this->mtof_03_innerMtoF_lastTuning = 0;
    }
    
    void mtof_03_innerScala_mid(int v) {
        this->mtof_03_innerScala_kbmMid = v;
        this->mtof_03_innerScala_updateRefFreq();
    }
    
    void mtof_03_innerScala_ref(int v) {
        this->mtof_03_innerScala_kbmRefNum = v;
        this->mtof_03_innerScala_updateRefFreq();
    }
    
    void mtof_03_innerScala_base(number v) {
        this->mtof_03_innerScala_kbmRefFreq = v;
        this->mtof_03_innerScala_updateRefFreq();
    }
    
    void mtof_03_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_03_innerScala_updateScale(sclValid);
    }
    
    void mtof_03_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_03_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_03_innerScala_updateMap(map);
        }
    }
    
    number mtof_03_innerScala_mtof(number note) {
        if ((bool)(this->mtof_03_innerScala_lastValid) && this->mtof_03_innerScala_lastNote == note) {
            return this->mtof_03_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_03_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_03_innerScala_applySCL(degoct[0], fract(note), this->mtof_03_innerScala_refFreq);
        }
    
        this->mtof_03_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_03_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_03_innerScala_lastValid) && this->mtof_03_innerScala_lastFreq == hz) {
            return this->mtof_03_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_03_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_03_innerScala_kbmSize == 0) {
            out = this->mtof_03_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_03_innerScala_octdegree(degree, this->mtof_03_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_03_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_03_innerScala_kbmValid[(Index)(i + this->mtof_03_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_03_innerScala_kbmSize + entry + this->mtof_03_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_03_innerScala_updateLast(out, hz);
        return this->mtof_03_innerScala_lastNote;
    }
    
    int mtof_03_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_03_innerScala_lastValid = false;
            this->mtof_03_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_03_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_03_innerScala_sclOctaveMul = last;
            this->mtof_03_innerScala_sclEntryCount = (int)(this->mtof_03_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_03_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_03_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_03_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_03_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_03_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_03_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_03_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_03_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_03_innerScala_kbmSize = (int)(size);
            this->mtof_03_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_03_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_03_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_03_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_03_innerScala_kbmRefFreq = kbm[5];
            this->mtof_03_innerScala_kbmOctaveDegree = octave;
            this->mtof_03_innerScala_kbmValid = kbm;
            this->mtof_03_innerScala_kbmMapSize = (kbm->length - this->mtof_03_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_03_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_03_innerScala_KBM_MAP_OFFSET));
            this->mtof_03_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_03_innerScala_updateLast(number note, number freq) {
        this->mtof_03_innerScala_lastValid = true;
        this->mtof_03_innerScala_lastNote = note;
        this->mtof_03_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_03_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_03_innerScala_refFreq) / this->mtof_03_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_03_innerScala_sclEntryCount; i++) {
            number c = this->mtof_03_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_03_innerScala_refFreq);
            n = this->mtof_03_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_03_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_03_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_03_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_03_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_03_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_03_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_03_innerScala_applyKBM(number note) {
        if ((this->mtof_03_innerScala_kbmMin == this->mtof_03_innerScala_kbmMax && this->mtof_03_innerScala_kbmMax == 0) || (note >= this->mtof_03_innerScala_kbmMin && note <= this->mtof_03_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_03_innerScala_kbmMid));
    
            if (this->mtof_03_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_03_innerScala_octdegree(degree, this->mtof_03_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_03_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_03_innerScala_kbmValid[(Index)(this->mtof_03_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_03_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_03_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_03_innerScala_octdegree(degree, this->mtof_03_innerScala_sclEntryCount);
        return this->mtof_03_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_03_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_03_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_03_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_03_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_03_innerScala_sclOctaveMul);
    }
    
    void mtof_03_innerScala_updateRefFreq() {
        this->mtof_03_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_03_innerScala_kbmRefNum - this->mtof_03_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_03_innerScala_refFreq = this->mtof_03_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_03_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_03_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_03_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_03_innerScala_kbmSize) {
                if (index < this->mtof_03_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_03_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_03_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_03_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_03_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_03_innerScala_refFreq = this->mtof_03_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_03_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_03_innerScala_reset() {
        this->mtof_03_innerScala_lastValid = false;
        this->mtof_03_innerScala_lastNote = 0;
        this->mtof_03_innerScala_lastFreq = 0;
        this->mtof_03_innerScala_sclEntryCount = 0;
        this->mtof_03_innerScala_sclOctaveMul = 1;
        this->mtof_03_innerScala_sclExpMul = {};
        this->mtof_03_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_03_innerScala_kbmMid = 60;
        this->mtof_03_innerScala_kbmRefNum = 69;
        this->mtof_03_innerScala_kbmRefFreq = 440;
        this->mtof_03_innerScala_kbmSize = 0;
        this->mtof_03_innerScala_kbmMin = 0;
        this->mtof_03_innerScala_kbmMax = 0;
        this->mtof_03_innerScala_kbmOctaveDegree = 12;
        this->mtof_03_innerScala_kbmMapSize = 0;
        this->mtof_03_innerScala_refFreq = 261.63;
    }
    
    void mtof_03_init() {
        this->mtof_03_innerScala_update(this->mtof_03_scale, this->mtof_03_map);
    }
    
    void message_58_init() {
        this->message_58_set_set({82.406889});
    }
    
    void message_59_init() {
        this->message_59_set_set({2, 2, 2, 3, 3, 3, 3, 4, 4, 4});
    }
    
    void numberobj_27_init() {
        this->numberobj_27_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-40"), 1, this->_currentTime);
    }
    
    void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_27_value;
    }
    
    void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_27_value_set(preset["value"]);
    }
    
    void message_60_init() {
        this->message_60_set_set({40});
    }
    
    number mtof_04_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_04_innerMtoF_lastInValue && tuning == this->mtof_04_innerMtoF_lastTuning)
            return this->mtof_04_innerMtoF_lastOutValue;
    
        this->mtof_04_innerMtoF_lastInValue = midivalue;
        this->mtof_04_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_04_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_04_innerMtoF_lastOutValue;
    }
    
    void mtof_04_innerMtoF_reset() {
        this->mtof_04_innerMtoF_lastInValue = 0;
        this->mtof_04_innerMtoF_lastOutValue = 0;
        this->mtof_04_innerMtoF_lastTuning = 0;
    }
    
    void mtof_04_innerScala_mid(int v) {
        this->mtof_04_innerScala_kbmMid = v;
        this->mtof_04_innerScala_updateRefFreq();
    }
    
    void mtof_04_innerScala_ref(int v) {
        this->mtof_04_innerScala_kbmRefNum = v;
        this->mtof_04_innerScala_updateRefFreq();
    }
    
    void mtof_04_innerScala_base(number v) {
        this->mtof_04_innerScala_kbmRefFreq = v;
        this->mtof_04_innerScala_updateRefFreq();
    }
    
    void mtof_04_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_04_innerScala_updateScale(sclValid);
    }
    
    void mtof_04_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_04_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_04_innerScala_updateMap(map);
        }
    }
    
    number mtof_04_innerScala_mtof(number note) {
        if ((bool)(this->mtof_04_innerScala_lastValid) && this->mtof_04_innerScala_lastNote == note) {
            return this->mtof_04_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_04_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_04_innerScala_applySCL(degoct[0], fract(note), this->mtof_04_innerScala_refFreq);
        }
    
        this->mtof_04_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_04_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_04_innerScala_lastValid) && this->mtof_04_innerScala_lastFreq == hz) {
            return this->mtof_04_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_04_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_04_innerScala_kbmSize == 0) {
            out = this->mtof_04_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_04_innerScala_octdegree(degree, this->mtof_04_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_04_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_04_innerScala_kbmValid[(Index)(i + this->mtof_04_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_04_innerScala_kbmSize + entry + this->mtof_04_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_04_innerScala_updateLast(out, hz);
        return this->mtof_04_innerScala_lastNote;
    }
    
    int mtof_04_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_04_innerScala_lastValid = false;
            this->mtof_04_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_04_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_04_innerScala_sclOctaveMul = last;
            this->mtof_04_innerScala_sclEntryCount = (int)(this->mtof_04_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_04_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_04_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_04_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_04_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_04_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_04_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_04_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_04_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_04_innerScala_kbmSize = (int)(size);
            this->mtof_04_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_04_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_04_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_04_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_04_innerScala_kbmRefFreq = kbm[5];
            this->mtof_04_innerScala_kbmOctaveDegree = octave;
            this->mtof_04_innerScala_kbmValid = kbm;
            this->mtof_04_innerScala_kbmMapSize = (kbm->length - this->mtof_04_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_04_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_04_innerScala_KBM_MAP_OFFSET));
            this->mtof_04_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_04_innerScala_updateLast(number note, number freq) {
        this->mtof_04_innerScala_lastValid = true;
        this->mtof_04_innerScala_lastNote = note;
        this->mtof_04_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_04_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_04_innerScala_refFreq) / this->mtof_04_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_04_innerScala_sclEntryCount; i++) {
            number c = this->mtof_04_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_04_innerScala_refFreq);
            n = this->mtof_04_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_04_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_04_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_04_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_04_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_04_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_04_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_04_innerScala_applyKBM(number note) {
        if ((this->mtof_04_innerScala_kbmMin == this->mtof_04_innerScala_kbmMax && this->mtof_04_innerScala_kbmMax == 0) || (note >= this->mtof_04_innerScala_kbmMin && note <= this->mtof_04_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_04_innerScala_kbmMid));
    
            if (this->mtof_04_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_04_innerScala_octdegree(degree, this->mtof_04_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_04_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_04_innerScala_kbmValid[(Index)(this->mtof_04_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_04_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_04_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_04_innerScala_octdegree(degree, this->mtof_04_innerScala_sclEntryCount);
        return this->mtof_04_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_04_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_04_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_04_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_04_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_04_innerScala_sclOctaveMul);
    }
    
    void mtof_04_innerScala_updateRefFreq() {
        this->mtof_04_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_04_innerScala_kbmRefNum - this->mtof_04_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_04_innerScala_refFreq = this->mtof_04_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_04_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_04_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_04_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_04_innerScala_kbmSize) {
                if (index < this->mtof_04_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_04_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_04_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_04_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_04_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_04_innerScala_refFreq = this->mtof_04_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_04_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_04_innerScala_reset() {
        this->mtof_04_innerScala_lastValid = false;
        this->mtof_04_innerScala_lastNote = 0;
        this->mtof_04_innerScala_lastFreq = 0;
        this->mtof_04_innerScala_sclEntryCount = 0;
        this->mtof_04_innerScala_sclOctaveMul = 1;
        this->mtof_04_innerScala_sclExpMul = {};
        this->mtof_04_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_04_innerScala_kbmMid = 60;
        this->mtof_04_innerScala_kbmRefNum = 69;
        this->mtof_04_innerScala_kbmRefFreq = 440;
        this->mtof_04_innerScala_kbmSize = 0;
        this->mtof_04_innerScala_kbmMin = 0;
        this->mtof_04_innerScala_kbmMax = 0;
        this->mtof_04_innerScala_kbmOctaveDegree = 12;
        this->mtof_04_innerScala_kbmMapSize = 0;
        this->mtof_04_innerScala_refFreq = 261.63;
    }
    
    void mtof_04_init() {
        this->mtof_04_innerScala_update(this->mtof_04_scale, this->mtof_04_map);
    }
    
    number mtof_05_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_05_innerMtoF_lastInValue && tuning == this->mtof_05_innerMtoF_lastTuning)
            return this->mtof_05_innerMtoF_lastOutValue;
    
        this->mtof_05_innerMtoF_lastInValue = midivalue;
        this->mtof_05_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_05_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_05_innerMtoF_lastOutValue;
    }
    
    void mtof_05_innerMtoF_reset() {
        this->mtof_05_innerMtoF_lastInValue = 0;
        this->mtof_05_innerMtoF_lastOutValue = 0;
        this->mtof_05_innerMtoF_lastTuning = 0;
    }
    
    void mtof_05_innerScala_mid(int v) {
        this->mtof_05_innerScala_kbmMid = v;
        this->mtof_05_innerScala_updateRefFreq();
    }
    
    void mtof_05_innerScala_ref(int v) {
        this->mtof_05_innerScala_kbmRefNum = v;
        this->mtof_05_innerScala_updateRefFreq();
    }
    
    void mtof_05_innerScala_base(number v) {
        this->mtof_05_innerScala_kbmRefFreq = v;
        this->mtof_05_innerScala_updateRefFreq();
    }
    
    void mtof_05_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_05_innerScala_updateScale(sclValid);
    }
    
    void mtof_05_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_05_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_05_innerScala_updateMap(map);
        }
    }
    
    number mtof_05_innerScala_mtof(number note) {
        if ((bool)(this->mtof_05_innerScala_lastValid) && this->mtof_05_innerScala_lastNote == note) {
            return this->mtof_05_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_05_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_05_innerScala_applySCL(degoct[0], fract(note), this->mtof_05_innerScala_refFreq);
        }
    
        this->mtof_05_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_05_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_05_innerScala_lastValid) && this->mtof_05_innerScala_lastFreq == hz) {
            return this->mtof_05_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_05_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_05_innerScala_kbmSize == 0) {
            out = this->mtof_05_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_05_innerScala_octdegree(degree, this->mtof_05_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_05_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_05_innerScala_kbmValid[(Index)(i + this->mtof_05_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_05_innerScala_kbmSize + entry + this->mtof_05_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_05_innerScala_updateLast(out, hz);
        return this->mtof_05_innerScala_lastNote;
    }
    
    int mtof_05_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_05_innerScala_lastValid = false;
            this->mtof_05_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_05_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_05_innerScala_sclOctaveMul = last;
            this->mtof_05_innerScala_sclEntryCount = (int)(this->mtof_05_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_05_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_05_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_05_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_05_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_05_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_05_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_05_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_05_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_05_innerScala_kbmSize = (int)(size);
            this->mtof_05_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_05_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_05_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_05_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_05_innerScala_kbmRefFreq = kbm[5];
            this->mtof_05_innerScala_kbmOctaveDegree = octave;
            this->mtof_05_innerScala_kbmValid = kbm;
            this->mtof_05_innerScala_kbmMapSize = (kbm->length - this->mtof_05_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_05_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_05_innerScala_KBM_MAP_OFFSET));
            this->mtof_05_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_05_innerScala_updateLast(number note, number freq) {
        this->mtof_05_innerScala_lastValid = true;
        this->mtof_05_innerScala_lastNote = note;
        this->mtof_05_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_05_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_05_innerScala_refFreq) / this->mtof_05_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_05_innerScala_sclEntryCount; i++) {
            number c = this->mtof_05_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_05_innerScala_refFreq);
            n = this->mtof_05_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_05_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_05_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_05_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_05_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_05_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_05_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_05_innerScala_applyKBM(number note) {
        if ((this->mtof_05_innerScala_kbmMin == this->mtof_05_innerScala_kbmMax && this->mtof_05_innerScala_kbmMax == 0) || (note >= this->mtof_05_innerScala_kbmMin && note <= this->mtof_05_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_05_innerScala_kbmMid));
    
            if (this->mtof_05_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_05_innerScala_octdegree(degree, this->mtof_05_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_05_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_05_innerScala_kbmValid[(Index)(this->mtof_05_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_05_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_05_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_05_innerScala_octdegree(degree, this->mtof_05_innerScala_sclEntryCount);
        return this->mtof_05_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_05_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_05_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_05_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_05_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_05_innerScala_sclOctaveMul);
    }
    
    void mtof_05_innerScala_updateRefFreq() {
        this->mtof_05_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_05_innerScala_kbmRefNum - this->mtof_05_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_05_innerScala_refFreq = this->mtof_05_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_05_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_05_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_05_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_05_innerScala_kbmSize) {
                if (index < this->mtof_05_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_05_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_05_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_05_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_05_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_05_innerScala_refFreq = this->mtof_05_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_05_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_05_innerScala_reset() {
        this->mtof_05_innerScala_lastValid = false;
        this->mtof_05_innerScala_lastNote = 0;
        this->mtof_05_innerScala_lastFreq = 0;
        this->mtof_05_innerScala_sclEntryCount = 0;
        this->mtof_05_innerScala_sclOctaveMul = 1;
        this->mtof_05_innerScala_sclExpMul = {};
        this->mtof_05_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_05_innerScala_kbmMid = 60;
        this->mtof_05_innerScala_kbmRefNum = 69;
        this->mtof_05_innerScala_kbmRefFreq = 440;
        this->mtof_05_innerScala_kbmSize = 0;
        this->mtof_05_innerScala_kbmMin = 0;
        this->mtof_05_innerScala_kbmMax = 0;
        this->mtof_05_innerScala_kbmOctaveDegree = 12;
        this->mtof_05_innerScala_kbmMapSize = 0;
        this->mtof_05_innerScala_refFreq = 261.63;
    }
    
    void mtof_05_init() {
        this->mtof_05_innerScala_update(this->mtof_05_scale, this->mtof_05_map);
    }
    
    void message_61_init() {
        this->message_61_set_set({0});
    }
    
    void message_62_init() {
        this->message_62_set_set({1});
    }
    
    void counter_02_inc() {
        this->counter_02_count = ((bool)(this->counter_02_phase) ? this->counter_02_count + 1 : this->counter_02_count - 1);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        numberobj_22_value = 0;
        numberobj_22_value_setter(numberobj_22_value);
        mtof_01_base = 440;
        expr_07_in1 = 0;
        expr_07_in2 = 0;
        expr_07_out1 = 0;
        p_07_target = 0;
        intnum_01_input_number = 0;
        intnum_01_value = 0;
        p_08_target = 0;
        receive_04_output_number = 0;
        numberobj_23_value = 0;
        numberobj_23_value_setter(numberobj_23_value);
        mtof_02_base = 440;
        change_02_input = 0;
        change_02_out = 0;
        numberobj_24_value = 0;
        numberobj_24_value_setter(numberobj_24_value);
        expr_08_in1 = 0;
        expr_08_in2 = 0;
        expr_08_out1 = 0;
        numberobj_25_value = 0;
        numberobj_25_value_setter(numberobj_25_value);
        random_02_limit = 1;
        random_02_limit_setter(random_02_limit);
        random_02_seed = 0;
        receive_05_output_number = 0;
        numberobj_26_value = 0;
        numberobj_26_value_setter(numberobj_26_value);
        mtof_03_base = 440;
        expr_09_in1 = 0;
        expr_09_in2 = 0;
        expr_09_out1 = 0;
        numberobj_27_value = 0;
        numberobj_27_value_setter(numberobj_27_value);
        mtof_04_base = 440;
        expr_10_in1 = 0;
        expr_10_in2 = 0;
        expr_10_out1 = 0;
        switchobj_01_onoff = 0;
        mtof_05_base = 440;
        expr_11_in1 = 0;
        expr_11_in2 = 12;
        expr_11_out1 = 0;
        expr_12_in1 = 0;
        expr_12_in2 = 1;
        expr_12_out1 = 0;
        send_01_input_number = 0;
        counter_02_carryflag = 0;
        counter_02_direction = 0;
        counter_02_resetnext_number = 0;
        counter_02_resetnow_number = 0;
        counter_02_maximum = 2;
        counter_02_output = 0;
        counter_02_underflow_number = 0;
        counter_02_overflow_number = 0;
        counter_02_carry = 0;
        counter_02_minimum = 0;
        send_02_input_number = 0;
        send_03_input_number = 0;
        expr_13_in1 = 0;
        expr_13_in2 = 12;
        expr_13_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_22_currentFormat = 6;
        numberobj_22_lastValue = 0;
        mtof_01_innerMtoF_lastInValue = 0;
        mtof_01_innerMtoF_lastOutValue = 0;
        mtof_01_innerMtoF_lastTuning = 0;
        mtof_01_innerScala_lastValid = false;
        mtof_01_innerScala_lastNote = 0;
        mtof_01_innerScala_lastFreq = 0;
        mtof_01_innerScala_sclEntryCount = 0;
        mtof_01_innerScala_sclOctaveMul = 1;
        mtof_01_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_01_innerScala_kbmMid = 60;
        mtof_01_innerScala_kbmRefNum = 69;
        mtof_01_innerScala_kbmRefFreq = 440;
        mtof_01_innerScala_kbmSize = 0;
        mtof_01_innerScala_kbmMin = 0;
        mtof_01_innerScala_kbmMax = 0;
        mtof_01_innerScala_kbmOctaveDegree = 12;
        mtof_01_innerScala_kbmMapSize = 0;
        mtof_01_innerScala_refFreq = 261.63;
        intnum_01_stored = 1;
        numberobj_23_currentFormat = 6;
        numberobj_23_lastValue = 0;
        mtof_02_innerMtoF_lastInValue = 0;
        mtof_02_innerMtoF_lastOutValue = 0;
        mtof_02_innerMtoF_lastTuning = 0;
        mtof_02_innerScala_lastValid = false;
        mtof_02_innerScala_lastNote = 0;
        mtof_02_innerScala_lastFreq = 0;
        mtof_02_innerScala_sclEntryCount = 0;
        mtof_02_innerScala_sclOctaveMul = 1;
        mtof_02_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_02_innerScala_kbmMid = 60;
        mtof_02_innerScala_kbmRefNum = 69;
        mtof_02_innerScala_kbmRefFreq = 440;
        mtof_02_innerScala_kbmSize = 0;
        mtof_02_innerScala_kbmMin = 0;
        mtof_02_innerScala_kbmMax = 0;
        mtof_02_innerScala_kbmOctaveDegree = 12;
        mtof_02_innerScala_kbmMapSize = 0;
        mtof_02_innerScala_refFreq = 261.63;
        numberobj_24_currentFormat = 6;
        numberobj_24_lastValue = 0;
        numberobj_25_currentFormat = 6;
        numberobj_25_lastValue = 0;
        numberobj_26_currentFormat = 6;
        numberobj_26_lastValue = 0;
        mtof_03_innerMtoF_lastInValue = 0;
        mtof_03_innerMtoF_lastOutValue = 0;
        mtof_03_innerMtoF_lastTuning = 0;
        mtof_03_innerScala_lastValid = false;
        mtof_03_innerScala_lastNote = 0;
        mtof_03_innerScala_lastFreq = 0;
        mtof_03_innerScala_sclEntryCount = 0;
        mtof_03_innerScala_sclOctaveMul = 1;
        mtof_03_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_03_innerScala_kbmMid = 60;
        mtof_03_innerScala_kbmRefNum = 69;
        mtof_03_innerScala_kbmRefFreq = 440;
        mtof_03_innerScala_kbmSize = 0;
        mtof_03_innerScala_kbmMin = 0;
        mtof_03_innerScala_kbmMax = 0;
        mtof_03_innerScala_kbmOctaveDegree = 12;
        mtof_03_innerScala_kbmMapSize = 0;
        mtof_03_innerScala_refFreq = 261.63;
        numberobj_27_currentFormat = 6;
        numberobj_27_lastValue = 0;
        mtof_04_innerMtoF_lastInValue = 0;
        mtof_04_innerMtoF_lastOutValue = 0;
        mtof_04_innerMtoF_lastTuning = 0;
        mtof_04_innerScala_lastValid = false;
        mtof_04_innerScala_lastNote = 0;
        mtof_04_innerScala_lastFreq = 0;
        mtof_04_innerScala_sclEntryCount = 0;
        mtof_04_innerScala_sclOctaveMul = 1;
        mtof_04_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_04_innerScala_kbmMid = 60;
        mtof_04_innerScala_kbmRefNum = 69;
        mtof_04_innerScala_kbmRefFreq = 440;
        mtof_04_innerScala_kbmSize = 0;
        mtof_04_innerScala_kbmMin = 0;
        mtof_04_innerScala_kbmMax = 0;
        mtof_04_innerScala_kbmOctaveDegree = 12;
        mtof_04_innerScala_kbmMapSize = 0;
        mtof_04_innerScala_refFreq = 261.63;
        mtof_05_innerMtoF_lastInValue = 0;
        mtof_05_innerMtoF_lastOutValue = 0;
        mtof_05_innerMtoF_lastTuning = 0;
        mtof_05_innerScala_lastValid = false;
        mtof_05_innerScala_lastNote = 0;
        mtof_05_innerScala_lastFreq = 0;
        mtof_05_innerScala_sclEntryCount = 0;
        mtof_05_innerScala_sclOctaveMul = 1;
        mtof_05_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_05_innerScala_kbmMid = 60;
        mtof_05_innerScala_kbmRefNum = 69;
        mtof_05_innerScala_kbmRefFreq = 440;
        mtof_05_innerScala_kbmSize = 0;
        mtof_05_innerScala_kbmMin = 0;
        mtof_05_innerScala_kbmMax = 0;
        mtof_05_innerScala_kbmOctaveDegree = 12;
        mtof_05_innerScala_kbmMapSize = 0;
        mtof_05_innerScala_refFreq = 261.63;
        counter_02_count = 0;
        counter_02_phase = true;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        list message_56_set;
        number numberobj_22_value;
        list mtof_01_midivalue;
        list mtof_01_scale;
        list mtof_01_map;
        number mtof_01_base;
        number expr_07_in1;
        number expr_07_in2;
        number expr_07_out1;
        number p_07_target;
        number intnum_01_input_number;
        number intnum_01_value;
        number p_08_target;
        number receive_04_output_number;
        list receive_04_output_list;
        list listindex_01_input;
        list listindex_01_index;
        list message_57_set;
        number numberobj_23_value;
        list mtof_02_midivalue;
        list mtof_02_scale;
        list mtof_02_map;
        number mtof_02_base;
        number change_02_input;
        number change_02_out;
        number numberobj_24_value;
        number expr_08_in1;
        number expr_08_in2;
        number expr_08_out1;
        number numberobj_25_value;
        number random_02_limit;
        number random_02_seed;
        number receive_05_output_number;
        list receive_05_output_list;
        list listlen_01_input;
        number numberobj_26_value;
        list mtof_03_midivalue;
        list mtof_03_scale;
        list mtof_03_map;
        number mtof_03_base;
        number expr_09_in1;
        number expr_09_in2;
        number expr_09_out1;
        list message_58_set;
        list message_59_set;
        number numberobj_27_value;
        list message_60_set;
        list mtof_04_midivalue;
        list mtof_04_scale;
        list mtof_04_map;
        number mtof_04_base;
        number expr_10_in1;
        number expr_10_in2;
        number expr_10_out1;
        number switchobj_01_onoff;
        list mtof_05_midivalue;
        list mtof_05_scale;
        list mtof_05_map;
        number mtof_05_base;
        number expr_11_in1;
        number expr_11_in2;
        number expr_11_out1;
        number expr_12_in1;
        number expr_12_in2;
        number expr_12_out1;
        list message_61_set;
        number send_01_input_number;
        list send_01_input_list;
        list message_62_set;
        Int counter_02_carryflag;
        number counter_02_direction;
        number counter_02_resetnext_number;
        number counter_02_resetnow_number;
        number counter_02_maximum;
        number counter_02_output;
        number counter_02_underflow_number;
        number counter_02_overflow_number;
        number counter_02_carry;
        number counter_02_minimum;
        number send_02_input_number;
        list send_02_input_list;
        number send_03_input_number;
        list send_03_input_list;
        number expr_13_in1;
        number expr_13_in2;
        number expr_13_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_22_currentFormat;
        number numberobj_22_lastValue;
        number mtof_01_innerMtoF_lastInValue;
        number mtof_01_innerMtoF_lastOutValue;
        number mtof_01_innerMtoF_lastTuning;
        Float64BufferRef mtof_01_innerMtoF_buffer;
        const Index mtof_01_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_01_innerScala_lastValid;
        number mtof_01_innerScala_lastNote;
        number mtof_01_innerScala_lastFreq;
        int mtof_01_innerScala_sclEntryCount;
        number mtof_01_innerScala_sclOctaveMul;
        list mtof_01_innerScala_sclExpMul;
        list mtof_01_innerScala_kbmValid;
        int mtof_01_innerScala_kbmMid;
        int mtof_01_innerScala_kbmRefNum;
        number mtof_01_innerScala_kbmRefFreq;
        int mtof_01_innerScala_kbmSize;
        int mtof_01_innerScala_kbmMin;
        int mtof_01_innerScala_kbmMax;
        int mtof_01_innerScala_kbmOctaveDegree;
        Index mtof_01_innerScala_kbmMapSize;
        number mtof_01_innerScala_refFreq;
        number intnum_01_stored;
        Int numberobj_23_currentFormat;
        number numberobj_23_lastValue;
        number mtof_02_innerMtoF_lastInValue;
        number mtof_02_innerMtoF_lastOutValue;
        number mtof_02_innerMtoF_lastTuning;
        Float64BufferRef mtof_02_innerMtoF_buffer;
        const Index mtof_02_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_02_innerScala_lastValid;
        number mtof_02_innerScala_lastNote;
        number mtof_02_innerScala_lastFreq;
        int mtof_02_innerScala_sclEntryCount;
        number mtof_02_innerScala_sclOctaveMul;
        list mtof_02_innerScala_sclExpMul;
        list mtof_02_innerScala_kbmValid;
        int mtof_02_innerScala_kbmMid;
        int mtof_02_innerScala_kbmRefNum;
        number mtof_02_innerScala_kbmRefFreq;
        int mtof_02_innerScala_kbmSize;
        int mtof_02_innerScala_kbmMin;
        int mtof_02_innerScala_kbmMax;
        int mtof_02_innerScala_kbmOctaveDegree;
        Index mtof_02_innerScala_kbmMapSize;
        number mtof_02_innerScala_refFreq;
        number change_02_prev;
        Int numberobj_24_currentFormat;
        number numberobj_24_lastValue;
        Int numberobj_25_currentFormat;
        number numberobj_25_lastValue;
        UInt random_02_nz_state[4] = { };
        Int numberobj_26_currentFormat;
        number numberobj_26_lastValue;
        number mtof_03_innerMtoF_lastInValue;
        number mtof_03_innerMtoF_lastOutValue;
        number mtof_03_innerMtoF_lastTuning;
        Float64BufferRef mtof_03_innerMtoF_buffer;
        const Index mtof_03_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_03_innerScala_lastValid;
        number mtof_03_innerScala_lastNote;
        number mtof_03_innerScala_lastFreq;
        int mtof_03_innerScala_sclEntryCount;
        number mtof_03_innerScala_sclOctaveMul;
        list mtof_03_innerScala_sclExpMul;
        list mtof_03_innerScala_kbmValid;
        int mtof_03_innerScala_kbmMid;
        int mtof_03_innerScala_kbmRefNum;
        number mtof_03_innerScala_kbmRefFreq;
        int mtof_03_innerScala_kbmSize;
        int mtof_03_innerScala_kbmMin;
        int mtof_03_innerScala_kbmMax;
        int mtof_03_innerScala_kbmOctaveDegree;
        Index mtof_03_innerScala_kbmMapSize;
        number mtof_03_innerScala_refFreq;
        Int numberobj_27_currentFormat;
        number numberobj_27_lastValue;
        number mtof_04_innerMtoF_lastInValue;
        number mtof_04_innerMtoF_lastOutValue;
        number mtof_04_innerMtoF_lastTuning;
        Float64BufferRef mtof_04_innerMtoF_buffer;
        const Index mtof_04_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_04_innerScala_lastValid;
        number mtof_04_innerScala_lastNote;
        number mtof_04_innerScala_lastFreq;
        int mtof_04_innerScala_sclEntryCount;
        number mtof_04_innerScala_sclOctaveMul;
        list mtof_04_innerScala_sclExpMul;
        list mtof_04_innerScala_kbmValid;
        int mtof_04_innerScala_kbmMid;
        int mtof_04_innerScala_kbmRefNum;
        number mtof_04_innerScala_kbmRefFreq;
        int mtof_04_innerScala_kbmSize;
        int mtof_04_innerScala_kbmMin;
        int mtof_04_innerScala_kbmMax;
        int mtof_04_innerScala_kbmOctaveDegree;
        Index mtof_04_innerScala_kbmMapSize;
        number mtof_04_innerScala_refFreq;
        number mtof_05_innerMtoF_lastInValue;
        number mtof_05_innerMtoF_lastOutValue;
        number mtof_05_innerMtoF_lastTuning;
        Float64BufferRef mtof_05_innerMtoF_buffer;
        const Index mtof_05_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_05_innerScala_lastValid;
        number mtof_05_innerScala_lastNote;
        number mtof_05_innerScala_lastFreq;
        int mtof_05_innerScala_sclEntryCount;
        number mtof_05_innerScala_sclOctaveMul;
        list mtof_05_innerScala_sclExpMul;
        list mtof_05_innerScala_kbmValid;
        int mtof_05_innerScala_kbmMid;
        int mtof_05_innerScala_kbmRefNum;
        number mtof_05_innerScala_kbmRefFreq;
        int mtof_05_innerScala_kbmSize;
        int mtof_05_innerScala_kbmMin;
        int mtof_05_innerScala_kbmMax;
        int mtof_05_innerScala_kbmOctaveDegree;
        Index mtof_05_innerScala_kbmMapSize;
        number mtof_05_innerScala_refFreq;
        number counter_02_count;
        bool counter_02_phase;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_147* p_07;
        RNBOSubpatcher_148* p_08;
    
};

class RNBOSubpatcher_176 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_149 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_176;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_149()
            {
            }
            
            ~RNBOSubpatcher_149()
            {
            }
            
            virtual RNBOSubpatcher_176* getPatcher() const {
                return static_cast<RNBOSubpatcher_176 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                this->xfade_tilde_01_perform(in5, in1, in3, out1, n);
                this->xfade_tilde_02_perform(in5, in2, in4, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 5;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void xfade_tilde_01_perform(
                const Sample * pos,
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 1);
                }
            }
            
            void xfade_tilde_02_perform(
                const Sample * pos,
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 1);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number xfade_tilde_01_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            if (pos > nchan_1)
                                pos = nchan_1;
                            else if (pos < 0)
                                pos = 0;
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                return rnbo_cos(1.57079632679489661923 * pos);
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void xfade_tilde_01_func_reset() {}
            
            number xfade_tilde_02_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            if (pos > nchan_1)
                                pos = nchan_1;
                            else if (pos < 0)
                                pos = 0;
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                return rnbo_cos(1.57079632679489661923 * pos);
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void xfade_tilde_02_func_reset() {}
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                xfade_tilde_01_pos = 0;
                xfade_tilde_02_pos = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number xfade_tilde_01_pos;
                number xfade_tilde_02_pos;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_150 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_176;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_150()
            {
            }
            
            ~RNBOSubpatcher_150()
            {
            }
            
            virtual RNBOSubpatcher_176* getPatcher() const {
                return static_cast<RNBOSubpatcher_176 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                SampleValue * out5 = (numOutputs >= 5 && outputs[4] ? outputs[4] : this->dummyBuffer);
                SampleValue * out6 = (numOutputs >= 6 && outputs[5] ? outputs[5] : this->dummyBuffer);
                SampleValue * out7 = (numOutputs >= 7 && outputs[6] ? outputs[6] : this->dummyBuffer);
                SampleValue * out8 = (numOutputs >= 8 && outputs[7] ? outputs[7] : this->dummyBuffer);
                SampleValue * out9 = (numOutputs >= 9 && outputs[8] ? outputs[8] : this->dummyBuffer);
                SampleValue * out10 = (numOutputs >= 10 && outputs[9] ? outputs[9] : this->dummyBuffer);
                SampleValue * out11 = (numOutputs >= 11 && outputs[10] ? outputs[10] : this->dummyBuffer);
                SampleValue * out12 = (numOutputs >= 12 && outputs[11] ? outputs[11] : this->dummyBuffer);
                SampleValue * out13 = (numOutputs >= 13 && outputs[12] ? outputs[12] : this->dummyBuffer);
                SampleValue * out14 = (numOutputs >= 14 && outputs[13] ? outputs[13] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                const SampleValue * in8 = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                this->signalforwarder_06_perform(in1, out2, n);
                this->signalforwarder_07_perform(in1, out1, n);
                this->signalforwarder_08_perform(in2, out12, n);
                this->signalforwarder_09_perform(in3, out13, n);
                this->signalforwarder_10_perform(in3, out3, n);
                this->signalforwarder_11_perform(in4, out14, n);
                this->signalforwarder_12_perform(in4, out4, n);
                this->signalforwarder_13_perform(in5, out8, n);
                this->signalforwarder_14_perform(in5, out9, n);
                this->signalforwarder_15_perform(in6, out5, n);
                this->signalforwarder_16_perform(in7, out10, n);
                this->signalforwarder_17_perform(in7, out6, n);
                this->signalforwarder_18_perform(in8, out11, n);
                this->signalforwarder_19_perform(in8, out7, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 8;
            }
            
            Index getNumOutputChannels() const {
                return 14;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void signalforwarder_06_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_07_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_08_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_09_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_10_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_11_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_12_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_13_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_14_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_15_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_16_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_17_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_18_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_19_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_151 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_176;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_151()
            {
            }
            
            ~RNBOSubpatcher_151()
            {
            }
            
            virtual RNBOSubpatcher_176* getPatcher() const {
                return static_cast<RNBOSubpatcher_176 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->allpass_tilde_04_perform(
                    in1,
                    this->allpass_tilde_04_delayTime,
                    this->allpass_tilde_04_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_03_perform(
                    this->signals[0],
                    this->allpass_tilde_03_delayTime,
                    this->allpass_tilde_03_gain,
                    this->signals[1],
                    n
                );
            
                this->allpass_tilde_02_perform(
                    this->signals[1],
                    this->allpass_tilde_02_delayTime,
                    this->allpass_tilde_02_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_01_perform(
                    this->signals[0],
                    this->allpass_tilde_01_delayTime,
                    this->allpass_tilde_01_gain,
                    out1,
                    n
                );
            
                this->allpass_tilde_08_perform(
                    in2,
                    this->allpass_tilde_08_delayTime,
                    this->allpass_tilde_08_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_07_perform(
                    this->signals[0],
                    this->allpass_tilde_07_delayTime,
                    this->allpass_tilde_07_gain,
                    this->signals[1],
                    n
                );
            
                this->allpass_tilde_06_perform(
                    this->signals[1],
                    this->allpass_tilde_06_delayTime,
                    this->allpass_tilde_06_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_05_perform(
                    this->signals[0],
                    this->allpass_tilde_05_delayTime,
                    this->allpass_tilde_05_gain,
                    out2,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 2; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->allpass_tilde_04_dspsetup(forceDSPSetup);
                this->allpass_tilde_03_dspsetup(forceDSPSetup);
                this->allpass_tilde_02_dspsetup(forceDSPSetup);
                this->allpass_tilde_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_08_dspsetup(forceDSPSetup);
                this->allpass_tilde_07_dspsetup(forceDSPSetup);
                this->allpass_tilde_06_dspsetup(forceDSPSetup);
                this->allpass_tilde_05_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->allpass_tilde_01_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->allpass_tilde_01_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->allpass_tilde_02_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->allpass_tilde_02_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->allpass_tilde_03_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->allpass_tilde_03_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->allpass_tilde_04_feedForward_bufferobj);
                    break;
                    }
                case 11:
                    {
                    return addressOf(this->allpass_tilde_04_feedBack_bufferobj);
                    break;
                    }
                case 12:
                    {
                    return addressOf(this->allpass_tilde_05_feedForward_bufferobj);
                    break;
                    }
                case 13:
                    {
                    return addressOf(this->allpass_tilde_05_feedBack_bufferobj);
                    break;
                    }
                case 14:
                    {
                    return addressOf(this->allpass_tilde_06_feedForward_bufferobj);
                    break;
                    }
                case 15:
                    {
                    return addressOf(this->allpass_tilde_06_feedBack_bufferobj);
                    break;
                    }
                case 16:
                    {
                    return addressOf(this->allpass_tilde_07_feedForward_bufferobj);
                    break;
                    }
                case 17:
                    {
                    return addressOf(this->allpass_tilde_07_feedBack_bufferobj);
                    break;
                    }
                case 18:
                    {
                    return addressOf(this->allpass_tilde_08_feedForward_bufferobj);
                    break;
                    }
                case 19:
                    {
                    return addressOf(this->allpass_tilde_08_feedBack_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 16;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
                }
            
                if (index == 11) {
                    this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
                }
            
                if (index == 12) {
                    this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
                }
            
                if (index == 13) {
                    this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
                }
            
                if (index == 14) {
                    this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
                }
            
                if (index == 15) {
                    this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
                }
            
                if (index == 16) {
                    this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
                }
            
                if (index == 17) {
                    this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
                }
            
                if (index == 18) {
                    this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
                }
            
                if (index == 19) {
                    this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_01_feedForward_bufferobj = initDataRef("allpass_tilde_01_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_01_feedBack_bufferobj = initDataRef("allpass_tilde_01_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_02_feedForward_bufferobj = initDataRef("allpass_tilde_02_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_02_feedBack_bufferobj = initDataRef("allpass_tilde_02_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_03_feedForward_bufferobj = initDataRef("allpass_tilde_03_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_03_feedBack_bufferobj = initDataRef("allpass_tilde_03_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_04_feedForward_bufferobj = initDataRef("allpass_tilde_04_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_04_feedBack_bufferobj = initDataRef("allpass_tilde_04_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_05_feedForward_bufferobj = initDataRef("allpass_tilde_05_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_05_feedBack_bufferobj = initDataRef("allpass_tilde_05_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_06_feedForward_bufferobj = initDataRef("allpass_tilde_06_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_06_feedBack_bufferobj = initDataRef("allpass_tilde_06_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_07_feedForward_bufferobj = initDataRef("allpass_tilde_07_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_07_feedBack_bufferobj = initDataRef("allpass_tilde_07_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_08_feedForward_bufferobj = initDataRef("allpass_tilde_08_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_08_feedBack_bufferobj = initDataRef("allpass_tilde_08_feedBack_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_01_feedForward_bufferobj->setIndex(4);
                this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
                this->allpass_tilde_01_feedBack_bufferobj->setIndex(5);
                this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
                this->allpass_tilde_02_feedForward_bufferobj->setIndex(6);
                this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
                this->allpass_tilde_02_feedBack_bufferobj->setIndex(7);
                this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
                this->allpass_tilde_03_feedForward_bufferobj->setIndex(8);
                this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
                this->allpass_tilde_03_feedBack_bufferobj->setIndex(9);
                this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
                this->allpass_tilde_04_feedForward_bufferobj->setIndex(10);
                this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
                this->allpass_tilde_04_feedBack_bufferobj->setIndex(11);
                this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
                this->allpass_tilde_05_feedForward_bufferobj->setIndex(12);
                this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
                this->allpass_tilde_05_feedBack_bufferobj->setIndex(13);
                this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
                this->allpass_tilde_06_feedForward_bufferobj->setIndex(14);
                this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
                this->allpass_tilde_06_feedBack_bufferobj->setIndex(15);
                this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
                this->allpass_tilde_07_feedForward_bufferobj->setIndex(16);
                this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
                this->allpass_tilde_07_feedBack_bufferobj->setIndex(17);
                this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
                this->allpass_tilde_08_feedForward_bufferobj->setIndex(18);
                this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
                this->allpass_tilde_08_feedBack_bufferobj->setIndex(19);
                this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->allpass_tilde_01_feedForward_init();
                this->allpass_tilde_01_feedBack_init();
                this->allpass_tilde_01_init();
                this->allpass_tilde_02_feedForward_init();
                this->allpass_tilde_02_feedBack_init();
                this->allpass_tilde_02_init();
                this->allpass_tilde_03_feedForward_init();
                this->allpass_tilde_03_feedBack_init();
                this->allpass_tilde_03_init();
                this->allpass_tilde_04_feedForward_init();
                this->allpass_tilde_04_feedBack_init();
                this->allpass_tilde_04_init();
                this->allpass_tilde_05_feedForward_init();
                this->allpass_tilde_05_feedBack_init();
                this->allpass_tilde_05_init();
                this->allpass_tilde_06_feedForward_init();
                this->allpass_tilde_06_feedBack_init();
                this->allpass_tilde_06_init();
                this->allpass_tilde_07_feedForward_init();
                this->allpass_tilde_07_feedBack_init();
                this->allpass_tilde_07_init();
                this->allpass_tilde_08_feedForward_init();
                this->allpass_tilde_08_feedBack_init();
                this->allpass_tilde_08_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_01_feedForward_buffer = this->allpass_tilde_01_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_01_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_01_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->allpass_tilde_01_feedBack_buffer = this->allpass_tilde_01_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_01_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_01_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->allpass_tilde_02_feedForward_buffer = this->allpass_tilde_02_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_02_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_02_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->allpass_tilde_02_feedBack_buffer = this->allpass_tilde_02_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_02_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_02_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->allpass_tilde_03_feedForward_buffer = this->allpass_tilde_03_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_03_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_03_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_03_feedBack_buffer = this->allpass_tilde_03_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_03_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_03_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->allpass_tilde_04_feedForward_buffer = this->allpass_tilde_04_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_04_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_04_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->allpass_tilde_04_feedBack_buffer = this->allpass_tilde_04_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_04_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_04_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->allpass_tilde_05_feedForward_buffer = this->allpass_tilde_05_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_05_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_05_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->allpass_tilde_05_feedBack_buffer = this->allpass_tilde_05_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_05_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_05_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->allpass_tilde_06_feedForward_buffer = this->allpass_tilde_06_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_06_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_06_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->allpass_tilde_06_feedBack_buffer = this->allpass_tilde_06_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_06_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_06_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->allpass_tilde_07_feedForward_buffer = this->allpass_tilde_07_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_07_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_07_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->allpass_tilde_07_feedBack_buffer = this->allpass_tilde_07_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_07_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_07_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            
                this->allpass_tilde_08_feedForward_buffer = this->allpass_tilde_08_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_08_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_08_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(18);
                }
            
                this->allpass_tilde_08_feedBack_buffer = this->allpass_tilde_08_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_08_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_08_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(19);
                }
            }
            
            void allpass_tilde_04_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    auto delayTimeinSamps = this->mstosamps(4.76);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_04_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_04_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_04_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_04_feedBack_write(ov);
                    this->allpass_tilde_04_feedForward_step();
                    this->allpass_tilde_04_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_03_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    auto delayTimeinSamps = this->mstosamps(3.58);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_03_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_03_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_03_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_03_feedBack_write(ov);
                    this->allpass_tilde_03_feedForward_step();
                    this->allpass_tilde_03_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_02_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    auto delayTimeinSamps = this->mstosamps(12.73);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_02_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_02_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_02_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_02_feedBack_write(ov);
                    this->allpass_tilde_02_feedForward_step();
                    this->allpass_tilde_02_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_01_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    auto delayTimeinSamps = this->mstosamps(9.3);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_01_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_01_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_01_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_01_feedBack_write(ov);
                    this->allpass_tilde_01_feedForward_step();
                    this->allpass_tilde_01_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_08_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    auto delayTimeinSamps = this->mstosamps(4.76);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_08_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_08_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_08_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_08_feedBack_write(ov);
                    this->allpass_tilde_08_feedForward_step();
                    this->allpass_tilde_08_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_07_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    auto delayTimeinSamps = this->mstosamps(3.58);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_07_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_07_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_07_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_07_feedBack_write(ov);
                    this->allpass_tilde_07_feedForward_step();
                    this->allpass_tilde_07_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_06_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    auto delayTimeinSamps = this->mstosamps(12.73);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_06_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_06_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_06_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_06_feedBack_write(ov);
                    this->allpass_tilde_06_feedForward_step();
                    this->allpass_tilde_06_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_05_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    auto delayTimeinSamps = this->mstosamps(9.3);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_05_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_05_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_05_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_05_feedBack_write(ov);
                    this->allpass_tilde_05_feedForward_step();
                    this->allpass_tilde_05_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void allpass_tilde_01_feedForward_step() {
                this->allpass_tilde_01_feedForward_reader++;
            
                if (this->allpass_tilde_01_feedForward_reader >= (int)(this->allpass_tilde_01_feedForward_buffer->getSize()))
                    this->allpass_tilde_01_feedForward_reader = 0;
            }
            
            number allpass_tilde_01_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_01_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                );
            }
            
            void allpass_tilde_01_feedForward_write(number v) {
                this->allpass_tilde_01_feedForward_writer = this->allpass_tilde_01_feedForward_reader;
                this->allpass_tilde_01_feedForward_buffer[(Index)this->allpass_tilde_01_feedForward_writer] = v;
            }
            
            number allpass_tilde_01_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedForward__maxdelay : size);
                number val = this->allpass_tilde_01_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_01_feedForward_write(v);
                this->allpass_tilde_01_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_01_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_01_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_01_feedForward_init() {
                auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
                this->allpass_tilde_01_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_01_feedForward_clear() {
                this->allpass_tilde_01_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_01_feedForward_reset() {
                auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
                this->allpass_tilde_01_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_01_feedForward_buffer);
                this->allpass_tilde_01_feedForward_wrap = this->allpass_tilde_01_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_01_feedForward_clear();
            
                if (this->allpass_tilde_01_feedForward_reader >= this->allpass_tilde_01_feedForward__maxdelay || this->allpass_tilde_01_feedForward_writer >= this->allpass_tilde_01_feedForward__maxdelay) {
                    this->allpass_tilde_01_feedForward_reader = 0;
                    this->allpass_tilde_01_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_01_feedForward_dspsetup() {
                this->allpass_tilde_01_feedForward_reset();
            }
            
            number allpass_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_01_feedForward_size() {
                return this->allpass_tilde_01_feedForward__maxdelay;
            }
            
            void allpass_tilde_01_feedBack_step() {
                this->allpass_tilde_01_feedBack_reader++;
            
                if (this->allpass_tilde_01_feedBack_reader >= (int)(this->allpass_tilde_01_feedBack_buffer->getSize()))
                    this->allpass_tilde_01_feedBack_reader = 0;
            }
            
            number allpass_tilde_01_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_01_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                );
            }
            
            void allpass_tilde_01_feedBack_write(number v) {
                this->allpass_tilde_01_feedBack_writer = this->allpass_tilde_01_feedBack_reader;
                this->allpass_tilde_01_feedBack_buffer[(Index)this->allpass_tilde_01_feedBack_writer] = v;
            }
            
            number allpass_tilde_01_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedBack__maxdelay : size);
                number val = this->allpass_tilde_01_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_01_feedBack_write(v);
                this->allpass_tilde_01_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_01_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_01_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_01_feedBack_init() {
                auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
                this->allpass_tilde_01_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_01_feedBack_clear() {
                this->allpass_tilde_01_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_01_feedBack_reset() {
                auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
                this->allpass_tilde_01_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_01_feedBack_buffer);
                this->allpass_tilde_01_feedBack_wrap = this->allpass_tilde_01_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_01_feedBack_clear();
            
                if (this->allpass_tilde_01_feedBack_reader >= this->allpass_tilde_01_feedBack__maxdelay || this->allpass_tilde_01_feedBack_writer >= this->allpass_tilde_01_feedBack__maxdelay) {
                    this->allpass_tilde_01_feedBack_reader = 0;
                    this->allpass_tilde_01_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_01_feedBack_dspsetup() {
                this->allpass_tilde_01_feedBack_reset();
            }
            
            number allpass_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_01_feedBack_size() {
                return this->allpass_tilde_01_feedBack__maxdelay;
            }
            
            void allpass_tilde_01_init() {
                this->allpass_tilde_01_feedForward_init();
                this->allpass_tilde_01_feedBack_init();
            }
            
            void allpass_tilde_01_clear() {
                this->allpass_tilde_01_feedForward_clear();
                this->allpass_tilde_01_feedBack_clear();
            }
            
            void allpass_tilde_01_reset() {
                this->allpass_tilde_01_init();
                this->allpass_tilde_01_clear();
            }
            
            void allpass_tilde_01_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_01_reset();
                this->allpass_tilde_01_setupDone = true;
                this->allpass_tilde_01_feedForward_dspsetup();
                this->allpass_tilde_01_feedBack_dspsetup();
            }
            
            void allpass_tilde_02_feedForward_step() {
                this->allpass_tilde_02_feedForward_reader++;
            
                if (this->allpass_tilde_02_feedForward_reader >= (int)(this->allpass_tilde_02_feedForward_buffer->getSize()))
                    this->allpass_tilde_02_feedForward_reader = 0;
            }
            
            number allpass_tilde_02_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_02_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                );
            }
            
            void allpass_tilde_02_feedForward_write(number v) {
                this->allpass_tilde_02_feedForward_writer = this->allpass_tilde_02_feedForward_reader;
                this->allpass_tilde_02_feedForward_buffer[(Index)this->allpass_tilde_02_feedForward_writer] = v;
            }
            
            number allpass_tilde_02_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedForward__maxdelay : size);
                number val = this->allpass_tilde_02_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_02_feedForward_write(v);
                this->allpass_tilde_02_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_02_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_02_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_02_feedForward_init() {
                auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
                this->allpass_tilde_02_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_02_feedForward_clear() {
                this->allpass_tilde_02_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_02_feedForward_reset() {
                auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
                this->allpass_tilde_02_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_02_feedForward_buffer);
                this->allpass_tilde_02_feedForward_wrap = this->allpass_tilde_02_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_02_feedForward_clear();
            
                if (this->allpass_tilde_02_feedForward_reader >= this->allpass_tilde_02_feedForward__maxdelay || this->allpass_tilde_02_feedForward_writer >= this->allpass_tilde_02_feedForward__maxdelay) {
                    this->allpass_tilde_02_feedForward_reader = 0;
                    this->allpass_tilde_02_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_02_feedForward_dspsetup() {
                this->allpass_tilde_02_feedForward_reset();
            }
            
            number allpass_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_02_feedForward_size() {
                return this->allpass_tilde_02_feedForward__maxdelay;
            }
            
            void allpass_tilde_02_feedBack_step() {
                this->allpass_tilde_02_feedBack_reader++;
            
                if (this->allpass_tilde_02_feedBack_reader >= (int)(this->allpass_tilde_02_feedBack_buffer->getSize()))
                    this->allpass_tilde_02_feedBack_reader = 0;
            }
            
            number allpass_tilde_02_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_02_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                );
            }
            
            void allpass_tilde_02_feedBack_write(number v) {
                this->allpass_tilde_02_feedBack_writer = this->allpass_tilde_02_feedBack_reader;
                this->allpass_tilde_02_feedBack_buffer[(Index)this->allpass_tilde_02_feedBack_writer] = v;
            }
            
            number allpass_tilde_02_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedBack__maxdelay : size);
                number val = this->allpass_tilde_02_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_02_feedBack_write(v);
                this->allpass_tilde_02_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_02_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_02_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_02_feedBack_init() {
                auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
                this->allpass_tilde_02_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_02_feedBack_clear() {
                this->allpass_tilde_02_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_02_feedBack_reset() {
                auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
                this->allpass_tilde_02_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_02_feedBack_buffer);
                this->allpass_tilde_02_feedBack_wrap = this->allpass_tilde_02_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_02_feedBack_clear();
            
                if (this->allpass_tilde_02_feedBack_reader >= this->allpass_tilde_02_feedBack__maxdelay || this->allpass_tilde_02_feedBack_writer >= this->allpass_tilde_02_feedBack__maxdelay) {
                    this->allpass_tilde_02_feedBack_reader = 0;
                    this->allpass_tilde_02_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_02_feedBack_dspsetup() {
                this->allpass_tilde_02_feedBack_reset();
            }
            
            number allpass_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_02_feedBack_size() {
                return this->allpass_tilde_02_feedBack__maxdelay;
            }
            
            void allpass_tilde_02_init() {
                this->allpass_tilde_02_feedForward_init();
                this->allpass_tilde_02_feedBack_init();
            }
            
            void allpass_tilde_02_clear() {
                this->allpass_tilde_02_feedForward_clear();
                this->allpass_tilde_02_feedBack_clear();
            }
            
            void allpass_tilde_02_reset() {
                this->allpass_tilde_02_init();
                this->allpass_tilde_02_clear();
            }
            
            void allpass_tilde_02_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_02_reset();
                this->allpass_tilde_02_setupDone = true;
                this->allpass_tilde_02_feedForward_dspsetup();
                this->allpass_tilde_02_feedBack_dspsetup();
            }
            
            void allpass_tilde_03_feedForward_step() {
                this->allpass_tilde_03_feedForward_reader++;
            
                if (this->allpass_tilde_03_feedForward_reader >= (int)(this->allpass_tilde_03_feedForward_buffer->getSize()))
                    this->allpass_tilde_03_feedForward_reader = 0;
            }
            
            number allpass_tilde_03_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_03_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                );
            }
            
            void allpass_tilde_03_feedForward_write(number v) {
                this->allpass_tilde_03_feedForward_writer = this->allpass_tilde_03_feedForward_reader;
                this->allpass_tilde_03_feedForward_buffer[(Index)this->allpass_tilde_03_feedForward_writer] = v;
            }
            
            number allpass_tilde_03_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedForward__maxdelay : size);
                number val = this->allpass_tilde_03_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_03_feedForward_write(v);
                this->allpass_tilde_03_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_03_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_03_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_03_feedForward_init() {
                auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
                this->allpass_tilde_03_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_03_feedForward_clear() {
                this->allpass_tilde_03_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_03_feedForward_reset() {
                auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
                this->allpass_tilde_03_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_03_feedForward_buffer);
                this->allpass_tilde_03_feedForward_wrap = this->allpass_tilde_03_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_03_feedForward_clear();
            
                if (this->allpass_tilde_03_feedForward_reader >= this->allpass_tilde_03_feedForward__maxdelay || this->allpass_tilde_03_feedForward_writer >= this->allpass_tilde_03_feedForward__maxdelay) {
                    this->allpass_tilde_03_feedForward_reader = 0;
                    this->allpass_tilde_03_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_03_feedForward_dspsetup() {
                this->allpass_tilde_03_feedForward_reset();
            }
            
            number allpass_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_03_feedForward_size() {
                return this->allpass_tilde_03_feedForward__maxdelay;
            }
            
            void allpass_tilde_03_feedBack_step() {
                this->allpass_tilde_03_feedBack_reader++;
            
                if (this->allpass_tilde_03_feedBack_reader >= (int)(this->allpass_tilde_03_feedBack_buffer->getSize()))
                    this->allpass_tilde_03_feedBack_reader = 0;
            }
            
            number allpass_tilde_03_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_03_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                );
            }
            
            void allpass_tilde_03_feedBack_write(number v) {
                this->allpass_tilde_03_feedBack_writer = this->allpass_tilde_03_feedBack_reader;
                this->allpass_tilde_03_feedBack_buffer[(Index)this->allpass_tilde_03_feedBack_writer] = v;
            }
            
            number allpass_tilde_03_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedBack__maxdelay : size);
                number val = this->allpass_tilde_03_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_03_feedBack_write(v);
                this->allpass_tilde_03_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_03_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_03_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_03_feedBack_init() {
                auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
                this->allpass_tilde_03_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_03_feedBack_clear() {
                this->allpass_tilde_03_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_03_feedBack_reset() {
                auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
                this->allpass_tilde_03_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_03_feedBack_buffer);
                this->allpass_tilde_03_feedBack_wrap = this->allpass_tilde_03_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_03_feedBack_clear();
            
                if (this->allpass_tilde_03_feedBack_reader >= this->allpass_tilde_03_feedBack__maxdelay || this->allpass_tilde_03_feedBack_writer >= this->allpass_tilde_03_feedBack__maxdelay) {
                    this->allpass_tilde_03_feedBack_reader = 0;
                    this->allpass_tilde_03_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_03_feedBack_dspsetup() {
                this->allpass_tilde_03_feedBack_reset();
            }
            
            number allpass_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_03_feedBack_size() {
                return this->allpass_tilde_03_feedBack__maxdelay;
            }
            
            void allpass_tilde_03_init() {
                this->allpass_tilde_03_feedForward_init();
                this->allpass_tilde_03_feedBack_init();
            }
            
            void allpass_tilde_03_clear() {
                this->allpass_tilde_03_feedForward_clear();
                this->allpass_tilde_03_feedBack_clear();
            }
            
            void allpass_tilde_03_reset() {
                this->allpass_tilde_03_init();
                this->allpass_tilde_03_clear();
            }
            
            void allpass_tilde_03_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_03_reset();
                this->allpass_tilde_03_setupDone = true;
                this->allpass_tilde_03_feedForward_dspsetup();
                this->allpass_tilde_03_feedBack_dspsetup();
            }
            
            void allpass_tilde_04_feedForward_step() {
                this->allpass_tilde_04_feedForward_reader++;
            
                if (this->allpass_tilde_04_feedForward_reader >= (int)(this->allpass_tilde_04_feedForward_buffer->getSize()))
                    this->allpass_tilde_04_feedForward_reader = 0;
            }
            
            number allpass_tilde_04_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_04_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                );
            }
            
            void allpass_tilde_04_feedForward_write(number v) {
                this->allpass_tilde_04_feedForward_writer = this->allpass_tilde_04_feedForward_reader;
                this->allpass_tilde_04_feedForward_buffer[(Index)this->allpass_tilde_04_feedForward_writer] = v;
            }
            
            number allpass_tilde_04_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedForward__maxdelay : size);
                number val = this->allpass_tilde_04_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_04_feedForward_write(v);
                this->allpass_tilde_04_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_04_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_04_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_04_feedForward_init() {
                auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
                this->allpass_tilde_04_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_04_feedForward_clear() {
                this->allpass_tilde_04_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_04_feedForward_reset() {
                auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
                this->allpass_tilde_04_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_04_feedForward_buffer);
                this->allpass_tilde_04_feedForward_wrap = this->allpass_tilde_04_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_04_feedForward_clear();
            
                if (this->allpass_tilde_04_feedForward_reader >= this->allpass_tilde_04_feedForward__maxdelay || this->allpass_tilde_04_feedForward_writer >= this->allpass_tilde_04_feedForward__maxdelay) {
                    this->allpass_tilde_04_feedForward_reader = 0;
                    this->allpass_tilde_04_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_04_feedForward_dspsetup() {
                this->allpass_tilde_04_feedForward_reset();
            }
            
            number allpass_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_04_feedForward_size() {
                return this->allpass_tilde_04_feedForward__maxdelay;
            }
            
            void allpass_tilde_04_feedBack_step() {
                this->allpass_tilde_04_feedBack_reader++;
            
                if (this->allpass_tilde_04_feedBack_reader >= (int)(this->allpass_tilde_04_feedBack_buffer->getSize()))
                    this->allpass_tilde_04_feedBack_reader = 0;
            }
            
            number allpass_tilde_04_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_04_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                );
            }
            
            void allpass_tilde_04_feedBack_write(number v) {
                this->allpass_tilde_04_feedBack_writer = this->allpass_tilde_04_feedBack_reader;
                this->allpass_tilde_04_feedBack_buffer[(Index)this->allpass_tilde_04_feedBack_writer] = v;
            }
            
            number allpass_tilde_04_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedBack__maxdelay : size);
                number val = this->allpass_tilde_04_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_04_feedBack_write(v);
                this->allpass_tilde_04_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_04_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_04_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_04_feedBack_init() {
                auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
                this->allpass_tilde_04_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_04_feedBack_clear() {
                this->allpass_tilde_04_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_04_feedBack_reset() {
                auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
                this->allpass_tilde_04_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_04_feedBack_buffer);
                this->allpass_tilde_04_feedBack_wrap = this->allpass_tilde_04_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_04_feedBack_clear();
            
                if (this->allpass_tilde_04_feedBack_reader >= this->allpass_tilde_04_feedBack__maxdelay || this->allpass_tilde_04_feedBack_writer >= this->allpass_tilde_04_feedBack__maxdelay) {
                    this->allpass_tilde_04_feedBack_reader = 0;
                    this->allpass_tilde_04_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_04_feedBack_dspsetup() {
                this->allpass_tilde_04_feedBack_reset();
            }
            
            number allpass_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_04_feedBack_size() {
                return this->allpass_tilde_04_feedBack__maxdelay;
            }
            
            void allpass_tilde_04_init() {
                this->allpass_tilde_04_feedForward_init();
                this->allpass_tilde_04_feedBack_init();
            }
            
            void allpass_tilde_04_clear() {
                this->allpass_tilde_04_feedForward_clear();
                this->allpass_tilde_04_feedBack_clear();
            }
            
            void allpass_tilde_04_reset() {
                this->allpass_tilde_04_init();
                this->allpass_tilde_04_clear();
            }
            
            void allpass_tilde_04_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_04_reset();
                this->allpass_tilde_04_setupDone = true;
                this->allpass_tilde_04_feedForward_dspsetup();
                this->allpass_tilde_04_feedBack_dspsetup();
            }
            
            void allpass_tilde_05_feedForward_step() {
                this->allpass_tilde_05_feedForward_reader++;
            
                if (this->allpass_tilde_05_feedForward_reader >= (int)(this->allpass_tilde_05_feedForward_buffer->getSize()))
                    this->allpass_tilde_05_feedForward_reader = 0;
            }
            
            number allpass_tilde_05_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_05_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                );
            }
            
            void allpass_tilde_05_feedForward_write(number v) {
                this->allpass_tilde_05_feedForward_writer = this->allpass_tilde_05_feedForward_reader;
                this->allpass_tilde_05_feedForward_buffer[(Index)this->allpass_tilde_05_feedForward_writer] = v;
            }
            
            number allpass_tilde_05_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedForward__maxdelay : size);
                number val = this->allpass_tilde_05_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_05_feedForward_write(v);
                this->allpass_tilde_05_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_05_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_05_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_05_feedForward_init() {
                auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
                this->allpass_tilde_05_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_05_feedForward_clear() {
                this->allpass_tilde_05_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_05_feedForward_reset() {
                auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
                this->allpass_tilde_05_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_05_feedForward_buffer);
                this->allpass_tilde_05_feedForward_wrap = this->allpass_tilde_05_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_05_feedForward_clear();
            
                if (this->allpass_tilde_05_feedForward_reader >= this->allpass_tilde_05_feedForward__maxdelay || this->allpass_tilde_05_feedForward_writer >= this->allpass_tilde_05_feedForward__maxdelay) {
                    this->allpass_tilde_05_feedForward_reader = 0;
                    this->allpass_tilde_05_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_05_feedForward_dspsetup() {
                this->allpass_tilde_05_feedForward_reset();
            }
            
            number allpass_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_05_feedForward_size() {
                return this->allpass_tilde_05_feedForward__maxdelay;
            }
            
            void allpass_tilde_05_feedBack_step() {
                this->allpass_tilde_05_feedBack_reader++;
            
                if (this->allpass_tilde_05_feedBack_reader >= (int)(this->allpass_tilde_05_feedBack_buffer->getSize()))
                    this->allpass_tilde_05_feedBack_reader = 0;
            }
            
            number allpass_tilde_05_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_05_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                );
            }
            
            void allpass_tilde_05_feedBack_write(number v) {
                this->allpass_tilde_05_feedBack_writer = this->allpass_tilde_05_feedBack_reader;
                this->allpass_tilde_05_feedBack_buffer[(Index)this->allpass_tilde_05_feedBack_writer] = v;
            }
            
            number allpass_tilde_05_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedBack__maxdelay : size);
                number val = this->allpass_tilde_05_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_05_feedBack_write(v);
                this->allpass_tilde_05_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_05_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_05_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_05_feedBack_init() {
                auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
                this->allpass_tilde_05_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_05_feedBack_clear() {
                this->allpass_tilde_05_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_05_feedBack_reset() {
                auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
                this->allpass_tilde_05_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_05_feedBack_buffer);
                this->allpass_tilde_05_feedBack_wrap = this->allpass_tilde_05_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_05_feedBack_clear();
            
                if (this->allpass_tilde_05_feedBack_reader >= this->allpass_tilde_05_feedBack__maxdelay || this->allpass_tilde_05_feedBack_writer >= this->allpass_tilde_05_feedBack__maxdelay) {
                    this->allpass_tilde_05_feedBack_reader = 0;
                    this->allpass_tilde_05_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_05_feedBack_dspsetup() {
                this->allpass_tilde_05_feedBack_reset();
            }
            
            number allpass_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_05_feedBack_size() {
                return this->allpass_tilde_05_feedBack__maxdelay;
            }
            
            void allpass_tilde_05_init() {
                this->allpass_tilde_05_feedForward_init();
                this->allpass_tilde_05_feedBack_init();
            }
            
            void allpass_tilde_05_clear() {
                this->allpass_tilde_05_feedForward_clear();
                this->allpass_tilde_05_feedBack_clear();
            }
            
            void allpass_tilde_05_reset() {
                this->allpass_tilde_05_init();
                this->allpass_tilde_05_clear();
            }
            
            void allpass_tilde_05_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_05_reset();
                this->allpass_tilde_05_setupDone = true;
                this->allpass_tilde_05_feedForward_dspsetup();
                this->allpass_tilde_05_feedBack_dspsetup();
            }
            
            void allpass_tilde_06_feedForward_step() {
                this->allpass_tilde_06_feedForward_reader++;
            
                if (this->allpass_tilde_06_feedForward_reader >= (int)(this->allpass_tilde_06_feedForward_buffer->getSize()))
                    this->allpass_tilde_06_feedForward_reader = 0;
            }
            
            number allpass_tilde_06_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_06_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                );
            }
            
            void allpass_tilde_06_feedForward_write(number v) {
                this->allpass_tilde_06_feedForward_writer = this->allpass_tilde_06_feedForward_reader;
                this->allpass_tilde_06_feedForward_buffer[(Index)this->allpass_tilde_06_feedForward_writer] = v;
            }
            
            number allpass_tilde_06_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedForward__maxdelay : size);
                number val = this->allpass_tilde_06_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_06_feedForward_write(v);
                this->allpass_tilde_06_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_06_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_06_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_06_feedForward_init() {
                auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
                this->allpass_tilde_06_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_06_feedForward_clear() {
                this->allpass_tilde_06_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_06_feedForward_reset() {
                auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
                this->allpass_tilde_06_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_06_feedForward_buffer);
                this->allpass_tilde_06_feedForward_wrap = this->allpass_tilde_06_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_06_feedForward_clear();
            
                if (this->allpass_tilde_06_feedForward_reader >= this->allpass_tilde_06_feedForward__maxdelay || this->allpass_tilde_06_feedForward_writer >= this->allpass_tilde_06_feedForward__maxdelay) {
                    this->allpass_tilde_06_feedForward_reader = 0;
                    this->allpass_tilde_06_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_06_feedForward_dspsetup() {
                this->allpass_tilde_06_feedForward_reset();
            }
            
            number allpass_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_06_feedForward_size() {
                return this->allpass_tilde_06_feedForward__maxdelay;
            }
            
            void allpass_tilde_06_feedBack_step() {
                this->allpass_tilde_06_feedBack_reader++;
            
                if (this->allpass_tilde_06_feedBack_reader >= (int)(this->allpass_tilde_06_feedBack_buffer->getSize()))
                    this->allpass_tilde_06_feedBack_reader = 0;
            }
            
            number allpass_tilde_06_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_06_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                );
            }
            
            void allpass_tilde_06_feedBack_write(number v) {
                this->allpass_tilde_06_feedBack_writer = this->allpass_tilde_06_feedBack_reader;
                this->allpass_tilde_06_feedBack_buffer[(Index)this->allpass_tilde_06_feedBack_writer] = v;
            }
            
            number allpass_tilde_06_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedBack__maxdelay : size);
                number val = this->allpass_tilde_06_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_06_feedBack_write(v);
                this->allpass_tilde_06_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_06_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_06_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_06_feedBack_init() {
                auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
                this->allpass_tilde_06_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_06_feedBack_clear() {
                this->allpass_tilde_06_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_06_feedBack_reset() {
                auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
                this->allpass_tilde_06_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_06_feedBack_buffer);
                this->allpass_tilde_06_feedBack_wrap = this->allpass_tilde_06_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_06_feedBack_clear();
            
                if (this->allpass_tilde_06_feedBack_reader >= this->allpass_tilde_06_feedBack__maxdelay || this->allpass_tilde_06_feedBack_writer >= this->allpass_tilde_06_feedBack__maxdelay) {
                    this->allpass_tilde_06_feedBack_reader = 0;
                    this->allpass_tilde_06_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_06_feedBack_dspsetup() {
                this->allpass_tilde_06_feedBack_reset();
            }
            
            number allpass_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_06_feedBack_size() {
                return this->allpass_tilde_06_feedBack__maxdelay;
            }
            
            void allpass_tilde_06_init() {
                this->allpass_tilde_06_feedForward_init();
                this->allpass_tilde_06_feedBack_init();
            }
            
            void allpass_tilde_06_clear() {
                this->allpass_tilde_06_feedForward_clear();
                this->allpass_tilde_06_feedBack_clear();
            }
            
            void allpass_tilde_06_reset() {
                this->allpass_tilde_06_init();
                this->allpass_tilde_06_clear();
            }
            
            void allpass_tilde_06_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_06_reset();
                this->allpass_tilde_06_setupDone = true;
                this->allpass_tilde_06_feedForward_dspsetup();
                this->allpass_tilde_06_feedBack_dspsetup();
            }
            
            void allpass_tilde_07_feedForward_step() {
                this->allpass_tilde_07_feedForward_reader++;
            
                if (this->allpass_tilde_07_feedForward_reader >= (int)(this->allpass_tilde_07_feedForward_buffer->getSize()))
                    this->allpass_tilde_07_feedForward_reader = 0;
            }
            
            number allpass_tilde_07_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_07_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                );
            }
            
            void allpass_tilde_07_feedForward_write(number v) {
                this->allpass_tilde_07_feedForward_writer = this->allpass_tilde_07_feedForward_reader;
                this->allpass_tilde_07_feedForward_buffer[(Index)this->allpass_tilde_07_feedForward_writer] = v;
            }
            
            number allpass_tilde_07_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedForward__maxdelay : size);
                number val = this->allpass_tilde_07_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_07_feedForward_write(v);
                this->allpass_tilde_07_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_07_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_07_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_07_feedForward_init() {
                auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
                this->allpass_tilde_07_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_07_feedForward_clear() {
                this->allpass_tilde_07_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_07_feedForward_reset() {
                auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
                this->allpass_tilde_07_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_07_feedForward_buffer);
                this->allpass_tilde_07_feedForward_wrap = this->allpass_tilde_07_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_07_feedForward_clear();
            
                if (this->allpass_tilde_07_feedForward_reader >= this->allpass_tilde_07_feedForward__maxdelay || this->allpass_tilde_07_feedForward_writer >= this->allpass_tilde_07_feedForward__maxdelay) {
                    this->allpass_tilde_07_feedForward_reader = 0;
                    this->allpass_tilde_07_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_07_feedForward_dspsetup() {
                this->allpass_tilde_07_feedForward_reset();
            }
            
            number allpass_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_07_feedForward_size() {
                return this->allpass_tilde_07_feedForward__maxdelay;
            }
            
            void allpass_tilde_07_feedBack_step() {
                this->allpass_tilde_07_feedBack_reader++;
            
                if (this->allpass_tilde_07_feedBack_reader >= (int)(this->allpass_tilde_07_feedBack_buffer->getSize()))
                    this->allpass_tilde_07_feedBack_reader = 0;
            }
            
            number allpass_tilde_07_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_07_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                );
            }
            
            void allpass_tilde_07_feedBack_write(number v) {
                this->allpass_tilde_07_feedBack_writer = this->allpass_tilde_07_feedBack_reader;
                this->allpass_tilde_07_feedBack_buffer[(Index)this->allpass_tilde_07_feedBack_writer] = v;
            }
            
            number allpass_tilde_07_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedBack__maxdelay : size);
                number val = this->allpass_tilde_07_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_07_feedBack_write(v);
                this->allpass_tilde_07_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_07_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_07_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_07_feedBack_init() {
                auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
                this->allpass_tilde_07_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_07_feedBack_clear() {
                this->allpass_tilde_07_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_07_feedBack_reset() {
                auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
                this->allpass_tilde_07_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_07_feedBack_buffer);
                this->allpass_tilde_07_feedBack_wrap = this->allpass_tilde_07_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_07_feedBack_clear();
            
                if (this->allpass_tilde_07_feedBack_reader >= this->allpass_tilde_07_feedBack__maxdelay || this->allpass_tilde_07_feedBack_writer >= this->allpass_tilde_07_feedBack__maxdelay) {
                    this->allpass_tilde_07_feedBack_reader = 0;
                    this->allpass_tilde_07_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_07_feedBack_dspsetup() {
                this->allpass_tilde_07_feedBack_reset();
            }
            
            number allpass_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_07_feedBack_size() {
                return this->allpass_tilde_07_feedBack__maxdelay;
            }
            
            void allpass_tilde_07_init() {
                this->allpass_tilde_07_feedForward_init();
                this->allpass_tilde_07_feedBack_init();
            }
            
            void allpass_tilde_07_clear() {
                this->allpass_tilde_07_feedForward_clear();
                this->allpass_tilde_07_feedBack_clear();
            }
            
            void allpass_tilde_07_reset() {
                this->allpass_tilde_07_init();
                this->allpass_tilde_07_clear();
            }
            
            void allpass_tilde_07_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_07_reset();
                this->allpass_tilde_07_setupDone = true;
                this->allpass_tilde_07_feedForward_dspsetup();
                this->allpass_tilde_07_feedBack_dspsetup();
            }
            
            void allpass_tilde_08_feedForward_step() {
                this->allpass_tilde_08_feedForward_reader++;
            
                if (this->allpass_tilde_08_feedForward_reader >= (int)(this->allpass_tilde_08_feedForward_buffer->getSize()))
                    this->allpass_tilde_08_feedForward_reader = 0;
            }
            
            number allpass_tilde_08_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_08_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                );
            }
            
            void allpass_tilde_08_feedForward_write(number v) {
                this->allpass_tilde_08_feedForward_writer = this->allpass_tilde_08_feedForward_reader;
                this->allpass_tilde_08_feedForward_buffer[(Index)this->allpass_tilde_08_feedForward_writer] = v;
            }
            
            number allpass_tilde_08_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedForward__maxdelay : size);
                number val = this->allpass_tilde_08_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_08_feedForward_write(v);
                this->allpass_tilde_08_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_08_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_08_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_08_feedForward_init() {
                auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
                this->allpass_tilde_08_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_08_feedForward_clear() {
                this->allpass_tilde_08_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_08_feedForward_reset() {
                auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
                this->allpass_tilde_08_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_08_feedForward_buffer);
                this->allpass_tilde_08_feedForward_wrap = this->allpass_tilde_08_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_08_feedForward_clear();
            
                if (this->allpass_tilde_08_feedForward_reader >= this->allpass_tilde_08_feedForward__maxdelay || this->allpass_tilde_08_feedForward_writer >= this->allpass_tilde_08_feedForward__maxdelay) {
                    this->allpass_tilde_08_feedForward_reader = 0;
                    this->allpass_tilde_08_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_08_feedForward_dspsetup() {
                this->allpass_tilde_08_feedForward_reset();
            }
            
            number allpass_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_08_feedForward_size() {
                return this->allpass_tilde_08_feedForward__maxdelay;
            }
            
            void allpass_tilde_08_feedBack_step() {
                this->allpass_tilde_08_feedBack_reader++;
            
                if (this->allpass_tilde_08_feedBack_reader >= (int)(this->allpass_tilde_08_feedBack_buffer->getSize()))
                    this->allpass_tilde_08_feedBack_reader = 0;
            }
            
            number allpass_tilde_08_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_08_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                );
            }
            
            void allpass_tilde_08_feedBack_write(number v) {
                this->allpass_tilde_08_feedBack_writer = this->allpass_tilde_08_feedBack_reader;
                this->allpass_tilde_08_feedBack_buffer[(Index)this->allpass_tilde_08_feedBack_writer] = v;
            }
            
            number allpass_tilde_08_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedBack__maxdelay : size);
                number val = this->allpass_tilde_08_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_08_feedBack_write(v);
                this->allpass_tilde_08_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_08_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_08_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_08_feedBack_init() {
                auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
                this->allpass_tilde_08_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_08_feedBack_clear() {
                this->allpass_tilde_08_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_08_feedBack_reset() {
                auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
                this->allpass_tilde_08_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_08_feedBack_buffer);
                this->allpass_tilde_08_feedBack_wrap = this->allpass_tilde_08_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_08_feedBack_clear();
            
                if (this->allpass_tilde_08_feedBack_reader >= this->allpass_tilde_08_feedBack__maxdelay || this->allpass_tilde_08_feedBack_writer >= this->allpass_tilde_08_feedBack__maxdelay) {
                    this->allpass_tilde_08_feedBack_reader = 0;
                    this->allpass_tilde_08_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_08_feedBack_dspsetup() {
                this->allpass_tilde_08_feedBack_reset();
            }
            
            number allpass_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_08_feedBack_size() {
                return this->allpass_tilde_08_feedBack__maxdelay;
            }
            
            void allpass_tilde_08_init() {
                this->allpass_tilde_08_feedForward_init();
                this->allpass_tilde_08_feedBack_init();
            }
            
            void allpass_tilde_08_clear() {
                this->allpass_tilde_08_feedForward_clear();
                this->allpass_tilde_08_feedBack_clear();
            }
            
            void allpass_tilde_08_reset() {
                this->allpass_tilde_08_init();
                this->allpass_tilde_08_clear();
            }
            
            void allpass_tilde_08_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_08_reset();
                this->allpass_tilde_08_setupDone = true;
                this->allpass_tilde_08_feedForward_dspsetup();
                this->allpass_tilde_08_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_01_x = 0;
                allpass_tilde_01_delayTime = 9.3;
                allpass_tilde_01_gain = 0.625;
                allpass_tilde_02_x = 0;
                allpass_tilde_02_delayTime = 12.73;
                allpass_tilde_02_gain = 0.625;
                allpass_tilde_03_x = 0;
                allpass_tilde_03_delayTime = 3.58;
                allpass_tilde_03_gain = 0.75;
                allpass_tilde_04_x = 0;
                allpass_tilde_04_delayTime = 4.76;
                allpass_tilde_04_gain = 0.75;
                allpass_tilde_05_x = 0;
                allpass_tilde_05_delayTime = 9.3;
                allpass_tilde_05_gain = 0.625;
                allpass_tilde_06_x = 0;
                allpass_tilde_06_delayTime = 12.73;
                allpass_tilde_06_gain = 0.625;
                allpass_tilde_07_x = 0;
                allpass_tilde_07_delayTime = 3.58;
                allpass_tilde_07_gain = 0.75;
                allpass_tilde_08_x = 0;
                allpass_tilde_08_delayTime = 4.76;
                allpass_tilde_08_gain = 0.75;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_01_feedForward__maxdelay = 0;
                allpass_tilde_01_feedForward_sizemode = 0;
                allpass_tilde_01_feedForward_wrap = 0;
                allpass_tilde_01_feedForward_reader = 0;
                allpass_tilde_01_feedForward_writer = 0;
                allpass_tilde_01_feedBack__maxdelay = 0;
                allpass_tilde_01_feedBack_sizemode = 0;
                allpass_tilde_01_feedBack_wrap = 0;
                allpass_tilde_01_feedBack_reader = 0;
                allpass_tilde_01_feedBack_writer = 0;
                allpass_tilde_01_setupDone = false;
                allpass_tilde_02_feedForward__maxdelay = 0;
                allpass_tilde_02_feedForward_sizemode = 0;
                allpass_tilde_02_feedForward_wrap = 0;
                allpass_tilde_02_feedForward_reader = 0;
                allpass_tilde_02_feedForward_writer = 0;
                allpass_tilde_02_feedBack__maxdelay = 0;
                allpass_tilde_02_feedBack_sizemode = 0;
                allpass_tilde_02_feedBack_wrap = 0;
                allpass_tilde_02_feedBack_reader = 0;
                allpass_tilde_02_feedBack_writer = 0;
                allpass_tilde_02_setupDone = false;
                allpass_tilde_03_feedForward__maxdelay = 0;
                allpass_tilde_03_feedForward_sizemode = 0;
                allpass_tilde_03_feedForward_wrap = 0;
                allpass_tilde_03_feedForward_reader = 0;
                allpass_tilde_03_feedForward_writer = 0;
                allpass_tilde_03_feedBack__maxdelay = 0;
                allpass_tilde_03_feedBack_sizemode = 0;
                allpass_tilde_03_feedBack_wrap = 0;
                allpass_tilde_03_feedBack_reader = 0;
                allpass_tilde_03_feedBack_writer = 0;
                allpass_tilde_03_setupDone = false;
                allpass_tilde_04_feedForward__maxdelay = 0;
                allpass_tilde_04_feedForward_sizemode = 0;
                allpass_tilde_04_feedForward_wrap = 0;
                allpass_tilde_04_feedForward_reader = 0;
                allpass_tilde_04_feedForward_writer = 0;
                allpass_tilde_04_feedBack__maxdelay = 0;
                allpass_tilde_04_feedBack_sizemode = 0;
                allpass_tilde_04_feedBack_wrap = 0;
                allpass_tilde_04_feedBack_reader = 0;
                allpass_tilde_04_feedBack_writer = 0;
                allpass_tilde_04_setupDone = false;
                allpass_tilde_05_feedForward__maxdelay = 0;
                allpass_tilde_05_feedForward_sizemode = 0;
                allpass_tilde_05_feedForward_wrap = 0;
                allpass_tilde_05_feedForward_reader = 0;
                allpass_tilde_05_feedForward_writer = 0;
                allpass_tilde_05_feedBack__maxdelay = 0;
                allpass_tilde_05_feedBack_sizemode = 0;
                allpass_tilde_05_feedBack_wrap = 0;
                allpass_tilde_05_feedBack_reader = 0;
                allpass_tilde_05_feedBack_writer = 0;
                allpass_tilde_05_setupDone = false;
                allpass_tilde_06_feedForward__maxdelay = 0;
                allpass_tilde_06_feedForward_sizemode = 0;
                allpass_tilde_06_feedForward_wrap = 0;
                allpass_tilde_06_feedForward_reader = 0;
                allpass_tilde_06_feedForward_writer = 0;
                allpass_tilde_06_feedBack__maxdelay = 0;
                allpass_tilde_06_feedBack_sizemode = 0;
                allpass_tilde_06_feedBack_wrap = 0;
                allpass_tilde_06_feedBack_reader = 0;
                allpass_tilde_06_feedBack_writer = 0;
                allpass_tilde_06_setupDone = false;
                allpass_tilde_07_feedForward__maxdelay = 0;
                allpass_tilde_07_feedForward_sizemode = 0;
                allpass_tilde_07_feedForward_wrap = 0;
                allpass_tilde_07_feedForward_reader = 0;
                allpass_tilde_07_feedForward_writer = 0;
                allpass_tilde_07_feedBack__maxdelay = 0;
                allpass_tilde_07_feedBack_sizemode = 0;
                allpass_tilde_07_feedBack_wrap = 0;
                allpass_tilde_07_feedBack_reader = 0;
                allpass_tilde_07_feedBack_writer = 0;
                allpass_tilde_07_setupDone = false;
                allpass_tilde_08_feedForward__maxdelay = 0;
                allpass_tilde_08_feedForward_sizemode = 0;
                allpass_tilde_08_feedForward_wrap = 0;
                allpass_tilde_08_feedForward_reader = 0;
                allpass_tilde_08_feedForward_writer = 0;
                allpass_tilde_08_feedBack__maxdelay = 0;
                allpass_tilde_08_feedBack_sizemode = 0;
                allpass_tilde_08_feedBack_wrap = 0;
                allpass_tilde_08_feedBack_reader = 0;
                allpass_tilde_08_feedBack_writer = 0;
                allpass_tilde_08_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_01_x;
                number allpass_tilde_01_delayTime;
                number allpass_tilde_01_gain;
                number allpass_tilde_02_x;
                number allpass_tilde_02_delayTime;
                number allpass_tilde_02_gain;
                number allpass_tilde_03_x;
                number allpass_tilde_03_delayTime;
                number allpass_tilde_03_gain;
                number allpass_tilde_04_x;
                number allpass_tilde_04_delayTime;
                number allpass_tilde_04_gain;
                number allpass_tilde_05_x;
                number allpass_tilde_05_delayTime;
                number allpass_tilde_05_gain;
                number allpass_tilde_06_x;
                number allpass_tilde_06_delayTime;
                number allpass_tilde_06_gain;
                number allpass_tilde_07_x;
                number allpass_tilde_07_delayTime;
                number allpass_tilde_07_gain;
                number allpass_tilde_08_x;
                number allpass_tilde_08_delayTime;
                number allpass_tilde_08_gain;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[2];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_01_feedForward_buffer;
                Index allpass_tilde_01_feedForward__maxdelay;
                Int allpass_tilde_01_feedForward_sizemode;
                Index allpass_tilde_01_feedForward_wrap;
                Int allpass_tilde_01_feedForward_reader;
                Int allpass_tilde_01_feedForward_writer;
                Float64BufferRef allpass_tilde_01_feedBack_buffer;
                Index allpass_tilde_01_feedBack__maxdelay;
                Int allpass_tilde_01_feedBack_sizemode;
                Index allpass_tilde_01_feedBack_wrap;
                Int allpass_tilde_01_feedBack_reader;
                Int allpass_tilde_01_feedBack_writer;
                bool allpass_tilde_01_setupDone;
                Float64BufferRef allpass_tilde_02_feedForward_buffer;
                Index allpass_tilde_02_feedForward__maxdelay;
                Int allpass_tilde_02_feedForward_sizemode;
                Index allpass_tilde_02_feedForward_wrap;
                Int allpass_tilde_02_feedForward_reader;
                Int allpass_tilde_02_feedForward_writer;
                Float64BufferRef allpass_tilde_02_feedBack_buffer;
                Index allpass_tilde_02_feedBack__maxdelay;
                Int allpass_tilde_02_feedBack_sizemode;
                Index allpass_tilde_02_feedBack_wrap;
                Int allpass_tilde_02_feedBack_reader;
                Int allpass_tilde_02_feedBack_writer;
                bool allpass_tilde_02_setupDone;
                Float64BufferRef allpass_tilde_03_feedForward_buffer;
                Index allpass_tilde_03_feedForward__maxdelay;
                Int allpass_tilde_03_feedForward_sizemode;
                Index allpass_tilde_03_feedForward_wrap;
                Int allpass_tilde_03_feedForward_reader;
                Int allpass_tilde_03_feedForward_writer;
                Float64BufferRef allpass_tilde_03_feedBack_buffer;
                Index allpass_tilde_03_feedBack__maxdelay;
                Int allpass_tilde_03_feedBack_sizemode;
                Index allpass_tilde_03_feedBack_wrap;
                Int allpass_tilde_03_feedBack_reader;
                Int allpass_tilde_03_feedBack_writer;
                bool allpass_tilde_03_setupDone;
                Float64BufferRef allpass_tilde_04_feedForward_buffer;
                Index allpass_tilde_04_feedForward__maxdelay;
                Int allpass_tilde_04_feedForward_sizemode;
                Index allpass_tilde_04_feedForward_wrap;
                Int allpass_tilde_04_feedForward_reader;
                Int allpass_tilde_04_feedForward_writer;
                Float64BufferRef allpass_tilde_04_feedBack_buffer;
                Index allpass_tilde_04_feedBack__maxdelay;
                Int allpass_tilde_04_feedBack_sizemode;
                Index allpass_tilde_04_feedBack_wrap;
                Int allpass_tilde_04_feedBack_reader;
                Int allpass_tilde_04_feedBack_writer;
                bool allpass_tilde_04_setupDone;
                Float64BufferRef allpass_tilde_05_feedForward_buffer;
                Index allpass_tilde_05_feedForward__maxdelay;
                Int allpass_tilde_05_feedForward_sizemode;
                Index allpass_tilde_05_feedForward_wrap;
                Int allpass_tilde_05_feedForward_reader;
                Int allpass_tilde_05_feedForward_writer;
                Float64BufferRef allpass_tilde_05_feedBack_buffer;
                Index allpass_tilde_05_feedBack__maxdelay;
                Int allpass_tilde_05_feedBack_sizemode;
                Index allpass_tilde_05_feedBack_wrap;
                Int allpass_tilde_05_feedBack_reader;
                Int allpass_tilde_05_feedBack_writer;
                bool allpass_tilde_05_setupDone;
                Float64BufferRef allpass_tilde_06_feedForward_buffer;
                Index allpass_tilde_06_feedForward__maxdelay;
                Int allpass_tilde_06_feedForward_sizemode;
                Index allpass_tilde_06_feedForward_wrap;
                Int allpass_tilde_06_feedForward_reader;
                Int allpass_tilde_06_feedForward_writer;
                Float64BufferRef allpass_tilde_06_feedBack_buffer;
                Index allpass_tilde_06_feedBack__maxdelay;
                Int allpass_tilde_06_feedBack_sizemode;
                Index allpass_tilde_06_feedBack_wrap;
                Int allpass_tilde_06_feedBack_reader;
                Int allpass_tilde_06_feedBack_writer;
                bool allpass_tilde_06_setupDone;
                Float64BufferRef allpass_tilde_07_feedForward_buffer;
                Index allpass_tilde_07_feedForward__maxdelay;
                Int allpass_tilde_07_feedForward_sizemode;
                Index allpass_tilde_07_feedForward_wrap;
                Int allpass_tilde_07_feedForward_reader;
                Int allpass_tilde_07_feedForward_writer;
                Float64BufferRef allpass_tilde_07_feedBack_buffer;
                Index allpass_tilde_07_feedBack__maxdelay;
                Int allpass_tilde_07_feedBack_sizemode;
                Index allpass_tilde_07_feedBack_wrap;
                Int allpass_tilde_07_feedBack_reader;
                Int allpass_tilde_07_feedBack_writer;
                bool allpass_tilde_07_setupDone;
                Float64BufferRef allpass_tilde_08_feedForward_buffer;
                Index allpass_tilde_08_feedForward__maxdelay;
                Int allpass_tilde_08_feedForward_sizemode;
                Index allpass_tilde_08_feedForward_wrap;
                Int allpass_tilde_08_feedForward_reader;
                Int allpass_tilde_08_feedForward_writer;
                Float64BufferRef allpass_tilde_08_feedBack_buffer;
                Index allpass_tilde_08_feedBack__maxdelay;
                Int allpass_tilde_08_feedBack_sizemode;
                Index allpass_tilde_08_feedBack_wrap;
                Int allpass_tilde_08_feedBack_reader;
                Int allpass_tilde_08_feedBack_writer;
                bool allpass_tilde_08_setupDone;
                number stackprotect_count;
                DataRef allpass_tilde_01_feedForward_bufferobj;
                DataRef allpass_tilde_01_feedBack_bufferobj;
                DataRef allpass_tilde_02_feedForward_bufferobj;
                DataRef allpass_tilde_02_feedBack_bufferobj;
                DataRef allpass_tilde_03_feedForward_bufferobj;
                DataRef allpass_tilde_03_feedBack_bufferobj;
                DataRef allpass_tilde_04_feedForward_bufferobj;
                DataRef allpass_tilde_04_feedBack_bufferobj;
                DataRef allpass_tilde_05_feedForward_bufferobj;
                DataRef allpass_tilde_05_feedBack_bufferobj;
                DataRef allpass_tilde_06_feedForward_bufferobj;
                DataRef allpass_tilde_06_feedBack_bufferobj;
                DataRef allpass_tilde_07_feedForward_bufferobj;
                DataRef allpass_tilde_07_feedBack_bufferobj;
                DataRef allpass_tilde_08_feedForward_bufferobj;
                DataRef allpass_tilde_08_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_152 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_176;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_152()
            {
            }
            
            ~RNBOSubpatcher_152()
            {
            }
            
            virtual RNBOSubpatcher_176* getPatcher() const {
                return static_cast<RNBOSubpatcher_176 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Size = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                const SampleValue * target_Diff = (numInputs >= 9 && inputs[8] ? inputs[8] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                this->stackprotect_perform(n);
                this->signalreceive_01_perform(target_Size, this->signals[0], n);
                this->signalreceive_02_perform(target_Diff, this->signals[1], n);
                this->dspexpr_06_perform(this->signals[0], this->signals[1], this->signals[2], n);
                this->dspexpr_11_perform(this->signals[2], this->dspexpr_11_in2, this->signals[1], n);
            
                this->comb_tilde_07_perform(
                    in7,
                    this->signals[1],
                    this->comb_tilde_07_gain,
                    this->comb_tilde_07_ffGain,
                    this->comb_tilde_07_fbGain,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_02_perform(this->signals[2], this->dspexpr_02_in2, this->signals[1], n);
            
                this->comb_tilde_01_perform(
                    in1,
                    this->signals[1],
                    this->comb_tilde_01_gain,
                    this->comb_tilde_01_ffGain,
                    this->comb_tilde_01_fbGain,
                    this->signals[3],
                    n
                );
            
                this->dspexpr_03_perform(this->signals[2], this->dspexpr_03_in2, this->signals[1], n);
            
                this->comb_tilde_02_perform(
                    in2,
                    this->signals[1],
                    this->comb_tilde_02_gain,
                    this->comb_tilde_02_ffGain,
                    this->comb_tilde_02_fbGain,
                    this->signals[4],
                    n
                );
            
                this->dspexpr_04_perform(this->signals[2], this->dspexpr_04_in2, this->signals[1], n);
            
                this->comb_tilde_03_perform(
                    in3,
                    this->signals[1],
                    this->comb_tilde_03_gain,
                    this->comb_tilde_03_ffGain,
                    this->comb_tilde_03_fbGain,
                    this->signals[5],
                    n
                );
            
                this->dspexpr_07_perform(this->signals[2], this->dspexpr_07_in2, this->signals[1], n);
            
                this->comb_tilde_04_perform(
                    in4,
                    this->signals[1],
                    this->comb_tilde_04_gain,
                    this->comb_tilde_04_ffGain,
                    this->comb_tilde_04_fbGain,
                    this->signals[6],
                    n
                );
            
                this->dspexpr_09_perform(this->signals[2], this->dspexpr_09_in2, this->signals[1], n);
            
                this->comb_tilde_05_perform(
                    in5,
                    this->signals[1],
                    this->comb_tilde_05_gain,
                    this->comb_tilde_05_ffGain,
                    this->comb_tilde_05_fbGain,
                    this->signals[7],
                    n
                );
            
                this->dspexpr_10_perform(this->signals[2], this->dspexpr_10_in2, this->signals[1], n);
            
                this->comb_tilde_06_perform(
                    in6,
                    this->signals[1],
                    this->comb_tilde_06_gain,
                    this->comb_tilde_06_ffGain,
                    this->comb_tilde_06_fbGain,
                    this->signals[2],
                    n
                );
            
                this->signaladder_17_perform(
                    this->signals[0],
                    this->signals[2],
                    this->signals[7],
                    this->signals[5],
                    this->signals[5],
                    n
                );
            
                this->dspexpr_08_perform(this->signals[5], this->dspexpr_08_in2, this->signals[1], n);
            
                this->signaladder_18_perform(
                    this->signals[6],
                    this->signals[4],
                    this->signals[3],
                    this->signals[1],
                    this->signals[1],
                    n
                );
            
                this->dspexpr_05_perform(this->signals[1], this->dspexpr_05_in2, out1, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->comb_tilde_07_dspsetup(forceDSPSetup);
                this->comb_tilde_01_dspsetup(forceDSPSetup);
                this->comb_tilde_02_dspsetup(forceDSPSetup);
                this->comb_tilde_03_dspsetup(forceDSPSetup);
                this->comb_tilde_04_dspsetup(forceDSPSetup);
                this->comb_tilde_05_dspsetup(forceDSPSetup);
                this->comb_tilde_06_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 2;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->comb_tilde_01_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->comb_tilde_01_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->comb_tilde_02_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->comb_tilde_02_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->comb_tilde_03_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->comb_tilde_03_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->comb_tilde_04_feedForward_bufferobj);
                    break;
                    }
                case 11:
                    {
                    return addressOf(this->comb_tilde_04_feedBack_bufferobj);
                    break;
                    }
                case 12:
                    {
                    return addressOf(this->comb_tilde_05_feedForward_bufferobj);
                    break;
                    }
                case 13:
                    {
                    return addressOf(this->comb_tilde_05_feedBack_bufferobj);
                    break;
                    }
                case 14:
                    {
                    return addressOf(this->comb_tilde_06_feedForward_bufferobj);
                    break;
                    }
                case 15:
                    {
                    return addressOf(this->comb_tilde_06_feedBack_bufferobj);
                    break;
                    }
                case 16:
                    {
                    return addressOf(this->comb_tilde_07_feedForward_bufferobj);
                    break;
                    }
                case 17:
                    {
                    return addressOf(this->comb_tilde_07_feedBack_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 14;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                }
            
                if (index == 11) {
                    this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                }
            
                if (index == 12) {
                    this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                }
            
                if (index == 13) {
                    this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                }
            
                if (index == 14) {
                    this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                }
            
                if (index == 15) {
                    this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                }
            
                if (index == 16) {
                    this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                }
            
                if (index == 17) {
                    this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->comb_tilde_01_feedForward_bufferobj = initDataRef("comb_tilde_01_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_01_feedBack_bufferobj = initDataRef("comb_tilde_01_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_02_feedForward_bufferobj = initDataRef("comb_tilde_02_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_02_feedBack_bufferobj = initDataRef("comb_tilde_02_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_03_feedForward_bufferobj = initDataRef("comb_tilde_03_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_03_feedBack_bufferobj = initDataRef("comb_tilde_03_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_04_feedForward_bufferobj = initDataRef("comb_tilde_04_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_04_feedBack_bufferobj = initDataRef("comb_tilde_04_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_05_feedForward_bufferobj = initDataRef("comb_tilde_05_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_05_feedBack_bufferobj = initDataRef("comb_tilde_05_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_06_feedForward_bufferobj = initDataRef("comb_tilde_06_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_06_feedBack_bufferobj = initDataRef("comb_tilde_06_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_07_feedForward_bufferobj = initDataRef("comb_tilde_07_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_07_feedBack_bufferobj = initDataRef("comb_tilde_07_feedBack_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->comb_tilde_01_feedForward_bufferobj->setIndex(4);
                this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                this->comb_tilde_01_feedBack_bufferobj->setIndex(5);
                this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                this->comb_tilde_02_feedForward_bufferobj->setIndex(6);
                this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                this->comb_tilde_02_feedBack_bufferobj->setIndex(7);
                this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                this->comb_tilde_03_feedForward_bufferobj->setIndex(8);
                this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                this->comb_tilde_03_feedBack_bufferobj->setIndex(9);
                this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                this->comb_tilde_04_feedForward_bufferobj->setIndex(10);
                this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                this->comb_tilde_04_feedBack_bufferobj->setIndex(11);
                this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                this->comb_tilde_05_feedForward_bufferobj->setIndex(12);
                this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                this->comb_tilde_05_feedBack_bufferobj->setIndex(13);
                this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                this->comb_tilde_06_feedForward_bufferobj->setIndex(14);
                this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                this->comb_tilde_06_feedBack_bufferobj->setIndex(15);
                this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                this->comb_tilde_07_feedForward_bufferobj->setIndex(16);
                this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                this->comb_tilde_07_feedBack_bufferobj->setIndex(17);
                this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 7;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->comb_tilde_01_feedForward_init();
                this->comb_tilde_01_feedBack_init();
                this->comb_tilde_01_init();
                this->comb_tilde_02_feedForward_init();
                this->comb_tilde_02_feedBack_init();
                this->comb_tilde_02_init();
                this->comb_tilde_03_feedForward_init();
                this->comb_tilde_03_feedBack_init();
                this->comb_tilde_03_init();
                this->comb_tilde_04_feedForward_init();
                this->comb_tilde_04_feedBack_init();
                this->comb_tilde_04_init();
                this->comb_tilde_05_feedForward_init();
                this->comb_tilde_05_feedBack_init();
                this->comb_tilde_05_init();
                this->comb_tilde_06_feedForward_init();
                this->comb_tilde_06_feedBack_init();
                this->comb_tilde_06_init();
                this->comb_tilde_07_feedForward_init();
                this->comb_tilde_07_feedBack_init();
                this->comb_tilde_07_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->comb_tilde_01_feedForward_buffer = this->comb_tilde_01_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_01_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_01_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->comb_tilde_01_feedBack_buffer = this->comb_tilde_01_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_01_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_01_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_02_feedForward_buffer = this->comb_tilde_02_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_02_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_02_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_02_feedBack_buffer = this->comb_tilde_02_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_02_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_02_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->comb_tilde_03_feedForward_buffer = this->comb_tilde_03_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_03_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_03_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->comb_tilde_03_feedBack_buffer = this->comb_tilde_03_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_03_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_03_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->comb_tilde_04_feedForward_buffer = this->comb_tilde_04_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_04_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_04_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->comb_tilde_04_feedBack_buffer = this->comb_tilde_04_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_04_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_04_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->comb_tilde_05_feedForward_buffer = this->comb_tilde_05_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_05_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_05_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->comb_tilde_05_feedBack_buffer = this->comb_tilde_05_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_05_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_05_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->comb_tilde_06_feedForward_buffer = this->comb_tilde_06_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_06_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_06_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->comb_tilde_06_feedBack_buffer = this->comb_tilde_06_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_06_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_06_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->comb_tilde_07_feedForward_buffer = this->comb_tilde_07_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_07_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_07_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->comb_tilde_07_feedBack_buffer = this->comb_tilde_07_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_07_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_07_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_01_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void signalreceive_02_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_06_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_11_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 75;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_07_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_07_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_07_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_07_feedForward_write(x[(Index)i]);
                    this->comb_tilde_07_feedBack_write(ov);
                    this->comb_tilde_07_feedForward_step();
                    this->comb_tilde_07_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_02_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 110;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_01_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_01_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_01_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_01_feedForward_write(x[(Index)i]);
                    this->comb_tilde_01_feedBack_write(ov);
                    this->comb_tilde_01_feedForward_step();
                    this->comb_tilde_01_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_03_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 160;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_02_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_02_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_02_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_02_feedForward_write(x[(Index)i]);
                    this->comb_tilde_02_feedBack_write(ov);
                    this->comb_tilde_02_feedForward_step();
                    this->comb_tilde_02_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_04_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 50;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_03_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_03_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_03_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_03_feedForward_write(x[(Index)i]);
                    this->comb_tilde_03_feedBack_write(ov);
                    this->comb_tilde_03_feedForward_step();
                    this->comb_tilde_03_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_07_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 25;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_04_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_04_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_04_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_04_feedForward_write(x[(Index)i]);
                    this->comb_tilde_04_feedBack_write(ov);
                    this->comb_tilde_04_feedForward_step();
                    this->comb_tilde_04_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_09_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 69;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_05_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_05_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_05_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_05_feedForward_write(x[(Index)i]);
                    this->comb_tilde_05_feedBack_write(ov);
                    this->comb_tilde_05_feedForward_step();
                    this->comb_tilde_05_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_10_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 80;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_06_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_06_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_06_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_06_feedForward_write(x[(Index)i]);
                    this->comb_tilde_06_feedBack_write(ov);
                    this->comb_tilde_06_feedForward_step();
                    this->comb_tilde_06_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signaladder_17_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_08_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_18_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_05_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 0.355;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_01_feedForward_step() {
                this->comb_tilde_01_feedForward_reader++;
            
                if (this->comb_tilde_01_feedForward_reader >= (int)(this->comb_tilde_01_feedForward_buffer->getSize()))
                    this->comb_tilde_01_feedForward_reader = 0;
            }
            
            number comb_tilde_01_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_01_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                );
            }
            
            void comb_tilde_01_feedForward_write(number v) {
                this->comb_tilde_01_feedForward_writer = this->comb_tilde_01_feedForward_reader;
                this->comb_tilde_01_feedForward_buffer[(Index)this->comb_tilde_01_feedForward_writer] = v;
            }
            
            number comb_tilde_01_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_01_feedForward__maxdelay : size);
                number val = this->comb_tilde_01_feedForward_read(effectiveSize, 0);
                this->comb_tilde_01_feedForward_write(v);
                this->comb_tilde_01_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_01_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_01_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_01_feedForward_init() {
                auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                this->comb_tilde_01_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_01_feedForward_clear() {
                this->comb_tilde_01_feedForward_buffer->setZero();
            }
            
            void comb_tilde_01_feedForward_reset() {
                auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                this->comb_tilde_01_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_01_feedForward_buffer);
                this->comb_tilde_01_feedForward_wrap = this->comb_tilde_01_feedForward_buffer->getSize() - 1;
                this->comb_tilde_01_feedForward_clear();
            
                if (this->comb_tilde_01_feedForward_reader >= this->comb_tilde_01_feedForward__maxdelay || this->comb_tilde_01_feedForward_writer >= this->comb_tilde_01_feedForward__maxdelay) {
                    this->comb_tilde_01_feedForward_reader = 0;
                    this->comb_tilde_01_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_01_feedForward_dspsetup() {
                this->comb_tilde_01_feedForward_reset();
            }
            
            number comb_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_01_feedForward_size() {
                return this->comb_tilde_01_feedForward__maxdelay;
            }
            
            void comb_tilde_01_feedBack_step() {
                this->comb_tilde_01_feedBack_reader++;
            
                if (this->comb_tilde_01_feedBack_reader >= (int)(this->comb_tilde_01_feedBack_buffer->getSize()))
                    this->comb_tilde_01_feedBack_reader = 0;
            }
            
            number comb_tilde_01_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_01_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                );
            }
            
            void comb_tilde_01_feedBack_write(number v) {
                this->comb_tilde_01_feedBack_writer = this->comb_tilde_01_feedBack_reader;
                this->comb_tilde_01_feedBack_buffer[(Index)this->comb_tilde_01_feedBack_writer] = v;
            }
            
            number comb_tilde_01_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_01_feedBack__maxdelay : size);
                number val = this->comb_tilde_01_feedBack_read(effectiveSize, 0);
                this->comb_tilde_01_feedBack_write(v);
                this->comb_tilde_01_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_01_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_01_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_01_feedBack_init() {
                auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                this->comb_tilde_01_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_01_feedBack_clear() {
                this->comb_tilde_01_feedBack_buffer->setZero();
            }
            
            void comb_tilde_01_feedBack_reset() {
                auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                this->comb_tilde_01_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_01_feedBack_buffer);
                this->comb_tilde_01_feedBack_wrap = this->comb_tilde_01_feedBack_buffer->getSize() - 1;
                this->comb_tilde_01_feedBack_clear();
            
                if (this->comb_tilde_01_feedBack_reader >= this->comb_tilde_01_feedBack__maxdelay || this->comb_tilde_01_feedBack_writer >= this->comb_tilde_01_feedBack__maxdelay) {
                    this->comb_tilde_01_feedBack_reader = 0;
                    this->comb_tilde_01_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_01_feedBack_dspsetup() {
                this->comb_tilde_01_feedBack_reset();
            }
            
            number comb_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_01_feedBack_size() {
                return this->comb_tilde_01_feedBack__maxdelay;
            }
            
            void comb_tilde_01_init() {
                this->comb_tilde_01_feedForward_init();
                this->comb_tilde_01_feedBack_init();
            }
            
            void comb_tilde_01_clear() {
                this->comb_tilde_01_feedForward_clear();
                this->comb_tilde_01_feedBack_clear();
            }
            
            void comb_tilde_01_reset() {
                this->comb_tilde_01_init();
                this->comb_tilde_01_clear();
            }
            
            void comb_tilde_01_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_01_reset();
                this->comb_tilde_01_setupDone = true;
                this->comb_tilde_01_feedForward_dspsetup();
                this->comb_tilde_01_feedBack_dspsetup();
            }
            
            void comb_tilde_02_feedForward_step() {
                this->comb_tilde_02_feedForward_reader++;
            
                if (this->comb_tilde_02_feedForward_reader >= (int)(this->comb_tilde_02_feedForward_buffer->getSize()))
                    this->comb_tilde_02_feedForward_reader = 0;
            }
            
            number comb_tilde_02_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_02_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                );
            }
            
            void comb_tilde_02_feedForward_write(number v) {
                this->comb_tilde_02_feedForward_writer = this->comb_tilde_02_feedForward_reader;
                this->comb_tilde_02_feedForward_buffer[(Index)this->comb_tilde_02_feedForward_writer] = v;
            }
            
            number comb_tilde_02_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_02_feedForward__maxdelay : size);
                number val = this->comb_tilde_02_feedForward_read(effectiveSize, 0);
                this->comb_tilde_02_feedForward_write(v);
                this->comb_tilde_02_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_02_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_02_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_02_feedForward_init() {
                auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                this->comb_tilde_02_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_02_feedForward_clear() {
                this->comb_tilde_02_feedForward_buffer->setZero();
            }
            
            void comb_tilde_02_feedForward_reset() {
                auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                this->comb_tilde_02_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_02_feedForward_buffer);
                this->comb_tilde_02_feedForward_wrap = this->comb_tilde_02_feedForward_buffer->getSize() - 1;
                this->comb_tilde_02_feedForward_clear();
            
                if (this->comb_tilde_02_feedForward_reader >= this->comb_tilde_02_feedForward__maxdelay || this->comb_tilde_02_feedForward_writer >= this->comb_tilde_02_feedForward__maxdelay) {
                    this->comb_tilde_02_feedForward_reader = 0;
                    this->comb_tilde_02_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_02_feedForward_dspsetup() {
                this->comb_tilde_02_feedForward_reset();
            }
            
            number comb_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_02_feedForward_size() {
                return this->comb_tilde_02_feedForward__maxdelay;
            }
            
            void comb_tilde_02_feedBack_step() {
                this->comb_tilde_02_feedBack_reader++;
            
                if (this->comb_tilde_02_feedBack_reader >= (int)(this->comb_tilde_02_feedBack_buffer->getSize()))
                    this->comb_tilde_02_feedBack_reader = 0;
            }
            
            number comb_tilde_02_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_02_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                );
            }
            
            void comb_tilde_02_feedBack_write(number v) {
                this->comb_tilde_02_feedBack_writer = this->comb_tilde_02_feedBack_reader;
                this->comb_tilde_02_feedBack_buffer[(Index)this->comb_tilde_02_feedBack_writer] = v;
            }
            
            number comb_tilde_02_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_02_feedBack__maxdelay : size);
                number val = this->comb_tilde_02_feedBack_read(effectiveSize, 0);
                this->comb_tilde_02_feedBack_write(v);
                this->comb_tilde_02_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_02_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_02_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_02_feedBack_init() {
                auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                this->comb_tilde_02_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_02_feedBack_clear() {
                this->comb_tilde_02_feedBack_buffer->setZero();
            }
            
            void comb_tilde_02_feedBack_reset() {
                auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                this->comb_tilde_02_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_02_feedBack_buffer);
                this->comb_tilde_02_feedBack_wrap = this->comb_tilde_02_feedBack_buffer->getSize() - 1;
                this->comb_tilde_02_feedBack_clear();
            
                if (this->comb_tilde_02_feedBack_reader >= this->comb_tilde_02_feedBack__maxdelay || this->comb_tilde_02_feedBack_writer >= this->comb_tilde_02_feedBack__maxdelay) {
                    this->comb_tilde_02_feedBack_reader = 0;
                    this->comb_tilde_02_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_02_feedBack_dspsetup() {
                this->comb_tilde_02_feedBack_reset();
            }
            
            number comb_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_02_feedBack_size() {
                return this->comb_tilde_02_feedBack__maxdelay;
            }
            
            void comb_tilde_02_init() {
                this->comb_tilde_02_feedForward_init();
                this->comb_tilde_02_feedBack_init();
            }
            
            void comb_tilde_02_clear() {
                this->comb_tilde_02_feedForward_clear();
                this->comb_tilde_02_feedBack_clear();
            }
            
            void comb_tilde_02_reset() {
                this->comb_tilde_02_init();
                this->comb_tilde_02_clear();
            }
            
            void comb_tilde_02_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_02_reset();
                this->comb_tilde_02_setupDone = true;
                this->comb_tilde_02_feedForward_dspsetup();
                this->comb_tilde_02_feedBack_dspsetup();
            }
            
            void comb_tilde_03_feedForward_step() {
                this->comb_tilde_03_feedForward_reader++;
            
                if (this->comb_tilde_03_feedForward_reader >= (int)(this->comb_tilde_03_feedForward_buffer->getSize()))
                    this->comb_tilde_03_feedForward_reader = 0;
            }
            
            number comb_tilde_03_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_03_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                );
            }
            
            void comb_tilde_03_feedForward_write(number v) {
                this->comb_tilde_03_feedForward_writer = this->comb_tilde_03_feedForward_reader;
                this->comb_tilde_03_feedForward_buffer[(Index)this->comb_tilde_03_feedForward_writer] = v;
            }
            
            number comb_tilde_03_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_03_feedForward__maxdelay : size);
                number val = this->comb_tilde_03_feedForward_read(effectiveSize, 0);
                this->comb_tilde_03_feedForward_write(v);
                this->comb_tilde_03_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_03_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_03_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_03_feedForward_init() {
                auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                this->comb_tilde_03_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_03_feedForward_clear() {
                this->comb_tilde_03_feedForward_buffer->setZero();
            }
            
            void comb_tilde_03_feedForward_reset() {
                auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                this->comb_tilde_03_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_03_feedForward_buffer);
                this->comb_tilde_03_feedForward_wrap = this->comb_tilde_03_feedForward_buffer->getSize() - 1;
                this->comb_tilde_03_feedForward_clear();
            
                if (this->comb_tilde_03_feedForward_reader >= this->comb_tilde_03_feedForward__maxdelay || this->comb_tilde_03_feedForward_writer >= this->comb_tilde_03_feedForward__maxdelay) {
                    this->comb_tilde_03_feedForward_reader = 0;
                    this->comb_tilde_03_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_03_feedForward_dspsetup() {
                this->comb_tilde_03_feedForward_reset();
            }
            
            number comb_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_03_feedForward_size() {
                return this->comb_tilde_03_feedForward__maxdelay;
            }
            
            void comb_tilde_03_feedBack_step() {
                this->comb_tilde_03_feedBack_reader++;
            
                if (this->comb_tilde_03_feedBack_reader >= (int)(this->comb_tilde_03_feedBack_buffer->getSize()))
                    this->comb_tilde_03_feedBack_reader = 0;
            }
            
            number comb_tilde_03_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_03_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                );
            }
            
            void comb_tilde_03_feedBack_write(number v) {
                this->comb_tilde_03_feedBack_writer = this->comb_tilde_03_feedBack_reader;
                this->comb_tilde_03_feedBack_buffer[(Index)this->comb_tilde_03_feedBack_writer] = v;
            }
            
            number comb_tilde_03_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_03_feedBack__maxdelay : size);
                number val = this->comb_tilde_03_feedBack_read(effectiveSize, 0);
                this->comb_tilde_03_feedBack_write(v);
                this->comb_tilde_03_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_03_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_03_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_03_feedBack_init() {
                auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                this->comb_tilde_03_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_03_feedBack_clear() {
                this->comb_tilde_03_feedBack_buffer->setZero();
            }
            
            void comb_tilde_03_feedBack_reset() {
                auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                this->comb_tilde_03_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_03_feedBack_buffer);
                this->comb_tilde_03_feedBack_wrap = this->comb_tilde_03_feedBack_buffer->getSize() - 1;
                this->comb_tilde_03_feedBack_clear();
            
                if (this->comb_tilde_03_feedBack_reader >= this->comb_tilde_03_feedBack__maxdelay || this->comb_tilde_03_feedBack_writer >= this->comb_tilde_03_feedBack__maxdelay) {
                    this->comb_tilde_03_feedBack_reader = 0;
                    this->comb_tilde_03_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_03_feedBack_dspsetup() {
                this->comb_tilde_03_feedBack_reset();
            }
            
            number comb_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_03_feedBack_size() {
                return this->comb_tilde_03_feedBack__maxdelay;
            }
            
            void comb_tilde_03_init() {
                this->comb_tilde_03_feedForward_init();
                this->comb_tilde_03_feedBack_init();
            }
            
            void comb_tilde_03_clear() {
                this->comb_tilde_03_feedForward_clear();
                this->comb_tilde_03_feedBack_clear();
            }
            
            void comb_tilde_03_reset() {
                this->comb_tilde_03_init();
                this->comb_tilde_03_clear();
            }
            
            void comb_tilde_03_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_03_reset();
                this->comb_tilde_03_setupDone = true;
                this->comb_tilde_03_feedForward_dspsetup();
                this->comb_tilde_03_feedBack_dspsetup();
            }
            
            void comb_tilde_04_feedForward_step() {
                this->comb_tilde_04_feedForward_reader++;
            
                if (this->comb_tilde_04_feedForward_reader >= (int)(this->comb_tilde_04_feedForward_buffer->getSize()))
                    this->comb_tilde_04_feedForward_reader = 0;
            }
            
            number comb_tilde_04_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_04_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                );
            }
            
            void comb_tilde_04_feedForward_write(number v) {
                this->comb_tilde_04_feedForward_writer = this->comb_tilde_04_feedForward_reader;
                this->comb_tilde_04_feedForward_buffer[(Index)this->comb_tilde_04_feedForward_writer] = v;
            }
            
            number comb_tilde_04_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_04_feedForward__maxdelay : size);
                number val = this->comb_tilde_04_feedForward_read(effectiveSize, 0);
                this->comb_tilde_04_feedForward_write(v);
                this->comb_tilde_04_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_04_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_04_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_04_feedForward_init() {
                auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                this->comb_tilde_04_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_04_feedForward_clear() {
                this->comb_tilde_04_feedForward_buffer->setZero();
            }
            
            void comb_tilde_04_feedForward_reset() {
                auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                this->comb_tilde_04_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_04_feedForward_buffer);
                this->comb_tilde_04_feedForward_wrap = this->comb_tilde_04_feedForward_buffer->getSize() - 1;
                this->comb_tilde_04_feedForward_clear();
            
                if (this->comb_tilde_04_feedForward_reader >= this->comb_tilde_04_feedForward__maxdelay || this->comb_tilde_04_feedForward_writer >= this->comb_tilde_04_feedForward__maxdelay) {
                    this->comb_tilde_04_feedForward_reader = 0;
                    this->comb_tilde_04_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_04_feedForward_dspsetup() {
                this->comb_tilde_04_feedForward_reset();
            }
            
            number comb_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_04_feedForward_size() {
                return this->comb_tilde_04_feedForward__maxdelay;
            }
            
            void comb_tilde_04_feedBack_step() {
                this->comb_tilde_04_feedBack_reader++;
            
                if (this->comb_tilde_04_feedBack_reader >= (int)(this->comb_tilde_04_feedBack_buffer->getSize()))
                    this->comb_tilde_04_feedBack_reader = 0;
            }
            
            number comb_tilde_04_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_04_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                );
            }
            
            void comb_tilde_04_feedBack_write(number v) {
                this->comb_tilde_04_feedBack_writer = this->comb_tilde_04_feedBack_reader;
                this->comb_tilde_04_feedBack_buffer[(Index)this->comb_tilde_04_feedBack_writer] = v;
            }
            
            number comb_tilde_04_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_04_feedBack__maxdelay : size);
                number val = this->comb_tilde_04_feedBack_read(effectiveSize, 0);
                this->comb_tilde_04_feedBack_write(v);
                this->comb_tilde_04_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_04_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_04_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_04_feedBack_init() {
                auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                this->comb_tilde_04_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_04_feedBack_clear() {
                this->comb_tilde_04_feedBack_buffer->setZero();
            }
            
            void comb_tilde_04_feedBack_reset() {
                auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                this->comb_tilde_04_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_04_feedBack_buffer);
                this->comb_tilde_04_feedBack_wrap = this->comb_tilde_04_feedBack_buffer->getSize() - 1;
                this->comb_tilde_04_feedBack_clear();
            
                if (this->comb_tilde_04_feedBack_reader >= this->comb_tilde_04_feedBack__maxdelay || this->comb_tilde_04_feedBack_writer >= this->comb_tilde_04_feedBack__maxdelay) {
                    this->comb_tilde_04_feedBack_reader = 0;
                    this->comb_tilde_04_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_04_feedBack_dspsetup() {
                this->comb_tilde_04_feedBack_reset();
            }
            
            number comb_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_04_feedBack_size() {
                return this->comb_tilde_04_feedBack__maxdelay;
            }
            
            void comb_tilde_04_init() {
                this->comb_tilde_04_feedForward_init();
                this->comb_tilde_04_feedBack_init();
            }
            
            void comb_tilde_04_clear() {
                this->comb_tilde_04_feedForward_clear();
                this->comb_tilde_04_feedBack_clear();
            }
            
            void comb_tilde_04_reset() {
                this->comb_tilde_04_init();
                this->comb_tilde_04_clear();
            }
            
            void comb_tilde_04_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_04_reset();
                this->comb_tilde_04_setupDone = true;
                this->comb_tilde_04_feedForward_dspsetup();
                this->comb_tilde_04_feedBack_dspsetup();
            }
            
            void comb_tilde_05_feedForward_step() {
                this->comb_tilde_05_feedForward_reader++;
            
                if (this->comb_tilde_05_feedForward_reader >= (int)(this->comb_tilde_05_feedForward_buffer->getSize()))
                    this->comb_tilde_05_feedForward_reader = 0;
            }
            
            number comb_tilde_05_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_05_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                );
            }
            
            void comb_tilde_05_feedForward_write(number v) {
                this->comb_tilde_05_feedForward_writer = this->comb_tilde_05_feedForward_reader;
                this->comb_tilde_05_feedForward_buffer[(Index)this->comb_tilde_05_feedForward_writer] = v;
            }
            
            number comb_tilde_05_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_05_feedForward__maxdelay : size);
                number val = this->comb_tilde_05_feedForward_read(effectiveSize, 0);
                this->comb_tilde_05_feedForward_write(v);
                this->comb_tilde_05_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_05_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_05_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_05_feedForward_init() {
                auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                this->comb_tilde_05_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_05_feedForward_clear() {
                this->comb_tilde_05_feedForward_buffer->setZero();
            }
            
            void comb_tilde_05_feedForward_reset() {
                auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                this->comb_tilde_05_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_05_feedForward_buffer);
                this->comb_tilde_05_feedForward_wrap = this->comb_tilde_05_feedForward_buffer->getSize() - 1;
                this->comb_tilde_05_feedForward_clear();
            
                if (this->comb_tilde_05_feedForward_reader >= this->comb_tilde_05_feedForward__maxdelay || this->comb_tilde_05_feedForward_writer >= this->comb_tilde_05_feedForward__maxdelay) {
                    this->comb_tilde_05_feedForward_reader = 0;
                    this->comb_tilde_05_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_05_feedForward_dspsetup() {
                this->comb_tilde_05_feedForward_reset();
            }
            
            number comb_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_05_feedForward_size() {
                return this->comb_tilde_05_feedForward__maxdelay;
            }
            
            void comb_tilde_05_feedBack_step() {
                this->comb_tilde_05_feedBack_reader++;
            
                if (this->comb_tilde_05_feedBack_reader >= (int)(this->comb_tilde_05_feedBack_buffer->getSize()))
                    this->comb_tilde_05_feedBack_reader = 0;
            }
            
            number comb_tilde_05_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_05_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                );
            }
            
            void comb_tilde_05_feedBack_write(number v) {
                this->comb_tilde_05_feedBack_writer = this->comb_tilde_05_feedBack_reader;
                this->comb_tilde_05_feedBack_buffer[(Index)this->comb_tilde_05_feedBack_writer] = v;
            }
            
            number comb_tilde_05_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_05_feedBack__maxdelay : size);
                number val = this->comb_tilde_05_feedBack_read(effectiveSize, 0);
                this->comb_tilde_05_feedBack_write(v);
                this->comb_tilde_05_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_05_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_05_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_05_feedBack_init() {
                auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                this->comb_tilde_05_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_05_feedBack_clear() {
                this->comb_tilde_05_feedBack_buffer->setZero();
            }
            
            void comb_tilde_05_feedBack_reset() {
                auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                this->comb_tilde_05_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_05_feedBack_buffer);
                this->comb_tilde_05_feedBack_wrap = this->comb_tilde_05_feedBack_buffer->getSize() - 1;
                this->comb_tilde_05_feedBack_clear();
            
                if (this->comb_tilde_05_feedBack_reader >= this->comb_tilde_05_feedBack__maxdelay || this->comb_tilde_05_feedBack_writer >= this->comb_tilde_05_feedBack__maxdelay) {
                    this->comb_tilde_05_feedBack_reader = 0;
                    this->comb_tilde_05_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_05_feedBack_dspsetup() {
                this->comb_tilde_05_feedBack_reset();
            }
            
            number comb_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_05_feedBack_size() {
                return this->comb_tilde_05_feedBack__maxdelay;
            }
            
            void comb_tilde_05_init() {
                this->comb_tilde_05_feedForward_init();
                this->comb_tilde_05_feedBack_init();
            }
            
            void comb_tilde_05_clear() {
                this->comb_tilde_05_feedForward_clear();
                this->comb_tilde_05_feedBack_clear();
            }
            
            void comb_tilde_05_reset() {
                this->comb_tilde_05_init();
                this->comb_tilde_05_clear();
            }
            
            void comb_tilde_05_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_05_reset();
                this->comb_tilde_05_setupDone = true;
                this->comb_tilde_05_feedForward_dspsetup();
                this->comb_tilde_05_feedBack_dspsetup();
            }
            
            void comb_tilde_06_feedForward_step() {
                this->comb_tilde_06_feedForward_reader++;
            
                if (this->comb_tilde_06_feedForward_reader >= (int)(this->comb_tilde_06_feedForward_buffer->getSize()))
                    this->comb_tilde_06_feedForward_reader = 0;
            }
            
            number comb_tilde_06_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_06_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                );
            }
            
            void comb_tilde_06_feedForward_write(number v) {
                this->comb_tilde_06_feedForward_writer = this->comb_tilde_06_feedForward_reader;
                this->comb_tilde_06_feedForward_buffer[(Index)this->comb_tilde_06_feedForward_writer] = v;
            }
            
            number comb_tilde_06_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_06_feedForward__maxdelay : size);
                number val = this->comb_tilde_06_feedForward_read(effectiveSize, 0);
                this->comb_tilde_06_feedForward_write(v);
                this->comb_tilde_06_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_06_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_06_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_06_feedForward_init() {
                auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                this->comb_tilde_06_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_06_feedForward_clear() {
                this->comb_tilde_06_feedForward_buffer->setZero();
            }
            
            void comb_tilde_06_feedForward_reset() {
                auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                this->comb_tilde_06_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_06_feedForward_buffer);
                this->comb_tilde_06_feedForward_wrap = this->comb_tilde_06_feedForward_buffer->getSize() - 1;
                this->comb_tilde_06_feedForward_clear();
            
                if (this->comb_tilde_06_feedForward_reader >= this->comb_tilde_06_feedForward__maxdelay || this->comb_tilde_06_feedForward_writer >= this->comb_tilde_06_feedForward__maxdelay) {
                    this->comb_tilde_06_feedForward_reader = 0;
                    this->comb_tilde_06_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_06_feedForward_dspsetup() {
                this->comb_tilde_06_feedForward_reset();
            }
            
            number comb_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_06_feedForward_size() {
                return this->comb_tilde_06_feedForward__maxdelay;
            }
            
            void comb_tilde_06_feedBack_step() {
                this->comb_tilde_06_feedBack_reader++;
            
                if (this->comb_tilde_06_feedBack_reader >= (int)(this->comb_tilde_06_feedBack_buffer->getSize()))
                    this->comb_tilde_06_feedBack_reader = 0;
            }
            
            number comb_tilde_06_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_06_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                );
            }
            
            void comb_tilde_06_feedBack_write(number v) {
                this->comb_tilde_06_feedBack_writer = this->comb_tilde_06_feedBack_reader;
                this->comb_tilde_06_feedBack_buffer[(Index)this->comb_tilde_06_feedBack_writer] = v;
            }
            
            number comb_tilde_06_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_06_feedBack__maxdelay : size);
                number val = this->comb_tilde_06_feedBack_read(effectiveSize, 0);
                this->comb_tilde_06_feedBack_write(v);
                this->comb_tilde_06_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_06_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_06_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_06_feedBack_init() {
                auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                this->comb_tilde_06_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_06_feedBack_clear() {
                this->comb_tilde_06_feedBack_buffer->setZero();
            }
            
            void comb_tilde_06_feedBack_reset() {
                auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                this->comb_tilde_06_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_06_feedBack_buffer);
                this->comb_tilde_06_feedBack_wrap = this->comb_tilde_06_feedBack_buffer->getSize() - 1;
                this->comb_tilde_06_feedBack_clear();
            
                if (this->comb_tilde_06_feedBack_reader >= this->comb_tilde_06_feedBack__maxdelay || this->comb_tilde_06_feedBack_writer >= this->comb_tilde_06_feedBack__maxdelay) {
                    this->comb_tilde_06_feedBack_reader = 0;
                    this->comb_tilde_06_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_06_feedBack_dspsetup() {
                this->comb_tilde_06_feedBack_reset();
            }
            
            number comb_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_06_feedBack_size() {
                return this->comb_tilde_06_feedBack__maxdelay;
            }
            
            void comb_tilde_06_init() {
                this->comb_tilde_06_feedForward_init();
                this->comb_tilde_06_feedBack_init();
            }
            
            void comb_tilde_06_clear() {
                this->comb_tilde_06_feedForward_clear();
                this->comb_tilde_06_feedBack_clear();
            }
            
            void comb_tilde_06_reset() {
                this->comb_tilde_06_init();
                this->comb_tilde_06_clear();
            }
            
            void comb_tilde_06_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_06_reset();
                this->comb_tilde_06_setupDone = true;
                this->comb_tilde_06_feedForward_dspsetup();
                this->comb_tilde_06_feedBack_dspsetup();
            }
            
            void comb_tilde_07_feedForward_step() {
                this->comb_tilde_07_feedForward_reader++;
            
                if (this->comb_tilde_07_feedForward_reader >= (int)(this->comb_tilde_07_feedForward_buffer->getSize()))
                    this->comb_tilde_07_feedForward_reader = 0;
            }
            
            number comb_tilde_07_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_07_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                );
            }
            
            void comb_tilde_07_feedForward_write(number v) {
                this->comb_tilde_07_feedForward_writer = this->comb_tilde_07_feedForward_reader;
                this->comb_tilde_07_feedForward_buffer[(Index)this->comb_tilde_07_feedForward_writer] = v;
            }
            
            number comb_tilde_07_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_07_feedForward__maxdelay : size);
                number val = this->comb_tilde_07_feedForward_read(effectiveSize, 0);
                this->comb_tilde_07_feedForward_write(v);
                this->comb_tilde_07_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_07_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_07_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_07_feedForward_init() {
                auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                this->comb_tilde_07_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_07_feedForward_clear() {
                this->comb_tilde_07_feedForward_buffer->setZero();
            }
            
            void comb_tilde_07_feedForward_reset() {
                auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                this->comb_tilde_07_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_07_feedForward_buffer);
                this->comb_tilde_07_feedForward_wrap = this->comb_tilde_07_feedForward_buffer->getSize() - 1;
                this->comb_tilde_07_feedForward_clear();
            
                if (this->comb_tilde_07_feedForward_reader >= this->comb_tilde_07_feedForward__maxdelay || this->comb_tilde_07_feedForward_writer >= this->comb_tilde_07_feedForward__maxdelay) {
                    this->comb_tilde_07_feedForward_reader = 0;
                    this->comb_tilde_07_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_07_feedForward_dspsetup() {
                this->comb_tilde_07_feedForward_reset();
            }
            
            number comb_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_07_feedForward_size() {
                return this->comb_tilde_07_feedForward__maxdelay;
            }
            
            void comb_tilde_07_feedBack_step() {
                this->comb_tilde_07_feedBack_reader++;
            
                if (this->comb_tilde_07_feedBack_reader >= (int)(this->comb_tilde_07_feedBack_buffer->getSize()))
                    this->comb_tilde_07_feedBack_reader = 0;
            }
            
            number comb_tilde_07_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_07_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                );
            }
            
            void comb_tilde_07_feedBack_write(number v) {
                this->comb_tilde_07_feedBack_writer = this->comb_tilde_07_feedBack_reader;
                this->comb_tilde_07_feedBack_buffer[(Index)this->comb_tilde_07_feedBack_writer] = v;
            }
            
            number comb_tilde_07_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_07_feedBack__maxdelay : size);
                number val = this->comb_tilde_07_feedBack_read(effectiveSize, 0);
                this->comb_tilde_07_feedBack_write(v);
                this->comb_tilde_07_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_07_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_07_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_07_feedBack_init() {
                auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                this->comb_tilde_07_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_07_feedBack_clear() {
                this->comb_tilde_07_feedBack_buffer->setZero();
            }
            
            void comb_tilde_07_feedBack_reset() {
                auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                this->comb_tilde_07_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_07_feedBack_buffer);
                this->comb_tilde_07_feedBack_wrap = this->comb_tilde_07_feedBack_buffer->getSize() - 1;
                this->comb_tilde_07_feedBack_clear();
            
                if (this->comb_tilde_07_feedBack_reader >= this->comb_tilde_07_feedBack__maxdelay || this->comb_tilde_07_feedBack_writer >= this->comb_tilde_07_feedBack__maxdelay) {
                    this->comb_tilde_07_feedBack_reader = 0;
                    this->comb_tilde_07_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_07_feedBack_dspsetup() {
                this->comb_tilde_07_feedBack_reset();
            }
            
            number comb_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_07_feedBack_size() {
                return this->comb_tilde_07_feedBack__maxdelay;
            }
            
            void comb_tilde_07_init() {
                this->comb_tilde_07_feedForward_init();
                this->comb_tilde_07_feedBack_init();
            }
            
            void comb_tilde_07_clear() {
                this->comb_tilde_07_feedForward_clear();
                this->comb_tilde_07_feedBack_clear();
            }
            
            void comb_tilde_07_reset() {
                this->comb_tilde_07_init();
                this->comb_tilde_07_clear();
            }
            
            void comb_tilde_07_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_07_reset();
                this->comb_tilde_07_setupDone = true;
                this->comb_tilde_07_feedForward_dspsetup();
                this->comb_tilde_07_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                comb_tilde_01_x = 0;
                comb_tilde_01_delayTime = 110;
                comb_tilde_01_gain = 0;
                comb_tilde_01_ffGain = 1;
                comb_tilde_01_fbGain = 0;
                dspexpr_02_in1 = 0;
                dspexpr_02_in2 = 110;
                comb_tilde_02_x = 0;
                comb_tilde_02_delayTime = 160;
                comb_tilde_02_gain = 0;
                comb_tilde_02_ffGain = 1;
                comb_tilde_02_fbGain = 0;
                dspexpr_03_in1 = 0;
                dspexpr_03_in2 = 160;
                comb_tilde_03_x = 0;
                comb_tilde_03_delayTime = 50;
                comb_tilde_03_gain = 0;
                comb_tilde_03_ffGain = 1;
                comb_tilde_03_fbGain = 0;
                dspexpr_04_in1 = 0;
                dspexpr_04_in2 = 50;
                dspexpr_05_in1 = 0;
                dspexpr_05_in2 = 0.355;
                comb_tilde_04_x = 0;
                comb_tilde_04_delayTime = 25;
                comb_tilde_04_gain = 0;
                comb_tilde_04_ffGain = 1;
                comb_tilde_04_fbGain = 0;
                dspexpr_06_in1 = 0;
                dspexpr_06_in2 = 0;
                dspexpr_07_in1 = 0;
                dspexpr_07_in2 = 25;
                dspexpr_08_in1 = 0;
                dspexpr_08_in2 = -1;
                comb_tilde_05_x = 0;
                comb_tilde_05_delayTime = 69;
                comb_tilde_05_gain = 0;
                comb_tilde_05_ffGain = 1;
                comb_tilde_05_fbGain = 0;
                dspexpr_09_in1 = 0;
                dspexpr_09_in2 = 69;
                comb_tilde_06_x = 0;
                comb_tilde_06_delayTime = 80;
                comb_tilde_06_gain = 0;
                comb_tilde_06_ffGain = 1;
                comb_tilde_06_fbGain = 0;
                dspexpr_10_in1 = 0;
                dspexpr_10_in2 = 80;
                comb_tilde_07_x = 0;
                comb_tilde_07_delayTime = 75;
                comb_tilde_07_gain = 0;
                comb_tilde_07_ffGain = 1;
                comb_tilde_07_fbGain = 0;
                dspexpr_11_in1 = 0;
                dspexpr_11_in2 = 75;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                comb_tilde_01_feedForward__maxdelay = 0;
                comb_tilde_01_feedForward_sizemode = 0;
                comb_tilde_01_feedForward_wrap = 0;
                comb_tilde_01_feedForward_reader = 0;
                comb_tilde_01_feedForward_writer = 0;
                comb_tilde_01_feedBack__maxdelay = 0;
                comb_tilde_01_feedBack_sizemode = 0;
                comb_tilde_01_feedBack_wrap = 0;
                comb_tilde_01_feedBack_reader = 0;
                comb_tilde_01_feedBack_writer = 0;
                comb_tilde_01_setupDone = false;
                comb_tilde_02_feedForward__maxdelay = 0;
                comb_tilde_02_feedForward_sizemode = 0;
                comb_tilde_02_feedForward_wrap = 0;
                comb_tilde_02_feedForward_reader = 0;
                comb_tilde_02_feedForward_writer = 0;
                comb_tilde_02_feedBack__maxdelay = 0;
                comb_tilde_02_feedBack_sizemode = 0;
                comb_tilde_02_feedBack_wrap = 0;
                comb_tilde_02_feedBack_reader = 0;
                comb_tilde_02_feedBack_writer = 0;
                comb_tilde_02_setupDone = false;
                comb_tilde_03_feedForward__maxdelay = 0;
                comb_tilde_03_feedForward_sizemode = 0;
                comb_tilde_03_feedForward_wrap = 0;
                comb_tilde_03_feedForward_reader = 0;
                comb_tilde_03_feedForward_writer = 0;
                comb_tilde_03_feedBack__maxdelay = 0;
                comb_tilde_03_feedBack_sizemode = 0;
                comb_tilde_03_feedBack_wrap = 0;
                comb_tilde_03_feedBack_reader = 0;
                comb_tilde_03_feedBack_writer = 0;
                comb_tilde_03_setupDone = false;
                comb_tilde_04_feedForward__maxdelay = 0;
                comb_tilde_04_feedForward_sizemode = 0;
                comb_tilde_04_feedForward_wrap = 0;
                comb_tilde_04_feedForward_reader = 0;
                comb_tilde_04_feedForward_writer = 0;
                comb_tilde_04_feedBack__maxdelay = 0;
                comb_tilde_04_feedBack_sizemode = 0;
                comb_tilde_04_feedBack_wrap = 0;
                comb_tilde_04_feedBack_reader = 0;
                comb_tilde_04_feedBack_writer = 0;
                comb_tilde_04_setupDone = false;
                comb_tilde_05_feedForward__maxdelay = 0;
                comb_tilde_05_feedForward_sizemode = 0;
                comb_tilde_05_feedForward_wrap = 0;
                comb_tilde_05_feedForward_reader = 0;
                comb_tilde_05_feedForward_writer = 0;
                comb_tilde_05_feedBack__maxdelay = 0;
                comb_tilde_05_feedBack_sizemode = 0;
                comb_tilde_05_feedBack_wrap = 0;
                comb_tilde_05_feedBack_reader = 0;
                comb_tilde_05_feedBack_writer = 0;
                comb_tilde_05_setupDone = false;
                comb_tilde_06_feedForward__maxdelay = 0;
                comb_tilde_06_feedForward_sizemode = 0;
                comb_tilde_06_feedForward_wrap = 0;
                comb_tilde_06_feedForward_reader = 0;
                comb_tilde_06_feedForward_writer = 0;
                comb_tilde_06_feedBack__maxdelay = 0;
                comb_tilde_06_feedBack_sizemode = 0;
                comb_tilde_06_feedBack_wrap = 0;
                comb_tilde_06_feedBack_reader = 0;
                comb_tilde_06_feedBack_writer = 0;
                comb_tilde_06_setupDone = false;
                comb_tilde_07_feedForward__maxdelay = 0;
                comb_tilde_07_feedForward_sizemode = 0;
                comb_tilde_07_feedForward_wrap = 0;
                comb_tilde_07_feedForward_reader = 0;
                comb_tilde_07_feedForward_writer = 0;
                comb_tilde_07_feedBack__maxdelay = 0;
                comb_tilde_07_feedBack_sizemode = 0;
                comb_tilde_07_feedBack_wrap = 0;
                comb_tilde_07_feedBack_reader = 0;
                comb_tilde_07_feedBack_writer = 0;
                comb_tilde_07_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number comb_tilde_01_x;
                number comb_tilde_01_delayTime;
                number comb_tilde_01_gain;
                number comb_tilde_01_ffGain;
                number comb_tilde_01_fbGain;
                number dspexpr_02_in1;
                number dspexpr_02_in2;
                number comb_tilde_02_x;
                number comb_tilde_02_delayTime;
                number comb_tilde_02_gain;
                number comb_tilde_02_ffGain;
                number comb_tilde_02_fbGain;
                number dspexpr_03_in1;
                number dspexpr_03_in2;
                number comb_tilde_03_x;
                number comb_tilde_03_delayTime;
                number comb_tilde_03_gain;
                number comb_tilde_03_ffGain;
                number comb_tilde_03_fbGain;
                number dspexpr_04_in1;
                number dspexpr_04_in2;
                number dspexpr_05_in1;
                number dspexpr_05_in2;
                number comb_tilde_04_x;
                number comb_tilde_04_delayTime;
                number comb_tilde_04_gain;
                number comb_tilde_04_ffGain;
                number comb_tilde_04_fbGain;
                number dspexpr_06_in1;
                number dspexpr_06_in2;
                number dspexpr_07_in1;
                number dspexpr_07_in2;
                number dspexpr_08_in1;
                number dspexpr_08_in2;
                number comb_tilde_05_x;
                number comb_tilde_05_delayTime;
                number comb_tilde_05_gain;
                number comb_tilde_05_ffGain;
                number comb_tilde_05_fbGain;
                number dspexpr_09_in1;
                number dspexpr_09_in2;
                number comb_tilde_06_x;
                number comb_tilde_06_delayTime;
                number comb_tilde_06_gain;
                number comb_tilde_06_ffGain;
                number comb_tilde_06_fbGain;
                number dspexpr_10_in1;
                number dspexpr_10_in2;
                number comb_tilde_07_x;
                number comb_tilde_07_delayTime;
                number comb_tilde_07_gain;
                number comb_tilde_07_ffGain;
                number comb_tilde_07_fbGain;
                number dspexpr_11_in1;
                number dspexpr_11_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef comb_tilde_01_feedForward_buffer;
                Index comb_tilde_01_feedForward__maxdelay;
                Int comb_tilde_01_feedForward_sizemode;
                Index comb_tilde_01_feedForward_wrap;
                Int comb_tilde_01_feedForward_reader;
                Int comb_tilde_01_feedForward_writer;
                Float64BufferRef comb_tilde_01_feedBack_buffer;
                Index comb_tilde_01_feedBack__maxdelay;
                Int comb_tilde_01_feedBack_sizemode;
                Index comb_tilde_01_feedBack_wrap;
                Int comb_tilde_01_feedBack_reader;
                Int comb_tilde_01_feedBack_writer;
                bool comb_tilde_01_setupDone;
                Float64BufferRef comb_tilde_02_feedForward_buffer;
                Index comb_tilde_02_feedForward__maxdelay;
                Int comb_tilde_02_feedForward_sizemode;
                Index comb_tilde_02_feedForward_wrap;
                Int comb_tilde_02_feedForward_reader;
                Int comb_tilde_02_feedForward_writer;
                Float64BufferRef comb_tilde_02_feedBack_buffer;
                Index comb_tilde_02_feedBack__maxdelay;
                Int comb_tilde_02_feedBack_sizemode;
                Index comb_tilde_02_feedBack_wrap;
                Int comb_tilde_02_feedBack_reader;
                Int comb_tilde_02_feedBack_writer;
                bool comb_tilde_02_setupDone;
                Float64BufferRef comb_tilde_03_feedForward_buffer;
                Index comb_tilde_03_feedForward__maxdelay;
                Int comb_tilde_03_feedForward_sizemode;
                Index comb_tilde_03_feedForward_wrap;
                Int comb_tilde_03_feedForward_reader;
                Int comb_tilde_03_feedForward_writer;
                Float64BufferRef comb_tilde_03_feedBack_buffer;
                Index comb_tilde_03_feedBack__maxdelay;
                Int comb_tilde_03_feedBack_sizemode;
                Index comb_tilde_03_feedBack_wrap;
                Int comb_tilde_03_feedBack_reader;
                Int comb_tilde_03_feedBack_writer;
                bool comb_tilde_03_setupDone;
                Float64BufferRef comb_tilde_04_feedForward_buffer;
                Index comb_tilde_04_feedForward__maxdelay;
                Int comb_tilde_04_feedForward_sizemode;
                Index comb_tilde_04_feedForward_wrap;
                Int comb_tilde_04_feedForward_reader;
                Int comb_tilde_04_feedForward_writer;
                Float64BufferRef comb_tilde_04_feedBack_buffer;
                Index comb_tilde_04_feedBack__maxdelay;
                Int comb_tilde_04_feedBack_sizemode;
                Index comb_tilde_04_feedBack_wrap;
                Int comb_tilde_04_feedBack_reader;
                Int comb_tilde_04_feedBack_writer;
                bool comb_tilde_04_setupDone;
                Float64BufferRef comb_tilde_05_feedForward_buffer;
                Index comb_tilde_05_feedForward__maxdelay;
                Int comb_tilde_05_feedForward_sizemode;
                Index comb_tilde_05_feedForward_wrap;
                Int comb_tilde_05_feedForward_reader;
                Int comb_tilde_05_feedForward_writer;
                Float64BufferRef comb_tilde_05_feedBack_buffer;
                Index comb_tilde_05_feedBack__maxdelay;
                Int comb_tilde_05_feedBack_sizemode;
                Index comb_tilde_05_feedBack_wrap;
                Int comb_tilde_05_feedBack_reader;
                Int comb_tilde_05_feedBack_writer;
                bool comb_tilde_05_setupDone;
                Float64BufferRef comb_tilde_06_feedForward_buffer;
                Index comb_tilde_06_feedForward__maxdelay;
                Int comb_tilde_06_feedForward_sizemode;
                Index comb_tilde_06_feedForward_wrap;
                Int comb_tilde_06_feedForward_reader;
                Int comb_tilde_06_feedForward_writer;
                Float64BufferRef comb_tilde_06_feedBack_buffer;
                Index comb_tilde_06_feedBack__maxdelay;
                Int comb_tilde_06_feedBack_sizemode;
                Index comb_tilde_06_feedBack_wrap;
                Int comb_tilde_06_feedBack_reader;
                Int comb_tilde_06_feedBack_writer;
                bool comb_tilde_06_setupDone;
                Float64BufferRef comb_tilde_07_feedForward_buffer;
                Index comb_tilde_07_feedForward__maxdelay;
                Int comb_tilde_07_feedForward_sizemode;
                Index comb_tilde_07_feedForward_wrap;
                Int comb_tilde_07_feedForward_reader;
                Int comb_tilde_07_feedForward_writer;
                Float64BufferRef comb_tilde_07_feedBack_buffer;
                Index comb_tilde_07_feedBack__maxdelay;
                Int comb_tilde_07_feedBack_sizemode;
                Index comb_tilde_07_feedBack_wrap;
                Int comb_tilde_07_feedBack_reader;
                Int comb_tilde_07_feedBack_writer;
                bool comb_tilde_07_setupDone;
                number stackprotect_count;
                DataRef comb_tilde_01_feedForward_bufferobj;
                DataRef comb_tilde_01_feedBack_bufferobj;
                DataRef comb_tilde_02_feedForward_bufferobj;
                DataRef comb_tilde_02_feedBack_bufferobj;
                DataRef comb_tilde_03_feedForward_bufferobj;
                DataRef comb_tilde_03_feedBack_bufferobj;
                DataRef comb_tilde_04_feedForward_bufferobj;
                DataRef comb_tilde_04_feedBack_bufferobj;
                DataRef comb_tilde_05_feedForward_bufferobj;
                DataRef comb_tilde_05_feedBack_bufferobj;
                DataRef comb_tilde_06_feedForward_bufferobj;
                DataRef comb_tilde_06_feedBack_bufferobj;
                DataRef comb_tilde_07_feedForward_bufferobj;
                DataRef comb_tilde_07_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_153 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_176;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_153()
            {
            }
            
            ~RNBOSubpatcher_153()
            {
            }
            
            virtual RNBOSubpatcher_176* getPatcher() const {
                return static_cast<RNBOSubpatcher_176 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Size = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * target_Decay = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * target_Jitter = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * target_Damp = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->noise_tilde_01_perform(this->signals[0], n);
            
                this->lores_01_perform(
                    this->lores_01_cutoff,
                    this->lores_01_resonance,
                    this->signals[0],
                    this->signals[1],
                    n
                );
            
                this->feedbackreader_01_perform(this->signals[0], n);
                this->stackprotect_perform(n);
                this->signalreceive_03_perform(target_Size, this->signals[2], n);
                this->dspexpr_14_perform(this->signals[2], this->dspexpr_14_in2, this->signals[3], n);
                this->dspexpr_12_perform(this->signals[2], this->dspexpr_12_in2, this->signals[4], n);
                this->signaladder_19_perform(in1, this->signals[0], this->signals[0], n);
                this->allpass_tilde_09_perform(this->signals[0], this->signals[4], this->allpass_tilde_09_gain, out1, n);
                this->signalreceive_07_perform(target_Size, this->signals[4], n);
                this->dspexpr_18_perform(this->signals[4], this->dspexpr_18_in2, this->signals[2], n);
                this->mstosamps_tilde_01_perform(this->signals[2], this->signals[5], n);
                this->dspexpr_17_perform(this->signals[4], this->dspexpr_17_in2, this->signals[2], n);
                this->signalreceive_04_perform(target_Decay, this->signals[4], n);
                this->signalreceive_05_perform(target_Jitter, this->signals[6], n);
                this->dspexpr_16_perform(this->signals[1], this->signals[6], this->signals[7], n);
                this->dspexpr_13_perform(this->signals[3], this->signals[7], this->signals[6], n);
            
                this->comb_tilde_08_perform(
                    out1,
                    this->signals[6],
                    this->comb_tilde_08_gain,
                    this->comb_tilde_08_ffGain,
                    this->comb_tilde_08_fbGain,
                    this->signals[7],
                    n
                );
            
                this->signalforwarder_20_perform(this->signals[7], out2, n);
                this->signalreceive_06_perform(target_Damp, this->signals[6], n);
                this->onepole_tilde_01_perform(this->signals[7], this->signals[6], this->signals[3], n);
                this->dspexpr_15_perform(this->signals[3], this->signals[4], this->signals[6], n);
            
                this->allpass_tilde_10_perform(
                    this->signals[6],
                    this->signals[2],
                    this->allpass_tilde_10_gain,
                    this->signals[4],
                    n
                );
            
                this->delaytilde_01_perform(this->signals[5], this->signals[4], out4, n);
                this->feedbackwriter_01_perform(out4, n);
                this->signalforwarder_21_perform(this->signals[4], out3, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->feedbacktilde_01_feedbackbuffer = resizeSignal(this->feedbacktilde_01_feedbackbuffer, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->lores_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_09_dspsetup(forceDSPSetup);
                this->comb_tilde_08_dspsetup(forceDSPSetup);
                this->onepole_tilde_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_10_dspsetup(forceDSPSetup);
                this->delaytilde_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 4;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->allpass_tilde_09_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->allpass_tilde_09_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->comb_tilde_08_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->comb_tilde_08_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->allpass_tilde_10_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->allpass_tilde_10_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->delaytilde_01_del_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 7;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->allpass_tilde_09_feedForward_buffer = new Float64Buffer(this->allpass_tilde_09_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->allpass_tilde_09_feedBack_buffer = new Float64Buffer(this->allpass_tilde_09_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->allpass_tilde_10_feedForward_buffer = new Float64Buffer(this->allpass_tilde_10_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_10_feedBack_buffer = new Float64Buffer(this->allpass_tilde_10_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_09_feedForward_bufferobj = initDataRef("allpass_tilde_09_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_09_feedBack_bufferobj = initDataRef("allpass_tilde_09_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_08_feedForward_bufferobj = initDataRef("comb_tilde_08_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_08_feedBack_bufferobj = initDataRef("comb_tilde_08_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_10_feedForward_bufferobj = initDataRef("allpass_tilde_10_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_10_feedBack_bufferobj = initDataRef("allpass_tilde_10_feedBack_bufferobj", true, nullptr, "buffer~");
                this->delaytilde_01_del_bufferobj = initDataRef("delaytilde_01_del_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_09_feedForward_bufferobj->setIndex(4);
                this->allpass_tilde_09_feedForward_buffer = new Float64Buffer(this->allpass_tilde_09_feedForward_bufferobj);
                this->allpass_tilde_09_feedBack_bufferobj->setIndex(5);
                this->allpass_tilde_09_feedBack_buffer = new Float64Buffer(this->allpass_tilde_09_feedBack_bufferobj);
                this->comb_tilde_08_feedForward_bufferobj->setIndex(6);
                this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                this->comb_tilde_08_feedBack_bufferobj->setIndex(7);
                this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                this->allpass_tilde_10_feedForward_bufferobj->setIndex(8);
                this->allpass_tilde_10_feedForward_buffer = new Float64Buffer(this->allpass_tilde_10_feedForward_bufferobj);
                this->allpass_tilde_10_feedBack_bufferobj->setIndex(9);
                this->allpass_tilde_10_feedBack_buffer = new Float64Buffer(this->allpass_tilde_10_feedBack_bufferobj);
                this->delaytilde_01_del_bufferobj->setIndex(10);
                this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 4;
            }
            
            void initializeObjects() {
                this->allpass_tilde_09_feedForward_init();
                this->allpass_tilde_09_feedBack_init();
                this->allpass_tilde_09_init();
                this->comb_tilde_08_feedForward_init();
                this->comb_tilde_08_feedBack_init();
                this->comb_tilde_08_init();
                this->allpass_tilde_10_feedForward_init();
                this->allpass_tilde_10_feedBack_init();
                this->allpass_tilde_10_init();
                this->noise_tilde_01_init();
                this->delaytilde_01_del_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_09_feedForward_buffer = this->allpass_tilde_09_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_09_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_09_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->allpass_tilde_09_feedBack_buffer = this->allpass_tilde_09_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_09_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_09_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_08_feedForward_buffer = this->comb_tilde_08_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_08_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_08_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_08_feedBack_buffer = this->comb_tilde_08_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_08_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_08_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->allpass_tilde_10_feedForward_buffer = this->allpass_tilde_10_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_10_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_10_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_10_feedBack_buffer = this->allpass_tilde_10_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_10_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_10_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->delaytilde_01_del_buffer = this->delaytilde_01_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_01_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_01_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_01_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            }
            
            void noise_tilde_01_perform(SampleValue * out1, Index n) {
                auto __noise_tilde_01_state = this->noise_tilde_01_state;
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = xoshiro_next(__noise_tilde_01_state);
                }
            }
            
            void lores_01_perform(
                number cutoff,
                number resonance,
                const SampleValue * input,
                SampleValue * out,
                Index n
            ) {
                RNBO_UNUSED(resonance);
                RNBO_UNUSED(cutoff);
                auto __lores_01_y_2 = this->lores_01_y_2;
                auto __lores_01_y_1 = this->lores_01_y_1;
                auto __lores_01_x_0 = this->lores_01_x_0;
                auto __lores_01_b_0 = this->lores_01_b_0;
                auto __lores_01_a_1 = this->lores_01_a_1;
                auto __lores_01_a_2 = this->lores_01_a_2;
                auto __lores_01_last_freq_calc = this->lores_01_last_freq_calc;
                auto __lores_01_last_res_calc = this->lores_01_last_res_calc;
                auto __lores_01_last_frequency = this->lores_01_last_frequency;
                auto __lores_01_last_resonance = this->lores_01_last_resonance;
            
                for (Index i = 0; i < n; i++) {
                    if (0.995 != __lores_01_last_resonance || 0 != __lores_01_last_frequency) {
                        __lores_01_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                        __lores_01_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                        __lores_01_last_resonance = 0.995;
                        __lores_01_last_frequency = 0;
                    }
            
                    number res_temp = __lores_01_last_res_calc;
                    number freq_temp = __lores_01_last_freq_calc;
                    __lores_01_a_2 = res_temp * res_temp;
                    __lores_01_a_1 = -2.0 * res_temp * freq_temp;
                    __lores_01_b_0 = 1.0 + __lores_01_a_1 + __lores_01_a_2;
                    __lores_01_x_0 = input[(Index)i];
                    number y_0 = __lores_01_x_0 * __lores_01_b_0 - __lores_01_y_1 * __lores_01_a_1 - __lores_01_y_2 * __lores_01_a_2;
                    __lores_01_y_2 = __lores_01_y_1;
                    __lores_01_y_1 = y_0;
                    out[(Index)i] = y_0;
                }
            
                this->lores_01_last_resonance = __lores_01_last_resonance;
                this->lores_01_last_frequency = __lores_01_last_frequency;
                this->lores_01_last_res_calc = __lores_01_last_res_calc;
                this->lores_01_last_freq_calc = __lores_01_last_freq_calc;
                this->lores_01_a_2 = __lores_01_a_2;
                this->lores_01_a_1 = __lores_01_a_1;
                this->lores_01_b_0 = __lores_01_b_0;
                this->lores_01_x_0 = __lores_01_x_0;
                this->lores_01_y_1 = __lores_01_y_1;
                this->lores_01_y_2 = __lores_01_y_2;
            }
            
            void feedbackreader_01_perform(SampleValue * output, Index n) {
                auto& buffer = this->feedbacktilde_01_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = buffer[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_03_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_14_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 149.6;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_12_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 22.58;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_19_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                }
            }
            
            void allpass_tilde_09_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = -0.7;
                    auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_09_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_09_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_09_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_09_feedBack_write(ov);
                    this->allpass_tilde_09_feedForward_step();
                    this->allpass_tilde_09_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signalreceive_07_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_18_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 125;//#map:_###_obj_###_:1
                }
            }
            
            void mstosamps_tilde_01_perform(const Sample * ms, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
                }
            }
            
            void dspexpr_17_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 60.48;//#map:_###_obj_###_:1
                }
            }
            
            void signalreceive_04_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void signalreceive_05_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_16_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_13_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_08_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_08_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_08_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_08_feedForward_write(x[(Index)i]);
                    this->comb_tilde_08_feedBack_write(ov);
                    this->comb_tilde_08_feedForward_step();
                    this->comb_tilde_08_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signalforwarder_20_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalreceive_06_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void onepole_tilde_01_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_01_lastY = this->onepole_tilde_01_lastY;
                auto __onepole_tilde_01_b1 = this->onepole_tilde_01_b1;
                auto __onepole_tilde_01_a0 = this->onepole_tilde_01_a0;
                auto __onepole_tilde_01_needsUpdate = this->onepole_tilde_01_needsUpdate;
                auto __onepole_tilde_01_freq = this->onepole_tilde_01_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_01_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_01_needsUpdate)) {
                        __onepole_tilde_01_freq = freqInHz[(Index)i];
                        __onepole_tilde_01_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_01_a0 = (__onepole_tilde_01_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_01_a0 < 0.00001 ? 0.00001 : __onepole_tilde_01_a0));
                        __onepole_tilde_01_b1 = 1 - __onepole_tilde_01_a0;
                        __onepole_tilde_01_needsUpdate = false;
                    }
            
                    __onepole_tilde_01_lastY = __onepole_tilde_01_a0 * x[(Index)i] + __onepole_tilde_01_b1 * __onepole_tilde_01_lastY;
                    out1[(Index)i] = __onepole_tilde_01_lastY;
                }
            
                this->onepole_tilde_01_freq = __onepole_tilde_01_freq;
                this->onepole_tilde_01_needsUpdate = __onepole_tilde_01_needsUpdate;
                this->onepole_tilde_01_a0 = __onepole_tilde_01_a0;
                this->onepole_tilde_01_b1 = __onepole_tilde_01_b1;
                this->onepole_tilde_01_lastY = __onepole_tilde_01_lastY;
            }
            
            void dspexpr_15_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void allpass_tilde_10_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.5;
                    auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_10_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_10_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_10_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_10_feedBack_write(ov);
                    this->allpass_tilde_10_feedForward_step();
                    this->allpass_tilde_10_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void delaytilde_01_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_01_crossfadeDelay = this->delaytilde_01_crossfadeDelay;
                auto __delaytilde_01_rampInSamples = this->delaytilde_01_rampInSamples;
                auto __delaytilde_01_ramp = this->delaytilde_01_ramp;
                auto __delaytilde_01_lastDelay = this->delaytilde_01_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_01_lastDelay == -1) {
                        __delaytilde_01_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_01_ramp > 0) {
                        number factor = __delaytilde_01_ramp / __delaytilde_01_rampInSamples;
                        output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0) * factor + this->delaytilde_01_del_read(__delaytilde_01_lastDelay, 0) * (1. - factor);
                        __delaytilde_01_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_01_lastDelay) {
                            __delaytilde_01_ramp = __delaytilde_01_rampInSamples;
                            __delaytilde_01_crossfadeDelay = __delaytilde_01_lastDelay;
                            __delaytilde_01_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0);
                            __delaytilde_01_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_01_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_01_del_write(input[(Index)i]);
                    this->delaytilde_01_del_step();
                }
            
                this->delaytilde_01_lastDelay = __delaytilde_01_lastDelay;
                this->delaytilde_01_ramp = __delaytilde_01_ramp;
                this->delaytilde_01_crossfadeDelay = __delaytilde_01_crossfadeDelay;
            }
            
            void feedbackwriter_01_perform(const SampleValue * input, Index n) {
                auto& buffer = this->feedbacktilde_01_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    buffer[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_21_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void lores_01_resonance_setter(number v) {
                if (v < 0.0) {
                    v = 0.0;
                } else if (v >= 1.0) {
                    v = 1.0 - 1E-20;
                }
            
                this->lores_01_resonance = v;
            }
            
            void allpass_tilde_09_feedForward_step() {
                this->allpass_tilde_09_feedForward_reader++;
            
                if (this->allpass_tilde_09_feedForward_reader >= (int)(this->allpass_tilde_09_feedForward_buffer->getSize()))
                    this->allpass_tilde_09_feedForward_reader = 0;
            }
            
            number allpass_tilde_09_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_09_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                );
            }
            
            void allpass_tilde_09_feedForward_write(number v) {
                this->allpass_tilde_09_feedForward_writer = this->allpass_tilde_09_feedForward_reader;
                this->allpass_tilde_09_feedForward_buffer[(Index)this->allpass_tilde_09_feedForward_writer] = v;
            }
            
            number allpass_tilde_09_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_09_feedForward__maxdelay : size);
                number val = this->allpass_tilde_09_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_09_feedForward_write(v);
                this->allpass_tilde_09_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_09_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_09_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_09_feedForward_init() {
                auto result = this->allpass_tilde_09_feedForward_calcSizeInSamples();
                this->allpass_tilde_09_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_09_feedForward_clear() {
                this->allpass_tilde_09_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_09_feedForward_reset() {
                auto result = this->allpass_tilde_09_feedForward_calcSizeInSamples();
                this->allpass_tilde_09_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_09_feedForward_buffer);
                this->allpass_tilde_09_feedForward_wrap = this->allpass_tilde_09_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_09_feedForward_clear();
            
                if (this->allpass_tilde_09_feedForward_reader >= this->allpass_tilde_09_feedForward__maxdelay || this->allpass_tilde_09_feedForward_writer >= this->allpass_tilde_09_feedForward__maxdelay) {
                    this->allpass_tilde_09_feedForward_reader = 0;
                    this->allpass_tilde_09_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_09_feedForward_dspsetup() {
                this->allpass_tilde_09_feedForward_reset();
            }
            
            number allpass_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_09_feedForward_size() {
                return this->allpass_tilde_09_feedForward__maxdelay;
            }
            
            void allpass_tilde_09_feedBack_step() {
                this->allpass_tilde_09_feedBack_reader++;
            
                if (this->allpass_tilde_09_feedBack_reader >= (int)(this->allpass_tilde_09_feedBack_buffer->getSize()))
                    this->allpass_tilde_09_feedBack_reader = 0;
            }
            
            number allpass_tilde_09_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_09_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                );
            }
            
            void allpass_tilde_09_feedBack_write(number v) {
                this->allpass_tilde_09_feedBack_writer = this->allpass_tilde_09_feedBack_reader;
                this->allpass_tilde_09_feedBack_buffer[(Index)this->allpass_tilde_09_feedBack_writer] = v;
            }
            
            number allpass_tilde_09_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_09_feedBack__maxdelay : size);
                number val = this->allpass_tilde_09_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_09_feedBack_write(v);
                this->allpass_tilde_09_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_09_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_09_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_09_feedBack_init() {
                auto result = this->allpass_tilde_09_feedBack_calcSizeInSamples();
                this->allpass_tilde_09_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_09_feedBack_clear() {
                this->allpass_tilde_09_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_09_feedBack_reset() {
                auto result = this->allpass_tilde_09_feedBack_calcSizeInSamples();
                this->allpass_tilde_09_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_09_feedBack_buffer);
                this->allpass_tilde_09_feedBack_wrap = this->allpass_tilde_09_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_09_feedBack_clear();
            
                if (this->allpass_tilde_09_feedBack_reader >= this->allpass_tilde_09_feedBack__maxdelay || this->allpass_tilde_09_feedBack_writer >= this->allpass_tilde_09_feedBack__maxdelay) {
                    this->allpass_tilde_09_feedBack_reader = 0;
                    this->allpass_tilde_09_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_09_feedBack_dspsetup() {
                this->allpass_tilde_09_feedBack_reset();
            }
            
            number allpass_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_09_feedBack_size() {
                return this->allpass_tilde_09_feedBack__maxdelay;
            }
            
            void allpass_tilde_09_init() {
                this->allpass_tilde_09_feedForward_init();
                this->allpass_tilde_09_feedBack_init();
            }
            
            void allpass_tilde_09_clear() {
                this->allpass_tilde_09_feedForward_clear();
                this->allpass_tilde_09_feedBack_clear();
            }
            
            void allpass_tilde_09_reset() {
                this->allpass_tilde_09_init();
                this->allpass_tilde_09_clear();
            }
            
            void allpass_tilde_09_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_09_reset();
                this->allpass_tilde_09_setupDone = true;
                this->allpass_tilde_09_feedForward_dspsetup();
                this->allpass_tilde_09_feedBack_dspsetup();
            }
            
            void comb_tilde_08_feedForward_step() {
                this->comb_tilde_08_feedForward_reader++;
            
                if (this->comb_tilde_08_feedForward_reader >= (int)(this->comb_tilde_08_feedForward_buffer->getSize()))
                    this->comb_tilde_08_feedForward_reader = 0;
            }
            
            number comb_tilde_08_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_08_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                );
            }
            
            void comb_tilde_08_feedForward_write(number v) {
                this->comb_tilde_08_feedForward_writer = this->comb_tilde_08_feedForward_reader;
                this->comb_tilde_08_feedForward_buffer[(Index)this->comb_tilde_08_feedForward_writer] = v;
            }
            
            number comb_tilde_08_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_08_feedForward__maxdelay : size);
                number val = this->comb_tilde_08_feedForward_read(effectiveSize, 0);
                this->comb_tilde_08_feedForward_write(v);
                this->comb_tilde_08_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_08_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_08_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_08_feedForward_init() {
                auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                this->comb_tilde_08_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_08_feedForward_clear() {
                this->comb_tilde_08_feedForward_buffer->setZero();
            }
            
            void comb_tilde_08_feedForward_reset() {
                auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                this->comb_tilde_08_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_08_feedForward_buffer);
                this->comb_tilde_08_feedForward_wrap = this->comb_tilde_08_feedForward_buffer->getSize() - 1;
                this->comb_tilde_08_feedForward_clear();
            
                if (this->comb_tilde_08_feedForward_reader >= this->comb_tilde_08_feedForward__maxdelay || this->comb_tilde_08_feedForward_writer >= this->comb_tilde_08_feedForward__maxdelay) {
                    this->comb_tilde_08_feedForward_reader = 0;
                    this->comb_tilde_08_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_08_feedForward_dspsetup() {
                this->comb_tilde_08_feedForward_reset();
            }
            
            number comb_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_08_feedForward_size() {
                return this->comb_tilde_08_feedForward__maxdelay;
            }
            
            void comb_tilde_08_feedBack_step() {
                this->comb_tilde_08_feedBack_reader++;
            
                if (this->comb_tilde_08_feedBack_reader >= (int)(this->comb_tilde_08_feedBack_buffer->getSize()))
                    this->comb_tilde_08_feedBack_reader = 0;
            }
            
            number comb_tilde_08_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_08_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                );
            }
            
            void comb_tilde_08_feedBack_write(number v) {
                this->comb_tilde_08_feedBack_writer = this->comb_tilde_08_feedBack_reader;
                this->comb_tilde_08_feedBack_buffer[(Index)this->comb_tilde_08_feedBack_writer] = v;
            }
            
            number comb_tilde_08_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_08_feedBack__maxdelay : size);
                number val = this->comb_tilde_08_feedBack_read(effectiveSize, 0);
                this->comb_tilde_08_feedBack_write(v);
                this->comb_tilde_08_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_08_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_08_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_08_feedBack_init() {
                auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                this->comb_tilde_08_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_08_feedBack_clear() {
                this->comb_tilde_08_feedBack_buffer->setZero();
            }
            
            void comb_tilde_08_feedBack_reset() {
                auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                this->comb_tilde_08_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_08_feedBack_buffer);
                this->comb_tilde_08_feedBack_wrap = this->comb_tilde_08_feedBack_buffer->getSize() - 1;
                this->comb_tilde_08_feedBack_clear();
            
                if (this->comb_tilde_08_feedBack_reader >= this->comb_tilde_08_feedBack__maxdelay || this->comb_tilde_08_feedBack_writer >= this->comb_tilde_08_feedBack__maxdelay) {
                    this->comb_tilde_08_feedBack_reader = 0;
                    this->comb_tilde_08_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_08_feedBack_dspsetup() {
                this->comb_tilde_08_feedBack_reset();
            }
            
            number comb_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_08_feedBack_size() {
                return this->comb_tilde_08_feedBack__maxdelay;
            }
            
            void comb_tilde_08_init() {
                this->comb_tilde_08_feedForward_init();
                this->comb_tilde_08_feedBack_init();
            }
            
            void comb_tilde_08_clear() {
                this->comb_tilde_08_feedForward_clear();
                this->comb_tilde_08_feedBack_clear();
            }
            
            void comb_tilde_08_reset() {
                this->comb_tilde_08_init();
                this->comb_tilde_08_clear();
            }
            
            void comb_tilde_08_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_08_reset();
                this->comb_tilde_08_setupDone = true;
                this->comb_tilde_08_feedForward_dspsetup();
                this->comb_tilde_08_feedBack_dspsetup();
            }
            
            void allpass_tilde_10_feedForward_step() {
                this->allpass_tilde_10_feedForward_reader++;
            
                if (this->allpass_tilde_10_feedForward_reader >= (int)(this->allpass_tilde_10_feedForward_buffer->getSize()))
                    this->allpass_tilde_10_feedForward_reader = 0;
            }
            
            number allpass_tilde_10_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_10_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                );
            }
            
            void allpass_tilde_10_feedForward_write(number v) {
                this->allpass_tilde_10_feedForward_writer = this->allpass_tilde_10_feedForward_reader;
                this->allpass_tilde_10_feedForward_buffer[(Index)this->allpass_tilde_10_feedForward_writer] = v;
            }
            
            number allpass_tilde_10_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_10_feedForward__maxdelay : size);
                number val = this->allpass_tilde_10_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_10_feedForward_write(v);
                this->allpass_tilde_10_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_10_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_10_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_10_feedForward_init() {
                auto result = this->allpass_tilde_10_feedForward_calcSizeInSamples();
                this->allpass_tilde_10_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_10_feedForward_clear() {
                this->allpass_tilde_10_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_10_feedForward_reset() {
                auto result = this->allpass_tilde_10_feedForward_calcSizeInSamples();
                this->allpass_tilde_10_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_10_feedForward_buffer);
                this->allpass_tilde_10_feedForward_wrap = this->allpass_tilde_10_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_10_feedForward_clear();
            
                if (this->allpass_tilde_10_feedForward_reader >= this->allpass_tilde_10_feedForward__maxdelay || this->allpass_tilde_10_feedForward_writer >= this->allpass_tilde_10_feedForward__maxdelay) {
                    this->allpass_tilde_10_feedForward_reader = 0;
                    this->allpass_tilde_10_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_10_feedForward_dspsetup() {
                this->allpass_tilde_10_feedForward_reset();
            }
            
            number allpass_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_10_feedForward_size() {
                return this->allpass_tilde_10_feedForward__maxdelay;
            }
            
            void allpass_tilde_10_feedBack_step() {
                this->allpass_tilde_10_feedBack_reader++;
            
                if (this->allpass_tilde_10_feedBack_reader >= (int)(this->allpass_tilde_10_feedBack_buffer->getSize()))
                    this->allpass_tilde_10_feedBack_reader = 0;
            }
            
            number allpass_tilde_10_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_10_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                );
            }
            
            void allpass_tilde_10_feedBack_write(number v) {
                this->allpass_tilde_10_feedBack_writer = this->allpass_tilde_10_feedBack_reader;
                this->allpass_tilde_10_feedBack_buffer[(Index)this->allpass_tilde_10_feedBack_writer] = v;
            }
            
            number allpass_tilde_10_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_10_feedBack__maxdelay : size);
                number val = this->allpass_tilde_10_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_10_feedBack_write(v);
                this->allpass_tilde_10_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_10_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_10_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_10_feedBack_init() {
                auto result = this->allpass_tilde_10_feedBack_calcSizeInSamples();
                this->allpass_tilde_10_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_10_feedBack_clear() {
                this->allpass_tilde_10_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_10_feedBack_reset() {
                auto result = this->allpass_tilde_10_feedBack_calcSizeInSamples();
                this->allpass_tilde_10_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_10_feedBack_buffer);
                this->allpass_tilde_10_feedBack_wrap = this->allpass_tilde_10_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_10_feedBack_clear();
            
                if (this->allpass_tilde_10_feedBack_reader >= this->allpass_tilde_10_feedBack__maxdelay || this->allpass_tilde_10_feedBack_writer >= this->allpass_tilde_10_feedBack__maxdelay) {
                    this->allpass_tilde_10_feedBack_reader = 0;
                    this->allpass_tilde_10_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_10_feedBack_dspsetup() {
                this->allpass_tilde_10_feedBack_reset();
            }
            
            number allpass_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_10_feedBack_size() {
                return this->allpass_tilde_10_feedBack__maxdelay;
            }
            
            void allpass_tilde_10_init() {
                this->allpass_tilde_10_feedForward_init();
                this->allpass_tilde_10_feedBack_init();
            }
            
            void allpass_tilde_10_clear() {
                this->allpass_tilde_10_feedForward_clear();
                this->allpass_tilde_10_feedBack_clear();
            }
            
            void allpass_tilde_10_reset() {
                this->allpass_tilde_10_init();
                this->allpass_tilde_10_clear();
            }
            
            void allpass_tilde_10_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_10_reset();
                this->allpass_tilde_10_setupDone = true;
                this->allpass_tilde_10_feedForward_dspsetup();
                this->allpass_tilde_10_feedBack_dspsetup();
            }
            
            void onepole_tilde_01_reset() {
                this->onepole_tilde_01_lastY = 0;
                this->onepole_tilde_01_a0 = 0;
                this->onepole_tilde_01_b1 = 0;
            }
            
            void onepole_tilde_01_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_01_needsUpdate = true;
                this->onepole_tilde_01_reset();
                this->onepole_tilde_01_setupDone = true;
            }
            
            void lores_01_reset() {
                this->lores_01_y_1 = 0;
                this->lores_01_y_2 = 0;
                this->lores_01_last_resonance = 0;
                this->lores_01_last_frequency = 0;
                this->lores_01_last_res_calc = 0;
                this->lores_01_last_freq_calc = 0;
            }
            
            void lores_01_dspsetup(bool force) {
                if ((bool)(this->lores_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->lores_01_reset();
                this->lores_01_setupDone = true;
            }
            
            void noise_tilde_01_init() {
                this->noise_tilde_01_reset();
            }
            
            void noise_tilde_01_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->noise_tilde_01_state
                );
            }
            
            void delaytilde_01_del_step() {
                this->delaytilde_01_del_reader++;
            
                if (this->delaytilde_01_del_reader >= (int)(this->delaytilde_01_del_buffer->getSize()))
                    this->delaytilde_01_del_reader = 0;
            }
            
            number delaytilde_01_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_01_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                );
            }
            
            void delaytilde_01_del_write(number v) {
                this->delaytilde_01_del_writer = this->delaytilde_01_del_reader;
                this->delaytilde_01_del_buffer[(Index)this->delaytilde_01_del_writer] = v;
            }
            
            number delaytilde_01_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_01_del__maxdelay : size);
                number val = this->delaytilde_01_del_read(effectiveSize, 0);
                this->delaytilde_01_del_write(v);
                this->delaytilde_01_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_01_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_01_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_01_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_01_del_init() {
                auto result = this->delaytilde_01_del_calcSizeInSamples();
                this->delaytilde_01_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_01_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_01_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_01_del_clear() {
                this->delaytilde_01_del_buffer->setZero();
            }
            
            void delaytilde_01_del_reset() {
                auto result = this->delaytilde_01_del_calcSizeInSamples();
                this->delaytilde_01_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_01_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_01_del_buffer);
                this->delaytilde_01_del_wrap = this->delaytilde_01_del_buffer->getSize() - 1;
                this->delaytilde_01_del_clear();
            
                if (this->delaytilde_01_del_reader >= this->delaytilde_01_del__maxdelay || this->delaytilde_01_del_writer >= this->delaytilde_01_del__maxdelay) {
                    this->delaytilde_01_del_reader = 0;
                    this->delaytilde_01_del_writer = 0;
                }
            }
            
            void delaytilde_01_del_dspsetup() {
                this->delaytilde_01_del_reset();
            }
            
            number delaytilde_01_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 38400;
            }
            
            number delaytilde_01_del_size() {
                return this->delaytilde_01_del__maxdelay;
            }
            
            void delaytilde_01_dspsetup(bool force) {
                if ((bool)(this->delaytilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_01_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_01_lastDelay = -1;
                this->delaytilde_01_setupDone = true;
                this->delaytilde_01_del_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_09_x = 0;
                allpass_tilde_09_delayTime = 22.58;
                allpass_tilde_09_gain = -0.7;
                dspexpr_12_in1 = 0;
                dspexpr_12_in2 = 22.58;
                comb_tilde_08_x = 0;
                comb_tilde_08_delayTime = 149.6;
                comb_tilde_08_gain = 0;
                comb_tilde_08_ffGain = 1;
                comb_tilde_08_fbGain = 0;
                dspexpr_13_in1 = 0;
                dspexpr_13_in2 = 0;
                dspexpr_14_in1 = 0;
                dspexpr_14_in2 = 149.6;
                dspexpr_15_in1 = 0;
                dspexpr_15_in2 = 0.5;
                allpass_tilde_10_x = 0;
                allpass_tilde_10_delayTime = 60.48;
                allpass_tilde_10_gain = 0.5;
                onepole_tilde_01_x = 0;
                onepole_tilde_01_freqInHz = 1800;
                dspexpr_16_in1 = 0;
                dspexpr_16_in2 = 20;
                lores_01_cutoff = 0;
                lores_01_resonance = 0.995;
                lores_01_resonance_setter(lores_01_resonance);
                dspexpr_17_in1 = 0;
                dspexpr_17_in2 = 60.48;
                delaytilde_01_delay = 0;
                mstosamps_tilde_01_ms = 0;
                dspexpr_18_in1 = 0;
                dspexpr_18_in2 = 125;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_09_feedForward__maxdelay = 0;
                allpass_tilde_09_feedForward_sizemode = 0;
                allpass_tilde_09_feedForward_wrap = 0;
                allpass_tilde_09_feedForward_reader = 0;
                allpass_tilde_09_feedForward_writer = 0;
                allpass_tilde_09_feedBack__maxdelay = 0;
                allpass_tilde_09_feedBack_sizemode = 0;
                allpass_tilde_09_feedBack_wrap = 0;
                allpass_tilde_09_feedBack_reader = 0;
                allpass_tilde_09_feedBack_writer = 0;
                allpass_tilde_09_setupDone = false;
                comb_tilde_08_feedForward__maxdelay = 0;
                comb_tilde_08_feedForward_sizemode = 0;
                comb_tilde_08_feedForward_wrap = 0;
                comb_tilde_08_feedForward_reader = 0;
                comb_tilde_08_feedForward_writer = 0;
                comb_tilde_08_feedBack__maxdelay = 0;
                comb_tilde_08_feedBack_sizemode = 0;
                comb_tilde_08_feedBack_wrap = 0;
                comb_tilde_08_feedBack_reader = 0;
                comb_tilde_08_feedBack_writer = 0;
                comb_tilde_08_setupDone = false;
                allpass_tilde_10_feedForward__maxdelay = 0;
                allpass_tilde_10_feedForward_sizemode = 0;
                allpass_tilde_10_feedForward_wrap = 0;
                allpass_tilde_10_feedForward_reader = 0;
                allpass_tilde_10_feedForward_writer = 0;
                allpass_tilde_10_feedBack__maxdelay = 0;
                allpass_tilde_10_feedBack_sizemode = 0;
                allpass_tilde_10_feedBack_wrap = 0;
                allpass_tilde_10_feedBack_reader = 0;
                allpass_tilde_10_feedBack_writer = 0;
                allpass_tilde_10_setupDone = false;
                onepole_tilde_01_freq = 0;
                onepole_tilde_01_needsUpdate = false;
                onepole_tilde_01_lastY = 0;
                onepole_tilde_01_a0 = 0;
                onepole_tilde_01_b1 = 0;
                onepole_tilde_01_setupDone = false;
                lores_01_setupDone = false;
                delaytilde_01_lastDelay = -1;
                delaytilde_01_crossfadeDelay = 0;
                delaytilde_01_ramp = 0;
                delaytilde_01_rampInSamples = 0;
                delaytilde_01_del__maxdelay = 0;
                delaytilde_01_del_sizemode = 0;
                delaytilde_01_del_wrap = 0;
                delaytilde_01_del_reader = 0;
                delaytilde_01_del_writer = 0;
                delaytilde_01_setupDone = false;
                feedbacktilde_01_feedbackbuffer = nullptr;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_09_x;
                number allpass_tilde_09_delayTime;
                number allpass_tilde_09_gain;
                number dspexpr_12_in1;
                number dspexpr_12_in2;
                number comb_tilde_08_x;
                number comb_tilde_08_delayTime;
                number comb_tilde_08_gain;
                number comb_tilde_08_ffGain;
                number comb_tilde_08_fbGain;
                number dspexpr_13_in1;
                number dspexpr_13_in2;
                number dspexpr_14_in1;
                number dspexpr_14_in2;
                number dspexpr_15_in1;
                number dspexpr_15_in2;
                number allpass_tilde_10_x;
                number allpass_tilde_10_delayTime;
                number allpass_tilde_10_gain;
                number onepole_tilde_01_x;
                number onepole_tilde_01_freqInHz;
                number dspexpr_16_in1;
                number dspexpr_16_in2;
                number lores_01_cutoff;
                number lores_01_resonance;
                number dspexpr_17_in1;
                number dspexpr_17_in2;
                number delaytilde_01_delay;
                number mstosamps_tilde_01_ms;
                number dspexpr_18_in1;
                number dspexpr_18_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_09_feedForward_buffer;
                Index allpass_tilde_09_feedForward__maxdelay;
                Int allpass_tilde_09_feedForward_sizemode;
                Index allpass_tilde_09_feedForward_wrap;
                Int allpass_tilde_09_feedForward_reader;
                Int allpass_tilde_09_feedForward_writer;
                Float64BufferRef allpass_tilde_09_feedBack_buffer;
                Index allpass_tilde_09_feedBack__maxdelay;
                Int allpass_tilde_09_feedBack_sizemode;
                Index allpass_tilde_09_feedBack_wrap;
                Int allpass_tilde_09_feedBack_reader;
                Int allpass_tilde_09_feedBack_writer;
                bool allpass_tilde_09_setupDone;
                Float64BufferRef comb_tilde_08_feedForward_buffer;
                Index comb_tilde_08_feedForward__maxdelay;
                Int comb_tilde_08_feedForward_sizemode;
                Index comb_tilde_08_feedForward_wrap;
                Int comb_tilde_08_feedForward_reader;
                Int comb_tilde_08_feedForward_writer;
                Float64BufferRef comb_tilde_08_feedBack_buffer;
                Index comb_tilde_08_feedBack__maxdelay;
                Int comb_tilde_08_feedBack_sizemode;
                Index comb_tilde_08_feedBack_wrap;
                Int comb_tilde_08_feedBack_reader;
                Int comb_tilde_08_feedBack_writer;
                bool comb_tilde_08_setupDone;
                Float64BufferRef allpass_tilde_10_feedForward_buffer;
                Index allpass_tilde_10_feedForward__maxdelay;
                Int allpass_tilde_10_feedForward_sizemode;
                Index allpass_tilde_10_feedForward_wrap;
                Int allpass_tilde_10_feedForward_reader;
                Int allpass_tilde_10_feedForward_writer;
                Float64BufferRef allpass_tilde_10_feedBack_buffer;
                Index allpass_tilde_10_feedBack__maxdelay;
                Int allpass_tilde_10_feedBack_sizemode;
                Index allpass_tilde_10_feedBack_wrap;
                Int allpass_tilde_10_feedBack_reader;
                Int allpass_tilde_10_feedBack_writer;
                bool allpass_tilde_10_setupDone;
                number onepole_tilde_01_freq;
                bool onepole_tilde_01_needsUpdate;
                number onepole_tilde_01_lastY;
                number onepole_tilde_01_a0;
                number onepole_tilde_01_b1;
                bool onepole_tilde_01_setupDone;
                number lores_01_b_0;
                number lores_01_a_1;
                number lores_01_a_2;
                number lores_01_x_0;
                number lores_01_y_1;
                number lores_01_y_2;
                number lores_01_last_resonance;
                number lores_01_last_frequency;
                number lores_01_last_res_calc;
                number lores_01_last_freq_calc;
                bool lores_01_setupDone;
                UInt noise_tilde_01_state[4] = { };
                number delaytilde_01_lastDelay;
                number delaytilde_01_crossfadeDelay;
                number delaytilde_01_ramp;
                long delaytilde_01_rampInSamples;
                Float64BufferRef delaytilde_01_del_buffer;
                Index delaytilde_01_del__maxdelay;
                Int delaytilde_01_del_sizemode;
                Index delaytilde_01_del_wrap;
                Int delaytilde_01_del_reader;
                Int delaytilde_01_del_writer;
                bool delaytilde_01_setupDone;
                signal feedbacktilde_01_feedbackbuffer;
                number stackprotect_count;
                DataRef allpass_tilde_09_feedForward_bufferobj;
                DataRef allpass_tilde_09_feedBack_bufferobj;
                DataRef comb_tilde_08_feedForward_bufferobj;
                DataRef comb_tilde_08_feedBack_bufferobj;
                DataRef allpass_tilde_10_feedForward_bufferobj;
                DataRef allpass_tilde_10_feedBack_bufferobj;
                DataRef delaytilde_01_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_154 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_176;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_154()
            {
            }
            
            ~RNBOSubpatcher_154()
            {
            }
            
            virtual RNBOSubpatcher_176* getPatcher() const {
                return static_cast<RNBOSubpatcher_176 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Damp = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->stackprotect_perform(n);
                this->signalreceive_08_perform(target_Damp, this->signals[0], n);
                this->onepole_tilde_03_perform(in2, this->signals[0], out2, n);
                this->onepole_tilde_02_perform(in1, this->signals[0], out1, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->onepole_tilde_03_dspsetup(forceDSPSetup);
                this->onepole_tilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 1;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_08_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void onepole_tilde_03_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_03_lastY = this->onepole_tilde_03_lastY;
                auto __onepole_tilde_03_b1 = this->onepole_tilde_03_b1;
                auto __onepole_tilde_03_a0 = this->onepole_tilde_03_a0;
                auto __onepole_tilde_03_needsUpdate = this->onepole_tilde_03_needsUpdate;
                auto __onepole_tilde_03_freq = this->onepole_tilde_03_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_03_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_03_needsUpdate)) {
                        __onepole_tilde_03_freq = freqInHz[(Index)i];
                        __onepole_tilde_03_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_03_a0 = (__onepole_tilde_03_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_03_a0 < 0.00001 ? 0.00001 : __onepole_tilde_03_a0));
                        __onepole_tilde_03_b1 = 1 - __onepole_tilde_03_a0;
                        __onepole_tilde_03_needsUpdate = false;
                    }
            
                    __onepole_tilde_03_lastY = __onepole_tilde_03_a0 * x[(Index)i] + __onepole_tilde_03_b1 * __onepole_tilde_03_lastY;
                    out1[(Index)i] = __onepole_tilde_03_lastY;
                }
            
                this->onepole_tilde_03_freq = __onepole_tilde_03_freq;
                this->onepole_tilde_03_needsUpdate = __onepole_tilde_03_needsUpdate;
                this->onepole_tilde_03_a0 = __onepole_tilde_03_a0;
                this->onepole_tilde_03_b1 = __onepole_tilde_03_b1;
                this->onepole_tilde_03_lastY = __onepole_tilde_03_lastY;
            }
            
            void onepole_tilde_02_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_02_lastY = this->onepole_tilde_02_lastY;
                auto __onepole_tilde_02_b1 = this->onepole_tilde_02_b1;
                auto __onepole_tilde_02_a0 = this->onepole_tilde_02_a0;
                auto __onepole_tilde_02_needsUpdate = this->onepole_tilde_02_needsUpdate;
                auto __onepole_tilde_02_freq = this->onepole_tilde_02_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_02_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_02_needsUpdate)) {
                        __onepole_tilde_02_freq = freqInHz[(Index)i];
                        __onepole_tilde_02_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_02_a0 = (__onepole_tilde_02_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_02_a0 < 0.00001 ? 0.00001 : __onepole_tilde_02_a0));
                        __onepole_tilde_02_b1 = 1 - __onepole_tilde_02_a0;
                        __onepole_tilde_02_needsUpdate = false;
                    }
            
                    __onepole_tilde_02_lastY = __onepole_tilde_02_a0 * x[(Index)i] + __onepole_tilde_02_b1 * __onepole_tilde_02_lastY;
                    out1[(Index)i] = __onepole_tilde_02_lastY;
                }
            
                this->onepole_tilde_02_freq = __onepole_tilde_02_freq;
                this->onepole_tilde_02_needsUpdate = __onepole_tilde_02_needsUpdate;
                this->onepole_tilde_02_a0 = __onepole_tilde_02_a0;
                this->onepole_tilde_02_b1 = __onepole_tilde_02_b1;
                this->onepole_tilde_02_lastY = __onepole_tilde_02_lastY;
            }
            
            void onepole_tilde_02_reset() {
                this->onepole_tilde_02_lastY = 0;
                this->onepole_tilde_02_a0 = 0;
                this->onepole_tilde_02_b1 = 0;
            }
            
            void onepole_tilde_02_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_02_needsUpdate = true;
                this->onepole_tilde_02_reset();
                this->onepole_tilde_02_setupDone = true;
            }
            
            void onepole_tilde_03_reset() {
                this->onepole_tilde_03_lastY = 0;
                this->onepole_tilde_03_a0 = 0;
                this->onepole_tilde_03_b1 = 0;
            }
            
            void onepole_tilde_03_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_03_needsUpdate = true;
                this->onepole_tilde_03_reset();
                this->onepole_tilde_03_setupDone = true;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                onepole_tilde_02_x = 0;
                onepole_tilde_02_freqInHz = 1800;
                onepole_tilde_03_x = 0;
                onepole_tilde_03_freqInHz = 1800;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                onepole_tilde_02_freq = 0;
                onepole_tilde_02_needsUpdate = false;
                onepole_tilde_02_lastY = 0;
                onepole_tilde_02_a0 = 0;
                onepole_tilde_02_b1 = 0;
                onepole_tilde_02_setupDone = false;
                onepole_tilde_03_freq = 0;
                onepole_tilde_03_needsUpdate = false;
                onepole_tilde_03_lastY = 0;
                onepole_tilde_03_a0 = 0;
                onepole_tilde_03_b1 = 0;
                onepole_tilde_03_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number onepole_tilde_02_x;
                number onepole_tilde_02_freqInHz;
                number onepole_tilde_03_x;
                number onepole_tilde_03_freqInHz;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number onepole_tilde_02_freq;
                bool onepole_tilde_02_needsUpdate;
                number onepole_tilde_02_lastY;
                number onepole_tilde_02_a0;
                number onepole_tilde_02_b1;
                bool onepole_tilde_02_setupDone;
                number onepole_tilde_03_freq;
                bool onepole_tilde_03_needsUpdate;
                number onepole_tilde_03_lastY;
                number onepole_tilde_03_a0;
                number onepole_tilde_03_b1;
                bool onepole_tilde_03_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_155 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_176;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_155()
            {
            }
            
            ~RNBOSubpatcher_155()
            {
            }
            
            virtual RNBOSubpatcher_176* getPatcher() const {
                return static_cast<RNBOSubpatcher_176 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Size = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * target_Decay = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * target_Jitter = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * target_Damp = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->noise_tilde_02_perform(this->signals[0], n);
            
                this->lores_02_perform(
                    this->lores_02_cutoff,
                    this->lores_02_resonance,
                    this->signals[0],
                    this->signals[1],
                    n
                );
            
                this->feedbackreader_02_perform(this->signals[0], n);
                this->stackprotect_perform(n);
                this->signalreceive_09_perform(target_Size, this->signals[2], n);
                this->dspexpr_21_perform(this->signals[2], this->dspexpr_21_in2, this->signals[3], n);
                this->dspexpr_19_perform(this->signals[2], this->dspexpr_19_in2, this->signals[4], n);
                this->signaladder_20_perform(in1, this->signals[0], this->signals[0], n);
                this->allpass_tilde_11_perform(this->signals[0], this->signals[4], this->allpass_tilde_11_gain, out1, n);
                this->signalreceive_13_perform(target_Size, this->signals[4], n);
                this->dspexpr_25_perform(this->signals[4], this->dspexpr_25_in2, this->signals[2], n);
                this->mstosamps_tilde_02_perform(this->signals[2], this->signals[5], n);
                this->dspexpr_24_perform(this->signals[4], this->dspexpr_24_in2, this->signals[2], n);
                this->signalreceive_10_perform(target_Decay, this->signals[4], n);
                this->signalreceive_11_perform(target_Jitter, this->signals[6], n);
                this->dspexpr_23_perform(this->signals[1], this->signals[6], this->signals[7], n);
                this->dspexpr_20_perform(this->signals[3], this->signals[7], this->signals[6], n);
            
                this->comb_tilde_09_perform(
                    out1,
                    this->signals[6],
                    this->comb_tilde_09_gain,
                    this->comb_tilde_09_ffGain,
                    this->comb_tilde_09_fbGain,
                    this->signals[7],
                    n
                );
            
                this->signalforwarder_22_perform(this->signals[7], out2, n);
                this->signalreceive_12_perform(target_Damp, this->signals[6], n);
                this->onepole_tilde_04_perform(this->signals[7], this->signals[6], this->signals[3], n);
                this->dspexpr_22_perform(this->signals[3], this->signals[4], this->signals[6], n);
            
                this->allpass_tilde_12_perform(
                    this->signals[6],
                    this->signals[2],
                    this->allpass_tilde_12_gain,
                    this->signals[4],
                    n
                );
            
                this->delaytilde_02_perform(this->signals[5], this->signals[4], out4, n);
                this->feedbackwriter_02_perform(out4, n);
                this->signalforwarder_23_perform(this->signals[4], out3, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->feedbacktilde_02_feedbackbuffer = resizeSignal(this->feedbacktilde_02_feedbackbuffer, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->lores_02_dspsetup(forceDSPSetup);
                this->allpass_tilde_11_dspsetup(forceDSPSetup);
                this->comb_tilde_09_dspsetup(forceDSPSetup);
                this->onepole_tilde_04_dspsetup(forceDSPSetup);
                this->allpass_tilde_12_dspsetup(forceDSPSetup);
                this->delaytilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 4;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->allpass_tilde_11_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->allpass_tilde_11_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->comb_tilde_09_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->comb_tilde_09_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->allpass_tilde_12_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->allpass_tilde_12_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->delaytilde_02_del_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 7;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->allpass_tilde_11_feedForward_buffer = new Float64Buffer(this->allpass_tilde_11_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->allpass_tilde_11_feedBack_buffer = new Float64Buffer(this->allpass_tilde_11_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->allpass_tilde_12_feedForward_buffer = new Float64Buffer(this->allpass_tilde_12_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_12_feedBack_buffer = new Float64Buffer(this->allpass_tilde_12_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_11_feedForward_bufferobj = initDataRef("allpass_tilde_11_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_11_feedBack_bufferobj = initDataRef("allpass_tilde_11_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_09_feedForward_bufferobj = initDataRef("comb_tilde_09_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_09_feedBack_bufferobj = initDataRef("comb_tilde_09_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_12_feedForward_bufferobj = initDataRef("allpass_tilde_12_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_12_feedBack_bufferobj = initDataRef("allpass_tilde_12_feedBack_bufferobj", true, nullptr, "buffer~");
                this->delaytilde_02_del_bufferobj = initDataRef("delaytilde_02_del_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_11_feedForward_bufferobj->setIndex(4);
                this->allpass_tilde_11_feedForward_buffer = new Float64Buffer(this->allpass_tilde_11_feedForward_bufferobj);
                this->allpass_tilde_11_feedBack_bufferobj->setIndex(5);
                this->allpass_tilde_11_feedBack_buffer = new Float64Buffer(this->allpass_tilde_11_feedBack_bufferobj);
                this->comb_tilde_09_feedForward_bufferobj->setIndex(6);
                this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                this->comb_tilde_09_feedBack_bufferobj->setIndex(7);
                this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                this->allpass_tilde_12_feedForward_bufferobj->setIndex(8);
                this->allpass_tilde_12_feedForward_buffer = new Float64Buffer(this->allpass_tilde_12_feedForward_bufferobj);
                this->allpass_tilde_12_feedBack_bufferobj->setIndex(9);
                this->allpass_tilde_12_feedBack_buffer = new Float64Buffer(this->allpass_tilde_12_feedBack_bufferobj);
                this->delaytilde_02_del_bufferobj->setIndex(10);
                this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 4;
            }
            
            void initializeObjects() {
                this->allpass_tilde_11_feedForward_init();
                this->allpass_tilde_11_feedBack_init();
                this->allpass_tilde_11_init();
                this->comb_tilde_09_feedForward_init();
                this->comb_tilde_09_feedBack_init();
                this->comb_tilde_09_init();
                this->allpass_tilde_12_feedForward_init();
                this->allpass_tilde_12_feedBack_init();
                this->allpass_tilde_12_init();
                this->noise_tilde_02_init();
                this->delaytilde_02_del_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_11_feedForward_buffer = this->allpass_tilde_11_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_11_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_11_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->allpass_tilde_11_feedBack_buffer = this->allpass_tilde_11_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_11_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_11_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_09_feedForward_buffer = this->comb_tilde_09_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_09_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_09_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_09_feedBack_buffer = this->comb_tilde_09_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_09_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_09_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->allpass_tilde_12_feedForward_buffer = this->allpass_tilde_12_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_12_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_12_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_12_feedBack_buffer = this->allpass_tilde_12_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_12_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_12_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->delaytilde_02_del_buffer = this->delaytilde_02_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_02_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_02_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_02_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            }
            
            void noise_tilde_02_perform(SampleValue * out1, Index n) {
                auto __noise_tilde_02_state = this->noise_tilde_02_state;
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = xoshiro_next(__noise_tilde_02_state);
                }
            }
            
            void lores_02_perform(
                number cutoff,
                number resonance,
                const SampleValue * input,
                SampleValue * out,
                Index n
            ) {
                RNBO_UNUSED(resonance);
                RNBO_UNUSED(cutoff);
                auto __lores_02_y_2 = this->lores_02_y_2;
                auto __lores_02_y_1 = this->lores_02_y_1;
                auto __lores_02_x_0 = this->lores_02_x_0;
                auto __lores_02_b_0 = this->lores_02_b_0;
                auto __lores_02_a_1 = this->lores_02_a_1;
                auto __lores_02_a_2 = this->lores_02_a_2;
                auto __lores_02_last_freq_calc = this->lores_02_last_freq_calc;
                auto __lores_02_last_res_calc = this->lores_02_last_res_calc;
                auto __lores_02_last_frequency = this->lores_02_last_frequency;
                auto __lores_02_last_resonance = this->lores_02_last_resonance;
            
                for (Index i = 0; i < n; i++) {
                    if (0.995 != __lores_02_last_resonance || 0 != __lores_02_last_frequency) {
                        __lores_02_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                        __lores_02_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                        __lores_02_last_resonance = 0.995;
                        __lores_02_last_frequency = 0;
                    }
            
                    number res_temp = __lores_02_last_res_calc;
                    number freq_temp = __lores_02_last_freq_calc;
                    __lores_02_a_2 = res_temp * res_temp;
                    __lores_02_a_1 = -2.0 * res_temp * freq_temp;
                    __lores_02_b_0 = 1.0 + __lores_02_a_1 + __lores_02_a_2;
                    __lores_02_x_0 = input[(Index)i];
                    number y_0 = __lores_02_x_0 * __lores_02_b_0 - __lores_02_y_1 * __lores_02_a_1 - __lores_02_y_2 * __lores_02_a_2;
                    __lores_02_y_2 = __lores_02_y_1;
                    __lores_02_y_1 = y_0;
                    out[(Index)i] = y_0;
                }
            
                this->lores_02_last_resonance = __lores_02_last_resonance;
                this->lores_02_last_frequency = __lores_02_last_frequency;
                this->lores_02_last_res_calc = __lores_02_last_res_calc;
                this->lores_02_last_freq_calc = __lores_02_last_freq_calc;
                this->lores_02_a_2 = __lores_02_a_2;
                this->lores_02_a_1 = __lores_02_a_1;
                this->lores_02_b_0 = __lores_02_b_0;
                this->lores_02_x_0 = __lores_02_x_0;
                this->lores_02_y_1 = __lores_02_y_1;
                this->lores_02_y_2 = __lores_02_y_2;
            }
            
            void feedbackreader_02_perform(SampleValue * output, Index n) {
                auto& buffer = this->feedbacktilde_02_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = buffer[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_09_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_21_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 141.7;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_19_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 30.51;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_20_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                }
            }
            
            void allpass_tilde_11_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = -0.7;
                    auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_11_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_11_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_11_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_11_feedBack_write(ov);
                    this->allpass_tilde_11_feedForward_step();
                    this->allpass_tilde_11_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signalreceive_13_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_25_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 106.28;//#map:_###_obj_###_:1
                }
            }
            
            void mstosamps_tilde_02_perform(const Sample * ms, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
                }
            }
            
            void dspexpr_24_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 89.24;//#map:_###_obj_###_:1
                }
            }
            
            void signalreceive_10_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void signalreceive_11_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_23_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_20_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_09_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_09_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_09_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_09_feedForward_write(x[(Index)i]);
                    this->comb_tilde_09_feedBack_write(ov);
                    this->comb_tilde_09_feedForward_step();
                    this->comb_tilde_09_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signalforwarder_22_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalreceive_12_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void onepole_tilde_04_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_04_lastY = this->onepole_tilde_04_lastY;
                auto __onepole_tilde_04_b1 = this->onepole_tilde_04_b1;
                auto __onepole_tilde_04_a0 = this->onepole_tilde_04_a0;
                auto __onepole_tilde_04_needsUpdate = this->onepole_tilde_04_needsUpdate;
                auto __onepole_tilde_04_freq = this->onepole_tilde_04_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_04_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_04_needsUpdate)) {
                        __onepole_tilde_04_freq = freqInHz[(Index)i];
                        __onepole_tilde_04_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_04_a0 = (__onepole_tilde_04_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_04_a0 < 0.00001 ? 0.00001 : __onepole_tilde_04_a0));
                        __onepole_tilde_04_b1 = 1 - __onepole_tilde_04_a0;
                        __onepole_tilde_04_needsUpdate = false;
                    }
            
                    __onepole_tilde_04_lastY = __onepole_tilde_04_a0 * x[(Index)i] + __onepole_tilde_04_b1 * __onepole_tilde_04_lastY;
                    out1[(Index)i] = __onepole_tilde_04_lastY;
                }
            
                this->onepole_tilde_04_freq = __onepole_tilde_04_freq;
                this->onepole_tilde_04_needsUpdate = __onepole_tilde_04_needsUpdate;
                this->onepole_tilde_04_a0 = __onepole_tilde_04_a0;
                this->onepole_tilde_04_b1 = __onepole_tilde_04_b1;
                this->onepole_tilde_04_lastY = __onepole_tilde_04_lastY;
            }
            
            void dspexpr_22_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void allpass_tilde_12_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.5;
                    auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_12_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_12_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_12_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_12_feedBack_write(ov);
                    this->allpass_tilde_12_feedForward_step();
                    this->allpass_tilde_12_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void delaytilde_02_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_02_crossfadeDelay = this->delaytilde_02_crossfadeDelay;
                auto __delaytilde_02_rampInSamples = this->delaytilde_02_rampInSamples;
                auto __delaytilde_02_ramp = this->delaytilde_02_ramp;
                auto __delaytilde_02_lastDelay = this->delaytilde_02_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_02_lastDelay == -1) {
                        __delaytilde_02_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_02_ramp > 0) {
                        number factor = __delaytilde_02_ramp / __delaytilde_02_rampInSamples;
                        output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0) * factor + this->delaytilde_02_del_read(__delaytilde_02_lastDelay, 0) * (1. - factor);
                        __delaytilde_02_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_02_lastDelay) {
                            __delaytilde_02_ramp = __delaytilde_02_rampInSamples;
                            __delaytilde_02_crossfadeDelay = __delaytilde_02_lastDelay;
                            __delaytilde_02_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0);
                            __delaytilde_02_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_02_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_02_del_write(input[(Index)i]);
                    this->delaytilde_02_del_step();
                }
            
                this->delaytilde_02_lastDelay = __delaytilde_02_lastDelay;
                this->delaytilde_02_ramp = __delaytilde_02_ramp;
                this->delaytilde_02_crossfadeDelay = __delaytilde_02_crossfadeDelay;
            }
            
            void feedbackwriter_02_perform(const SampleValue * input, Index n) {
                auto& buffer = this->feedbacktilde_02_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    buffer[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_23_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void lores_02_resonance_setter(number v) {
                if (v < 0.0) {
                    v = 0.0;
                } else if (v >= 1.0) {
                    v = 1.0 - 1E-20;
                }
            
                this->lores_02_resonance = v;
            }
            
            void allpass_tilde_11_feedForward_step() {
                this->allpass_tilde_11_feedForward_reader++;
            
                if (this->allpass_tilde_11_feedForward_reader >= (int)(this->allpass_tilde_11_feedForward_buffer->getSize()))
                    this->allpass_tilde_11_feedForward_reader = 0;
            }
            
            number allpass_tilde_11_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_11_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                );
            }
            
            void allpass_tilde_11_feedForward_write(number v) {
                this->allpass_tilde_11_feedForward_writer = this->allpass_tilde_11_feedForward_reader;
                this->allpass_tilde_11_feedForward_buffer[(Index)this->allpass_tilde_11_feedForward_writer] = v;
            }
            
            number allpass_tilde_11_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_11_feedForward__maxdelay : size);
                number val = this->allpass_tilde_11_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_11_feedForward_write(v);
                this->allpass_tilde_11_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_11_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_11_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_11_feedForward_init() {
                auto result = this->allpass_tilde_11_feedForward_calcSizeInSamples();
                this->allpass_tilde_11_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_11_feedForward_clear() {
                this->allpass_tilde_11_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_11_feedForward_reset() {
                auto result = this->allpass_tilde_11_feedForward_calcSizeInSamples();
                this->allpass_tilde_11_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_11_feedForward_buffer);
                this->allpass_tilde_11_feedForward_wrap = this->allpass_tilde_11_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_11_feedForward_clear();
            
                if (this->allpass_tilde_11_feedForward_reader >= this->allpass_tilde_11_feedForward__maxdelay || this->allpass_tilde_11_feedForward_writer >= this->allpass_tilde_11_feedForward__maxdelay) {
                    this->allpass_tilde_11_feedForward_reader = 0;
                    this->allpass_tilde_11_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_11_feedForward_dspsetup() {
                this->allpass_tilde_11_feedForward_reset();
            }
            
            number allpass_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_11_feedForward_size() {
                return this->allpass_tilde_11_feedForward__maxdelay;
            }
            
            void allpass_tilde_11_feedBack_step() {
                this->allpass_tilde_11_feedBack_reader++;
            
                if (this->allpass_tilde_11_feedBack_reader >= (int)(this->allpass_tilde_11_feedBack_buffer->getSize()))
                    this->allpass_tilde_11_feedBack_reader = 0;
            }
            
            number allpass_tilde_11_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_11_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                );
            }
            
            void allpass_tilde_11_feedBack_write(number v) {
                this->allpass_tilde_11_feedBack_writer = this->allpass_tilde_11_feedBack_reader;
                this->allpass_tilde_11_feedBack_buffer[(Index)this->allpass_tilde_11_feedBack_writer] = v;
            }
            
            number allpass_tilde_11_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_11_feedBack__maxdelay : size);
                number val = this->allpass_tilde_11_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_11_feedBack_write(v);
                this->allpass_tilde_11_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_11_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_11_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_11_feedBack_init() {
                auto result = this->allpass_tilde_11_feedBack_calcSizeInSamples();
                this->allpass_tilde_11_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_11_feedBack_clear() {
                this->allpass_tilde_11_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_11_feedBack_reset() {
                auto result = this->allpass_tilde_11_feedBack_calcSizeInSamples();
                this->allpass_tilde_11_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_11_feedBack_buffer);
                this->allpass_tilde_11_feedBack_wrap = this->allpass_tilde_11_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_11_feedBack_clear();
            
                if (this->allpass_tilde_11_feedBack_reader >= this->allpass_tilde_11_feedBack__maxdelay || this->allpass_tilde_11_feedBack_writer >= this->allpass_tilde_11_feedBack__maxdelay) {
                    this->allpass_tilde_11_feedBack_reader = 0;
                    this->allpass_tilde_11_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_11_feedBack_dspsetup() {
                this->allpass_tilde_11_feedBack_reset();
            }
            
            number allpass_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_11_feedBack_size() {
                return this->allpass_tilde_11_feedBack__maxdelay;
            }
            
            void allpass_tilde_11_init() {
                this->allpass_tilde_11_feedForward_init();
                this->allpass_tilde_11_feedBack_init();
            }
            
            void allpass_tilde_11_clear() {
                this->allpass_tilde_11_feedForward_clear();
                this->allpass_tilde_11_feedBack_clear();
            }
            
            void allpass_tilde_11_reset() {
                this->allpass_tilde_11_init();
                this->allpass_tilde_11_clear();
            }
            
            void allpass_tilde_11_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_11_reset();
                this->allpass_tilde_11_setupDone = true;
                this->allpass_tilde_11_feedForward_dspsetup();
                this->allpass_tilde_11_feedBack_dspsetup();
            }
            
            void comb_tilde_09_feedForward_step() {
                this->comb_tilde_09_feedForward_reader++;
            
                if (this->comb_tilde_09_feedForward_reader >= (int)(this->comb_tilde_09_feedForward_buffer->getSize()))
                    this->comb_tilde_09_feedForward_reader = 0;
            }
            
            number comb_tilde_09_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_09_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                );
            }
            
            void comb_tilde_09_feedForward_write(number v) {
                this->comb_tilde_09_feedForward_writer = this->comb_tilde_09_feedForward_reader;
                this->comb_tilde_09_feedForward_buffer[(Index)this->comb_tilde_09_feedForward_writer] = v;
            }
            
            number comb_tilde_09_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_09_feedForward__maxdelay : size);
                number val = this->comb_tilde_09_feedForward_read(effectiveSize, 0);
                this->comb_tilde_09_feedForward_write(v);
                this->comb_tilde_09_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_09_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_09_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_09_feedForward_init() {
                auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                this->comb_tilde_09_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_09_feedForward_clear() {
                this->comb_tilde_09_feedForward_buffer->setZero();
            }
            
            void comb_tilde_09_feedForward_reset() {
                auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                this->comb_tilde_09_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_09_feedForward_buffer);
                this->comb_tilde_09_feedForward_wrap = this->comb_tilde_09_feedForward_buffer->getSize() - 1;
                this->comb_tilde_09_feedForward_clear();
            
                if (this->comb_tilde_09_feedForward_reader >= this->comb_tilde_09_feedForward__maxdelay || this->comb_tilde_09_feedForward_writer >= this->comb_tilde_09_feedForward__maxdelay) {
                    this->comb_tilde_09_feedForward_reader = 0;
                    this->comb_tilde_09_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_09_feedForward_dspsetup() {
                this->comb_tilde_09_feedForward_reset();
            }
            
            number comb_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_09_feedForward_size() {
                return this->comb_tilde_09_feedForward__maxdelay;
            }
            
            void comb_tilde_09_feedBack_step() {
                this->comb_tilde_09_feedBack_reader++;
            
                if (this->comb_tilde_09_feedBack_reader >= (int)(this->comb_tilde_09_feedBack_buffer->getSize()))
                    this->comb_tilde_09_feedBack_reader = 0;
            }
            
            number comb_tilde_09_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_09_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                );
            }
            
            void comb_tilde_09_feedBack_write(number v) {
                this->comb_tilde_09_feedBack_writer = this->comb_tilde_09_feedBack_reader;
                this->comb_tilde_09_feedBack_buffer[(Index)this->comb_tilde_09_feedBack_writer] = v;
            }
            
            number comb_tilde_09_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_09_feedBack__maxdelay : size);
                number val = this->comb_tilde_09_feedBack_read(effectiveSize, 0);
                this->comb_tilde_09_feedBack_write(v);
                this->comb_tilde_09_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_09_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_09_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_09_feedBack_init() {
                auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                this->comb_tilde_09_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_09_feedBack_clear() {
                this->comb_tilde_09_feedBack_buffer->setZero();
            }
            
            void comb_tilde_09_feedBack_reset() {
                auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                this->comb_tilde_09_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_09_feedBack_buffer);
                this->comb_tilde_09_feedBack_wrap = this->comb_tilde_09_feedBack_buffer->getSize() - 1;
                this->comb_tilde_09_feedBack_clear();
            
                if (this->comb_tilde_09_feedBack_reader >= this->comb_tilde_09_feedBack__maxdelay || this->comb_tilde_09_feedBack_writer >= this->comb_tilde_09_feedBack__maxdelay) {
                    this->comb_tilde_09_feedBack_reader = 0;
                    this->comb_tilde_09_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_09_feedBack_dspsetup() {
                this->comb_tilde_09_feedBack_reset();
            }
            
            number comb_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_09_feedBack_size() {
                return this->comb_tilde_09_feedBack__maxdelay;
            }
            
            void comb_tilde_09_init() {
                this->comb_tilde_09_feedForward_init();
                this->comb_tilde_09_feedBack_init();
            }
            
            void comb_tilde_09_clear() {
                this->comb_tilde_09_feedForward_clear();
                this->comb_tilde_09_feedBack_clear();
            }
            
            void comb_tilde_09_reset() {
                this->comb_tilde_09_init();
                this->comb_tilde_09_clear();
            }
            
            void comb_tilde_09_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_09_reset();
                this->comb_tilde_09_setupDone = true;
                this->comb_tilde_09_feedForward_dspsetup();
                this->comb_tilde_09_feedBack_dspsetup();
            }
            
            void allpass_tilde_12_feedForward_step() {
                this->allpass_tilde_12_feedForward_reader++;
            
                if (this->allpass_tilde_12_feedForward_reader >= (int)(this->allpass_tilde_12_feedForward_buffer->getSize()))
                    this->allpass_tilde_12_feedForward_reader = 0;
            }
            
            number allpass_tilde_12_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_12_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                );
            }
            
            void allpass_tilde_12_feedForward_write(number v) {
                this->allpass_tilde_12_feedForward_writer = this->allpass_tilde_12_feedForward_reader;
                this->allpass_tilde_12_feedForward_buffer[(Index)this->allpass_tilde_12_feedForward_writer] = v;
            }
            
            number allpass_tilde_12_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_12_feedForward__maxdelay : size);
                number val = this->allpass_tilde_12_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_12_feedForward_write(v);
                this->allpass_tilde_12_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_12_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_12_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_12_feedForward_init() {
                auto result = this->allpass_tilde_12_feedForward_calcSizeInSamples();
                this->allpass_tilde_12_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_12_feedForward_clear() {
                this->allpass_tilde_12_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_12_feedForward_reset() {
                auto result = this->allpass_tilde_12_feedForward_calcSizeInSamples();
                this->allpass_tilde_12_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_12_feedForward_buffer);
                this->allpass_tilde_12_feedForward_wrap = this->allpass_tilde_12_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_12_feedForward_clear();
            
                if (this->allpass_tilde_12_feedForward_reader >= this->allpass_tilde_12_feedForward__maxdelay || this->allpass_tilde_12_feedForward_writer >= this->allpass_tilde_12_feedForward__maxdelay) {
                    this->allpass_tilde_12_feedForward_reader = 0;
                    this->allpass_tilde_12_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_12_feedForward_dspsetup() {
                this->allpass_tilde_12_feedForward_reset();
            }
            
            number allpass_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_12_feedForward_size() {
                return this->allpass_tilde_12_feedForward__maxdelay;
            }
            
            void allpass_tilde_12_feedBack_step() {
                this->allpass_tilde_12_feedBack_reader++;
            
                if (this->allpass_tilde_12_feedBack_reader >= (int)(this->allpass_tilde_12_feedBack_buffer->getSize()))
                    this->allpass_tilde_12_feedBack_reader = 0;
            }
            
            number allpass_tilde_12_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_12_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                );
            }
            
            void allpass_tilde_12_feedBack_write(number v) {
                this->allpass_tilde_12_feedBack_writer = this->allpass_tilde_12_feedBack_reader;
                this->allpass_tilde_12_feedBack_buffer[(Index)this->allpass_tilde_12_feedBack_writer] = v;
            }
            
            number allpass_tilde_12_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_12_feedBack__maxdelay : size);
                number val = this->allpass_tilde_12_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_12_feedBack_write(v);
                this->allpass_tilde_12_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_12_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_12_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_12_feedBack_init() {
                auto result = this->allpass_tilde_12_feedBack_calcSizeInSamples();
                this->allpass_tilde_12_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_12_feedBack_clear() {
                this->allpass_tilde_12_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_12_feedBack_reset() {
                auto result = this->allpass_tilde_12_feedBack_calcSizeInSamples();
                this->allpass_tilde_12_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_12_feedBack_buffer);
                this->allpass_tilde_12_feedBack_wrap = this->allpass_tilde_12_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_12_feedBack_clear();
            
                if (this->allpass_tilde_12_feedBack_reader >= this->allpass_tilde_12_feedBack__maxdelay || this->allpass_tilde_12_feedBack_writer >= this->allpass_tilde_12_feedBack__maxdelay) {
                    this->allpass_tilde_12_feedBack_reader = 0;
                    this->allpass_tilde_12_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_12_feedBack_dspsetup() {
                this->allpass_tilde_12_feedBack_reset();
            }
            
            number allpass_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_12_feedBack_size() {
                return this->allpass_tilde_12_feedBack__maxdelay;
            }
            
            void allpass_tilde_12_init() {
                this->allpass_tilde_12_feedForward_init();
                this->allpass_tilde_12_feedBack_init();
            }
            
            void allpass_tilde_12_clear() {
                this->allpass_tilde_12_feedForward_clear();
                this->allpass_tilde_12_feedBack_clear();
            }
            
            void allpass_tilde_12_reset() {
                this->allpass_tilde_12_init();
                this->allpass_tilde_12_clear();
            }
            
            void allpass_tilde_12_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_12_reset();
                this->allpass_tilde_12_setupDone = true;
                this->allpass_tilde_12_feedForward_dspsetup();
                this->allpass_tilde_12_feedBack_dspsetup();
            }
            
            void onepole_tilde_04_reset() {
                this->onepole_tilde_04_lastY = 0;
                this->onepole_tilde_04_a0 = 0;
                this->onepole_tilde_04_b1 = 0;
            }
            
            void onepole_tilde_04_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_04_needsUpdate = true;
                this->onepole_tilde_04_reset();
                this->onepole_tilde_04_setupDone = true;
            }
            
            void lores_02_reset() {
                this->lores_02_y_1 = 0;
                this->lores_02_y_2 = 0;
                this->lores_02_last_resonance = 0;
                this->lores_02_last_frequency = 0;
                this->lores_02_last_res_calc = 0;
                this->lores_02_last_freq_calc = 0;
            }
            
            void lores_02_dspsetup(bool force) {
                if ((bool)(this->lores_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->lores_02_reset();
                this->lores_02_setupDone = true;
            }
            
            void noise_tilde_02_init() {
                this->noise_tilde_02_reset();
            }
            
            void noise_tilde_02_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->noise_tilde_02_state
                );
            }
            
            void delaytilde_02_del_step() {
                this->delaytilde_02_del_reader++;
            
                if (this->delaytilde_02_del_reader >= (int)(this->delaytilde_02_del_buffer->getSize()))
                    this->delaytilde_02_del_reader = 0;
            }
            
            number delaytilde_02_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_02_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                );
            }
            
            void delaytilde_02_del_write(number v) {
                this->delaytilde_02_del_writer = this->delaytilde_02_del_reader;
                this->delaytilde_02_del_buffer[(Index)this->delaytilde_02_del_writer] = v;
            }
            
            number delaytilde_02_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_02_del__maxdelay : size);
                number val = this->delaytilde_02_del_read(effectiveSize, 0);
                this->delaytilde_02_del_write(v);
                this->delaytilde_02_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_02_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_02_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_02_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_02_del_init() {
                auto result = this->delaytilde_02_del_calcSizeInSamples();
                this->delaytilde_02_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_02_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_02_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_02_del_clear() {
                this->delaytilde_02_del_buffer->setZero();
            }
            
            void delaytilde_02_del_reset() {
                auto result = this->delaytilde_02_del_calcSizeInSamples();
                this->delaytilde_02_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_02_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_02_del_buffer);
                this->delaytilde_02_del_wrap = this->delaytilde_02_del_buffer->getSize() - 1;
                this->delaytilde_02_del_clear();
            
                if (this->delaytilde_02_del_reader >= this->delaytilde_02_del__maxdelay || this->delaytilde_02_del_writer >= this->delaytilde_02_del__maxdelay) {
                    this->delaytilde_02_del_reader = 0;
                    this->delaytilde_02_del_writer = 0;
                }
            }
            
            void delaytilde_02_del_dspsetup() {
                this->delaytilde_02_del_reset();
            }
            
            number delaytilde_02_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 38400;
            }
            
            number delaytilde_02_del_size() {
                return this->delaytilde_02_del__maxdelay;
            }
            
            void delaytilde_02_dspsetup(bool force) {
                if ((bool)(this->delaytilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_02_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_02_lastDelay = -1;
                this->delaytilde_02_setupDone = true;
                this->delaytilde_02_del_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_11_x = 0;
                allpass_tilde_11_delayTime = 30.51;
                allpass_tilde_11_gain = -0.7;
                dspexpr_19_in1 = 0;
                dspexpr_19_in2 = 30.51;
                comb_tilde_09_x = 0;
                comb_tilde_09_delayTime = 141.7;
                comb_tilde_09_gain = 0;
                comb_tilde_09_ffGain = 1;
                comb_tilde_09_fbGain = 0;
                dspexpr_20_in1 = 0;
                dspexpr_20_in2 = 0;
                dspexpr_21_in1 = 0;
                dspexpr_21_in2 = 141.7;
                dspexpr_22_in1 = 0;
                dspexpr_22_in2 = 0.5;
                allpass_tilde_12_x = 0;
                allpass_tilde_12_delayTime = 89.24;
                allpass_tilde_12_gain = 0.5;
                onepole_tilde_04_x = 0;
                onepole_tilde_04_freqInHz = 1800;
                dspexpr_23_in1 = 0;
                dspexpr_23_in2 = 20;
                lores_02_cutoff = 0;
                lores_02_resonance = 0.995;
                lores_02_resonance_setter(lores_02_resonance);
                dspexpr_24_in1 = 0;
                dspexpr_24_in2 = 89.24;
                delaytilde_02_delay = 0;
                mstosamps_tilde_02_ms = 0;
                dspexpr_25_in1 = 0;
                dspexpr_25_in2 = 106.28;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_11_feedForward__maxdelay = 0;
                allpass_tilde_11_feedForward_sizemode = 0;
                allpass_tilde_11_feedForward_wrap = 0;
                allpass_tilde_11_feedForward_reader = 0;
                allpass_tilde_11_feedForward_writer = 0;
                allpass_tilde_11_feedBack__maxdelay = 0;
                allpass_tilde_11_feedBack_sizemode = 0;
                allpass_tilde_11_feedBack_wrap = 0;
                allpass_tilde_11_feedBack_reader = 0;
                allpass_tilde_11_feedBack_writer = 0;
                allpass_tilde_11_setupDone = false;
                comb_tilde_09_feedForward__maxdelay = 0;
                comb_tilde_09_feedForward_sizemode = 0;
                comb_tilde_09_feedForward_wrap = 0;
                comb_tilde_09_feedForward_reader = 0;
                comb_tilde_09_feedForward_writer = 0;
                comb_tilde_09_feedBack__maxdelay = 0;
                comb_tilde_09_feedBack_sizemode = 0;
                comb_tilde_09_feedBack_wrap = 0;
                comb_tilde_09_feedBack_reader = 0;
                comb_tilde_09_feedBack_writer = 0;
                comb_tilde_09_setupDone = false;
                allpass_tilde_12_feedForward__maxdelay = 0;
                allpass_tilde_12_feedForward_sizemode = 0;
                allpass_tilde_12_feedForward_wrap = 0;
                allpass_tilde_12_feedForward_reader = 0;
                allpass_tilde_12_feedForward_writer = 0;
                allpass_tilde_12_feedBack__maxdelay = 0;
                allpass_tilde_12_feedBack_sizemode = 0;
                allpass_tilde_12_feedBack_wrap = 0;
                allpass_tilde_12_feedBack_reader = 0;
                allpass_tilde_12_feedBack_writer = 0;
                allpass_tilde_12_setupDone = false;
                onepole_tilde_04_freq = 0;
                onepole_tilde_04_needsUpdate = false;
                onepole_tilde_04_lastY = 0;
                onepole_tilde_04_a0 = 0;
                onepole_tilde_04_b1 = 0;
                onepole_tilde_04_setupDone = false;
                lores_02_setupDone = false;
                delaytilde_02_lastDelay = -1;
                delaytilde_02_crossfadeDelay = 0;
                delaytilde_02_ramp = 0;
                delaytilde_02_rampInSamples = 0;
                delaytilde_02_del__maxdelay = 0;
                delaytilde_02_del_sizemode = 0;
                delaytilde_02_del_wrap = 0;
                delaytilde_02_del_reader = 0;
                delaytilde_02_del_writer = 0;
                delaytilde_02_setupDone = false;
                feedbacktilde_02_feedbackbuffer = nullptr;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_11_x;
                number allpass_tilde_11_delayTime;
                number allpass_tilde_11_gain;
                number dspexpr_19_in1;
                number dspexpr_19_in2;
                number comb_tilde_09_x;
                number comb_tilde_09_delayTime;
                number comb_tilde_09_gain;
                number comb_tilde_09_ffGain;
                number comb_tilde_09_fbGain;
                number dspexpr_20_in1;
                number dspexpr_20_in2;
                number dspexpr_21_in1;
                number dspexpr_21_in2;
                number dspexpr_22_in1;
                number dspexpr_22_in2;
                number allpass_tilde_12_x;
                number allpass_tilde_12_delayTime;
                number allpass_tilde_12_gain;
                number onepole_tilde_04_x;
                number onepole_tilde_04_freqInHz;
                number dspexpr_23_in1;
                number dspexpr_23_in2;
                number lores_02_cutoff;
                number lores_02_resonance;
                number dspexpr_24_in1;
                number dspexpr_24_in2;
                number delaytilde_02_delay;
                number mstosamps_tilde_02_ms;
                number dspexpr_25_in1;
                number dspexpr_25_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_11_feedForward_buffer;
                Index allpass_tilde_11_feedForward__maxdelay;
                Int allpass_tilde_11_feedForward_sizemode;
                Index allpass_tilde_11_feedForward_wrap;
                Int allpass_tilde_11_feedForward_reader;
                Int allpass_tilde_11_feedForward_writer;
                Float64BufferRef allpass_tilde_11_feedBack_buffer;
                Index allpass_tilde_11_feedBack__maxdelay;
                Int allpass_tilde_11_feedBack_sizemode;
                Index allpass_tilde_11_feedBack_wrap;
                Int allpass_tilde_11_feedBack_reader;
                Int allpass_tilde_11_feedBack_writer;
                bool allpass_tilde_11_setupDone;
                Float64BufferRef comb_tilde_09_feedForward_buffer;
                Index comb_tilde_09_feedForward__maxdelay;
                Int comb_tilde_09_feedForward_sizemode;
                Index comb_tilde_09_feedForward_wrap;
                Int comb_tilde_09_feedForward_reader;
                Int comb_tilde_09_feedForward_writer;
                Float64BufferRef comb_tilde_09_feedBack_buffer;
                Index comb_tilde_09_feedBack__maxdelay;
                Int comb_tilde_09_feedBack_sizemode;
                Index comb_tilde_09_feedBack_wrap;
                Int comb_tilde_09_feedBack_reader;
                Int comb_tilde_09_feedBack_writer;
                bool comb_tilde_09_setupDone;
                Float64BufferRef allpass_tilde_12_feedForward_buffer;
                Index allpass_tilde_12_feedForward__maxdelay;
                Int allpass_tilde_12_feedForward_sizemode;
                Index allpass_tilde_12_feedForward_wrap;
                Int allpass_tilde_12_feedForward_reader;
                Int allpass_tilde_12_feedForward_writer;
                Float64BufferRef allpass_tilde_12_feedBack_buffer;
                Index allpass_tilde_12_feedBack__maxdelay;
                Int allpass_tilde_12_feedBack_sizemode;
                Index allpass_tilde_12_feedBack_wrap;
                Int allpass_tilde_12_feedBack_reader;
                Int allpass_tilde_12_feedBack_writer;
                bool allpass_tilde_12_setupDone;
                number onepole_tilde_04_freq;
                bool onepole_tilde_04_needsUpdate;
                number onepole_tilde_04_lastY;
                number onepole_tilde_04_a0;
                number onepole_tilde_04_b1;
                bool onepole_tilde_04_setupDone;
                number lores_02_b_0;
                number lores_02_a_1;
                number lores_02_a_2;
                number lores_02_x_0;
                number lores_02_y_1;
                number lores_02_y_2;
                number lores_02_last_resonance;
                number lores_02_last_frequency;
                number lores_02_last_res_calc;
                number lores_02_last_freq_calc;
                bool lores_02_setupDone;
                UInt noise_tilde_02_state[4] = { };
                number delaytilde_02_lastDelay;
                number delaytilde_02_crossfadeDelay;
                number delaytilde_02_ramp;
                long delaytilde_02_rampInSamples;
                Float64BufferRef delaytilde_02_del_buffer;
                Index delaytilde_02_del__maxdelay;
                Int delaytilde_02_del_sizemode;
                Index delaytilde_02_del_wrap;
                Int delaytilde_02_del_reader;
                Int delaytilde_02_del_writer;
                bool delaytilde_02_setupDone;
                signal feedbacktilde_02_feedbackbuffer;
                number stackprotect_count;
                DataRef allpass_tilde_11_feedForward_bufferobj;
                DataRef allpass_tilde_11_feedBack_bufferobj;
                DataRef comb_tilde_09_feedForward_bufferobj;
                DataRef comb_tilde_09_feedBack_bufferobj;
                DataRef allpass_tilde_12_feedForward_bufferobj;
                DataRef allpass_tilde_12_feedBack_bufferobj;
                DataRef delaytilde_02_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_156 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_176;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_156()
            {
            }
            
            ~RNBOSubpatcher_156()
            {
            }
            
            virtual RNBOSubpatcher_176* getPatcher() const {
                return static_cast<RNBOSubpatcher_176 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Size = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                const SampleValue * target_Diff = (numInputs >= 9 && inputs[8] ? inputs[8] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                this->stackprotect_perform(n);
                this->signalreceive_14_perform(target_Size, this->signals[0], n);
                this->signalreceive_15_perform(target_Diff, this->signals[1], n);
                this->dspexpr_30_perform(this->signals[0], this->signals[1], this->signals[2], n);
                this->dspexpr_34_perform(this->signals[2], this->dspexpr_34_in2, this->signals[1], n);
            
                this->comb_tilde_15_perform(
                    in6,
                    this->signals[1],
                    this->comb_tilde_15_gain,
                    this->comb_tilde_15_ffGain,
                    this->comb_tilde_15_fbGain,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_33_perform(this->signals[2], this->dspexpr_33_in2, this->signals[1], n);
            
                this->comb_tilde_14_perform(
                    in5,
                    this->signals[1],
                    this->comb_tilde_14_gain,
                    this->comb_tilde_14_ffGain,
                    this->comb_tilde_14_fbGain,
                    this->signals[3],
                    n
                );
            
                this->dspexpr_31_perform(this->signals[2], this->dspexpr_31_in2, this->signals[1], n);
            
                this->comb_tilde_13_perform(
                    in4,
                    this->signals[1],
                    this->comb_tilde_13_gain,
                    this->comb_tilde_13_ffGain,
                    this->comb_tilde_13_fbGain,
                    this->signals[4],
                    n
                );
            
                this->dspexpr_28_perform(this->signals[2], this->dspexpr_28_in2, this->signals[1], n);
            
                this->comb_tilde_12_perform(
                    in3,
                    this->signals[1],
                    this->comb_tilde_12_gain,
                    this->comb_tilde_12_ffGain,
                    this->comb_tilde_12_fbGain,
                    this->signals[5],
                    n
                );
            
                this->dspexpr_27_perform(this->signals[2], this->dspexpr_27_in2, this->signals[1], n);
            
                this->comb_tilde_11_perform(
                    in2,
                    this->signals[1],
                    this->comb_tilde_11_gain,
                    this->comb_tilde_11_ffGain,
                    this->comb_tilde_11_fbGain,
                    this->signals[6],
                    n
                );
            
                this->dspexpr_26_perform(this->signals[2], this->dspexpr_26_in2, this->signals[1], n);
            
                this->comb_tilde_10_perform(
                    in1,
                    this->signals[1],
                    this->comb_tilde_10_gain,
                    this->comb_tilde_10_ffGain,
                    this->comb_tilde_10_fbGain,
                    this->signals[7],
                    n
                );
            
                this->dspexpr_35_perform(this->signals[2], this->dspexpr_35_in2, this->signals[1], n);
            
                this->comb_tilde_16_perform(
                    in7,
                    this->signals[1],
                    this->comb_tilde_16_gain,
                    this->comb_tilde_16_ffGain,
                    this->comb_tilde_16_fbGain,
                    this->signals[2],
                    n
                );
            
                this->signaladder_21_perform(
                    this->signals[5],
                    this->signals[3],
                    this->signals[0],
                    this->signals[2],
                    this->signals[2],
                    n
                );
            
                this->dspexpr_32_perform(this->signals[2], this->dspexpr_32_in2, this->signals[1], n);
            
                this->signaladder_22_perform(
                    this->signals[7],
                    this->signals[6],
                    this->signals[4],
                    this->signals[1],
                    this->signals[1],
                    n
                );
            
                this->dspexpr_29_perform(this->signals[1], this->dspexpr_29_in2, out1, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->comb_tilde_15_dspsetup(forceDSPSetup);
                this->comb_tilde_14_dspsetup(forceDSPSetup);
                this->comb_tilde_13_dspsetup(forceDSPSetup);
                this->comb_tilde_12_dspsetup(forceDSPSetup);
                this->comb_tilde_11_dspsetup(forceDSPSetup);
                this->comb_tilde_10_dspsetup(forceDSPSetup);
                this->comb_tilde_16_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 2;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->comb_tilde_10_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->comb_tilde_10_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->comb_tilde_11_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->comb_tilde_11_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->comb_tilde_12_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->comb_tilde_12_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->comb_tilde_13_feedForward_bufferobj);
                    break;
                    }
                case 11:
                    {
                    return addressOf(this->comb_tilde_13_feedBack_bufferobj);
                    break;
                    }
                case 12:
                    {
                    return addressOf(this->comb_tilde_14_feedForward_bufferobj);
                    break;
                    }
                case 13:
                    {
                    return addressOf(this->comb_tilde_14_feedBack_bufferobj);
                    break;
                    }
                case 14:
                    {
                    return addressOf(this->comb_tilde_15_feedForward_bufferobj);
                    break;
                    }
                case 15:
                    {
                    return addressOf(this->comb_tilde_15_feedBack_bufferobj);
                    break;
                    }
                case 16:
                    {
                    return addressOf(this->comb_tilde_16_feedForward_bufferobj);
                    break;
                    }
                case 17:
                    {
                    return addressOf(this->comb_tilde_16_feedBack_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 14;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                }
            
                if (index == 11) {
                    this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                }
            
                if (index == 12) {
                    this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                }
            
                if (index == 13) {
                    this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                }
            
                if (index == 14) {
                    this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
                }
            
                if (index == 15) {
                    this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
                }
            
                if (index == 16) {
                    this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
                }
            
                if (index == 17) {
                    this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->comb_tilde_10_feedForward_bufferobj = initDataRef("comb_tilde_10_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_10_feedBack_bufferobj = initDataRef("comb_tilde_10_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_11_feedForward_bufferobj = initDataRef("comb_tilde_11_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_11_feedBack_bufferobj = initDataRef("comb_tilde_11_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_12_feedForward_bufferobj = initDataRef("comb_tilde_12_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_12_feedBack_bufferobj = initDataRef("comb_tilde_12_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_13_feedForward_bufferobj = initDataRef("comb_tilde_13_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_13_feedBack_bufferobj = initDataRef("comb_tilde_13_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_14_feedForward_bufferobj = initDataRef("comb_tilde_14_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_14_feedBack_bufferobj = initDataRef("comb_tilde_14_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_15_feedForward_bufferobj = initDataRef("comb_tilde_15_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_15_feedBack_bufferobj = initDataRef("comb_tilde_15_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_16_feedForward_bufferobj = initDataRef("comb_tilde_16_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_16_feedBack_bufferobj = initDataRef("comb_tilde_16_feedBack_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->comb_tilde_10_feedForward_bufferobj->setIndex(4);
                this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                this->comb_tilde_10_feedBack_bufferobj->setIndex(5);
                this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                this->comb_tilde_11_feedForward_bufferobj->setIndex(6);
                this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                this->comb_tilde_11_feedBack_bufferobj->setIndex(7);
                this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                this->comb_tilde_12_feedForward_bufferobj->setIndex(8);
                this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                this->comb_tilde_12_feedBack_bufferobj->setIndex(9);
                this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                this->comb_tilde_13_feedForward_bufferobj->setIndex(10);
                this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                this->comb_tilde_13_feedBack_bufferobj->setIndex(11);
                this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                this->comb_tilde_14_feedForward_bufferobj->setIndex(12);
                this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                this->comb_tilde_14_feedBack_bufferobj->setIndex(13);
                this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                this->comb_tilde_15_feedForward_bufferobj->setIndex(14);
                this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
                this->comb_tilde_15_feedBack_bufferobj->setIndex(15);
                this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
                this->comb_tilde_16_feedForward_bufferobj->setIndex(16);
                this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
                this->comb_tilde_16_feedBack_bufferobj->setIndex(17);
                this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 7;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->comb_tilde_10_feedForward_init();
                this->comb_tilde_10_feedBack_init();
                this->comb_tilde_10_init();
                this->comb_tilde_11_feedForward_init();
                this->comb_tilde_11_feedBack_init();
                this->comb_tilde_11_init();
                this->comb_tilde_12_feedForward_init();
                this->comb_tilde_12_feedBack_init();
                this->comb_tilde_12_init();
                this->comb_tilde_13_feedForward_init();
                this->comb_tilde_13_feedBack_init();
                this->comb_tilde_13_init();
                this->comb_tilde_14_feedForward_init();
                this->comb_tilde_14_feedBack_init();
                this->comb_tilde_14_init();
                this->comb_tilde_15_feedForward_init();
                this->comb_tilde_15_feedBack_init();
                this->comb_tilde_15_init();
                this->comb_tilde_16_feedForward_init();
                this->comb_tilde_16_feedBack_init();
                this->comb_tilde_16_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->comb_tilde_10_feedForward_buffer = this->comb_tilde_10_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_10_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_10_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->comb_tilde_10_feedBack_buffer = this->comb_tilde_10_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_10_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_10_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_11_feedForward_buffer = this->comb_tilde_11_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_11_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_11_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_11_feedBack_buffer = this->comb_tilde_11_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_11_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_11_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->comb_tilde_12_feedForward_buffer = this->comb_tilde_12_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_12_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_12_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->comb_tilde_12_feedBack_buffer = this->comb_tilde_12_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_12_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_12_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->comb_tilde_13_feedForward_buffer = this->comb_tilde_13_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_13_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_13_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_13_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->comb_tilde_13_feedBack_buffer = this->comb_tilde_13_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_13_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_13_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_13_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->comb_tilde_14_feedForward_buffer = this->comb_tilde_14_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_14_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_14_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_14_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->comb_tilde_14_feedBack_buffer = this->comb_tilde_14_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_14_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_14_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_14_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->comb_tilde_15_feedForward_buffer = this->comb_tilde_15_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_15_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_15_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_15_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->comb_tilde_15_feedBack_buffer = this->comb_tilde_15_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_15_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_15_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_15_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->comb_tilde_16_feedForward_buffer = this->comb_tilde_16_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_16_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_16_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_16_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->comb_tilde_16_feedBack_buffer = this->comb_tilde_16_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_16_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_16_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_16_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_14_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void signalreceive_15_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_30_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_34_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 27;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_15_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_15_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_15_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_15_feedForward_write(x[(Index)i]);
                    this->comb_tilde_15_feedBack_write(ov);
                    this->comb_tilde_15_feedForward_step();
                    this->comb_tilde_15_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_33_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 35;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_14_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_14_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_14_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_14_feedForward_write(x[(Index)i]);
                    this->comb_tilde_14_feedBack_write(ov);
                    this->comb_tilde_14_feedForward_step();
                    this->comb_tilde_14_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_31_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 3;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_13_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_13_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_13_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_13_feedForward_write(x[(Index)i]);
                    this->comb_tilde_13_feedBack_write(ov);
                    this->comb_tilde_13_feedForward_step();
                    this->comb_tilde_13_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_28_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 55;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_12_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_12_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_12_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_12_feedForward_write(x[(Index)i]);
                    this->comb_tilde_12_feedBack_write(ov);
                    this->comb_tilde_12_feedForward_step();
                    this->comb_tilde_12_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_27_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 135;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_11_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_11_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_11_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_11_feedForward_write(x[(Index)i]);
                    this->comb_tilde_11_feedBack_write(ov);
                    this->comb_tilde_11_feedForward_step();
                    this->comb_tilde_11_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_26_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 110;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_10_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_10_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_10_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_10_feedForward_write(x[(Index)i]);
                    this->comb_tilde_10_feedBack_write(ov);
                    this->comb_tilde_10_feedForward_step();
                    this->comb_tilde_10_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_35_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 52;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_16_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_16_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_16_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_16_feedForward_write(x[(Index)i]);
                    this->comb_tilde_16_feedBack_write(ov);
                    this->comb_tilde_16_feedForward_step();
                    this->comb_tilde_16_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signaladder_21_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_32_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_22_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_29_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 0.355;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_10_feedForward_step() {
                this->comb_tilde_10_feedForward_reader++;
            
                if (this->comb_tilde_10_feedForward_reader >= (int)(this->comb_tilde_10_feedForward_buffer->getSize()))
                    this->comb_tilde_10_feedForward_reader = 0;
            }
            
            number comb_tilde_10_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_10_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                );
            }
            
            void comb_tilde_10_feedForward_write(number v) {
                this->comb_tilde_10_feedForward_writer = this->comb_tilde_10_feedForward_reader;
                this->comb_tilde_10_feedForward_buffer[(Index)this->comb_tilde_10_feedForward_writer] = v;
            }
            
            number comb_tilde_10_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_10_feedForward__maxdelay : size);
                number val = this->comb_tilde_10_feedForward_read(effectiveSize, 0);
                this->comb_tilde_10_feedForward_write(v);
                this->comb_tilde_10_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_10_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_10_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_10_feedForward_init() {
                auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                this->comb_tilde_10_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_10_feedForward_clear() {
                this->comb_tilde_10_feedForward_buffer->setZero();
            }
            
            void comb_tilde_10_feedForward_reset() {
                auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                this->comb_tilde_10_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_10_feedForward_buffer);
                this->comb_tilde_10_feedForward_wrap = this->comb_tilde_10_feedForward_buffer->getSize() - 1;
                this->comb_tilde_10_feedForward_clear();
            
                if (this->comb_tilde_10_feedForward_reader >= this->comb_tilde_10_feedForward__maxdelay || this->comb_tilde_10_feedForward_writer >= this->comb_tilde_10_feedForward__maxdelay) {
                    this->comb_tilde_10_feedForward_reader = 0;
                    this->comb_tilde_10_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_10_feedForward_dspsetup() {
                this->comb_tilde_10_feedForward_reset();
            }
            
            number comb_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_10_feedForward_size() {
                return this->comb_tilde_10_feedForward__maxdelay;
            }
            
            void comb_tilde_10_feedBack_step() {
                this->comb_tilde_10_feedBack_reader++;
            
                if (this->comb_tilde_10_feedBack_reader >= (int)(this->comb_tilde_10_feedBack_buffer->getSize()))
                    this->comb_tilde_10_feedBack_reader = 0;
            }
            
            number comb_tilde_10_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_10_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                );
            }
            
            void comb_tilde_10_feedBack_write(number v) {
                this->comb_tilde_10_feedBack_writer = this->comb_tilde_10_feedBack_reader;
                this->comb_tilde_10_feedBack_buffer[(Index)this->comb_tilde_10_feedBack_writer] = v;
            }
            
            number comb_tilde_10_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_10_feedBack__maxdelay : size);
                number val = this->comb_tilde_10_feedBack_read(effectiveSize, 0);
                this->comb_tilde_10_feedBack_write(v);
                this->comb_tilde_10_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_10_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_10_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_10_feedBack_init() {
                auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                this->comb_tilde_10_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_10_feedBack_clear() {
                this->comb_tilde_10_feedBack_buffer->setZero();
            }
            
            void comb_tilde_10_feedBack_reset() {
                auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                this->comb_tilde_10_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_10_feedBack_buffer);
                this->comb_tilde_10_feedBack_wrap = this->comb_tilde_10_feedBack_buffer->getSize() - 1;
                this->comb_tilde_10_feedBack_clear();
            
                if (this->comb_tilde_10_feedBack_reader >= this->comb_tilde_10_feedBack__maxdelay || this->comb_tilde_10_feedBack_writer >= this->comb_tilde_10_feedBack__maxdelay) {
                    this->comb_tilde_10_feedBack_reader = 0;
                    this->comb_tilde_10_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_10_feedBack_dspsetup() {
                this->comb_tilde_10_feedBack_reset();
            }
            
            number comb_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_10_feedBack_size() {
                return this->comb_tilde_10_feedBack__maxdelay;
            }
            
            void comb_tilde_10_init() {
                this->comb_tilde_10_feedForward_init();
                this->comb_tilde_10_feedBack_init();
            }
            
            void comb_tilde_10_clear() {
                this->comb_tilde_10_feedForward_clear();
                this->comb_tilde_10_feedBack_clear();
            }
            
            void comb_tilde_10_reset() {
                this->comb_tilde_10_init();
                this->comb_tilde_10_clear();
            }
            
            void comb_tilde_10_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_10_reset();
                this->comb_tilde_10_setupDone = true;
                this->comb_tilde_10_feedForward_dspsetup();
                this->comb_tilde_10_feedBack_dspsetup();
            }
            
            void comb_tilde_11_feedForward_step() {
                this->comb_tilde_11_feedForward_reader++;
            
                if (this->comb_tilde_11_feedForward_reader >= (int)(this->comb_tilde_11_feedForward_buffer->getSize()))
                    this->comb_tilde_11_feedForward_reader = 0;
            }
            
            number comb_tilde_11_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_11_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                );
            }
            
            void comb_tilde_11_feedForward_write(number v) {
                this->comb_tilde_11_feedForward_writer = this->comb_tilde_11_feedForward_reader;
                this->comb_tilde_11_feedForward_buffer[(Index)this->comb_tilde_11_feedForward_writer] = v;
            }
            
            number comb_tilde_11_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_11_feedForward__maxdelay : size);
                number val = this->comb_tilde_11_feedForward_read(effectiveSize, 0);
                this->comb_tilde_11_feedForward_write(v);
                this->comb_tilde_11_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_11_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_11_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_11_feedForward_init() {
                auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                this->comb_tilde_11_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_11_feedForward_clear() {
                this->comb_tilde_11_feedForward_buffer->setZero();
            }
            
            void comb_tilde_11_feedForward_reset() {
                auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                this->comb_tilde_11_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_11_feedForward_buffer);
                this->comb_tilde_11_feedForward_wrap = this->comb_tilde_11_feedForward_buffer->getSize() - 1;
                this->comb_tilde_11_feedForward_clear();
            
                if (this->comb_tilde_11_feedForward_reader >= this->comb_tilde_11_feedForward__maxdelay || this->comb_tilde_11_feedForward_writer >= this->comb_tilde_11_feedForward__maxdelay) {
                    this->comb_tilde_11_feedForward_reader = 0;
                    this->comb_tilde_11_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_11_feedForward_dspsetup() {
                this->comb_tilde_11_feedForward_reset();
            }
            
            number comb_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_11_feedForward_size() {
                return this->comb_tilde_11_feedForward__maxdelay;
            }
            
            void comb_tilde_11_feedBack_step() {
                this->comb_tilde_11_feedBack_reader++;
            
                if (this->comb_tilde_11_feedBack_reader >= (int)(this->comb_tilde_11_feedBack_buffer->getSize()))
                    this->comb_tilde_11_feedBack_reader = 0;
            }
            
            number comb_tilde_11_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_11_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                );
            }
            
            void comb_tilde_11_feedBack_write(number v) {
                this->comb_tilde_11_feedBack_writer = this->comb_tilde_11_feedBack_reader;
                this->comb_tilde_11_feedBack_buffer[(Index)this->comb_tilde_11_feedBack_writer] = v;
            }
            
            number comb_tilde_11_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_11_feedBack__maxdelay : size);
                number val = this->comb_tilde_11_feedBack_read(effectiveSize, 0);
                this->comb_tilde_11_feedBack_write(v);
                this->comb_tilde_11_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_11_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_11_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_11_feedBack_init() {
                auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                this->comb_tilde_11_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_11_feedBack_clear() {
                this->comb_tilde_11_feedBack_buffer->setZero();
            }
            
            void comb_tilde_11_feedBack_reset() {
                auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                this->comb_tilde_11_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_11_feedBack_buffer);
                this->comb_tilde_11_feedBack_wrap = this->comb_tilde_11_feedBack_buffer->getSize() - 1;
                this->comb_tilde_11_feedBack_clear();
            
                if (this->comb_tilde_11_feedBack_reader >= this->comb_tilde_11_feedBack__maxdelay || this->comb_tilde_11_feedBack_writer >= this->comb_tilde_11_feedBack__maxdelay) {
                    this->comb_tilde_11_feedBack_reader = 0;
                    this->comb_tilde_11_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_11_feedBack_dspsetup() {
                this->comb_tilde_11_feedBack_reset();
            }
            
            number comb_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_11_feedBack_size() {
                return this->comb_tilde_11_feedBack__maxdelay;
            }
            
            void comb_tilde_11_init() {
                this->comb_tilde_11_feedForward_init();
                this->comb_tilde_11_feedBack_init();
            }
            
            void comb_tilde_11_clear() {
                this->comb_tilde_11_feedForward_clear();
                this->comb_tilde_11_feedBack_clear();
            }
            
            void comb_tilde_11_reset() {
                this->comb_tilde_11_init();
                this->comb_tilde_11_clear();
            }
            
            void comb_tilde_11_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_11_reset();
                this->comb_tilde_11_setupDone = true;
                this->comb_tilde_11_feedForward_dspsetup();
                this->comb_tilde_11_feedBack_dspsetup();
            }
            
            void comb_tilde_12_feedForward_step() {
                this->comb_tilde_12_feedForward_reader++;
            
                if (this->comb_tilde_12_feedForward_reader >= (int)(this->comb_tilde_12_feedForward_buffer->getSize()))
                    this->comb_tilde_12_feedForward_reader = 0;
            }
            
            number comb_tilde_12_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_12_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                );
            }
            
            void comb_tilde_12_feedForward_write(number v) {
                this->comb_tilde_12_feedForward_writer = this->comb_tilde_12_feedForward_reader;
                this->comb_tilde_12_feedForward_buffer[(Index)this->comb_tilde_12_feedForward_writer] = v;
            }
            
            number comb_tilde_12_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_12_feedForward__maxdelay : size);
                number val = this->comb_tilde_12_feedForward_read(effectiveSize, 0);
                this->comb_tilde_12_feedForward_write(v);
                this->comb_tilde_12_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_12_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_12_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_12_feedForward_init() {
                auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                this->comb_tilde_12_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_12_feedForward_clear() {
                this->comb_tilde_12_feedForward_buffer->setZero();
            }
            
            void comb_tilde_12_feedForward_reset() {
                auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                this->comb_tilde_12_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_12_feedForward_buffer);
                this->comb_tilde_12_feedForward_wrap = this->comb_tilde_12_feedForward_buffer->getSize() - 1;
                this->comb_tilde_12_feedForward_clear();
            
                if (this->comb_tilde_12_feedForward_reader >= this->comb_tilde_12_feedForward__maxdelay || this->comb_tilde_12_feedForward_writer >= this->comb_tilde_12_feedForward__maxdelay) {
                    this->comb_tilde_12_feedForward_reader = 0;
                    this->comb_tilde_12_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_12_feedForward_dspsetup() {
                this->comb_tilde_12_feedForward_reset();
            }
            
            number comb_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_12_feedForward_size() {
                return this->comb_tilde_12_feedForward__maxdelay;
            }
            
            void comb_tilde_12_feedBack_step() {
                this->comb_tilde_12_feedBack_reader++;
            
                if (this->comb_tilde_12_feedBack_reader >= (int)(this->comb_tilde_12_feedBack_buffer->getSize()))
                    this->comb_tilde_12_feedBack_reader = 0;
            }
            
            number comb_tilde_12_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_12_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                );
            }
            
            void comb_tilde_12_feedBack_write(number v) {
                this->comb_tilde_12_feedBack_writer = this->comb_tilde_12_feedBack_reader;
                this->comb_tilde_12_feedBack_buffer[(Index)this->comb_tilde_12_feedBack_writer] = v;
            }
            
            number comb_tilde_12_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_12_feedBack__maxdelay : size);
                number val = this->comb_tilde_12_feedBack_read(effectiveSize, 0);
                this->comb_tilde_12_feedBack_write(v);
                this->comb_tilde_12_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_12_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_12_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_12_feedBack_init() {
                auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                this->comb_tilde_12_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_12_feedBack_clear() {
                this->comb_tilde_12_feedBack_buffer->setZero();
            }
            
            void comb_tilde_12_feedBack_reset() {
                auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                this->comb_tilde_12_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_12_feedBack_buffer);
                this->comb_tilde_12_feedBack_wrap = this->comb_tilde_12_feedBack_buffer->getSize() - 1;
                this->comb_tilde_12_feedBack_clear();
            
                if (this->comb_tilde_12_feedBack_reader >= this->comb_tilde_12_feedBack__maxdelay || this->comb_tilde_12_feedBack_writer >= this->comb_tilde_12_feedBack__maxdelay) {
                    this->comb_tilde_12_feedBack_reader = 0;
                    this->comb_tilde_12_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_12_feedBack_dspsetup() {
                this->comb_tilde_12_feedBack_reset();
            }
            
            number comb_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_12_feedBack_size() {
                return this->comb_tilde_12_feedBack__maxdelay;
            }
            
            void comb_tilde_12_init() {
                this->comb_tilde_12_feedForward_init();
                this->comb_tilde_12_feedBack_init();
            }
            
            void comb_tilde_12_clear() {
                this->comb_tilde_12_feedForward_clear();
                this->comb_tilde_12_feedBack_clear();
            }
            
            void comb_tilde_12_reset() {
                this->comb_tilde_12_init();
                this->comb_tilde_12_clear();
            }
            
            void comb_tilde_12_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_12_reset();
                this->comb_tilde_12_setupDone = true;
                this->comb_tilde_12_feedForward_dspsetup();
                this->comb_tilde_12_feedBack_dspsetup();
            }
            
            void comb_tilde_13_feedForward_step() {
                this->comb_tilde_13_feedForward_reader++;
            
                if (this->comb_tilde_13_feedForward_reader >= (int)(this->comb_tilde_13_feedForward_buffer->getSize()))
                    this->comb_tilde_13_feedForward_reader = 0;
            }
            
            number comb_tilde_13_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_13_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                );
            }
            
            void comb_tilde_13_feedForward_write(number v) {
                this->comb_tilde_13_feedForward_writer = this->comb_tilde_13_feedForward_reader;
                this->comb_tilde_13_feedForward_buffer[(Index)this->comb_tilde_13_feedForward_writer] = v;
            }
            
            number comb_tilde_13_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_13_feedForward__maxdelay : size);
                number val = this->comb_tilde_13_feedForward_read(effectiveSize, 0);
                this->comb_tilde_13_feedForward_write(v);
                this->comb_tilde_13_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_13_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_13_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_13_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_13_feedForward_init() {
                auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                this->comb_tilde_13_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_13_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_13_feedForward_clear() {
                this->comb_tilde_13_feedForward_buffer->setZero();
            }
            
            void comb_tilde_13_feedForward_reset() {
                auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                this->comb_tilde_13_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_13_feedForward_buffer);
                this->comb_tilde_13_feedForward_wrap = this->comb_tilde_13_feedForward_buffer->getSize() - 1;
                this->comb_tilde_13_feedForward_clear();
            
                if (this->comb_tilde_13_feedForward_reader >= this->comb_tilde_13_feedForward__maxdelay || this->comb_tilde_13_feedForward_writer >= this->comb_tilde_13_feedForward__maxdelay) {
                    this->comb_tilde_13_feedForward_reader = 0;
                    this->comb_tilde_13_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_13_feedForward_dspsetup() {
                this->comb_tilde_13_feedForward_reset();
            }
            
            number comb_tilde_13_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_13_feedForward_size() {
                return this->comb_tilde_13_feedForward__maxdelay;
            }
            
            void comb_tilde_13_feedBack_step() {
                this->comb_tilde_13_feedBack_reader++;
            
                if (this->comb_tilde_13_feedBack_reader >= (int)(this->comb_tilde_13_feedBack_buffer->getSize()))
                    this->comb_tilde_13_feedBack_reader = 0;
            }
            
            number comb_tilde_13_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_13_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                );
            }
            
            void comb_tilde_13_feedBack_write(number v) {
                this->comb_tilde_13_feedBack_writer = this->comb_tilde_13_feedBack_reader;
                this->comb_tilde_13_feedBack_buffer[(Index)this->comb_tilde_13_feedBack_writer] = v;
            }
            
            number comb_tilde_13_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_13_feedBack__maxdelay : size);
                number val = this->comb_tilde_13_feedBack_read(effectiveSize, 0);
                this->comb_tilde_13_feedBack_write(v);
                this->comb_tilde_13_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_13_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_13_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_13_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_13_feedBack_init() {
                auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                this->comb_tilde_13_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_13_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_13_feedBack_clear() {
                this->comb_tilde_13_feedBack_buffer->setZero();
            }
            
            void comb_tilde_13_feedBack_reset() {
                auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                this->comb_tilde_13_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_13_feedBack_buffer);
                this->comb_tilde_13_feedBack_wrap = this->comb_tilde_13_feedBack_buffer->getSize() - 1;
                this->comb_tilde_13_feedBack_clear();
            
                if (this->comb_tilde_13_feedBack_reader >= this->comb_tilde_13_feedBack__maxdelay || this->comb_tilde_13_feedBack_writer >= this->comb_tilde_13_feedBack__maxdelay) {
                    this->comb_tilde_13_feedBack_reader = 0;
                    this->comb_tilde_13_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_13_feedBack_dspsetup() {
                this->comb_tilde_13_feedBack_reset();
            }
            
            number comb_tilde_13_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_13_feedBack_size() {
                return this->comb_tilde_13_feedBack__maxdelay;
            }
            
            void comb_tilde_13_init() {
                this->comb_tilde_13_feedForward_init();
                this->comb_tilde_13_feedBack_init();
            }
            
            void comb_tilde_13_clear() {
                this->comb_tilde_13_feedForward_clear();
                this->comb_tilde_13_feedBack_clear();
            }
            
            void comb_tilde_13_reset() {
                this->comb_tilde_13_init();
                this->comb_tilde_13_clear();
            }
            
            void comb_tilde_13_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_13_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_13_reset();
                this->comb_tilde_13_setupDone = true;
                this->comb_tilde_13_feedForward_dspsetup();
                this->comb_tilde_13_feedBack_dspsetup();
            }
            
            void comb_tilde_14_feedForward_step() {
                this->comb_tilde_14_feedForward_reader++;
            
                if (this->comb_tilde_14_feedForward_reader >= (int)(this->comb_tilde_14_feedForward_buffer->getSize()))
                    this->comb_tilde_14_feedForward_reader = 0;
            }
            
            number comb_tilde_14_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_14_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                );
            }
            
            void comb_tilde_14_feedForward_write(number v) {
                this->comb_tilde_14_feedForward_writer = this->comb_tilde_14_feedForward_reader;
                this->comb_tilde_14_feedForward_buffer[(Index)this->comb_tilde_14_feedForward_writer] = v;
            }
            
            number comb_tilde_14_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_14_feedForward__maxdelay : size);
                number val = this->comb_tilde_14_feedForward_read(effectiveSize, 0);
                this->comb_tilde_14_feedForward_write(v);
                this->comb_tilde_14_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_14_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_14_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_14_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_14_feedForward_init() {
                auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                this->comb_tilde_14_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_14_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_14_feedForward_clear() {
                this->comb_tilde_14_feedForward_buffer->setZero();
            }
            
            void comb_tilde_14_feedForward_reset() {
                auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                this->comb_tilde_14_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_14_feedForward_buffer);
                this->comb_tilde_14_feedForward_wrap = this->comb_tilde_14_feedForward_buffer->getSize() - 1;
                this->comb_tilde_14_feedForward_clear();
            
                if (this->comb_tilde_14_feedForward_reader >= this->comb_tilde_14_feedForward__maxdelay || this->comb_tilde_14_feedForward_writer >= this->comb_tilde_14_feedForward__maxdelay) {
                    this->comb_tilde_14_feedForward_reader = 0;
                    this->comb_tilde_14_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_14_feedForward_dspsetup() {
                this->comb_tilde_14_feedForward_reset();
            }
            
            number comb_tilde_14_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_14_feedForward_size() {
                return this->comb_tilde_14_feedForward__maxdelay;
            }
            
            void comb_tilde_14_feedBack_step() {
                this->comb_tilde_14_feedBack_reader++;
            
                if (this->comb_tilde_14_feedBack_reader >= (int)(this->comb_tilde_14_feedBack_buffer->getSize()))
                    this->comb_tilde_14_feedBack_reader = 0;
            }
            
            number comb_tilde_14_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_14_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                );
            }
            
            void comb_tilde_14_feedBack_write(number v) {
                this->comb_tilde_14_feedBack_writer = this->comb_tilde_14_feedBack_reader;
                this->comb_tilde_14_feedBack_buffer[(Index)this->comb_tilde_14_feedBack_writer] = v;
            }
            
            number comb_tilde_14_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_14_feedBack__maxdelay : size);
                number val = this->comb_tilde_14_feedBack_read(effectiveSize, 0);
                this->comb_tilde_14_feedBack_write(v);
                this->comb_tilde_14_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_14_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_14_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_14_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_14_feedBack_init() {
                auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                this->comb_tilde_14_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_14_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_14_feedBack_clear() {
                this->comb_tilde_14_feedBack_buffer->setZero();
            }
            
            void comb_tilde_14_feedBack_reset() {
                auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                this->comb_tilde_14_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_14_feedBack_buffer);
                this->comb_tilde_14_feedBack_wrap = this->comb_tilde_14_feedBack_buffer->getSize() - 1;
                this->comb_tilde_14_feedBack_clear();
            
                if (this->comb_tilde_14_feedBack_reader >= this->comb_tilde_14_feedBack__maxdelay || this->comb_tilde_14_feedBack_writer >= this->comb_tilde_14_feedBack__maxdelay) {
                    this->comb_tilde_14_feedBack_reader = 0;
                    this->comb_tilde_14_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_14_feedBack_dspsetup() {
                this->comb_tilde_14_feedBack_reset();
            }
            
            number comb_tilde_14_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_14_feedBack_size() {
                return this->comb_tilde_14_feedBack__maxdelay;
            }
            
            void comb_tilde_14_init() {
                this->comb_tilde_14_feedForward_init();
                this->comb_tilde_14_feedBack_init();
            }
            
            void comb_tilde_14_clear() {
                this->comb_tilde_14_feedForward_clear();
                this->comb_tilde_14_feedBack_clear();
            }
            
            void comb_tilde_14_reset() {
                this->comb_tilde_14_init();
                this->comb_tilde_14_clear();
            }
            
            void comb_tilde_14_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_14_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_14_reset();
                this->comb_tilde_14_setupDone = true;
                this->comb_tilde_14_feedForward_dspsetup();
                this->comb_tilde_14_feedBack_dspsetup();
            }
            
            void comb_tilde_15_feedForward_step() {
                this->comb_tilde_15_feedForward_reader++;
            
                if (this->comb_tilde_15_feedForward_reader >= (int)(this->comb_tilde_15_feedForward_buffer->getSize()))
                    this->comb_tilde_15_feedForward_reader = 0;
            }
            
            number comb_tilde_15_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_15_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                );
            }
            
            void comb_tilde_15_feedForward_write(number v) {
                this->comb_tilde_15_feedForward_writer = this->comb_tilde_15_feedForward_reader;
                this->comb_tilde_15_feedForward_buffer[(Index)this->comb_tilde_15_feedForward_writer] = v;
            }
            
            number comb_tilde_15_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_15_feedForward__maxdelay : size);
                number val = this->comb_tilde_15_feedForward_read(effectiveSize, 0);
                this->comb_tilde_15_feedForward_write(v);
                this->comb_tilde_15_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_15_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_15_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_15_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_15_feedForward_init() {
                auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
                this->comb_tilde_15_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_15_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_15_feedForward_clear() {
                this->comb_tilde_15_feedForward_buffer->setZero();
            }
            
            void comb_tilde_15_feedForward_reset() {
                auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
                this->comb_tilde_15_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_15_feedForward_buffer);
                this->comb_tilde_15_feedForward_wrap = this->comb_tilde_15_feedForward_buffer->getSize() - 1;
                this->comb_tilde_15_feedForward_clear();
            
                if (this->comb_tilde_15_feedForward_reader >= this->comb_tilde_15_feedForward__maxdelay || this->comb_tilde_15_feedForward_writer >= this->comb_tilde_15_feedForward__maxdelay) {
                    this->comb_tilde_15_feedForward_reader = 0;
                    this->comb_tilde_15_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_15_feedForward_dspsetup() {
                this->comb_tilde_15_feedForward_reset();
            }
            
            number comb_tilde_15_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_15_feedForward_size() {
                return this->comb_tilde_15_feedForward__maxdelay;
            }
            
            void comb_tilde_15_feedBack_step() {
                this->comb_tilde_15_feedBack_reader++;
            
                if (this->comb_tilde_15_feedBack_reader >= (int)(this->comb_tilde_15_feedBack_buffer->getSize()))
                    this->comb_tilde_15_feedBack_reader = 0;
            }
            
            number comb_tilde_15_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_15_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                );
            }
            
            void comb_tilde_15_feedBack_write(number v) {
                this->comb_tilde_15_feedBack_writer = this->comb_tilde_15_feedBack_reader;
                this->comb_tilde_15_feedBack_buffer[(Index)this->comb_tilde_15_feedBack_writer] = v;
            }
            
            number comb_tilde_15_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_15_feedBack__maxdelay : size);
                number val = this->comb_tilde_15_feedBack_read(effectiveSize, 0);
                this->comb_tilde_15_feedBack_write(v);
                this->comb_tilde_15_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_15_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_15_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_15_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_15_feedBack_init() {
                auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
                this->comb_tilde_15_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_15_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_15_feedBack_clear() {
                this->comb_tilde_15_feedBack_buffer->setZero();
            }
            
            void comb_tilde_15_feedBack_reset() {
                auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
                this->comb_tilde_15_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_15_feedBack_buffer);
                this->comb_tilde_15_feedBack_wrap = this->comb_tilde_15_feedBack_buffer->getSize() - 1;
                this->comb_tilde_15_feedBack_clear();
            
                if (this->comb_tilde_15_feedBack_reader >= this->comb_tilde_15_feedBack__maxdelay || this->comb_tilde_15_feedBack_writer >= this->comb_tilde_15_feedBack__maxdelay) {
                    this->comb_tilde_15_feedBack_reader = 0;
                    this->comb_tilde_15_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_15_feedBack_dspsetup() {
                this->comb_tilde_15_feedBack_reset();
            }
            
            number comb_tilde_15_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_15_feedBack_size() {
                return this->comb_tilde_15_feedBack__maxdelay;
            }
            
            void comb_tilde_15_init() {
                this->comb_tilde_15_feedForward_init();
                this->comb_tilde_15_feedBack_init();
            }
            
            void comb_tilde_15_clear() {
                this->comb_tilde_15_feedForward_clear();
                this->comb_tilde_15_feedBack_clear();
            }
            
            void comb_tilde_15_reset() {
                this->comb_tilde_15_init();
                this->comb_tilde_15_clear();
            }
            
            void comb_tilde_15_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_15_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_15_reset();
                this->comb_tilde_15_setupDone = true;
                this->comb_tilde_15_feedForward_dspsetup();
                this->comb_tilde_15_feedBack_dspsetup();
            }
            
            void comb_tilde_16_feedForward_step() {
                this->comb_tilde_16_feedForward_reader++;
            
                if (this->comb_tilde_16_feedForward_reader >= (int)(this->comb_tilde_16_feedForward_buffer->getSize()))
                    this->comb_tilde_16_feedForward_reader = 0;
            }
            
            number comb_tilde_16_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_16_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                );
            }
            
            void comb_tilde_16_feedForward_write(number v) {
                this->comb_tilde_16_feedForward_writer = this->comb_tilde_16_feedForward_reader;
                this->comb_tilde_16_feedForward_buffer[(Index)this->comb_tilde_16_feedForward_writer] = v;
            }
            
            number comb_tilde_16_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_16_feedForward__maxdelay : size);
                number val = this->comb_tilde_16_feedForward_read(effectiveSize, 0);
                this->comb_tilde_16_feedForward_write(v);
                this->comb_tilde_16_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_16_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_16_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_16_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_16_feedForward_init() {
                auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
                this->comb_tilde_16_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_16_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_16_feedForward_clear() {
                this->comb_tilde_16_feedForward_buffer->setZero();
            }
            
            void comb_tilde_16_feedForward_reset() {
                auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
                this->comb_tilde_16_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_16_feedForward_buffer);
                this->comb_tilde_16_feedForward_wrap = this->comb_tilde_16_feedForward_buffer->getSize() - 1;
                this->comb_tilde_16_feedForward_clear();
            
                if (this->comb_tilde_16_feedForward_reader >= this->comb_tilde_16_feedForward__maxdelay || this->comb_tilde_16_feedForward_writer >= this->comb_tilde_16_feedForward__maxdelay) {
                    this->comb_tilde_16_feedForward_reader = 0;
                    this->comb_tilde_16_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_16_feedForward_dspsetup() {
                this->comb_tilde_16_feedForward_reset();
            }
            
            number comb_tilde_16_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_16_feedForward_size() {
                return this->comb_tilde_16_feedForward__maxdelay;
            }
            
            void comb_tilde_16_feedBack_step() {
                this->comb_tilde_16_feedBack_reader++;
            
                if (this->comb_tilde_16_feedBack_reader >= (int)(this->comb_tilde_16_feedBack_buffer->getSize()))
                    this->comb_tilde_16_feedBack_reader = 0;
            }
            
            number comb_tilde_16_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_16_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                );
            }
            
            void comb_tilde_16_feedBack_write(number v) {
                this->comb_tilde_16_feedBack_writer = this->comb_tilde_16_feedBack_reader;
                this->comb_tilde_16_feedBack_buffer[(Index)this->comb_tilde_16_feedBack_writer] = v;
            }
            
            number comb_tilde_16_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_16_feedBack__maxdelay : size);
                number val = this->comb_tilde_16_feedBack_read(effectiveSize, 0);
                this->comb_tilde_16_feedBack_write(v);
                this->comb_tilde_16_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_16_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_16_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_16_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_16_feedBack_init() {
                auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
                this->comb_tilde_16_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_16_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_16_feedBack_clear() {
                this->comb_tilde_16_feedBack_buffer->setZero();
            }
            
            void comb_tilde_16_feedBack_reset() {
                auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
                this->comb_tilde_16_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_16_feedBack_buffer);
                this->comb_tilde_16_feedBack_wrap = this->comb_tilde_16_feedBack_buffer->getSize() - 1;
                this->comb_tilde_16_feedBack_clear();
            
                if (this->comb_tilde_16_feedBack_reader >= this->comb_tilde_16_feedBack__maxdelay || this->comb_tilde_16_feedBack_writer >= this->comb_tilde_16_feedBack__maxdelay) {
                    this->comb_tilde_16_feedBack_reader = 0;
                    this->comb_tilde_16_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_16_feedBack_dspsetup() {
                this->comb_tilde_16_feedBack_reset();
            }
            
            number comb_tilde_16_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_16_feedBack_size() {
                return this->comb_tilde_16_feedBack__maxdelay;
            }
            
            void comb_tilde_16_init() {
                this->comb_tilde_16_feedForward_init();
                this->comb_tilde_16_feedBack_init();
            }
            
            void comb_tilde_16_clear() {
                this->comb_tilde_16_feedForward_clear();
                this->comb_tilde_16_feedBack_clear();
            }
            
            void comb_tilde_16_reset() {
                this->comb_tilde_16_init();
                this->comb_tilde_16_clear();
            }
            
            void comb_tilde_16_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_16_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_16_reset();
                this->comb_tilde_16_setupDone = true;
                this->comb_tilde_16_feedForward_dspsetup();
                this->comb_tilde_16_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                comb_tilde_10_x = 0;
                comb_tilde_10_delayTime = 110;
                comb_tilde_10_gain = 0;
                comb_tilde_10_ffGain = 1;
                comb_tilde_10_fbGain = 0;
                dspexpr_26_in1 = 0;
                dspexpr_26_in2 = 110;
                comb_tilde_11_x = 0;
                comb_tilde_11_delayTime = 135;
                comb_tilde_11_gain = 0;
                comb_tilde_11_ffGain = 1;
                comb_tilde_11_fbGain = 0;
                dspexpr_27_in1 = 0;
                dspexpr_27_in2 = 135;
                comb_tilde_12_x = 0;
                comb_tilde_12_delayTime = 55;
                comb_tilde_12_gain = 0;
                comb_tilde_12_ffGain = 1;
                comb_tilde_12_fbGain = 0;
                dspexpr_28_in1 = 0;
                dspexpr_28_in2 = 55;
                dspexpr_29_in1 = 0;
                dspexpr_29_in2 = 0.355;
                comb_tilde_13_x = 0;
                comb_tilde_13_delayTime = 3;
                comb_tilde_13_gain = 0;
                comb_tilde_13_ffGain = 1;
                comb_tilde_13_fbGain = 0;
                dspexpr_30_in1 = 0;
                dspexpr_30_in2 = 0;
                dspexpr_31_in1 = 0;
                dspexpr_31_in2 = 3;
                dspexpr_32_in1 = 0;
                dspexpr_32_in2 = -1;
                comb_tilde_14_x = 0;
                comb_tilde_14_delayTime = 35;
                comb_tilde_14_gain = 0;
                comb_tilde_14_ffGain = 1;
                comb_tilde_14_fbGain = 0;
                dspexpr_33_in1 = 0;
                dspexpr_33_in2 = 35;
                comb_tilde_15_x = 0;
                comb_tilde_15_delayTime = 27;
                comb_tilde_15_gain = 0;
                comb_tilde_15_ffGain = 1;
                comb_tilde_15_fbGain = 0;
                dspexpr_34_in1 = 0;
                dspexpr_34_in2 = 27;
                comb_tilde_16_x = 0;
                comb_tilde_16_delayTime = 52;
                comb_tilde_16_gain = 0;
                comb_tilde_16_ffGain = 1;
                comb_tilde_16_fbGain = 0;
                dspexpr_35_in1 = 0;
                dspexpr_35_in2 = 52;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                comb_tilde_10_feedForward__maxdelay = 0;
                comb_tilde_10_feedForward_sizemode = 0;
                comb_tilde_10_feedForward_wrap = 0;
                comb_tilde_10_feedForward_reader = 0;
                comb_tilde_10_feedForward_writer = 0;
                comb_tilde_10_feedBack__maxdelay = 0;
                comb_tilde_10_feedBack_sizemode = 0;
                comb_tilde_10_feedBack_wrap = 0;
                comb_tilde_10_feedBack_reader = 0;
                comb_tilde_10_feedBack_writer = 0;
                comb_tilde_10_setupDone = false;
                comb_tilde_11_feedForward__maxdelay = 0;
                comb_tilde_11_feedForward_sizemode = 0;
                comb_tilde_11_feedForward_wrap = 0;
                comb_tilde_11_feedForward_reader = 0;
                comb_tilde_11_feedForward_writer = 0;
                comb_tilde_11_feedBack__maxdelay = 0;
                comb_tilde_11_feedBack_sizemode = 0;
                comb_tilde_11_feedBack_wrap = 0;
                comb_tilde_11_feedBack_reader = 0;
                comb_tilde_11_feedBack_writer = 0;
                comb_tilde_11_setupDone = false;
                comb_tilde_12_feedForward__maxdelay = 0;
                comb_tilde_12_feedForward_sizemode = 0;
                comb_tilde_12_feedForward_wrap = 0;
                comb_tilde_12_feedForward_reader = 0;
                comb_tilde_12_feedForward_writer = 0;
                comb_tilde_12_feedBack__maxdelay = 0;
                comb_tilde_12_feedBack_sizemode = 0;
                comb_tilde_12_feedBack_wrap = 0;
                comb_tilde_12_feedBack_reader = 0;
                comb_tilde_12_feedBack_writer = 0;
                comb_tilde_12_setupDone = false;
                comb_tilde_13_feedForward__maxdelay = 0;
                comb_tilde_13_feedForward_sizemode = 0;
                comb_tilde_13_feedForward_wrap = 0;
                comb_tilde_13_feedForward_reader = 0;
                comb_tilde_13_feedForward_writer = 0;
                comb_tilde_13_feedBack__maxdelay = 0;
                comb_tilde_13_feedBack_sizemode = 0;
                comb_tilde_13_feedBack_wrap = 0;
                comb_tilde_13_feedBack_reader = 0;
                comb_tilde_13_feedBack_writer = 0;
                comb_tilde_13_setupDone = false;
                comb_tilde_14_feedForward__maxdelay = 0;
                comb_tilde_14_feedForward_sizemode = 0;
                comb_tilde_14_feedForward_wrap = 0;
                comb_tilde_14_feedForward_reader = 0;
                comb_tilde_14_feedForward_writer = 0;
                comb_tilde_14_feedBack__maxdelay = 0;
                comb_tilde_14_feedBack_sizemode = 0;
                comb_tilde_14_feedBack_wrap = 0;
                comb_tilde_14_feedBack_reader = 0;
                comb_tilde_14_feedBack_writer = 0;
                comb_tilde_14_setupDone = false;
                comb_tilde_15_feedForward__maxdelay = 0;
                comb_tilde_15_feedForward_sizemode = 0;
                comb_tilde_15_feedForward_wrap = 0;
                comb_tilde_15_feedForward_reader = 0;
                comb_tilde_15_feedForward_writer = 0;
                comb_tilde_15_feedBack__maxdelay = 0;
                comb_tilde_15_feedBack_sizemode = 0;
                comb_tilde_15_feedBack_wrap = 0;
                comb_tilde_15_feedBack_reader = 0;
                comb_tilde_15_feedBack_writer = 0;
                comb_tilde_15_setupDone = false;
                comb_tilde_16_feedForward__maxdelay = 0;
                comb_tilde_16_feedForward_sizemode = 0;
                comb_tilde_16_feedForward_wrap = 0;
                comb_tilde_16_feedForward_reader = 0;
                comb_tilde_16_feedForward_writer = 0;
                comb_tilde_16_feedBack__maxdelay = 0;
                comb_tilde_16_feedBack_sizemode = 0;
                comb_tilde_16_feedBack_wrap = 0;
                comb_tilde_16_feedBack_reader = 0;
                comb_tilde_16_feedBack_writer = 0;
                comb_tilde_16_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number comb_tilde_10_x;
                number comb_tilde_10_delayTime;
                number comb_tilde_10_gain;
                number comb_tilde_10_ffGain;
                number comb_tilde_10_fbGain;
                number dspexpr_26_in1;
                number dspexpr_26_in2;
                number comb_tilde_11_x;
                number comb_tilde_11_delayTime;
                number comb_tilde_11_gain;
                number comb_tilde_11_ffGain;
                number comb_tilde_11_fbGain;
                number dspexpr_27_in1;
                number dspexpr_27_in2;
                number comb_tilde_12_x;
                number comb_tilde_12_delayTime;
                number comb_tilde_12_gain;
                number comb_tilde_12_ffGain;
                number comb_tilde_12_fbGain;
                number dspexpr_28_in1;
                number dspexpr_28_in2;
                number dspexpr_29_in1;
                number dspexpr_29_in2;
                number comb_tilde_13_x;
                number comb_tilde_13_delayTime;
                number comb_tilde_13_gain;
                number comb_tilde_13_ffGain;
                number comb_tilde_13_fbGain;
                number dspexpr_30_in1;
                number dspexpr_30_in2;
                number dspexpr_31_in1;
                number dspexpr_31_in2;
                number dspexpr_32_in1;
                number dspexpr_32_in2;
                number comb_tilde_14_x;
                number comb_tilde_14_delayTime;
                number comb_tilde_14_gain;
                number comb_tilde_14_ffGain;
                number comb_tilde_14_fbGain;
                number dspexpr_33_in1;
                number dspexpr_33_in2;
                number comb_tilde_15_x;
                number comb_tilde_15_delayTime;
                number comb_tilde_15_gain;
                number comb_tilde_15_ffGain;
                number comb_tilde_15_fbGain;
                number dspexpr_34_in1;
                number dspexpr_34_in2;
                number comb_tilde_16_x;
                number comb_tilde_16_delayTime;
                number comb_tilde_16_gain;
                number comb_tilde_16_ffGain;
                number comb_tilde_16_fbGain;
                number dspexpr_35_in1;
                number dspexpr_35_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef comb_tilde_10_feedForward_buffer;
                Index comb_tilde_10_feedForward__maxdelay;
                Int comb_tilde_10_feedForward_sizemode;
                Index comb_tilde_10_feedForward_wrap;
                Int comb_tilde_10_feedForward_reader;
                Int comb_tilde_10_feedForward_writer;
                Float64BufferRef comb_tilde_10_feedBack_buffer;
                Index comb_tilde_10_feedBack__maxdelay;
                Int comb_tilde_10_feedBack_sizemode;
                Index comb_tilde_10_feedBack_wrap;
                Int comb_tilde_10_feedBack_reader;
                Int comb_tilde_10_feedBack_writer;
                bool comb_tilde_10_setupDone;
                Float64BufferRef comb_tilde_11_feedForward_buffer;
                Index comb_tilde_11_feedForward__maxdelay;
                Int comb_tilde_11_feedForward_sizemode;
                Index comb_tilde_11_feedForward_wrap;
                Int comb_tilde_11_feedForward_reader;
                Int comb_tilde_11_feedForward_writer;
                Float64BufferRef comb_tilde_11_feedBack_buffer;
                Index comb_tilde_11_feedBack__maxdelay;
                Int comb_tilde_11_feedBack_sizemode;
                Index comb_tilde_11_feedBack_wrap;
                Int comb_tilde_11_feedBack_reader;
                Int comb_tilde_11_feedBack_writer;
                bool comb_tilde_11_setupDone;
                Float64BufferRef comb_tilde_12_feedForward_buffer;
                Index comb_tilde_12_feedForward__maxdelay;
                Int comb_tilde_12_feedForward_sizemode;
                Index comb_tilde_12_feedForward_wrap;
                Int comb_tilde_12_feedForward_reader;
                Int comb_tilde_12_feedForward_writer;
                Float64BufferRef comb_tilde_12_feedBack_buffer;
                Index comb_tilde_12_feedBack__maxdelay;
                Int comb_tilde_12_feedBack_sizemode;
                Index comb_tilde_12_feedBack_wrap;
                Int comb_tilde_12_feedBack_reader;
                Int comb_tilde_12_feedBack_writer;
                bool comb_tilde_12_setupDone;
                Float64BufferRef comb_tilde_13_feedForward_buffer;
                Index comb_tilde_13_feedForward__maxdelay;
                Int comb_tilde_13_feedForward_sizemode;
                Index comb_tilde_13_feedForward_wrap;
                Int comb_tilde_13_feedForward_reader;
                Int comb_tilde_13_feedForward_writer;
                Float64BufferRef comb_tilde_13_feedBack_buffer;
                Index comb_tilde_13_feedBack__maxdelay;
                Int comb_tilde_13_feedBack_sizemode;
                Index comb_tilde_13_feedBack_wrap;
                Int comb_tilde_13_feedBack_reader;
                Int comb_tilde_13_feedBack_writer;
                bool comb_tilde_13_setupDone;
                Float64BufferRef comb_tilde_14_feedForward_buffer;
                Index comb_tilde_14_feedForward__maxdelay;
                Int comb_tilde_14_feedForward_sizemode;
                Index comb_tilde_14_feedForward_wrap;
                Int comb_tilde_14_feedForward_reader;
                Int comb_tilde_14_feedForward_writer;
                Float64BufferRef comb_tilde_14_feedBack_buffer;
                Index comb_tilde_14_feedBack__maxdelay;
                Int comb_tilde_14_feedBack_sizemode;
                Index comb_tilde_14_feedBack_wrap;
                Int comb_tilde_14_feedBack_reader;
                Int comb_tilde_14_feedBack_writer;
                bool comb_tilde_14_setupDone;
                Float64BufferRef comb_tilde_15_feedForward_buffer;
                Index comb_tilde_15_feedForward__maxdelay;
                Int comb_tilde_15_feedForward_sizemode;
                Index comb_tilde_15_feedForward_wrap;
                Int comb_tilde_15_feedForward_reader;
                Int comb_tilde_15_feedForward_writer;
                Float64BufferRef comb_tilde_15_feedBack_buffer;
                Index comb_tilde_15_feedBack__maxdelay;
                Int comb_tilde_15_feedBack_sizemode;
                Index comb_tilde_15_feedBack_wrap;
                Int comb_tilde_15_feedBack_reader;
                Int comb_tilde_15_feedBack_writer;
                bool comb_tilde_15_setupDone;
                Float64BufferRef comb_tilde_16_feedForward_buffer;
                Index comb_tilde_16_feedForward__maxdelay;
                Int comb_tilde_16_feedForward_sizemode;
                Index comb_tilde_16_feedForward_wrap;
                Int comb_tilde_16_feedForward_reader;
                Int comb_tilde_16_feedForward_writer;
                Float64BufferRef comb_tilde_16_feedBack_buffer;
                Index comb_tilde_16_feedBack__maxdelay;
                Int comb_tilde_16_feedBack_sizemode;
                Index comb_tilde_16_feedBack_wrap;
                Int comb_tilde_16_feedBack_reader;
                Int comb_tilde_16_feedBack_writer;
                bool comb_tilde_16_setupDone;
                number stackprotect_count;
                DataRef comb_tilde_10_feedForward_bufferobj;
                DataRef comb_tilde_10_feedBack_bufferobj;
                DataRef comb_tilde_11_feedForward_bufferobj;
                DataRef comb_tilde_11_feedBack_bufferobj;
                DataRef comb_tilde_12_feedForward_bufferobj;
                DataRef comb_tilde_12_feedBack_bufferobj;
                DataRef comb_tilde_13_feedForward_bufferobj;
                DataRef comb_tilde_13_feedBack_bufferobj;
                DataRef comb_tilde_14_feedForward_bufferobj;
                DataRef comb_tilde_14_feedBack_bufferobj;
                DataRef comb_tilde_15_feedForward_bufferobj;
                DataRef comb_tilde_15_feedBack_bufferobj;
                DataRef comb_tilde_16_feedForward_bufferobj;
                DataRef comb_tilde_16_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_176()
    {
    }
    
    ~RNBOSubpatcher_176()
    {
        delete this->p_09;
        delete this->p_10;
        delete this->p_11;
        delete this->p_12;
        delete this->p_13;
        delete this->p_14;
        delete this->p_15;
        delete this->p_16;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 892732297, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 848255507, false);
        getEngine()->flushClockEvents(this, 1935387534, false);
        getEngine()->flushClockEvents(this, -444440180, false);
        getEngine()->flushClockEvents(this, -62043057, false);
        getEngine()->flushClockEvents(this, -1621164530, false);
        getEngine()->flushClockEvents(this, 732284170, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, 1114681293, false);
        getEngine()->flushClockEvents(this, -2003561653, false);
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    number fold(number x, number low, number high) {
        number lo;
        number hi;
    
        if (low == high) {
            return low;
        }
    
        if (low > high) {
            hi = low;
            lo = high;
        } else {
            lo = low;
            hi = high;
        }
    
        number range = hi - lo;
        int numWraps = 0;
    
        if (x >= hi) {
            x -= range;
    
            if (x >= hi) {
                numWraps = (x - lo) / range;
                x -= range * numWraps;
            }
    
            numWraps++;
        } else if (x < lo) {
            x += range;
    
            if (x < lo) {
                numWraps = (x - lo) / range - 1;
                x -= range * numWraps;
            }
    
            numWraps--;
        }
    
        if ((BinOpInt)((BinOpInt)numWraps & (BinOpInt)1))
            x = hi + lo - x;
    
        return x;
    }
    
    ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
        return this->convertFromNormalizedParameterValue(index, normalizedValue);
    }
    
    Index getNumMidiInputPorts() const {
        return 1;
    }
    
    void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
        this->updateTime(time);
        this->ctlin_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_02_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_03_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_04_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_05_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_06_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    }
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * source_Decay = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
        SampleValue * source_Jitter = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
        SampleValue * source_Damp = (numOutputs >= 5 && outputs[4] ? outputs[4] : this->dummyBuffer);
        SampleValue * source_Diff = (numOutputs >= 6 && outputs[5] ? outputs[5] : this->dummyBuffer);
        SampleValue * source_Size = (numOutputs >= 7 && outputs[6] ? outputs[6] : this->dummyBuffer);
        const SampleValue * target_Size = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
        const SampleValue * target_Diff = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
        const SampleValue * target_Decay = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
        const SampleValue * target_Jitter = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
        const SampleValue * target_Damp = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->linetilde_02_perform(this->signals[0], n);
        this->signalsend_01_perform(this->signals[0], this->signals[1], n);
        this->signalforwarder_01_perform(this->signals[1], source_Decay, n);
        this->linetilde_03_perform(this->signals[0], n);
        this->linetilde_04_perform(this->signals[2], n);
        this->signalsend_02_perform(this->signals[2], this->signals[3], n);
        this->signalforwarder_02_perform(this->signals[3], source_Jitter, n);
        this->linetilde_05_perform(this->signals[2], n);
        this->signalsend_03_perform(this->signals[2], this->signals[4], n);
        this->signalforwarder_03_perform(this->signals[4], source_Damp, n);
    
        this->cycle_tilde_06_perform(
            this->cycle_tilde_06_frequency,
            this->cycle_tilde_06_phase_offset,
            this->signals[2],
            this->dummyBuffer,
            n
        );
    
        this->scopetilde_01_perform(this->signals[2], this->zeroBuffer, n);
        this->numbertilde_07_perform(this->signals[2], this->dummyBuffer, n);
        this->linetilde_06_perform(this->signals[2], n);
        this->signalsend_04_perform(this->signals[2], this->signals[5], n);
        this->signalforwarder_04_perform(this->signals[5], source_Diff, n);
        this->linetilde_07_perform(this->signals[2], n);
        this->signalsend_05_perform(this->signals[2], this->signals[6], n);
        this->signalforwarder_05_perform(this->signals[6], source_Size, n);
        this->stackprotect_perform(n);
        this->signaladder_04_perform(target_Damp, this->signals[4], this->signals[8], n);
        this->p_14_perform(this->signals[8], in1, in2, this->signals[2], this->signals[7], n);
        this->p_11_perform(this->signals[2], this->signals[7], this->signals[9], this->signals[10], n);
        this->signaladder_05_perform(target_Size, this->signals[6], this->signals[13], n);
        this->signaladder_06_perform(target_Decay, this->signals[1], this->signals[14], n);
        this->signaladder_07_perform(target_Jitter, this->signals[3], this->signals[15], n);
        this->signaladder_08_perform(target_Damp, this->signals[4], this->signals[16], n);
    
        this->p_13_perform(
            this->signals[13],
            this->signals[14],
            this->signals[15],
            this->signals[16],
            this->signals[9],
            this->signals[7],
            this->signals[2],
            this->signals[11],
            this->signals[12],
            n
        );
    
        this->signaladder_09_perform(target_Size, this->signals[6], this->signals[20], n);
        this->signaladder_10_perform(target_Decay, this->signals[1], this->signals[1], n);
        this->signaladder_11_perform(target_Jitter, this->signals[3], this->signals[3], n);
        this->signaladder_12_perform(target_Damp, this->signals[4], this->signals[4], n);
    
        this->p_15_perform(
            this->signals[20],
            this->signals[1],
            this->signals[3],
            this->signals[4],
            this->signals[10],
            this->signals[9],
            this->signals[17],
            this->signals[18],
            this->signals[19],
            n
        );
    
        this->p_10_perform(
            this->signals[7],
            this->signals[2],
            this->signals[11],
            this->signals[12],
            this->signals[9],
            this->signals[17],
            this->signals[18],
            this->signals[19],
            this->signals[10],
            this->signals[21],
            this->signals[22],
            this->signals[23],
            this->signals[24],
            this->signals[25],
            this->signals[26],
            this->signals[27],
            this->signals[28],
            this->signals[29],
            this->signals[30],
            this->signals[31],
            this->signals[32],
            this->signals[33],
            n
        );
    
        this->signaladder_13_perform(target_Size, this->signals[6], this->signals[18], n);
        this->signaladder_14_perform(target_Diff, this->signals[5], this->signals[17], n);
    
        this->p_12_perform(
            this->signals[18],
            this->signals[17],
            this->signals[10],
            this->signals[21],
            this->signals[22],
            this->signals[23],
            this->signals[24],
            this->signals[25],
            this->signals[26],
            this->signals[19],
            n
        );
    
        this->signaladder_15_perform(target_Size, this->signals[6], this->signals[6], n);
        this->signaladder_16_perform(target_Diff, this->signals[5], this->signals[5], n);
    
        this->p_16_perform(
            this->signals[6],
            this->signals[5],
            this->signals[27],
            this->signals[28],
            this->signals[29],
            this->signals[30],
            this->signals[31],
            this->signals[32],
            this->signals[33],
            this->signals[26],
            n
        );
    
        this->p_09_perform(
            in1,
            in2,
            this->signals[19],
            this->signals[26],
            this->signals[0],
            out1,
            out2,
            n
        );
    
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 34; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->cycle_tilde_06_dspsetup(forceDSPSetup);
        this->scopetilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_07_dspsetup(forceDSPSetup);
        this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_16->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_09->processTempoEvent(time, tempo);
        this->p_10->processTempoEvent(time, tempo);
        this->p_11->processTempoEvent(time, tempo);
        this->p_12->processTempoEvent(time, tempo);
        this->p_13->processTempoEvent(time, tempo);
        this->p_14->processTempoEvent(time, tempo);
        this->p_15->processTempoEvent(time, tempo);
        this->p_16->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_09->processTransportEvent(time, state);
        this->p_10->processTransportEvent(time, state);
        this->p_11->processTransportEvent(time, state);
        this->p_12->processTransportEvent(time, state);
        this->p_13->processTransportEvent(time, state);
        this->p_14->processTransportEvent(time, state);
        this->p_15->processTransportEvent(time, state);
        this->p_16->processTransportEvent(time, state);
        this->metro_01_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_09->processBeatTimeEvent(time, beattime);
        this->p_10->processBeatTimeEvent(time, beattime);
        this->p_11->processBeatTimeEvent(time, beattime);
        this->p_12->processBeatTimeEvent(time, beattime);
        this->p_13->processBeatTimeEvent(time, beattime);
        this->p_14->processBeatTimeEvent(time, beattime);
        this->p_15->processBeatTimeEvent(time, beattime);
        this->p_16->processBeatTimeEvent(time, beattime);
        this->metro_01_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_09->processTimeSignatureEvent(time, numerator, denominator);
        this->p_10->processTimeSignatureEvent(time, numerator, denominator);
        this->p_11->processTimeSignatureEvent(time, numerator, denominator);
        this->p_12->processTimeSignatureEvent(time, numerator, denominator);
        this->p_13->processTimeSignatureEvent(time, numerator, denominator);
        this->p_14->processTimeSignatureEvent(time, numerator, denominator);
        this->p_15->processTimeSignatureEvent(time, numerator, denominator);
        this->p_16->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
        this->updateTime(time);
        this->p_09->processBBUEvent(time, bars, beats, units);
        this->p_10->processBBUEvent(time, bars, beats, units);
        this->p_11->processBBUEvent(time, bars, beats, units);
        this->p_12->processBBUEvent(time, bars, beats, units);
        this->p_13->processBBUEvent(time, bars, beats, units);
        this->p_14->processBBUEvent(time, bars, beats, units);
        this->p_15->processBBUEvent(time, bars, beats, units);
        this->p_16->processBBUEvent(time, bars, beats, units);
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_09 = new RNBOSubpatcher_149();
        this->p_09->setEngineAndPatcher(this->getEngine(), this);
        this->p_09->initialize();
        this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
        this->p_10 = new RNBOSubpatcher_150();
        this->p_10->setEngineAndPatcher(this->getEngine(), this);
        this->p_10->initialize();
        this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
        this->p_11 = new RNBOSubpatcher_151();
        this->p_11->setEngineAndPatcher(this->getEngine(), this);
        this->p_11->initialize();
        this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
        this->p_12 = new RNBOSubpatcher_152();
        this->p_12->setEngineAndPatcher(this->getEngine(), this);
        this->p_12->initialize();
        this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
        this->p_13 = new RNBOSubpatcher_153();
        this->p_13->setEngineAndPatcher(this->getEngine(), this);
        this->p_13->initialize();
        this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
        this->p_14 = new RNBOSubpatcher_154();
        this->p_14->setEngineAndPatcher(this->getEngine(), this);
        this->p_14->initialize();
        this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
        this->p_15 = new RNBOSubpatcher_155();
        this->p_15->setEngineAndPatcher(this->getEngine(), this);
        this->p_15->initialize();
        this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
        this->p_16 = new RNBOSubpatcher_156();
        this->p_16->setEngineAndPatcher(this->getEngine(), this);
        this->p_16->initialize();
        this->p_16->setParameterOffset(this->getParameterOffset(this->p_16));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_03_getPresetValue(getSubState(preset, "decay"));
        this->param_04_getPresetValue(getSubState(preset, "DecayLFO"));
        this->param_05_getPresetValue(getSubState(preset, "mix"));
        this->param_06_getPresetValue(getSubState(preset, "jitter"));
        this->param_07_getPresetValue(getSubState(preset, "damp"));
        this->param_08_getPresetValue(getSubState(preset, "size"));
        this->param_09_getPresetValue(getSubState(preset, "diff"));
        this->param_10_getPresetValue(getSubState(preset, "SizeRandom"));
        this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "Mix~"));
        this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "Shuffle~"));
        this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "Blur~"));
        this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "CombL~"));
        this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "RoomA~"));
        this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "Damp~"));
        this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "RoomB~"));
        this->p_16->getPreset(getSubState(getSubState(preset, "__sps"), "CombR~"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_03_value_set(v);
            break;
            }
        case 1:
            {
            this->param_04_value_set(v);
            break;
            }
        case 2:
            {
            this->param_05_value_set(v);
            break;
            }
        case 3:
            {
            this->param_06_value_set(v);
            break;
            }
        case 4:
            {
            this->param_07_value_set(v);
            break;
            }
        case 5:
            {
            this->param_08_value_set(v);
            break;
            }
        case 6:
            {
            this->param_09_value_set(v);
            break;
            }
        case 7:
            {
            this->param_10_value_set(v);
            break;
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                this->p_09->setParameterValue(index, v, time);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                this->p_10->setParameterValue(index, v, time);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                this->p_11->setParameterValue(index, v, time);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                this->p_12->setParameterValue(index, v, time);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                this->p_13->setParameterValue(index, v, time);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                this->p_14->setParameterValue(index, v, time);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                this->p_15->setParameterValue(index, v, time);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                this->p_16->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_03_value;
            }
        case 1:
            {
            return this->param_04_value;
            }
        case 2:
            {
            return this->param_05_value;
            }
        case 3:
            {
            return this->param_06_value;
            }
        case 4:
            {
            return this->param_07_value;
            }
        case 5:
            {
            return this->param_08_value;
            }
        case 6:
            {
            return this->param_09_value;
            }
        case 7:
            {
            return this->param_10_value;
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterValue(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterValue(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterValue(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterValue(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterValue(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterValue(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterValue(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 5;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 5;
    }
    
    ParameterIndex getNumParameters() const {
        return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "decay";
            }
        case 1:
            {
            return "DecayLFO";
            }
        case 2:
            {
            return "mix";
            }
        case 3:
            {
            return "jitter";
            }
        case 4:
            {
            return "damp";
            }
        case 5:
            {
            return "size";
            }
        case 6:
            {
            return "diff";
            }
        case 7:
            {
            return "SizeRandom";
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterName(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterName(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterName(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterName(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterName(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterName(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterName(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "Verb/decay";
            }
        case 1:
            {
            return "Verb/DecayLFO";
            }
        case 2:
            {
            return "Verb/mix";
            }
        case 3:
            {
            return "Verb/jitter";
            }
        case 4:
            {
            return "Verb/damp";
            }
        case 5:
            {
            return "Verb/size";
            }
        case 6:
            {
            return "Verb/diff";
            }
        case 7:
            {
            return "Verb/SizeRandom";
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterId(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterId(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterId(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterId(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterId(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterId(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterId(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Decay";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Mix";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 3:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Jitter";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 4:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Damp";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 5:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Size";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 6:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Diff";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 7:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 8;
    
                if (index < this->p_09->getNumParameters())
                    this->p_09->getParameterInfo(index, info);
    
                index -= this->p_09->getNumParameters();
    
                if (index < this->p_10->getNumParameters())
                    this->p_10->getParameterInfo(index, info);
    
                index -= this->p_10->getNumParameters();
    
                if (index < this->p_11->getNumParameters())
                    this->p_11->getParameterInfo(index, info);
    
                index -= this->p_11->getNumParameters();
    
                if (index < this->p_12->getNumParameters())
                    this->p_12->getParameterInfo(index, info);
    
                index -= this->p_12->getNumParameters();
    
                if (index < this->p_13->getNumParameters())
                    this->p_13->getParameterInfo(index, info);
    
                index -= this->p_13->getNumParameters();
    
                if (index < this->p_14->getNumParameters())
                    this->p_14->getParameterInfo(index, info);
    
                index -= this->p_14->getNumParameters();
    
                if (index < this->p_15->getNumParameters())
                    this->p_15->getParameterInfo(index, info);
    
                index -= this->p_15->getNumParameters();
    
                if (index < this->p_16->getNumParameters())
                    this->p_16->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_09)
            return 8;
    
        if (subpatcher == this->p_10)
            return 8 + this->p_09->getNumParameters();
    
        if (subpatcher == this->p_11)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters();
    
        if (subpatcher == this->p_12)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters();
    
        if (subpatcher == this->p_13)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters();
    
        if (subpatcher == this->p_14)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters();
    
        if (subpatcher == this->p_15)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters();
    
        if (subpatcher == this->p_16)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
        case 7:
            {
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
            }
        case 0:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
            {
            {
                value = (value < 0 ? 0 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 0) / (100 - 0);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
        case 7:
            {
            {
                {
                    return 0 + value * (1 - 0);
                }
            }
            }
        case 0:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
            {
            {
                {
                    return 0 + value * (100 - 0);
                }
            }
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_03_value_constrain(value);
            }
        case 1:
            {
            return this->param_04_value_constrain(value);
            }
        case 2:
            {
            return this->param_05_value_constrain(value);
            }
        case 3:
            {
            return this->param_06_value_constrain(value);
            }
        case 4:
            {
            return this->param_07_value_constrain(value);
            }
        case 5:
            {
            return this->param_08_value_constrain(value);
            }
        case 6:
            {
            return this->param_09_value_constrain(value);
            }
        case 7:
            {
            return this->param_10_value_constrain(value);
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->constrainParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->constrainParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->constrainParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->constrainParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->constrainParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->constrainParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->constrainParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 892732297:
            {
            this->loadmess_02_startupbang_bang();
            break;
            }
        case -871642103:
            {
            this->loadbang_05_startupbang_bang();
            break;
            }
        case 848255507:
            {
            this->line_05_tick_set(value);
            break;
            }
        case 1935387534:
            {
            this->metro_01_tick_bang();
            break;
            }
        case -444440180:
            {
            this->linetilde_02_target_bang();
            break;
            }
        case -62043057:
            {
            this->linetilde_03_target_bang();
            break;
            }
        case -1621164530:
            {
            this->linetilde_04_target_bang();
            break;
            }
        case 732284170:
            {
            this->linetilde_05_target_bang();
            break;
            }
        case -1494586265:
            {
            this->numbertilde_07_value_set(value);
            break;
            }
        case 1114681293:
            {
            this->linetilde_06_target_bang();
            break;
            }
        case -2003561653:
            {
            this->linetilde_07_target_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("Verb/number_obj-26") == objectId)
                this->numberobj_28_valin_set(payload);
    
            if (TAG("Verb/number_obj-2") == objectId)
                this->numberobj_29_valin_set(payload);
    
            if (TAG("Verb/number_obj-119") == objectId)
                this->numberobj_30_valin_set(payload);
    
            if (TAG("Verb/number_obj-67") == objectId)
                this->numberobj_31_valin_set(payload);
    
            if (TAG("Verb/number_obj-3") == objectId)
                this->numberobj_32_valin_set(payload);
    
            if (TAG("Verb/number_obj-54") == objectId)
                this->numberobj_33_valin_set(payload);
    
            if (TAG("Verb/number_obj-97") == objectId)
                this->numberobj_34_valin_set(payload);
    
            if (TAG("Verb/number_obj-9") == objectId)
                this->numberobj_35_valin_set(payload);
    
            if (TAG("Verb/number_obj-42") == objectId)
                this->numberobj_36_valin_set(payload);
    
            if (TAG("Verb/number_obj-21") == objectId)
                this->numberobj_37_valin_set(payload);
    
            if (TAG("Verb/number_obj-23") == objectId)
                this->numberobj_38_valin_set(payload);
    
            if (TAG("Verb/number_obj-16") == objectId)
                this->numberobj_39_valin_set(payload);
    
            if (TAG("Verb/number_obj-18") == objectId)
                this->numberobj_40_valin_set(payload);
    
            if (TAG("Verb/number_obj-151") == objectId)
                this->numberobj_41_valin_set(payload);
    
            if (TAG("Verb/toggle_obj-74") == objectId)
                this->toggle_01_valin_set(payload);
    
            if (TAG("Verb/number_obj-147") == objectId)
                this->numberobj_42_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Verb/number_obj-26") == objectId)
                this->numberobj_28_format_set(payload);
    
            if (TAG("Verb/number_obj-2") == objectId)
                this->numberobj_29_format_set(payload);
    
            if (TAG("Verb/number_obj-119") == objectId)
                this->numberobj_30_format_set(payload);
    
            if (TAG("Verb/number_obj-67") == objectId)
                this->numberobj_31_format_set(payload);
    
            if (TAG("Verb/number_obj-3") == objectId)
                this->numberobj_32_format_set(payload);
    
            if (TAG("Verb/number_obj-54") == objectId)
                this->numberobj_33_format_set(payload);
    
            if (TAG("Verb/number_obj-97") == objectId)
                this->numberobj_34_format_set(payload);
    
            if (TAG("Verb/number_obj-9") == objectId)
                this->numberobj_35_format_set(payload);
    
            if (TAG("Verb/number_obj-42") == objectId)
                this->numberobj_36_format_set(payload);
    
            if (TAG("Verb/number_obj-21") == objectId)
                this->numberobj_37_format_set(payload);
    
            if (TAG("Verb/number_obj-23") == objectId)
                this->numberobj_38_format_set(payload);
    
            if (TAG("Verb/number_obj-16") == objectId)
                this->numberobj_39_format_set(payload);
    
            if (TAG("Verb/number_obj-18") == objectId)
                this->numberobj_40_format_set(payload);
    
            if (TAG("Verb/number_obj-151") == objectId)
                this->numberobj_41_format_set(payload);
    
            if (TAG("Verb/number_obj-147") == objectId)
                this->numberobj_42_format_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("Verb/number~_obj-38") == objectId)
                this->numbertilde_07_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("Verb/number~_obj-38") == objectId)
                this->numbertilde_07_mode_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Verb/message_obj-82") == objectId)
                this->message_63_listin_number_set(payload);
    
            if (TAG("Verb/message_obj-80") == objectId)
                this->message_64_listin_number_set(payload);
    
            if (TAG("Verb/message_obj-155") == objectId)
                this->message_65_listin_number_set(payload);
    
            if (TAG("Verb/message_obj-148") == objectId)
                this->message_66_listin_number_set(payload);
    
            break;
            }
        }
    
        this->p_09->processNumMessage(tag, objectId, time, payload);
        this->p_10->processNumMessage(tag, objectId, time, payload);
        this->p_11->processNumMessage(tag, objectId, time, payload);
        this->p_12->processNumMessage(tag, objectId, time, payload);
        this->p_13->processNumMessage(tag, objectId, time, payload);
        this->p_14->processNumMessage(tag, objectId, time, payload);
        this->p_15->processNumMessage(tag, objectId, time, payload);
        this->p_16->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Verb/number~_obj-38") == objectId)
                this->numbertilde_07_sig_list_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Verb/message_obj-82") == objectId)
                this->message_63_listin_list_set(payload);
    
            if (TAG("Verb/message_obj-80") == objectId)
                this->message_64_listin_list_set(payload);
    
            if (TAG("Verb/message_obj-155") == objectId)
                this->message_65_listin_list_set(payload);
    
            if (TAG("Verb/message_obj-148") == objectId)
                this->message_66_listin_list_set(payload);
    
            break;
            }
        }
    
        this->p_09->processListMessage(tag, objectId, time, payload);
        this->p_10->processListMessage(tag, objectId, time, payload);
        this->p_11->processListMessage(tag, objectId, time, payload);
        this->p_12->processListMessage(tag, objectId, time, payload);
        this->p_13->processListMessage(tag, objectId, time, payload);
        this->p_14->processListMessage(tag, objectId, time, payload);
        this->p_15->processListMessage(tag, objectId, time, payload);
        this->p_16->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("Verb/loadmess_obj-12") == objectId)
                this->loadmess_02_startupbang_bang();
    
            if (TAG("Verb/loadbang_obj-19") == objectId)
                this->loadbang_05_startupbang_bang();
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Verb/message_obj-82") == objectId)
                this->message_63_listin_bang_bang();
    
            if (TAG("Verb/message_obj-80") == objectId)
                this->message_64_listin_bang_bang();
    
            if (TAG("Verb/message_obj-155") == objectId)
                this->message_65_listin_bang_bang();
    
            if (TAG("Verb/message_obj-148") == objectId)
                this->message_66_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("Verb/button_obj-76") == objectId)
                this->button_13_bangin_bang();
    
            break;
            }
        }
    
        this->p_09->processBangMessage(tag, objectId, time);
        this->p_10->processBangMessage(tag, objectId, time);
        this->p_11->processBangMessage(tag, objectId, time);
        this->p_12->processBangMessage(tag, objectId, time);
        this->p_13->processBangMessage(tag, objectId, time);
        this->p_14->processBangMessage(tag, objectId, time);
        this->p_15->processBangMessage(tag, objectId, time);
        this->p_16->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Verb/number_obj-26"):
            {
            return "Verb/number_obj-26";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("Verb/number_obj-2"):
            {
            return "Verb/number_obj-2";
            }
        case TAG("Verb/number_obj-119"):
            {
            return "Verb/number_obj-119";
            }
        case TAG("Verb/number_obj-67"):
            {
            return "Verb/number_obj-67";
            }
        case TAG("Verb/number_obj-3"):
            {
            return "Verb/number_obj-3";
            }
        case TAG("Verb/number_obj-54"):
            {
            return "Verb/number_obj-54";
            }
        case TAG("Verb/number_obj-97"):
            {
            return "Verb/number_obj-97";
            }
        case TAG("Verb/number_obj-9"):
            {
            return "Verb/number_obj-9";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("Verb/number~_obj-38"):
            {
            return "Verb/number~_obj-38";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("Verb/number_obj-42"):
            {
            return "Verb/number_obj-42";
            }
        case TAG("Verb/number_obj-21"):
            {
            return "Verb/number_obj-21";
            }
        case TAG("Verb/number_obj-23"):
            {
            return "Verb/number_obj-23";
            }
        case TAG("Verb/number_obj-16"):
            {
            return "Verb/number_obj-16";
            }
        case TAG("Verb/number_obj-18"):
            {
            return "Verb/number_obj-18";
            }
        case TAG("Verb/scope~_obj-40"):
            {
            return "Verb/scope~_obj-40";
            }
        case TAG("Verb/number_obj-151"):
            {
            return "Verb/number_obj-151";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("Verb/message_obj-82"):
            {
            return "Verb/message_obj-82";
            }
        case TAG("Verb/toggle_obj-74"):
            {
            return "Verb/toggle_obj-74";
            }
        case TAG("Verb/message_obj-80"):
            {
            return "Verb/message_obj-80";
            }
        case TAG("Verb/message_obj-155"):
            {
            return "Verb/message_obj-155";
            }
        case TAG("Verb/number_obj-147"):
            {
            return "Verb/number_obj-147";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("Verb/button_obj-76"):
            {
            return "Verb/button_obj-76";
            }
        case TAG("Verb/message_obj-148"):
            {
            return "Verb/message_obj-148";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("Verb/loadmess_obj-12"):
            {
            return "Verb/loadmess_obj-12";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("Verb/loadbang_obj-19"):
            {
            return "Verb/loadbang_obj-19";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_09->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_10->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_11->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_12->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_13->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        auto subpatchResult_5 = this->p_14->resolveTag(tag);
    
        if (subpatchResult_5)
            return subpatchResult_5;
    
        auto subpatchResult_6 = this->p_15->resolveTag(tag);
    
        if (subpatchResult_6)
            return subpatchResult_6;
    
        auto subpatchResult_7 = this->p_16->resolveTag(tag);
    
        if (subpatchResult_7)
            return subpatchResult_7;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        case 3:
            {
            return addressOf(this->liststore_06_storage_storageobj);
            break;
            }
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 1;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void zeroDataRef(DataRef& ref) {
        ref->setZero();
    }
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->cycle_tilde_06_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_06_bufferUpdated();
        }
    
        if (index == 3) {
            this->liststore_06_storage_storage = new Float64Buffer(this->liststore_06_storage_storageobj);
        }
    
        this->p_09->processDataViewUpdate(index, time);
        this->p_10->processDataViewUpdate(index, time);
        this->p_11->processDataViewUpdate(index, time);
        this->p_12->processDataViewUpdate(index, time);
        this->p_13->processDataViewUpdate(index, time);
        this->p_14->processDataViewUpdate(index, time);
        this->p_15->processDataViewUpdate(index, time);
        this->p_16->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->liststore_06_storage_storageobj = initDataRef("liststore_06_storage_storageobj", true, nullptr, "buffer~");
        this->assign_defaults();
        this->setState();
        this->cycle_tilde_06_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->liststore_06_storage_storageobj->setIndex(3);
        this->liststore_06_storage_storage = new Float64Buffer(this->liststore_06_storage_storageobj);
    }
    
    protected:
    
    void param_03_value_set(number v) {
        v = this->param_03_value_constrain(v);
        this->param_03_value = v;
        this->sendParameter(0, false);
    
        if (this->param_03_value != this->param_03_lastValue) {
            this->getEngine()->presetTouched();
            this->param_03_lastValue = this->param_03_value;
        }
    
        this->numberobj_29_value_set(v);
    }
    
    void param_04_value_set(number v) {
        v = this->param_04_value_constrain(v);
        this->param_04_value = v;
        this->sendParameter(1, false);
    
        if (this->param_04_value != this->param_04_lastValue) {
            this->getEngine()->presetTouched();
            this->param_04_lastValue = this->param_04_value;
        }
    
        this->gate_01_onoff_set(v);
    }
    
    void param_05_value_set(number v) {
        v = this->param_05_value_constrain(v);
        this->param_05_value = v;
        this->sendParameter(2, false);
    
        if (this->param_05_value != this->param_05_lastValue) {
            this->getEngine()->presetTouched();
            this->param_05_lastValue = this->param_05_value;
        }
    
        this->numberobj_32_value_set(v);
    }
    
    void param_06_value_set(number v) {
        v = this->param_06_value_constrain(v);
        this->param_06_value = v;
        this->sendParameter(3, false);
    
        if (this->param_06_value != this->param_06_lastValue) {
            this->getEngine()->presetTouched();
            this->param_06_lastValue = this->param_06_value;
        }
    
        this->numberobj_33_value_set(v);
    }
    
    void param_07_value_set(number v) {
        v = this->param_07_value_constrain(v);
        this->param_07_value = v;
        this->sendParameter(4, false);
    
        if (this->param_07_value != this->param_07_lastValue) {
            this->getEngine()->presetTouched();
            this->param_07_lastValue = this->param_07_value;
        }
    
        this->numberobj_35_value_set(v);
    }
    
    void param_08_value_set(number v) {
        v = this->param_08_value_constrain(v);
        this->param_08_value = v;
        this->sendParameter(5, false);
    
        if (this->param_08_value != this->param_08_lastValue) {
            this->getEngine()->presetTouched();
            this->param_08_lastValue = this->param_08_value;
        }
    
        this->numberobj_38_value_set(v);
    }
    
    void param_09_value_set(number v) {
        v = this->param_09_value_constrain(v);
        this->param_09_value = v;
        this->sendParameter(6, false);
    
        if (this->param_09_value != this->param_09_lastValue) {
            this->getEngine()->presetTouched();
            this->param_09_lastValue = this->param_09_value;
        }
    
        this->numberobj_40_value_set(v);
    }
    
    void param_10_value_set(number v) {
        v = this->param_10_value_constrain(v);
        this->param_10_value = v;
        this->sendParameter(7, false);
    
        if (this->param_10_value != this->param_10_lastValue) {
            this->getEngine()->presetTouched();
            this->param_10_lastValue = this->param_10_value;
        }
    
        this->gate_02_onoff_set(v);
    }
    
    void numberobj_28_valin_set(number v) {
        this->numberobj_28_value_set(v);
    }
    
    void numberobj_28_format_set(number v) {
        this->numberobj_28_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_29_valin_set(number v) {
        this->numberobj_29_value_set(v);
    }
    
    void numberobj_29_format_set(number v) {
        this->numberobj_29_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_15_out1_bang_bang() {
        this->numberobj_29_value_bang();
    }
    
    void eventinlet_15_out1_number_set(number v) {
        this->numberobj_29_value_set(v);
    }
    
    void eventinlet_15_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_29_value_set(converted);
        }
    }
    
    void numberobj_30_valin_set(number v) {
        this->numberobj_30_value_set(v);
    }
    
    void numberobj_30_format_set(number v) {
        this->numberobj_30_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_31_valin_set(number v) {
        this->numberobj_31_value_set(v);
    }
    
    void numberobj_31_format_set(number v) {
        this->numberobj_31_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_32_valin_set(number v) {
        this->numberobj_32_value_set(v);
    }
    
    void numberobj_32_format_set(number v) {
        this->numberobj_32_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_33_valin_set(number v) {
        this->numberobj_33_value_set(v);
    }
    
    void numberobj_33_format_set(number v) {
        this->numberobj_33_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_34_valin_set(number v) {
        this->numberobj_34_value_set(v);
    }
    
    void numberobj_34_format_set(number v) {
        this->numberobj_34_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_35_valin_set(number v) {
        this->numberobj_35_value_set(v);
    }
    
    void numberobj_35_format_set(number v) {
        this->numberobj_35_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_16_out1_bang_bang() {}
    
    void eventinlet_16_out1_number_set(number ) {}
    
    void eventinlet_16_out1_list_set(const list& ) {}
    
    void loadmess_02_startupbang_bang() {
        this->loadmess_02_message_bang();
    }
    
    void numbertilde_07_sig_number_set(number v) {
        this->numbertilde_07_outValue = v;
    }
    
    void numbertilde_07_sig_list_set(const list& v) {
        this->numbertilde_07_outValue = v[0];
    }
    
    void numbertilde_07_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_07_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_07_currentMode = 1;
        }
    }
    
    void numberobj_36_valin_set(number v) {
        this->numberobj_36_value_set(v);
    }
    
    void numberobj_36_format_set(number v) {
        this->numberobj_36_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_37_valin_set(number v) {
        this->numberobj_37_value_set(v);
    }
    
    void numberobj_37_format_set(number v) {
        this->numberobj_37_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_38_valin_set(number v) {
        this->numberobj_38_value_set(v);
    }
    
    void numberobj_38_format_set(number v) {
        this->numberobj_38_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_39_valin_set(number v) {
        this->numberobj_39_value_set(v);
    }
    
    void numberobj_39_format_set(number v) {
        this->numberobj_39_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_40_valin_set(number v) {
        this->numberobj_40_value_set(v);
    }
    
    void numberobj_40_format_set(number v) {
        this->numberobj_40_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_17_out1_bang_bang() {}
    
    void eventinlet_17_out1_number_set(number ) {}
    
    void eventinlet_17_out1_list_set(const list& ) {}
    
    void eventinlet_18_out1_bang_bang() {
        this->numberobj_38_value_bang();
    }
    
    void eventinlet_18_out1_number_set(number v) {
        this->numberobj_38_value_set(v);
    }
    
    void eventinlet_18_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_38_value_set(converted);
        }
    }
    
    void loadbang_05_startupbang_bang() {
        this->loadbang_05_output_bang();
    }
    
    void line_05_tick_set(number v) {
        this->line_05_output_set(v);
    
        if ((bool)(this->line_05_isFinished(v))) {
            this->line_05_slope = 0;
            this->line_05_startValue = v;
            this->line_05_startPendingRamp();
        } else {
            this->line_05_scheduleNext();
        }
    }
    
    void numberobj_41_valin_set(number v) {
        this->numberobj_41_value_set(v);
    }
    
    void numberobj_41_format_set(number v) {
        this->numberobj_41_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_63_listin_list_set(const list& v) {
        this->message_63_set_set(v);
    }
    
    void message_63_listin_number_set(number v) {
        this->message_63_set_set(v);
    }
    
    void message_63_listin_bang_bang() {
        this->message_63_trigger_bang();
    }
    
    void toggle_01_valin_set(number v) {
        this->toggle_01_value_number_set(v);
    }
    
    void metro_01_tick_bang() {
        this->metro_01_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_01_on)) {
            this->metro_01_last = this->currenttime();
    
            {
                this->metro_01_next = this->metro_01_last + this->metro_01_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_01_interval + this->_currentTime);;
            }
        }
    }
    
    void message_64_listin_list_set(const list& v) {
        this->message_64_set_set(v);
    }
    
    void message_64_listin_number_set(number v) {
        this->message_64_set_set(v);
    }
    
    void message_64_listin_bang_bang() {
        this->message_64_trigger_bang();
    }
    
    void message_65_listin_list_set(const list& v) {
        this->message_65_set_set(v);
    }
    
    void message_65_listin_number_set(number v) {
        this->message_65_set_set(v);
    }
    
    void message_65_listin_bang_bang() {
        this->message_65_trigger_bang();
    }
    
    void numberobj_42_valin_set(number v) {
        this->numberobj_42_value_set(v);
    }
    
    void numberobj_42_format_set(number v) {
        this->numberobj_42_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_13_bangin_bang() {
        this->button_13_bangval_bang();
    }
    
    void message_66_listin_list_set(const list& v) {
        this->message_66_set_set(v);
    }
    
    void message_66_listin_number_set(number v) {
        this->message_66_set_set(v);
    }
    
    void message_66_listin_bang_bang() {
        this->message_66_trigger_bang();
    }
    
    void linetilde_02_target_bang() {}
    
    void linetilde_03_target_bang() {}
    
    void linetilde_04_target_bang() {}
    
    void linetilde_05_target_bang() {}
    
    void numbertilde_07_value_set(number v) {
        {
            list converted = {v};
            this->scale_04_input_set(converted);
        }
    }
    
    void linetilde_06_target_bang() {}
    
    void linetilde_07_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_28_init();
        this->numberobj_29_init();
        this->numberobj_30_init();
        this->numberobj_31_init();
        this->numberobj_32_init();
        this->numberobj_33_init();
        this->numberobj_34_init();
        this->numberobj_35_init();
        this->numbertilde_07_init();
        this->numberobj_36_init();
        this->numberobj_37_init();
        this->numberobj_38_init();
        this->numberobj_39_init();
        this->numberobj_40_init();
        this->numberobj_41_init();
        this->message_63_init();
        this->liststore_06_storage_init();
        this->drunk_01_nz_init();
        this->message_64_init();
        this->message_65_init();
        this->numberobj_42_init();
        this->message_66_init();
        this->p_09->initializeObjects();
        this->p_10->initializeObjects();
        this->p_11->initializeObjects();
        this->p_12->initializeObjects();
        this->p_13->initializeObjects();
        this->p_14->initializeObjects();
        this->p_15->initializeObjects();
        this->p_16->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_09->startup();
        this->p_10->startup();
        this->p_11->startup();
        this->p_12->startup();
        this->p_13->startup();
        this->p_14->startup();
        this->p_15->startup();
        this->p_16->startup();
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    
        {
            this->drunk_01_nz_seed(this->drunk_01_seed);
        }
    
        this->drunk_01_lastValue = this->drunk_01_size * 0.5;
    
        if ((bool)(this->metro_01_on))
            this->metro_01_on_set(1);
    
        {
            this->scheduleParamInit(0, 4);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 6);
        }
    
        {
            this->scheduleParamInit(3, 5);
        }
    
        {
            this->scheduleParamInit(4, 1);
        }
    
        {
            this->scheduleParamInit(5, 3);
        }
    
        {
            this->scheduleParamInit(6, 2);
        }
    
        {
            this->scheduleParamInit(7, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_09->allocateDataRefs();
        this->p_10->allocateDataRefs();
        this->p_11->allocateDataRefs();
        this->p_12->allocateDataRefs();
        this->p_13->allocateDataRefs();
        this->p_14->allocateDataRefs();
        this->p_15->allocateDataRefs();
        this->p_16->allocateDataRefs();
        this->cycle_tilde_06_buffer->requestSize(16384, 1);
        this->cycle_tilde_06_buffer->setSampleRate(this->sr);
        this->cycle_tilde_06_buffer = this->cycle_tilde_06_buffer->allocateIfNeeded();
        this->liststore_06_storage_storage = this->liststore_06_storage_storage->allocateIfNeeded();
    
        if (this->liststore_06_storage_storageobj->hasRequestedSize()) {
            if (this->liststore_06_storage_storageobj->wantsFill())
                this->zeroDataRef(this->liststore_06_storage_storageobj);
    
            this->getEngine()->sendDataRefUpdated(3);
        }
    }
    
    number param_03_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_02_time_set(number v) {
        this->linetilde_02_time = v;
    }
    
    void linetilde_02_segments_set(const list& v) {
        this->linetilde_02_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_02_time == 0) {
                this->linetilde_02_activeRamps->length = 0;
                this->linetilde_02_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_02_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_02_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_02_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_02_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_02_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_02_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_02_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_02_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_02_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_02_activeRamps->push(lastRampValue);
                    this->linetilde_02_activeRamps->push(0);
                    this->linetilde_02_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_02_keepramp)) {
                            this->linetilde_02_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_02_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_02_activeRamps->push(destinationValue);
                    this->linetilde_02_activeRamps->push(inc);
                    this->linetilde_02_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_28_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_02_segments_set(converted);
        }
    }
    
    void numberobj_28_value_set(number v) {
        this->numberobj_28_value_setter(v);
        v = this->numberobj_28_value;
        number localvalue = v;
    
        if (this->numberobj_28_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-26"), localvalue, this->_currentTime);
        this->numberobj_28_output_set(localvalue);
    }
    
    void scale_01_out_set(const list& v) {
        this->scale_01_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_28_value_set(converted);
        }
    }
    
    void scale_01_input_set(const list& v) {
        this->scale_01_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_01_inlow,
                this->scale_01_inhigh,
                this->scale_01_outlow,
                this->scale_01_outhigh,
                this->scale_01_power
            ));
        }
    
        this->scale_01_out_set(tmp);
    }
    
    void numberobj_29_output_set(number v) {
        {
            list converted = {v};
            this->scale_01_input_set(converted);
        }
    }
    
    void numberobj_29_value_set(number v) {
        this->numberobj_29_value_setter(v);
        v = this->numberobj_29_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_29_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-2"), localvalue, this->_currentTime);
        this->numberobj_29_output_set(localvalue);
    }
    
    number param_04_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0 ? 0 : v));
        return v;
    }
    
    void gate_01_onoff_set(number v) {
        this->gate_01_onoff = v;
    }
    
    number param_05_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_03_time_set(number v) {
        this->linetilde_03_time = v;
    }
    
    void linetilde_03_segments_set(const list& v) {
        this->linetilde_03_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_03_time == 0) {
                this->linetilde_03_activeRamps->length = 0;
                this->linetilde_03_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_03_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_03_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_03_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_03_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_03_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_03_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_03_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_03_activeRamps->push(lastRampValue);
                    this->linetilde_03_activeRamps->push(0);
                    this->linetilde_03_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_03_keepramp)) {
                            this->linetilde_03_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_03_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_03_activeRamps->push(destinationValue);
                    this->linetilde_03_activeRamps->push(inc);
                    this->linetilde_03_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_30_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_03_segments_set(converted);
        }
    }
    
    void numberobj_30_value_set(number v) {
        this->numberobj_30_value_setter(v);
        v = this->numberobj_30_value;
        number localvalue = v;
    
        if (this->numberobj_30_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-119"), localvalue, this->_currentTime);
        this->numberobj_30_output_set(localvalue);
    }
    
    void expr_15_out1_set(number v) {
        this->expr_15_out1 = v;
        this->numberobj_30_value_set(this->expr_15_out1);
    }
    
    void expr_15_in1_set(number in1) {
        this->expr_15_in1 = in1;
    
        this->expr_15_out1_set(
            (this->expr_15_in2 == 0 ? 0 : (this->expr_15_in2 == 0. ? 0. : this->expr_15_in1 / this->expr_15_in2))
        );//#map:Verb//_obj-120:1
    }
    
    void numberobj_32_output_set(number v) {
        this->expr_15_in1_set(v);
    }
    
    void numberobj_32_value_set(number v) {
        this->numberobj_32_value_setter(v);
        v = this->numberobj_32_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_32_output_set(localvalue);
    }
    
    number param_06_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_04_time_set(number v) {
        this->linetilde_04_time = v;
    }
    
    void linetilde_04_segments_set(const list& v) {
        this->linetilde_04_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_04_time == 0) {
                this->linetilde_04_activeRamps->length = 0;
                this->linetilde_04_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_04_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_04_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_04_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_04_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_04_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_04_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_04_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_04_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_04_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_04_activeRamps->push(lastRampValue);
                    this->linetilde_04_activeRamps->push(0);
                    this->linetilde_04_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_04_keepramp)) {
                            this->linetilde_04_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_04_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_04_activeRamps->push(destinationValue);
                    this->linetilde_04_activeRamps->push(inc);
                    this->linetilde_04_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_31_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_04_segments_set(converted);
        }
    }
    
    void numberobj_31_value_set(number v) {
        this->numberobj_31_value_setter(v);
        v = this->numberobj_31_value;
        number localvalue = v;
    
        if (this->numberobj_31_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-67"), localvalue, this->_currentTime);
        this->numberobj_31_output_set(localvalue);
    }
    
    void scale_02_out_set(const list& v) {
        this->scale_02_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_31_value_set(converted);
        }
    }
    
    void scale_02_input_set(const list& v) {
        this->scale_02_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_02_inlow,
                this->scale_02_inhigh,
                this->scale_02_outlow,
                this->scale_02_outhigh,
                this->scale_02_power
            ));
        }
    
        this->scale_02_out_set(tmp);
    }
    
    void numberobj_33_output_set(number v) {
        {
            list converted = {v};
            this->scale_02_input_set(converted);
        }
    }
    
    void numberobj_33_value_set(number v) {
        this->numberobj_33_value_setter(v);
        v = this->numberobj_33_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-54"), localvalue, this->_currentTime);
        this->numberobj_33_output_set(localvalue);
    }
    
    number param_07_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_05_time_set(number v) {
        this->linetilde_05_time = v;
    }
    
    void linetilde_05_segments_set(const list& v) {
        this->linetilde_05_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_05_time == 0) {
                this->linetilde_05_activeRamps->length = 0;
                this->linetilde_05_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_05_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_05_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_05_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_05_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_05_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_05_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_05_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_05_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_05_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_05_activeRamps->push(lastRampValue);
                    this->linetilde_05_activeRamps->push(0);
                    this->linetilde_05_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_05_keepramp)) {
                            this->linetilde_05_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_05_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_05_activeRamps->push(destinationValue);
                    this->linetilde_05_activeRamps->push(inc);
                    this->linetilde_05_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_34_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_05_segments_set(converted);
        }
    }
    
    void numberobj_34_value_set(number v) {
        this->numberobj_34_value_setter(v);
        v = this->numberobj_34_value;
        number localvalue = v;
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-97"), localvalue, this->_currentTime);
        this->numberobj_34_output_set(localvalue);
    }
    
    void scale_03_out_set(const list& v) {
        this->scale_03_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_34_value_set(converted);
        }
    }
    
    void scale_03_input_set(const list& v) {
        this->scale_03_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_03_inlow,
                this->scale_03_inhigh,
                this->scale_03_outlow,
                this->scale_03_outhigh,
                this->scale_03_power
            ));
        }
    
        this->scale_03_out_set(tmp);
    }
    
    void numberobj_35_output_set(number v) {
        {
            list converted = {v};
            this->scale_03_input_set(converted);
        }
    }
    
    void numberobj_35_value_set(number v) {
        this->numberobj_35_value_setter(v);
        v = this->numberobj_35_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-9"), localvalue, this->_currentTime);
        this->numberobj_35_output_set(localvalue);
    }
    
    number param_08_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_07_time_set(number v) {
        this->linetilde_07_time = v;
    }
    
    void linetilde_07_segments_set(const list& v) {
        this->linetilde_07_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_07_time == 0) {
                this->linetilde_07_activeRamps->length = 0;
                this->linetilde_07_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_07_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_07_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_07_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_07_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_07_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_07_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_07_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_07_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_07_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_07_activeRamps->push(lastRampValue);
                    this->linetilde_07_activeRamps->push(0);
                    this->linetilde_07_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_07_keepramp)) {
                            this->linetilde_07_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_07_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_07_activeRamps->push(destinationValue);
                    this->linetilde_07_activeRamps->push(inc);
                    this->linetilde_07_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_37_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_07_segments_set(converted);
        }
    }
    
    void numberobj_37_value_set(number v) {
        this->numberobj_37_value_setter(v);
        v = this->numberobj_37_value;
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-21"), localvalue, this->_currentTime);
        this->numberobj_37_output_set(localvalue);
    }
    
    void scale_05_out_set(const list& v) {
        this->scale_05_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_37_value_set(converted);
        }
    }
    
    void scale_05_input_set(const list& v) {
        this->scale_05_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_05_inlow,
                this->scale_05_inhigh,
                this->scale_05_outlow,
                this->scale_05_outhigh,
                this->scale_05_power
            ));
        }
    
        this->scale_05_out_set(tmp);
    }
    
    void numberobj_38_output_set(number v) {
        {
            list converted = {v};
            this->scale_05_input_set(converted);
        }
    }
    
    void numberobj_38_value_set(number v) {
        this->numberobj_38_value_setter(v);
        v = this->numberobj_38_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-23"), localvalue, this->_currentTime);
        this->numberobj_38_output_set(localvalue);
    }
    
    number param_09_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_06_time_set(number v) {
        this->linetilde_06_time = v;
    }
    
    void linetilde_06_segments_set(const list& v) {
        this->linetilde_06_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_06_time == 0) {
                this->linetilde_06_activeRamps->length = 0;
                this->linetilde_06_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_06_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_06_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_06_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_06_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_06_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_06_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_06_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_06_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_06_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_06_activeRamps->push(lastRampValue);
                    this->linetilde_06_activeRamps->push(0);
                    this->linetilde_06_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_06_keepramp)) {
                            this->linetilde_06_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_06_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_06_activeRamps->push(destinationValue);
                    this->linetilde_06_activeRamps->push(inc);
                    this->linetilde_06_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_39_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_06_segments_set(converted);
        }
    }
    
    void numberobj_39_value_set(number v) {
        this->numberobj_39_value_setter(v);
        v = this->numberobj_39_value;
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-16"), localvalue, this->_currentTime);
        this->numberobj_39_output_set(localvalue);
    }
    
    void expr_20_out1_set(number v) {
        this->expr_20_out1 = v;
        this->numberobj_39_value_set(this->expr_20_out1);
    }
    
    void expr_20_in1_set(number in1) {
        this->expr_20_in1 = in1;
    
        this->expr_20_out1_set(
            (this->expr_20_in2 == 0 ? 0 : (this->expr_20_in2 == 0. ? 0. : this->expr_20_in1 / this->expr_20_in2))
        );//#map:Verb//_obj-17:1
    }
    
    void numberobj_40_output_set(number v) {
        this->expr_20_in1_set(v);
    }
    
    void numberobj_40_value_set(number v) {
        this->numberobj_40_value_setter(v);
        v = this->numberobj_40_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-18"), localvalue, this->_currentTime);
        this->numberobj_40_output_set(localvalue);
    }
    
    number param_10_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0 ? 0 : v));
        return v;
    }
    
    void gate_02_onoff_set(number v) {
        this->gate_02_onoff = v;
    }
    
    void numberobj_29_value_bang() {
        number v = this->numberobj_29_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_29_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-2"), localvalue, this->_currentTime);
        this->numberobj_29_output_set(localvalue);
    }
    
    void loadmess_02_message_bang() {
        list v = this->loadmess_02_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_32_value_set(converted);
        }
    }
    
    void cycle_tilde_06_frequency_set(number v) {
        this->cycle_tilde_06_frequency = v;
    }
    
    void numberobj_36_output_set(number v) {
        this->cycle_tilde_06_frequency_set(v);
    }
    
    void numberobj_36_value_set(number v) {
        this->numberobj_36_value_setter(v);
        v = this->numberobj_36_value;
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-42"), localvalue, this->_currentTime);
        this->numberobj_36_output_set(localvalue);
    }
    
    void numberobj_38_value_bang() {
        number v = this->numberobj_38_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-23"), localvalue, this->_currentTime);
        this->numberobj_38_output_set(localvalue);
    }
    
    void metro_01_on_set(number v) {
        this->metro_01_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_01_output_set(number v) {
        this->metro_01_on_set(v);
    }
    
    void toggle_01_value_number_set(number v) {
        this->toggle_01_value_number_setter(v);
        v = this->toggle_01_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/toggle_obj-74"), v, this->_currentTime);
        this->toggle_01_output_set(v);
    }
    
    void toggle_01_value_bang_bang() {
        number val = (this->toggle_01_value_number == 1 ? 0 : 1);
        this->toggle_01_value_number_set(val);
    }
    
    void loadbang_05_output_bang() {
        this->toggle_01_value_bang_bang();
    }
    
    void eventoutlet_13_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_36_out3_number_set(v);
    }
    
    void gate_02_out1_number_set(number v) {
        this->gate_02_out1_number = v;
        this->numberobj_38_value_set(v);
    }
    
    void gate_02_input_number_set(number v) {
        if (this->gate_02_onoff == 1)
            this->gate_02_out1_number_set(v);
    }
    
    void line_05_output_set(number v) {
        this->line_05_output = v;
        this->eventoutlet_13_in1_number_set(v);
        this->gate_02_input_number_set(v);
    }
    
    number line_05_time_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        return v;
    }
    
    void line_05_time_set(number v) {
        v = this->line_05_time_constrain(v);
        this->line_05_time = v;
    }
    
    void line_05_end_bang() {}
    
    void pack_09_in2_set(number v) {
        this->pack_09_in2 = v;
    }
    
    void message_64_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->pack_09_in2_set(converted);
        }
    }
    
    void message_64_trigger_bang() {
        this->message_64_out_set(this->message_64_set);
    }
    
    void line_05_stop_bang() {
        this->getEngine()->flushClockEvents(this, 848255507, false);;
        this->line_05_pendingRamps->length = 0;
        this->line_05_startValue = this->line_05_output;
        this->line_05_slope = 0;
        this->line_05__time = 0;
        this->line_05_time_set(0);
    }
    
    number line_05_grain_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        return v;
    }
    
    void line_05_grain_set(number v) {
        v = this->line_05_grain_constrain(v);
        this->line_05_grain = v;
    
        if ((bool)(!(bool)(this->line_05_isFinished(this->line_05_startValue)))) {
            this->getEngine()->flushClockEvents(this, 848255507, false);;
            this->line_05_scheduleNext();
        }
    }
    
    void line_05_target_set(const list& v) {
        this->line_05_target = jsCreateListCopy(v);
        this->line_05_pendingRamps->length = 0;
    
        if (v->length == 1) {
            this->line_05__time = this->line_05_time;
            this->line_05_time_set(0);
    
            if ((bool)(this->line_05__time)) {
                this->line_05_startRamp(v[0], this->line_05__time);
            } else {
                this->line_05_output_set(v[0]);
                this->line_05_startValue = v[0];
                this->line_05_stop_bang();
            }
        } else if (v->length == 2) {
            this->line_05_time_set(0);
            this->line_05__time = (v[1] < 0 ? 0 : v[1]);
            this->line_05_startRamp(v[0], this->line_05__time);
        } else if (v->length == 3) {
            this->line_05_time_set(0);
            this->line_05_grain_set(v[2]);
            this->line_05__time = (v[1] < 0 ? 0 : v[1]);
            this->line_05_startRamp(v[0], this->line_05__time);
        } else {
            this->line_05_time_set(0);
            this->line_05_pendingRamps = jsCreateListCopy(v);
            this->line_05_startPendingRamp();
        }
    }
    
    void listjoin_05_out1_set(const list& v) {
        this->line_05_target_set(v);
    }
    
    void listjoin_05_in1_set(const list& _in1) {
        RNBO_UNUSED(_in1);
        list in1 = createListCopy(_in1);
        this->listjoin_05_in1 = jsCreateListCopy(in1);
        auto in2 = this->listjoin_05_in2;
    
        {
            this->listjoin_05_out1_set(in1->concat(in2));
            return;
        }
    }
    
    void pack_09_out_set(const list& v) {
        this->listjoin_05_in1_set(v);
    }
    
    void pack_09_in1_set(number v) {
        this->pack_09_in1 = v;
        list array = list(0, 0);
        array[0] = this->pack_09_in1;
        array[1] = this->pack_09_in2;
        this->pack_09_out_set(array);
    }
    
    void numberobj_41_output_set(number v) {
        this->message_64_trigger_bang();
        this->pack_09_in1_set(v);
    }
    
    void numberobj_41_value_set(number v) {
        this->numberobj_41_value_setter(v);
        v = this->numberobj_41_value;
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-151"), localvalue, this->_currentTime);
        this->numberobj_41_output_set(localvalue);
    }
    
    void message_63_set_set(const list& v) {
        this->message_63_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Verb/message_obj-82"), v, this->_currentTime);
    }
    
    void liststore_06_out3_set(number ) {}
    
    void liststore_06_out1_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_41_value_set(converted);
        }
    }
    
    void liststore_06_out2_bang() {}
    
    void liststore_06_lookupidx_set(number v) {
        this->liststore_06_lookupidx = v;
        list val = this->liststore_06_storage_lookup(v);
        this->liststore_06_out3_set(v);
    
        if ((bool)(val->length)) {
            this->liststore_06_out1_set(this->liststore_06_storage_lookup(v));
        } else {
            this->liststore_06_out2_bang();
        }
    }
    
    void liststore_06_storeidx_set(number v) {
        this->liststore_06_storeidx = v;
    }
    
    void message_63_out_set(const list& v) {
        {
            if (v->length > 2)
                this->liststore_06_storeidx_set(v[2]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->liststore_06_lookupidx_set(converted);
        }
    }
    
    void message_63_trigger_bang() {
        this->message_63_out_set(this->message_63_set);
    }
    
    void pack_10_in2_set(number v) {
        this->pack_10_in2 = v;
    }
    
    void message_66_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->pack_10_in2_set(converted);
        }
    }
    
    void message_66_trigger_bang() {
        this->message_66_out_set(this->message_66_set);
    }
    
    void listjoin_05_in2_set(const list& v) {
        this->listjoin_05_in2 = jsCreateListCopy(v);
    }
    
    void pack_10_out_set(const list& v) {
        this->listjoin_05_in2_set(v);
    }
    
    void pack_10_in1_set(number v) {
        this->pack_10_in1 = v;
        list array = list(0, 0);
        array[0] = this->pack_10_in1;
        array[1] = this->pack_10_in2;
        this->pack_10_out_set(array);
    }
    
    void numberobj_42_output_set(number v) {
        this->message_66_trigger_bang();
        this->pack_10_in1_set(v);
    }
    
    void numberobj_42_value_set(number v) {
        this->numberobj_42_value_setter(v);
        v = this->numberobj_42_value;
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-147"), localvalue, this->_currentTime);
        this->numberobj_42_output_set(localvalue);
    }
    
    void liststore_06_storelist_set(const list& v) {
        this->liststore_06_storelist = jsCreateListCopy(v);
        this->liststore_06_storage_store(this->liststore_06_storeidx, v);
    }
    
    void trigger_06_out3_set(const list& v) {
        this->liststore_06_storelist_set(v);
    }
    
    void counter_03_output_set(number v) {
        this->counter_03_output = v;
        this->liststore_06_storeidx_set(v);
    
        {
            list converted = {v};
            this->message_63_set_set(converted);
        }
    }
    
    void counter_03_overflow_bang_bang() {}
    
    number counter_03_overflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_03_overflow_number_set(number v) {
        v = this->counter_03_overflow_number_constrain(v);
        this->counter_03_overflow_number = v;
    }
    
    void counter_03_carry_set(number v) {
        this->counter_03_carry = v;
    }
    
    void counter_03_underflow_bang_bang() {}
    
    number counter_03_underflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_03_underflow_number_set(number v) {
        v = this->counter_03_underflow_number_constrain(v);
        this->counter_03_underflow_number = v;
    }
    
    void counter_03_input_bang() {
        this->counter_03_output_set(this->counter_03_count);
        this->counter_03_inc();
    
        if (this->counter_03_count > this->counter_03_maximum) {
            if (this->counter_03_direction == 2) {
                this->counter_03_phase = !(bool)(this->counter_03_phase);
                this->counter_03_count = this->counter_03_maximum;
                this->counter_03_inc();
            } else
                this->counter_03_count = this->counter_03_minimum;
    
            if ((bool)(!(bool)(this->counter_03_overflow_number))) {
                if (this->counter_03_carryflag == 1)
                    this->counter_03_overflow_bang_bang();
                else
                    this->counter_03_overflow_number_set(1);
            }
    
            this->counter_03_carry_set(this->counter_03_carry + 1);
        } else if ((bool)(this->counter_03_overflow_number) && this->counter_03_carryflag == 0)
            this->counter_03_overflow_number_set(0);
    
        if (this->counter_03_count < this->counter_03_minimum) {
            if (this->counter_03_direction == 2) {
                this->counter_03_phase = !(bool)(this->counter_03_phase);
                this->counter_03_count = this->counter_03_minimum;
                this->counter_03_inc();
            } else
                this->counter_03_count = this->counter_03_maximum;
    
            if ((bool)(!(bool)(this->counter_03_underflow_number))) {
                if (this->counter_03_carryflag == 1)
                    this->counter_03_underflow_bang_bang();
                else
                    this->counter_03_underflow_number_set(1);
            }
    
            this->counter_03_carry_set(this->counter_03_carry + 1);
        } else if ((bool)(this->counter_03_underflow_number) && this->counter_03_carryflag == 0)
            this->counter_03_underflow_number_set(0);
    }
    
    void trigger_06_out2_bang() {
        this->counter_03_input_bang();
    }
    
    void trigger_06_out1_bang() {
        this->message_63_trigger_bang();
    }
    
    void trigger_06_input_list_set(const list& v) {
        this->trigger_06_out3_set(v);
        this->trigger_06_out2_bang();
        this->trigger_06_out1_bang();
    }
    
    void scale_06_out_set(const list& v) {
        this->scale_06_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_42_value_set(converted);
        }
    
        this->trigger_06_input_list_set(v);
    }
    
    void scale_06_input_set(const list& v) {
        this->scale_06_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_06_inlow,
                this->scale_06_inhigh,
                this->scale_06_outlow,
                this->scale_06_outhigh,
                this->scale_06_power
            ));
        }
    
        this->scale_06_out_set(tmp);
    }
    
    void drunk_01_out_set(number v) {
        this->drunk_01_out = v;
    
        {
            list converted = {v};
            this->scale_06_input_set(converted);
        }
    }
    
    void drunk_01_trigger_bang_bang() {
        {
            this->drunk_01_lastValue = this->drunk_01_getDoubleRandom();
        }
    
        this->drunk_01_out_set(this->drunk_01_lastValue);
    }
    
    void metro_01_tickout_bang() {
        this->drunk_01_trigger_bang_bang();
    }
    
    void message_64_set_set(const list& v) {
        this->message_64_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Verb/message_obj-80"), v, this->_currentTime);
    }
    
    void message_65_set_set(const list& v) {
        this->message_65_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Verb/message_obj-155"), v, this->_currentTime);
    }
    
    void message_65_out_set(const list& ) {}
    
    void message_65_trigger_bang() {
        this->message_65_out_set(this->message_65_set);
    }
    
    void button_13_output_bang() {
        this->drunk_01_trigger_bang_bang();
    }
    
    void button_13_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Verb/button_obj-76"), this->_currentTime);;
        this->button_13_output_bang();
    }
    
    void message_66_set_set(const list& v) {
        this->message_66_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Verb/message_obj-148"), v, this->_currentTime);
    }
    
    void ctlin_01_outchannel_set(number ) {}
    
    void ctlin_01_outcontroller_set(number ) {}
    
    void fromnormalized_01_output_set(number v) {
        this->param_03_value_set(v);
    }
    
    void fromnormalized_01_input_set(number v) {
        this->fromnormalized_01_output_set(this->fromnormalized(0, v));
    }
    
    void expr_14_out1_set(number v) {
        this->expr_14_out1 = v;
        this->fromnormalized_01_input_set(this->expr_14_out1);
    }
    
    void expr_14_in1_set(number in1) {
        this->expr_14_in1 = in1;
        this->expr_14_out1_set(this->expr_14_in1 * this->expr_14_in2);//#map:expr_14:1
    }
    
    void ctlin_01_value_set(number v) {
        this->expr_14_in1_set(v);
    }
    
    void ctlin_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_01_channel || this->ctlin_01_channel == -1) && (data[1] == this->ctlin_01_controller || this->ctlin_01_controller == -1)) {
            this->ctlin_01_outchannel_set(channel);
            this->ctlin_01_outcontroller_set(data[1]);
            this->ctlin_01_value_set(data[2]);
            this->ctlin_01_status = 0;
        }
    }
    
    void ctlin_02_outchannel_set(number ) {}
    
    void ctlin_02_outcontroller_set(number ) {}
    
    void fromnormalized_02_output_set(number v) {
        this->param_05_value_set(v);
    }
    
    void fromnormalized_02_input_set(number v) {
        this->fromnormalized_02_output_set(this->fromnormalized(2, v));
    }
    
    void expr_16_out1_set(number v) {
        this->expr_16_out1 = v;
        this->fromnormalized_02_input_set(this->expr_16_out1);
    }
    
    void expr_16_in1_set(number in1) {
        this->expr_16_in1 = in1;
        this->expr_16_out1_set(this->expr_16_in1 * this->expr_16_in2);//#map:expr_16:1
    }
    
    void ctlin_02_value_set(number v) {
        this->expr_16_in1_set(v);
    }
    
    void ctlin_02_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_02_channel || this->ctlin_02_channel == -1) && (data[1] == this->ctlin_02_controller || this->ctlin_02_controller == -1)) {
            this->ctlin_02_outchannel_set(channel);
            this->ctlin_02_outcontroller_set(data[1]);
            this->ctlin_02_value_set(data[2]);
            this->ctlin_02_status = 0;
        }
    }
    
    void ctlin_03_outchannel_set(number ) {}
    
    void ctlin_03_outcontroller_set(number ) {}
    
    void fromnormalized_03_output_set(number v) {
        this->param_06_value_set(v);
    }
    
    void fromnormalized_03_input_set(number v) {
        this->fromnormalized_03_output_set(this->fromnormalized(3, v));
    }
    
    void expr_17_out1_set(number v) {
        this->expr_17_out1 = v;
        this->fromnormalized_03_input_set(this->expr_17_out1);
    }
    
    void expr_17_in1_set(number in1) {
        this->expr_17_in1 = in1;
        this->expr_17_out1_set(this->expr_17_in1 * this->expr_17_in2);//#map:expr_17:1
    }
    
    void ctlin_03_value_set(number v) {
        this->expr_17_in1_set(v);
    }
    
    void ctlin_03_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_03_channel || this->ctlin_03_channel == -1) && (data[1] == this->ctlin_03_controller || this->ctlin_03_controller == -1)) {
            this->ctlin_03_outchannel_set(channel);
            this->ctlin_03_outcontroller_set(data[1]);
            this->ctlin_03_value_set(data[2]);
            this->ctlin_03_status = 0;
        }
    }
    
    void ctlin_04_outchannel_set(number ) {}
    
    void ctlin_04_outcontroller_set(number ) {}
    
    void fromnormalized_04_output_set(number v) {
        this->param_07_value_set(v);
    }
    
    void fromnormalized_04_input_set(number v) {
        this->fromnormalized_04_output_set(this->fromnormalized(4, v));
    }
    
    void expr_18_out1_set(number v) {
        this->expr_18_out1 = v;
        this->fromnormalized_04_input_set(this->expr_18_out1);
    }
    
    void expr_18_in1_set(number in1) {
        this->expr_18_in1 = in1;
        this->expr_18_out1_set(this->expr_18_in1 * this->expr_18_in2);//#map:expr_18:1
    }
    
    void ctlin_04_value_set(number v) {
        this->expr_18_in1_set(v);
    }
    
    void ctlin_04_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_04_channel || this->ctlin_04_channel == -1) && (data[1] == this->ctlin_04_controller || this->ctlin_04_controller == -1)) {
            this->ctlin_04_outchannel_set(channel);
            this->ctlin_04_outcontroller_set(data[1]);
            this->ctlin_04_value_set(data[2]);
            this->ctlin_04_status = 0;
        }
    }
    
    void ctlin_05_outchannel_set(number ) {}
    
    void ctlin_05_outcontroller_set(number ) {}
    
    void fromnormalized_05_output_set(number v) {
        this->param_08_value_set(v);
    }
    
    void fromnormalized_05_input_set(number v) {
        this->fromnormalized_05_output_set(this->fromnormalized(5, v));
    }
    
    void expr_19_out1_set(number v) {
        this->expr_19_out1 = v;
        this->fromnormalized_05_input_set(this->expr_19_out1);
    }
    
    void expr_19_in1_set(number in1) {
        this->expr_19_in1 = in1;
        this->expr_19_out1_set(this->expr_19_in1 * this->expr_19_in2);//#map:expr_19:1
    }
    
    void ctlin_05_value_set(number v) {
        this->expr_19_in1_set(v);
    }
    
    void ctlin_05_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_05_channel || this->ctlin_05_channel == -1) && (data[1] == this->ctlin_05_controller || this->ctlin_05_controller == -1)) {
            this->ctlin_05_outchannel_set(channel);
            this->ctlin_05_outcontroller_set(data[1]);
            this->ctlin_05_value_set(data[2]);
            this->ctlin_05_status = 0;
        }
    }
    
    void ctlin_06_outchannel_set(number ) {}
    
    void ctlin_06_outcontroller_set(number ) {}
    
    void fromnormalized_06_output_set(number v) {
        this->param_09_value_set(v);
    }
    
    void fromnormalized_06_input_set(number v) {
        this->fromnormalized_06_output_set(this->fromnormalized(6, v));
    }
    
    void expr_21_out1_set(number v) {
        this->expr_21_out1 = v;
        this->fromnormalized_06_input_set(this->expr_21_out1);
    }
    
    void expr_21_in1_set(number in1) {
        this->expr_21_in1 = in1;
        this->expr_21_out1_set(this->expr_21_in1 * this->expr_21_in2);//#map:expr_21:1
    }
    
    void ctlin_06_value_set(number v) {
        this->expr_21_in1_set(v);
    }
    
    void ctlin_06_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_06_channel || this->ctlin_06_channel == -1) && (data[1] == this->ctlin_06_controller || this->ctlin_06_controller == -1)) {
            this->ctlin_06_outchannel_set(channel);
            this->ctlin_06_outcontroller_set(data[1]);
            this->ctlin_06_value_set(data[2]);
            this->ctlin_06_status = 0;
        }
    }
    
    void linetilde_02_perform(SampleValue * out, Index n) {
        auto __linetilde_02_time = this->linetilde_02_time;
        auto __linetilde_02_keepramp = this->linetilde_02_keepramp;
        auto __linetilde_02_currentValue = this->linetilde_02_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_02_activeRamps->length)) {
            while ((bool)(this->linetilde_02_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_02_activeRamps[0];
                number inc = this->linetilde_02_activeRamps[1];
                number rampTimeInSamples = this->linetilde_02_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_02_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_02_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_02_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -444440180,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_02_keepramp))) {
                            __linetilde_02_time = 0;
                        }
                    }
                }
    
                __linetilde_02_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_02_currentValue;
            i++;
        }
    
        this->linetilde_02_currentValue = __linetilde_02_currentValue;
        this->linetilde_02_time = __linetilde_02_time;
    }
    
    void signalsend_01_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_01_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void linetilde_03_perform(SampleValue * out, Index n) {
        auto __linetilde_03_time = this->linetilde_03_time;
        auto __linetilde_03_keepramp = this->linetilde_03_keepramp;
        auto __linetilde_03_currentValue = this->linetilde_03_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_03_activeRamps->length)) {
            while ((bool)(this->linetilde_03_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_03_activeRamps[0];
                number inc = this->linetilde_03_activeRamps[1];
                number rampTimeInSamples = this->linetilde_03_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_03_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_03_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_03_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_03_keepramp))) {
                            __linetilde_03_time = 0;
                        }
                    }
                }
    
                __linetilde_03_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_03_currentValue;
            i++;
        }
    
        this->linetilde_03_currentValue = __linetilde_03_currentValue;
        this->linetilde_03_time = __linetilde_03_time;
    }
    
    void linetilde_04_perform(SampleValue * out, Index n) {
        auto __linetilde_04_time = this->linetilde_04_time;
        auto __linetilde_04_keepramp = this->linetilde_04_keepramp;
        auto __linetilde_04_currentValue = this->linetilde_04_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_04_activeRamps->length)) {
            while ((bool)(this->linetilde_04_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_04_activeRamps[0];
                number inc = this->linetilde_04_activeRamps[1];
                number rampTimeInSamples = this->linetilde_04_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_04_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_04_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_04_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1621164530,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_04_keepramp))) {
                            __linetilde_04_time = 0;
                        }
                    }
                }
    
                __linetilde_04_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_04_currentValue;
            i++;
        }
    
        this->linetilde_04_currentValue = __linetilde_04_currentValue;
        this->linetilde_04_time = __linetilde_04_time;
    }
    
    void signalsend_02_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_02_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void linetilde_05_perform(SampleValue * out, Index n) {
        auto __linetilde_05_time = this->linetilde_05_time;
        auto __linetilde_05_keepramp = this->linetilde_05_keepramp;
        auto __linetilde_05_currentValue = this->linetilde_05_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_05_activeRamps->length)) {
            while ((bool)(this->linetilde_05_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_05_activeRamps[0];
                number inc = this->linetilde_05_activeRamps[1];
                number rampTimeInSamples = this->linetilde_05_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_05_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_05_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_05_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            732284170,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_05_keepramp))) {
                            __linetilde_05_time = 0;
                        }
                    }
                }
    
                __linetilde_05_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_05_currentValue;
            i++;
        }
    
        this->linetilde_05_currentValue = __linetilde_05_currentValue;
        this->linetilde_05_time = __linetilde_05_time;
    }
    
    void signalsend_03_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_03_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void cycle_tilde_06_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_06_f2i = this->cycle_tilde_06_f2i;
        auto __cycle_tilde_06_buffer = this->cycle_tilde_06_buffer;
        auto __cycle_tilde_06_phasei = this->cycle_tilde_06_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_06_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_06_buffer[(Index)idx];
                number y1 = __cycle_tilde_06_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_06_f2i));
                    __cycle_tilde_06_phasei = uint32_add(__cycle_tilde_06_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_06_phasei = __cycle_tilde_06_phasei;
    }
    
    void scopetilde_01_perform(const SampleValue * x, const SampleValue * y, Index n) {
        auto __scopetilde_01_ysign = this->scopetilde_01_ysign;
        auto __scopetilde_01_ymonitorvalue = this->scopetilde_01_ymonitorvalue;
        auto __scopetilde_01_xsign = this->scopetilde_01_xsign;
        auto __scopetilde_01_xmonitorvalue = this->scopetilde_01_xmonitorvalue;
        auto __scopetilde_01_mode = this->scopetilde_01_mode;
    
        for (Index i = 0; i < n; i++) {
            number xval = x[(Index)i];
            number yval = y[(Index)i];
    
            if (__scopetilde_01_mode == 1) {
                number xabsval = rnbo_abs(xval);
    
                if (xabsval > __scopetilde_01_xmonitorvalue) {
                    __scopetilde_01_xmonitorvalue = xabsval;
                    __scopetilde_01_xsign = (xval < 0 ? -1 : 1);
                }
    
                number yabsval = rnbo_abs(yval);
    
                if (yabsval > __scopetilde_01_ymonitorvalue) {
                    __scopetilde_01_ymonitorvalue = yabsval;
                    __scopetilde_01_ysign = (yval < 0 ? -1 : 1);
                }
            } else {
                __scopetilde_01_xmonitorvalue = xval;
                __scopetilde_01_xsign = 1;
                __scopetilde_01_ymonitorvalue = yval;
                __scopetilde_01_ysign = 1;
            }
    
            this->scopetilde_01_effectiveCount--;
    
            if (this->scopetilde_01_effectiveCount <= 0) {
                this->scopetilde_01_updateEffectiveCount();
                this->scopetilde_01_monitorbuffer->push(__scopetilde_01_xmonitorvalue * __scopetilde_01_xsign);
    
                if (__scopetilde_01_mode == 1)
                    __scopetilde_01_xmonitorvalue = 0;
    
                if (this->scopetilde_01_monitorbuffer->length >= 128 * (1 + 0)) {
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Verb/scope~_obj-40"),
                        this->scopetilde_01_monitorbuffer,
                        this->_currentTime
                    );;
    
                    this->scopetilde_01_monitorbuffer->length = 0;
                }
            }
        }
    
        this->scopetilde_01_xmonitorvalue = __scopetilde_01_xmonitorvalue;
        this->scopetilde_01_xsign = __scopetilde_01_xsign;
        this->scopetilde_01_ymonitorvalue = __scopetilde_01_ymonitorvalue;
        this->scopetilde_01_ysign = __scopetilde_01_ysign;
    }
    
    void gate_01_out1_list_set(const list& v) {
        this->gate_01_out1_list = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_29_value_set(converted);
        }
    }
    
    void gate_01_input_list_set(const list& v) {
        if (this->gate_01_onoff == 1)
            this->gate_01_out1_list_set(v);
    }
    
    void scale_04_out_set(const list& v) {
        this->scale_04_out = jsCreateListCopy(v);
        this->gate_01_input_list_set(v);
    }
    
    void scale_04_input_set(const list& v) {
        this->scale_04_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_04_inlow,
                this->scale_04_inhigh,
                this->scale_04_outlow,
                this->scale_04_outhigh,
                this->scale_04_power
            ));
        }
    
        this->scale_04_out_set(tmp);
    }
    
    void numbertilde_07_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_07_currentIntervalInSamples = this->numbertilde_07_currentIntervalInSamples;
        auto __numbertilde_07_lastValue = this->numbertilde_07_lastValue;
        auto __numbertilde_07_currentInterval = this->numbertilde_07_currentInterval;
        auto __numbertilde_07_rampInSamples = this->numbertilde_07_rampInSamples;
        auto __numbertilde_07_outValue = this->numbertilde_07_outValue;
        auto __numbertilde_07_currentMode = this->numbertilde_07_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_07_currentMode == 0) {
                output[(Index)i] = this->numbertilde_07_smooth_next(
                    __numbertilde_07_outValue,
                    __numbertilde_07_rampInSamples,
                    __numbertilde_07_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_07_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_07_lastValue && __numbertilde_07_currentInterval <= 0) {
            __numbertilde_07_currentInterval = __numbertilde_07_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_07_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Verb/number~_obj-38"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_07_currentInterval = __numbertilde_07_currentInterval;
        this->numbertilde_07_lastValue = __numbertilde_07_lastValue;
    }
    
    void linetilde_06_perform(SampleValue * out, Index n) {
        auto __linetilde_06_time = this->linetilde_06_time;
        auto __linetilde_06_keepramp = this->linetilde_06_keepramp;
        auto __linetilde_06_currentValue = this->linetilde_06_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_06_activeRamps->length)) {
            while ((bool)(this->linetilde_06_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_06_activeRamps[0];
                number inc = this->linetilde_06_activeRamps[1];
                number rampTimeInSamples = this->linetilde_06_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_06_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_06_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_06_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            1114681293,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_06_keepramp))) {
                            __linetilde_06_time = 0;
                        }
                    }
                }
    
                __linetilde_06_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_06_currentValue;
            i++;
        }
    
        this->linetilde_06_currentValue = __linetilde_06_currentValue;
        this->linetilde_06_time = __linetilde_06_time;
    }
    
    void signalsend_04_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_04_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void linetilde_07_perform(SampleValue * out, Index n) {
        auto __linetilde_07_time = this->linetilde_07_time;
        auto __linetilde_07_keepramp = this->linetilde_07_keepramp;
        auto __linetilde_07_currentValue = this->linetilde_07_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_07_activeRamps->length)) {
            while ((bool)(this->linetilde_07_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_07_activeRamps[0];
                number inc = this->linetilde_07_activeRamps[1];
                number rampTimeInSamples = this->linetilde_07_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_07_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_07_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_07_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -2003561653,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_07_keepramp))) {
                            __linetilde_07_time = 0;
                        }
                    }
                }
    
                __linetilde_07_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_07_currentValue;
            i++;
        }
    
        this->linetilde_07_currentValue = __linetilde_07_currentValue;
        this->linetilde_07_time = __linetilde_07_time;
    }
    
    void signalsend_05_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_05_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void signaladder_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_14_perform(
        const SampleValue * target_Damp,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Damp~
        ConstSampleArray<3> ins = {in1, in2, target_Damp};
    
        SampleArray<2> outs = {out1, out2};
        this->p_14->process(ins, 3, outs, 2, n);
    }
    
    void p_11_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Blur~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_11->process(ins, 2, outs, 2, n);
    }
    
    void signaladder_05_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_06_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_07_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_08_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_13_perform(
        const SampleValue * target_Size,
        const SampleValue * target_Decay,
        const SampleValue * target_Jitter,
        const SampleValue * target_Damp,
        const SampleValue * in1,
        SampleValue * out1,
        SampleValue * out2,
        SampleValue * out3,
        SampleValue * out4,
        Index n
    ) {
        // subpatcher: RoomA~
        ConstSampleArray<5> ins = {in1, target_Size, target_Decay, target_Jitter, target_Damp};
    
        SampleArray<4> outs = {out1, out2, out3, out4};
        this->p_13->process(ins, 5, outs, 4, n);
    }
    
    void signaladder_09_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_10_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_11_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_12_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_15_perform(
        const SampleValue * target_Size,
        const SampleValue * target_Decay,
        const SampleValue * target_Jitter,
        const SampleValue * target_Damp,
        const SampleValue * in1,
        SampleValue * out1,
        SampleValue * out2,
        SampleValue * out3,
        SampleValue * out4,
        Index n
    ) {
        // subpatcher: RoomB~
        ConstSampleArray<5> ins = {in1, target_Size, target_Decay, target_Jitter, target_Damp};
    
        SampleArray<4> outs = {out1, out2, out3, out4};
        this->p_15->process(ins, 5, outs, 4, n);
    }
    
    void p_10_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        const SampleValue * in7,
        const SampleValue * in8,
        SampleValue * out1,
        SampleValue * out2,
        SampleValue * out3,
        SampleValue * out4,
        SampleValue * out5,
        SampleValue * out6,
        SampleValue * out7,
        SampleValue * out8,
        SampleValue * out9,
        SampleValue * out10,
        SampleValue * out11,
        SampleValue * out12,
        SampleValue * out13,
        SampleValue * out14,
        Index n
    ) {
        // subpatcher: Shuffle~
        ConstSampleArray<8> ins = {in1, in2, in3, in4, in5, in6, in7, in8};
    
        SampleArray<14> outs = {
            out1,
            out2,
            out3,
            out4,
            out5,
            out6,
            out7,
            out8,
            out9,
            out10,
            out11,
            out12,
            out13,
            out14
        };
    
        this->p_10->process(ins, 8, outs, 14, n);
    }
    
    void signaladder_13_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_14_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_12_perform(
        const SampleValue * target_Size,
        const SampleValue * target_Diff,
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        const SampleValue * in7,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: CombL~
        ConstSampleArray<9> ins = {in1, in2, in3, in4, in5, in6, in7, target_Size, target_Diff};
    
        SampleArray<1> outs = {out1};
        this->p_12->process(ins, 9, outs, 1, n);
    }
    
    void signaladder_15_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_16_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_16_perform(
        const SampleValue * target_Size,
        const SampleValue * target_Diff,
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        const SampleValue * in7,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: CombR~
        ConstSampleArray<9> ins = {in1, in2, in3, in4, in5, in6, in7, target_Size, target_Diff};
    
        SampleArray<1> outs = {out1};
        this->p_16->process(ins, 9, outs, 1, n);
    }
    
    void p_09_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Mix~
        ConstSampleArray<5> ins = {in1, in2, in3, in4, in5};
    
        SampleArray<2> outs = {out1, out2};
        this->p_09->process(ins, 5, outs, 2, n);
    }
    
    void numberobj_28_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_28_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_28_value = localvalue;
    }
    
    void numberobj_29_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_29_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_29_value = localvalue;
    }
    
    void numberobj_30_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_30_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_30_value = localvalue;
    }
    
    void numberobj_31_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_31_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_31_value = localvalue;
    }
    
    void numberobj_32_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_32_value = localvalue;
    }
    
    void numberobj_33_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_33_value = localvalue;
    }
    
    void numberobj_34_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_34_value = localvalue;
    }
    
    void numberobj_35_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_35_value = localvalue;
    }
    
    void numberobj_36_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_36_value = localvalue;
    }
    
    void numberobj_37_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_37_value = localvalue;
    }
    
    void numberobj_38_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_38_value = localvalue;
    }
    
    void numberobj_39_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_39_value = localvalue;
    }
    
    void numberobj_40_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_40_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_40_value = localvalue;
    }
    
    void numberobj_41_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_41_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_41_value = localvalue;
    }
    
    void toggle_01_value_number_setter(number v) {
        this->toggle_01_value_number = (v != 0 ? 1 : 0);
    }
    
    void drunk_01_size_setter(number v) {
        this->drunk_01_size = this->maximum(rnbo_floor(v), 1);
    }
    
    void drunk_01_stepsize_setter(number v) {
        this->drunk_01_stepsize = this->maximum(v, 1);
    }
    
    void metro_01_interval_setter(number v) {
        this->metro_01_interval = (v > 0 ? v : 0);
    }
    
    void numberobj_42_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_42_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_42_value = localvalue;
    }
    
    void numberobj_28_init() {
        this->numberobj_28_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-26"), 1, this->_currentTime);
    }
    
    void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_28_value;
    }
    
    void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_28_value_set(preset["value"]);
    }
    
    void numberobj_29_init() {
        this->numberobj_29_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-2"), 1, this->_currentTime);
    }
    
    void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_29_value;
    }
    
    void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_29_value_set(preset["value"]);
    }
    
    void param_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_03_value;
    }
    
    void param_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_03_value_set(preset["value"]);
    }
    
    void param_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_04_value;
    }
    
    void param_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_04_value_set(preset["value"]);
    }
    
    void numberobj_30_init() {
        this->numberobj_30_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-119"), 1, this->_currentTime);
    }
    
    void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_30_value;
    }
    
    void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_30_value_set(preset["value"]);
    }
    
    void numberobj_31_init() {
        this->numberobj_31_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-67"), 1, this->_currentTime);
    }
    
    void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_31_value;
    }
    
    void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_31_value_set(preset["value"]);
    }
    
    void numberobj_32_init() {
        this->numberobj_32_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_32_value;
    }
    
    void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_32_value_set(preset["value"]);
    }
    
    void param_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_05_value;
    }
    
    void param_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_05_value_set(preset["value"]);
    }
    
    void numberobj_33_init() {
        this->numberobj_33_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-54"), 1, this->_currentTime);
    }
    
    void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_33_value;
    }
    
    void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_33_value_set(preset["value"]);
    }
    
    void param_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_06_value;
    }
    
    void param_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_06_value_set(preset["value"]);
    }
    
    void numberobj_34_init() {
        this->numberobj_34_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-97"), 1, this->_currentTime);
    }
    
    void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_34_value;
    }
    
    void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_34_value_set(preset["value"]);
    }
    
    void numberobj_35_init() {
        this->numberobj_35_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-9"), 1, this->_currentTime);
    }
    
    void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_35_value;
    }
    
    void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_35_value_set(preset["value"]);
    }
    
    void param_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_07_value;
    }
    
    void param_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_07_value_set(preset["value"]);
    }
    
    number numbertilde_07_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_07_smooth_d_prev);
        this->numbertilde_07_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_07_smooth_d_dspsetup() {
        this->numbertilde_07_smooth_d_reset();
    }
    
    void numbertilde_07_smooth_d_reset() {
        this->numbertilde_07_smooth_d_prev = 0;
    }
    
    number numbertilde_07_smooth_next(number x, number up, number down) {
        if (this->numbertilde_07_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_07_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_07_smooth_index = _up;
                this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _up;
            } else if (x < this->numbertilde_07_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_07_smooth_index = _down;
                this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_07_smooth_index > 0) {
            this->numbertilde_07_smooth_prev += this->numbertilde_07_smooth_increment;
            this->numbertilde_07_smooth_index -= 1;
        } else {
            this->numbertilde_07_smooth_prev = x;
        }
    
        return this->numbertilde_07_smooth_prev;
    }
    
    void numbertilde_07_smooth_reset() {
        this->numbertilde_07_smooth_prev = 0;
        this->numbertilde_07_smooth_index = 0;
        this->numbertilde_07_smooth_increment = 0;
        this->numbertilde_07_smooth_d_reset();
    }
    
    void numbertilde_07_init() {
        this->numbertilde_07_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number~_obj-38"), 1, this->_currentTime);
    }
    
    void numbertilde_07_dspsetup(bool force) {
        if ((bool)(this->numbertilde_07_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_07_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_07_currentInterval = this->numbertilde_07_currentIntervalInSamples;
        this->numbertilde_07_rampInSamples = this->mstosamps(this->numbertilde_07_ramp);
        this->numbertilde_07_setupDone = true;
        this->numbertilde_07_smooth_d_dspsetup();
    }
    
    void numberobj_36_init() {
        this->numberobj_36_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-42"), 1, this->_currentTime);
    }
    
    void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_36_value;
    }
    
    void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_36_value_set(preset["value"]);
    }
    
    number cycle_tilde_06_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_06_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_06_ph_conv;
    
        if (this->cycle_tilde_06_ph_currentPhase < 0.)
            this->cycle_tilde_06_ph_currentPhase = 1. + this->cycle_tilde_06_ph_currentPhase;
    
        if (this->cycle_tilde_06_ph_currentPhase > 1.)
            this->cycle_tilde_06_ph_currentPhase = this->cycle_tilde_06_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_06_ph_currentPhase;
        this->cycle_tilde_06_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_06_ph_reset() {
        this->cycle_tilde_06_ph_currentPhase = 0;
    }
    
    void cycle_tilde_06_ph_dspsetup() {
        this->cycle_tilde_06_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_06_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_06_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_06_phasei = 0;
        this->cycle_tilde_06_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_06_wrap = (long)(this->cycle_tilde_06_buffer->getSize()) - 1;
        this->cycle_tilde_06_setupDone = true;
        this->cycle_tilde_06_ph_dspsetup();
    }
    
    void cycle_tilde_06_bufferUpdated() {
        this->cycle_tilde_06_wrap = (long)(this->cycle_tilde_06_buffer->getSize()) - 1;
    }
    
    void numberobj_37_init() {
        this->numberobj_37_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_37_value;
    }
    
    void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_37_value_set(preset["value"]);
    }
    
    void numberobj_38_init() {
        this->numberobj_38_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_38_value;
    }
    
    void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_38_value_set(preset["value"]);
    }
    
    void param_08_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_08_value;
    }
    
    void param_08_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_08_value_set(preset["value"]);
    }
    
    void numberobj_39_init() {
        this->numberobj_39_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-16"), 1, this->_currentTime);
    }
    
    void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_39_value;
    }
    
    void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_39_value_set(preset["value"]);
    }
    
    void numberobj_40_init() {
        this->numberobj_40_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-18"), 1, this->_currentTime);
    }
    
    void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_40_value;
    }
    
    void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_40_value_set(preset["value"]);
    }
    
    void param_09_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_09_value;
    }
    
    void param_09_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_09_value_set(preset["value"]);
    }
    
    void scopetilde_01_updateEffectiveCount() {
        number effectiveCount = 256 * 1 + 256 * 0;
        this->scopetilde_01_effectiveCount = this->maximum(effectiveCount, 256);
    }
    
    void scopetilde_01_dspsetup(bool force) {
        if ((bool)(this->scopetilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        {
            this->scopetilde_01_mode = 1;
        }
    
        this->getEngine()->sendListMessage(
            TAG("setup"),
            TAG("Verb/scope~_obj-40"),
            {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_01_mode},
            this->_currentTime
        );;
    
        this->scopetilde_01_updateEffectiveCount();
        this->scopetilde_01_setupDone = true;
    }
    
    void param_10_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_10_value;
    }
    
    void param_10_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_10_value_set(preset["value"]);
    }
    
    bool line_05_isFinished(number value) {
        return value == this->line_05_currentTarget && this->currenttime() - this->line_05_startTime >= this->line_05__time;
    }
    
    number line_05_valueAtTime(MillisecondTime time) {
        return this->line_05_startValue + this->line_05_slope * (time - this->line_05_startTime);
    }
    
    void line_05_scheduleNext() {
        MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
        number nextTime = currentTime + this->line_05_grain;
        number nextValue;
    
        if (nextTime - this->line_05_startTime >= this->line_05__time || this->line_05_grain == 0) {
            nextTime = this->line_05_startTime + this->line_05__time;
            nextValue = this->line_05_currentTarget;
        } else {
            nextValue = this->line_05_valueAtTime(nextTime);
        }
    
        this->getEngine()->scheduleClockEventWithValue(this, 848255507, nextTime - currentTime + this->_currentTime, nextValue);;
    }
    
    void line_05_startRamp(number target, MillisecondTime time) {
        MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
        this->line_05_startValue = this->line_05_valueAtTime(currentTime);
        this->line_05_startTime = currentTime;
        this->line_05_currentTarget = target;
        this->getEngine()->flushClockEvents(this, 848255507, false);;
        number rise = target - this->line_05_startValue;
        this->line_05_slope = rise / time;
        this->line_05_scheduleNext();
    }
    
    void line_05_startPendingRamp() {
        if (this->line_05_pendingRamps->length < 2) {
            this->line_05_pendingRamps->length = 0;
            this->line_05__time = 0;
            this->line_05_time_set(0);
            this->line_05_end_bang();
            return;
        }
    
        if (this->line_05_pendingRamps->length > 1) {
            number target = this->line_05_pendingRamps->shift();
            this->line_05__time = this->line_05_pendingRamps->shift();
            this->line_05__time = (this->line_05__time < 0 ? 0 : this->line_05__time);
            this->line_05_startRamp(target, this->line_05__time);
        }
    }
    
    void numberobj_41_init() {
        this->numberobj_41_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-151"), 1, this->_currentTime);
    }
    
    void numberobj_41_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_41_value;
    }
    
    void numberobj_41_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_41_value_set(preset["value"]);
    }
    
    void message_63_init() {
        this->message_63_set_set({1});
    }
    
    list liststore_06_storage_next(number index) {
        return this->liststore_06_storage_lookup(index);
    }
    
    list liststore_06_storage_lookup(number index) {
        list tmp1 = {};
        int64_t idx = (int64_t)(index);
    
        if (index >= 0 && index < this->liststore_06_storage__slotcount) {
            number entrylength = this->liststore_06_storage_storage[(Index)(idx * this->liststore_06_storage__entrysize)];
    
            if (entrylength > 0) {
                for (number i = 0; i < entrylength; i++) {
                    tmp1->push(
                        this->liststore_06_storage_storage[(Index)(idx * this->liststore_06_storage__entrysize + i + 1)]
                    );
                }
            }
        }
    
        return tmp1;
    }
    
    void liststore_06_storage_store(number index, list value) {
        int64_t idx = (int64_t)(index);
    
        if (index >= 0 && index < this->liststore_06_storage__slotcount) {
            number entrylength = value->length;
            this->liststore_06_storage_storage[(Index)(idx * this->liststore_06_storage__entrysize)] = entrylength;
    
            if (entrylength > 0) {
                for (number i = 0; i < entrylength; i++) {
                    this->liststore_06_storage_storage[(Index)(idx * this->liststore_06_storage__entrysize + i + 1)] = value[(Index)i];
                }
            }
        }
    }
    
    void liststore_06_storage_init() {
        this->liststore_06_storage__entrysize = 1 + 1;
        this->liststore_06_storage__slotcount = 2;
        int64_t storagesize = (int64_t)(2 * this->liststore_06_storage__entrysize);
        this->liststore_06_storage_storage->requestSize((Index)(storagesize), 1);
    }
    
    void liststore_06_storage_clear() {
        this->liststore_06_storage_storage->setZero();
    }
    
    void liststore_06_storage_reset() {
        this->liststore_06_storage_init();
        this->liststore_06_storage_clear();
    }
    
    void toggle_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_01_value_number;
    }
    
    void toggle_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_01_value_number_set(preset["value"]);
    }
    
    void drunk_01_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->drunk_01_nz_state
        );
    }
    
    void drunk_01_nz_init() {
        this->drunk_01_nz_reset();
    }
    
    void drunk_01_nz_seed(number v) {
        xoshiro_reset(v, this->drunk_01_nz_state);
    }
    
    number drunk_01_nz_next() {
        return xoshiro_next(this->drunk_01_nz_state);
    }
    
    number drunk_01_getDoubleRandom() {
        number r = this->drunk_01_nz_next();
    
        return this->fold(
            this->drunk_01_lastValue + r * (this->drunk_01_stepsize - 1),
            0,
            this->drunk_01_size
        );
    }
    
    void metro_01_onTransportChanged(number ) {}
    
    void metro_01_onBeatTimeChanged(number ) {}
    
    void counter_03_inc() {
        this->counter_03_count = ((bool)(this->counter_03_phase) ? this->counter_03_count + 1 : this->counter_03_count - 1);
    }
    
    void message_64_init() {
        this->message_64_set_set({0});
    }
    
    void message_65_init() {
        this->message_65_set_set({});
    }
    
    void numberobj_42_init() {
        this->numberobj_42_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-147"), 1, this->_currentTime);
    }
    
    void numberobj_42_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_42_value;
    }
    
    void numberobj_42_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_42_value_set(preset["value"]);
    }
    
    void message_66_init() {
        this->message_66_set_set({1000});
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        p_09_target = 0;
        linetilde_02_time = 50;
        linetilde_02_keepramp = 1;
        numberobj_28_value = 0;
        numberobj_28_value_setter(numberobj_28_value);
        scale_01_inlow = 0;
        scale_01_inhigh = 100;
        scale_01_outlow = 0.05;
        scale_01_outhigh = 0.99;
        scale_01_power = 1;
        numberobj_29_value = 0;
        numberobj_29_value_setter(numberobj_29_value);
        param_03_value = 50;
        p_10_target = 0;
        p_11_target = 0;
        p_12_target = 0;
        p_13_target = 0;
        p_14_target = 0;
        p_15_target = 0;
        param_04_value = 0;
        gate_01_onoff = 0;
        gate_01_out1_number = 0;
        p_16_target = 0;
        numberobj_30_value = 0;
        numberobj_30_value_setter(numberobj_30_value);
        expr_15_in1 = 0;
        expr_15_in2 = 100;
        expr_15_out1 = 0;
        linetilde_03_time = 10;
        linetilde_03_keepramp = 1;
        numberobj_31_value = 0;
        numberobj_31_value_setter(numberobj_31_value);
        scale_02_inlow = 0;
        scale_02_inhigh = 100;
        scale_02_outlow = 0;
        scale_02_outhigh = 50;
        scale_02_power = 1.322;
        numberobj_32_value = 0;
        numberobj_32_value_setter(numberobj_32_value);
        param_05_value = 50;
        linetilde_04_time = 50;
        linetilde_04_keepramp = 1;
        numberobj_33_value = 0;
        numberobj_33_value_setter(numberobj_33_value);
        param_06_value = 50;
        linetilde_05_time = 50;
        linetilde_05_keepramp = 1;
        numberobj_34_value = 0;
        numberobj_34_value_setter(numberobj_34_value);
        scale_03_inlow = 0;
        scale_03_inhigh = 100;
        scale_03_outlow = 12000;
        scale_03_outhigh = 300;
        scale_03_power = 0.333333;
        numberobj_35_value = 0;
        numberobj_35_value_setter(numberobj_35_value);
        param_07_value = 50;
        loadmess_02_message = { 60 };
        numbertilde_07_input_number = 0;
        numbertilde_07_ramp = 0;
        numberobj_36_value = 0;
        numberobj_36_value_setter(numberobj_36_value);
        cycle_tilde_06_frequency = 0.01;
        cycle_tilde_06_phase_offset = 0;
        scale_04_inlow = -1;
        scale_04_inhigh = 1;
        scale_04_outlow = 50;
        scale_04_outhigh = 80;
        scale_04_power = 1;
        linetilde_06_time = 50;
        linetilde_06_keepramp = 1;
        linetilde_07_time = 50;
        linetilde_07_keepramp = 1;
        numberobj_37_value = 0;
        numberobj_37_value_setter(numberobj_37_value);
        scale_05_inlow = 0;
        scale_05_inhigh = 100;
        scale_05_outlow = 0.01;
        scale_05_outhigh = 1.6;
        scale_05_power = 1;
        numberobj_38_value = 0;
        numberobj_38_value_setter(numberobj_38_value);
        param_08_value = 50;
        numberobj_39_value = 0;
        numberobj_39_value_setter(numberobj_39_value);
        expr_20_in1 = 0;
        expr_20_in2 = 100;
        expr_20_out1 = 0;
        numberobj_40_value = 0;
        numberobj_40_value_setter(numberobj_40_value);
        param_09_value = 50;
        param_10_value = 0;
        gate_02_onoff = 0;
        gate_02_out1_number = 0;
        scale_06_inlow = 0;
        scale_06_inhigh = 100;
        scale_06_outlow = 25;
        scale_06_outhigh = 100;
        scale_06_power = 1;
        line_05_time = 0;
        line_05_grain = 20;
        line_05_output = 0;
        pack_09_in1 = 0;
        pack_09_in2 = 0;
        numberobj_41_value = 0;
        numberobj_41_value_setter(numberobj_41_value);
        liststore_06_lookupidx = 0;
        liststore_06_storeidx = 0;
        toggle_01_value_number = 0;
        toggle_01_value_number_setter(toggle_01_value_number);
        drunk_01_trigger_number = 0;
        drunk_01_size = 100;
        drunk_01_size_setter(drunk_01_size);
        drunk_01_stepsize = 25;
        drunk_01_stepsize_setter(drunk_01_stepsize);
        drunk_01_seed = 1;
        drunk_01_out = 0;
        metro_01_on = 0;
        metro_01_interval = 30000;
        metro_01_interval_setter(metro_01_interval);
        counter_03_carryflag = 0;
        counter_03_direction = 0;
        counter_03_resetnext_number = 0;
        counter_03_resetnow_number = 0;
        counter_03_maximum = 1;
        counter_03_output = 0;
        counter_03_underflow_number = 0;
        counter_03_overflow_number = 0;
        counter_03_carry = 0;
        counter_03_minimum = 0;
        numberobj_42_value = 0;
        numberobj_42_value_setter(numberobj_42_value);
        pack_10_in1 = 0;
        pack_10_in2 = 0;
        ctlin_01_input = 0;
        ctlin_01_controller = 4;
        ctlin_01_channel = -1;
        expr_14_in1 = 0;
        expr_14_in2 = 0.007874015748;
        expr_14_out1 = 0;
        ctlin_02_input = 0;
        ctlin_02_controller = 6;
        ctlin_02_channel = -1;
        expr_16_in1 = 0;
        expr_16_in2 = 0.007874015748;
        expr_16_out1 = 0;
        ctlin_03_input = 0;
        ctlin_03_controller = 5;
        ctlin_03_channel = -1;
        expr_17_in1 = 0;
        expr_17_in2 = 0.007874015748;
        expr_17_out1 = 0;
        ctlin_04_input = 0;
        ctlin_04_controller = 1;
        ctlin_04_channel = -1;
        expr_18_in1 = 0;
        expr_18_in2 = 0.007874015748;
        expr_18_out1 = 0;
        ctlin_05_input = 0;
        ctlin_05_controller = 3;
        ctlin_05_channel = -1;
        expr_19_in1 = 0;
        expr_19_in2 = 0.007874015748;
        expr_19_out1 = 0;
        ctlin_06_input = 0;
        ctlin_06_controller = 2;
        ctlin_06_channel = -1;
        expr_21_in1 = 0;
        expr_21_in2 = 0.007874015748;
        expr_21_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        signals[7] = nullptr;
        signals[8] = nullptr;
        signals[9] = nullptr;
        signals[10] = nullptr;
        signals[11] = nullptr;
        signals[12] = nullptr;
        signals[13] = nullptr;
        signals[14] = nullptr;
        signals[15] = nullptr;
        signals[16] = nullptr;
        signals[17] = nullptr;
        signals[18] = nullptr;
        signals[19] = nullptr;
        signals[20] = nullptr;
        signals[21] = nullptr;
        signals[22] = nullptr;
        signals[23] = nullptr;
        signals[24] = nullptr;
        signals[25] = nullptr;
        signals[26] = nullptr;
        signals[27] = nullptr;
        signals[28] = nullptr;
        signals[29] = nullptr;
        signals[30] = nullptr;
        signals[31] = nullptr;
        signals[32] = nullptr;
        signals[33] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        linetilde_02_currentValue = 0;
        numberobj_28_currentFormat = 6;
        numberobj_28_lastValue = 0;
        numberobj_29_currentFormat = 6;
        numberobj_29_lastValue = 0;
        param_03_lastValue = 0;
        param_04_lastValue = 0;
        numberobj_30_currentFormat = 6;
        numberobj_30_lastValue = 0;
        linetilde_03_currentValue = 0;
        numberobj_31_currentFormat = 6;
        numberobj_31_lastValue = 0;
        numberobj_32_currentFormat = 6;
        numberobj_32_lastValue = 0;
        param_05_lastValue = 0;
        linetilde_04_currentValue = 0;
        numberobj_33_currentFormat = 6;
        numberobj_33_lastValue = 0;
        param_06_lastValue = 0;
        linetilde_05_currentValue = 0;
        numberobj_34_currentFormat = 6;
        numberobj_34_lastValue = 0;
        numberobj_35_currentFormat = 6;
        numberobj_35_lastValue = 0;
        param_07_lastValue = 0;
        numbertilde_07_currentInterval = 0;
        numbertilde_07_currentIntervalInSamples = 0;
        numbertilde_07_lastValue = 0;
        numbertilde_07_outValue = 0;
        numbertilde_07_rampInSamples = 0;
        numbertilde_07_currentMode = 0;
        numbertilde_07_smooth_d_prev = 0;
        numbertilde_07_smooth_prev = 0;
        numbertilde_07_smooth_index = 0;
        numbertilde_07_smooth_increment = 0;
        numbertilde_07_setupDone = false;
        numberobj_36_currentFormat = 6;
        numberobj_36_lastValue = 0;
        cycle_tilde_06_wrap = 0;
        cycle_tilde_06_ph_currentPhase = 0;
        cycle_tilde_06_ph_conv = 0;
        cycle_tilde_06_setupDone = false;
        linetilde_06_currentValue = 0;
        linetilde_07_currentValue = 0;
        numberobj_37_currentFormat = 6;
        numberobj_37_lastValue = 0;
        numberobj_38_currentFormat = 6;
        numberobj_38_lastValue = 0;
        param_08_lastValue = 0;
        numberobj_39_currentFormat = 6;
        numberobj_39_lastValue = 0;
        numberobj_40_currentFormat = 6;
        numberobj_40_lastValue = 0;
        param_09_lastValue = 0;
        scopetilde_01_lastValue = 0;
        scopetilde_01_effectiveCount = 256;
        scopetilde_01_xsign = 1;
        scopetilde_01_ysign = 1;
        scopetilde_01_mode = 0;
        scopetilde_01_setupDone = false;
        param_10_lastValue = 0;
        line_05_startTime = 0;
        line_05_startValue = 0;
        line_05_currentTarget = 0;
        line_05_slope = 0;
        line_05__time = 0;
        numberobj_41_currentFormat = 6;
        numberobj_41_lastValue = 0;
        liststore_06_storage__slotcount = 1024;
        liststore_06_storage__entrysize = 65;
        toggle_01_lastValue = 0;
        drunk_01_lastValue = -1;
        metro_01_last = -1;
        metro_01_next = -1;
        counter_03_count = 0;
        counter_03_phase = true;
        numberobj_42_currentFormat = 6;
        numberobj_42_lastValue = 0;
        ctlin_01_status = 0;
        ctlin_01_byte1 = -1;
        ctlin_01_inchan = 0;
        ctlin_02_status = 0;
        ctlin_02_byte1 = -1;
        ctlin_02_inchan = 0;
        ctlin_03_status = 0;
        ctlin_03_byte1 = -1;
        ctlin_03_inchan = 0;
        ctlin_04_status = 0;
        ctlin_04_byte1 = -1;
        ctlin_04_inchan = 0;
        ctlin_05_status = 0;
        ctlin_05_byte1 = -1;
        ctlin_05_inchan = 0;
        ctlin_06_status = 0;
        ctlin_06_byte1 = -1;
        ctlin_06_inchan = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number p_09_target;
        list linetilde_02_segments;
        number linetilde_02_time;
        number linetilde_02_keepramp;
        number numberobj_28_value;
        list scale_01_input;
        number scale_01_inlow;
        number scale_01_inhigh;
        number scale_01_outlow;
        number scale_01_outhigh;
        number scale_01_power;
        list scale_01_out;
        number numberobj_29_value;
        number param_03_value;
        number p_10_target;
        number p_11_target;
        number p_12_target;
        number p_13_target;
        number p_14_target;
        number p_15_target;
        number param_04_value;
        number gate_01_onoff;
        number gate_01_out1_number;
        list gate_01_out1_list;
        number p_16_target;
        number numberobj_30_value;
        number expr_15_in1;
        number expr_15_in2;
        number expr_15_out1;
        list linetilde_03_segments;
        number linetilde_03_time;
        number linetilde_03_keepramp;
        number numberobj_31_value;
        list scale_02_input;
        number scale_02_inlow;
        number scale_02_inhigh;
        number scale_02_outlow;
        number scale_02_outhigh;
        number scale_02_power;
        list scale_02_out;
        number numberobj_32_value;
        number param_05_value;
        list linetilde_04_segments;
        number linetilde_04_time;
        number linetilde_04_keepramp;
        number numberobj_33_value;
        number param_06_value;
        list linetilde_05_segments;
        number linetilde_05_time;
        number linetilde_05_keepramp;
        number numberobj_34_value;
        list scale_03_input;
        number scale_03_inlow;
        number scale_03_inhigh;
        number scale_03_outlow;
        number scale_03_outhigh;
        number scale_03_power;
        list scale_03_out;
        number numberobj_35_value;
        number param_07_value;
        list loadmess_02_message;
        number numbertilde_07_input_number;
        number numbertilde_07_ramp;
        number numberobj_36_value;
        number cycle_tilde_06_frequency;
        number cycle_tilde_06_phase_offset;
        list scale_04_input;
        number scale_04_inlow;
        number scale_04_inhigh;
        number scale_04_outlow;
        number scale_04_outhigh;
        number scale_04_power;
        list scale_04_out;
        list linetilde_06_segments;
        number linetilde_06_time;
        number linetilde_06_keepramp;
        list linetilde_07_segments;
        number linetilde_07_time;
        number linetilde_07_keepramp;
        number numberobj_37_value;
        list scale_05_input;
        number scale_05_inlow;
        number scale_05_inhigh;
        number scale_05_outlow;
        number scale_05_outhigh;
        number scale_05_power;
        list scale_05_out;
        number numberobj_38_value;
        number param_08_value;
        number numberobj_39_value;
        number expr_20_in1;
        number expr_20_in2;
        number expr_20_out1;
        number numberobj_40_value;
        number param_09_value;
        number param_10_value;
        number gate_02_onoff;
        number gate_02_out1_number;
        list gate_02_out1_list;
        list scale_06_input;
        number scale_06_inlow;
        number scale_06_inhigh;
        number scale_06_outlow;
        number scale_06_outhigh;
        number scale_06_power;
        list scale_06_out;
        list listjoin_05_in1;
        list listjoin_05_in2;
        list line_05_target;
        number line_05_time;
        number line_05_grain;
        number line_05_output;
        number pack_09_in1;
        number pack_09_in2;
        number numberobj_41_value;
        list message_63_set;
        number liststore_06_lookupidx;
        list liststore_06_storelist;
        number liststore_06_storeidx;
        number toggle_01_value_number;
        number drunk_01_trigger_number;
        number drunk_01_size;
        number drunk_01_stepsize;
        number drunk_01_seed;
        number drunk_01_out;
        number metro_01_on;
        number metro_01_interval;
        Int counter_03_carryflag;
        number counter_03_direction;
        number counter_03_resetnext_number;
        number counter_03_resetnow_number;
        number counter_03_maximum;
        number counter_03_output;
        number counter_03_underflow_number;
        number counter_03_overflow_number;
        number counter_03_carry;
        number counter_03_minimum;
        list message_64_set;
        list message_65_set;
        number numberobj_42_value;
        number pack_10_in1;
        number pack_10_in2;
        list message_66_set;
        number ctlin_01_input;
        number ctlin_01_controller;
        number ctlin_01_channel;
        number expr_14_in1;
        number expr_14_in2;
        number expr_14_out1;
        number ctlin_02_input;
        number ctlin_02_controller;
        number ctlin_02_channel;
        number expr_16_in1;
        number expr_16_in2;
        number expr_16_out1;
        number ctlin_03_input;
        number ctlin_03_controller;
        number ctlin_03_channel;
        number expr_17_in1;
        number expr_17_in2;
        number expr_17_out1;
        number ctlin_04_input;
        number ctlin_04_controller;
        number ctlin_04_channel;
        number expr_18_in1;
        number expr_18_in2;
        number expr_18_out1;
        number ctlin_05_input;
        number ctlin_05_controller;
        number ctlin_05_channel;
        number expr_19_in1;
        number expr_19_in2;
        number expr_19_out1;
        number ctlin_06_input;
        number ctlin_06_controller;
        number ctlin_06_channel;
        number expr_21_in1;
        number expr_21_in2;
        number expr_21_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[34];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list linetilde_02_activeRamps;
        number linetilde_02_currentValue;
        Int numberobj_28_currentFormat;
        number numberobj_28_lastValue;
        Int numberobj_29_currentFormat;
        number numberobj_29_lastValue;
        number param_03_lastValue;
        number param_04_lastValue;
        Int numberobj_30_currentFormat;
        number numberobj_30_lastValue;
        list linetilde_03_activeRamps;
        number linetilde_03_currentValue;
        Int numberobj_31_currentFormat;
        number numberobj_31_lastValue;
        Int numberobj_32_currentFormat;
        number numberobj_32_lastValue;
        number param_05_lastValue;
        list linetilde_04_activeRamps;
        number linetilde_04_currentValue;
        Int numberobj_33_currentFormat;
        number numberobj_33_lastValue;
        number param_06_lastValue;
        list linetilde_05_activeRamps;
        number linetilde_05_currentValue;
        Int numberobj_34_currentFormat;
        number numberobj_34_lastValue;
        Int numberobj_35_currentFormat;
        number numberobj_35_lastValue;
        number param_07_lastValue;
        SampleIndex numbertilde_07_currentInterval;
        SampleIndex numbertilde_07_currentIntervalInSamples;
        number numbertilde_07_lastValue;
        number numbertilde_07_outValue;
        number numbertilde_07_rampInSamples;
        Int numbertilde_07_currentMode;
        number numbertilde_07_smooth_d_prev;
        number numbertilde_07_smooth_prev;
        number numbertilde_07_smooth_index;
        number numbertilde_07_smooth_increment;
        bool numbertilde_07_setupDone;
        Int numberobj_36_currentFormat;
        number numberobj_36_lastValue;
        Float64BufferRef cycle_tilde_06_buffer;
        long cycle_tilde_06_wrap;
        uint32_t cycle_tilde_06_phasei;
        SampleValue cycle_tilde_06_f2i;
        number cycle_tilde_06_ph_currentPhase;
        number cycle_tilde_06_ph_conv;
        bool cycle_tilde_06_setupDone;
        list linetilde_06_activeRamps;
        number linetilde_06_currentValue;
        list linetilde_07_activeRamps;
        number linetilde_07_currentValue;
        Int numberobj_37_currentFormat;
        number numberobj_37_lastValue;
        Int numberobj_38_currentFormat;
        number numberobj_38_lastValue;
        number param_08_lastValue;
        Int numberobj_39_currentFormat;
        number numberobj_39_lastValue;
        Int numberobj_40_currentFormat;
        number numberobj_40_lastValue;
        number param_09_lastValue;
        number scopetilde_01_lastValue;
        number scopetilde_01_effectiveCount;
        number scopetilde_01_xmonitorvalue;
        number scopetilde_01_ymonitorvalue;
        list scopetilde_01_monitorbuffer;
        number scopetilde_01_xsign;
        number scopetilde_01_ysign;
        Int scopetilde_01_mode;
        bool scopetilde_01_setupDone;
        number param_10_lastValue;
        MillisecondTime line_05_startTime;
        number line_05_startValue;
        number line_05_currentTarget;
        number line_05_slope;
        MillisecondTime line_05__time;
        list line_05_pendingRamps;
        Int numberobj_41_currentFormat;
        number numberobj_41_lastValue;
        Float64BufferRef liststore_06_storage_storage;
        number liststore_06_storage__slotcount;
        number liststore_06_storage__entrysize;
        number toggle_01_lastValue;
        number drunk_01_lastValue;
        UInt drunk_01_nz_state[4] = { };
        MillisecondTime metro_01_last;
        MillisecondTime metro_01_next;
        number counter_03_count;
        bool counter_03_phase;
        Int numberobj_42_currentFormat;
        number numberobj_42_lastValue;
        int ctlin_01_status;
        int ctlin_01_byte1;
        int ctlin_01_inchan;
        int ctlin_02_status;
        int ctlin_02_byte1;
        int ctlin_02_inchan;
        int ctlin_03_status;
        int ctlin_03_byte1;
        int ctlin_03_inchan;
        int ctlin_04_status;
        int ctlin_04_byte1;
        int ctlin_04_inchan;
        int ctlin_05_status;
        int ctlin_05_byte1;
        int ctlin_05_inchan;
        int ctlin_06_status;
        int ctlin_06_byte1;
        int ctlin_06_inchan;
        number stackprotect_count;
        DataRef liststore_06_storage_storageobj;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_149* p_09;
        RNBOSubpatcher_150* p_10;
        RNBOSubpatcher_151* p_11;
        RNBOSubpatcher_152* p_12;
        RNBOSubpatcher_153* p_13;
        RNBOSubpatcher_154* p_14;
        RNBOSubpatcher_155* p_15;
        RNBOSubpatcher_156* p_16;
    
};

class RNBOSubpatcher_177 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    RNBOSubpatcher_177()
    {
    }
    
    ~RNBOSubpatcher_177()
    {
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    number tempo() {
        return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
    }
    
    number tickstoms(number ticks) {
        return ticks / (number)480 * this->safediv(60, this->tempo()) * 1000;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double samplerate) {
        this->translate_02_onSampleRateChanged(samplerate);
    }
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->translate_02_onTempoChanged(tempo);
    }
    
    void processTransportEvent(MillisecondTime , TransportState ) {}
    
    void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
    
    void processTimeSignatureEvent(MillisecondTime , int , int ) {}
    
    void processBBUEvent(MillisecondTime , number , number , number ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {}
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_11_getPresetValue(getSubState(preset, "ChVal"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_11_value_set(v);
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_11_value;
            }
        default:
            {
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 1;
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ChVal";
            }
        default:
            {
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ChNote/ChVal";
            }
        default:
            {
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 0;
                info->max = 3;
                info->exponent = 1;
                info->steps = 4;
                static const char * eVal0[] = {"1nd", "1n", "2nd", "2n"};
                info->enumValues = eVal0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            {
                value = (value < 0 ? 0 : (value > 3 ? 3 : value));
                ParameterValue normalizedValue = (value - 0) / (3 - 0);
    
                {
                    normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 4);
                }
    
                return normalizedValue;
            }
            }
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
            {
            {
                {
                    value = this->applyStepsToNormalizedParameterValue(value, 4);
                }
    
                {
                    return 0 + value * (3 - 0);
                }
            }
            }
        default:
            {
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_11_value_constrain(value);
            }
        default:
            {
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("ChNote/number_obj-207") == objectId)
                this->numberobj_43_valin_set(payload);
    
            if (TAG("ChNote/number_obj-193") == objectId)
                this->numberobj_44_valin_set(payload);
    
            if (TAG("ChNote/number_obj-4") == objectId)
                this->numberobj_45_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("ChNote/number_obj-207") == objectId)
                this->numberobj_43_format_set(payload);
    
            if (TAG("ChNote/number_obj-193") == objectId)
                this->numberobj_44_format_set(payload);
    
            if (TAG("ChNote/number_obj-4") == objectId)
                this->numberobj_45_format_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("ChNote/message_obj-200") == objectId)
                this->message_67_listin_number_set(payload);
    
            if (TAG("ChNote/message_obj-196") == objectId)
                this->message_68_listin_number_set(payload);
    
            if (TAG("ChNote/message_obj-201") == objectId)
                this->message_69_listin_number_set(payload);
    
            if (TAG("ChNote/message_obj-203") == objectId)
                this->message_70_listin_number_set(payload);
    
            if (TAG("ChNote/message_obj-204") == objectId)
                this->message_71_listin_number_set(payload);
    
            break;
            }
        }
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("ChNote/message_obj-200") == objectId)
                this->message_67_listin_list_set(payload);
    
            if (TAG("ChNote/message_obj-196") == objectId)
                this->message_68_listin_list_set(payload);
    
            if (TAG("ChNote/message_obj-201") == objectId)
                this->message_69_listin_list_set(payload);
    
            if (TAG("ChNote/message_obj-203") == objectId)
                this->message_70_listin_list_set(payload);
    
            if (TAG("ChNote/message_obj-204") == objectId)
                this->message_71_listin_list_set(payload);
    
            break;
            }
        }
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("ChNote/message_obj-200") == objectId)
                this->message_67_listin_bang_bang();
    
            if (TAG("ChNote/message_obj-196") == objectId)
                this->message_68_listin_bang_bang();
    
            if (TAG("ChNote/message_obj-201") == objectId)
                this->message_69_listin_bang_bang();
    
            if (TAG("ChNote/message_obj-203") == objectId)
                this->message_70_listin_bang_bang();
    
            if (TAG("ChNote/message_obj-204") == objectId)
                this->message_71_listin_bang_bang();
    
            break;
            }
        }
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("ChNote/number_obj-207"):
            {
            return "ChNote/number_obj-207";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("ChNote/message_obj-200"):
            {
            return "ChNote/message_obj-200";
            }
        case TAG("ChNote/message_obj-196"):
            {
            return "ChNote/message_obj-196";
            }
        case TAG("ChNote/message_obj-201"):
            {
            return "ChNote/message_obj-201";
            }
        case TAG("ChNote/number_obj-193"):
            {
            return "ChNote/number_obj-193";
            }
        case TAG("ChNote/message_obj-203"):
            {
            return "ChNote/message_obj-203";
            }
        case TAG("ChNote/number_obj-4"):
            {
            return "ChNote/number_obj-4";
            }
        case TAG("ChNote/message_obj-204"):
            {
            return "ChNote/message_obj-204";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        }
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
    
    void initialize() {
        this->assign_defaults();
        this->setState();
    }
    
    protected:
    
    void eventinlet_19_out1_bang_bang() {
        this->numberobj_43_value_bang();
    }
    
    void eventinlet_19_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_43_value_set(converted);
        }
    }
    
    void numberobj_43_valin_set(number v) {
        this->numberobj_43_value_set(v);
    }
    
    void numberobj_43_format_set(number v) {
        this->numberobj_43_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_67_listin_list_set(const list& v) {
        this->message_67_set_set(v);
    }
    
    void message_67_listin_number_set(number v) {
        this->message_67_set_set(v);
    }
    
    void message_67_listin_bang_bang() {
        this->message_67_trigger_bang();
    }
    
    void message_68_listin_list_set(const list& v) {
        this->message_68_set_set(v);
    }
    
    void message_68_listin_number_set(number v) {
        this->message_68_set_set(v);
    }
    
    void message_68_listin_bang_bang() {
        this->message_68_trigger_bang();
    }
    
    void message_69_listin_list_set(const list& v) {
        this->message_69_set_set(v);
    }
    
    void message_69_listin_number_set(number v) {
        this->message_69_set_set(v);
    }
    
    void message_69_listin_bang_bang() {
        this->message_69_trigger_bang();
    }
    
    void numberobj_44_valin_set(number v) {
        this->numberobj_44_value_set(v);
    }
    
    void numberobj_44_format_set(number v) {
        this->numberobj_44_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_70_listin_list_set(const list& v) {
        this->message_70_set_set(v);
    }
    
    void message_70_listin_number_set(number v) {
        this->message_70_set_set(v);
    }
    
    void message_70_listin_bang_bang() {
        this->message_70_trigger_bang();
    }
    
    void numberobj_45_valin_set(number v) {
        this->numberobj_45_value_set(v);
    }
    
    void numberobj_45_format_set(number v) {
        this->numberobj_45_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_71_listin_list_set(const list& v) {
        this->message_71_set_set(v);
    }
    
    void message_71_listin_number_set(number v) {
        this->message_71_set_set(v);
    }
    
    void message_71_listin_bang_bang() {
        this->message_71_trigger_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->numberobj_43_init();
        this->message_67_init();
        this->message_68_init();
        this->message_69_init();
        this->numberobj_44_init();
        this->message_70_init();
        this->numberobj_45_init();
        this->message_71_init();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
    
        {
            this->scheduleParamInit(0, 0);
        }
    }
    
    void allocateDataRefs() {}
    
    number param_11_value_constrain(number v) const {
        v = (v > 3 ? 3 : (v < 0 ? 0 : v));
    
        {
            number oneStep = (number)3 / (number)3;
            number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
            number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
            v = numberOfSteps * oneStep;
        }
    
        return v;
    }
    
    void numberobj_45_output_set(number ) {}
    
    void numberobj_45_value_set(number v) {
        this->numberobj_45_value_setter(v);
        v = this->numberobj_45_value;
        number localvalue = v;
    
        if (this->numberobj_45_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("ChNote/number_obj-4"), localvalue, this->_currentTime);
        this->numberobj_45_output_set(localvalue);
    }
    
    void message_68_set_set(const list& v) {
        this->message_68_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNote/message_obj-196"), v, this->_currentTime);
    }
    
    void eventoutlet_14_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_37_out1_number_set(v);
    }
    
    void translate_02_out_set(number v) {
        {
            list converted = {v};
            this->message_68_set_set(converted);
        }
    
        this->eventoutlet_14_in1_number_set(v);
    }
    
    void translate_02_value_set(number v) {
        this->translate_02_value = v;
    
        {
            {
                {
                    this->translate_02_out_set(this->tickstoms(v));
                }
            }
        }
    }
    
    void expr_25_out1_set(number v) {
        this->expr_25_out1 = v;
        this->numberobj_45_value_set(this->expr_25_out1);
        this->translate_02_value_set(this->expr_25_out1);
    }
    
    void expr_25_in1_set(number in1) {
        this->expr_25_in1 = in1;
        this->expr_25_out1_set((this->expr_25_in1 == 0. ? 0. : this->expr_25_in2 / this->expr_25_in1));//#map:ChNote/!/_obj-189:1
    }
    
    void numberobj_44_output_set(number ) {}
    
    void numberobj_44_value_set(number v) {
        this->numberobj_44_value_setter(v);
        v = this->numberobj_44_value;
        number localvalue = v;
    
        if (this->numberobj_44_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("ChNote/number_obj-193"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_44_output_set(localvalue);
    }
    
    void expr_24_out1_set(number v) {
        this->expr_24_out1 = v;
        this->expr_25_in1_set(this->expr_24_out1);
        this->numberobj_44_value_set(this->expr_24_out1);
    }
    
    void expr_24_in1_set(number in1) {
        this->expr_24_in1 = in1;
        this->expr_24_out1_set(fixnan(rnbo_pow(2, this->expr_24_in1)));//#map:ChNote/expr_obj-188:1
    }
    
    void message_67_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_24_in1_set(converted);
        }
    }
    
    void message_67_trigger_bang() {
        this->message_67_out_set(this->message_67_set);
    }
    
    void select_06_match1_bang() {
        this->message_67_trigger_bang();
    }
    
    void expr_22_out1_set(number v) {
        this->expr_22_out1 = v;
        this->numberobj_45_value_set(this->expr_22_out1);
        this->translate_02_value_set(this->expr_22_out1);
    }
    
    void expr_22_in1_set(number in1) {
        this->expr_22_in1 = in1;
        this->expr_22_out1_set((this->expr_22_in1 == 0. ? 0. : this->expr_22_in2 / this->expr_22_in1));//#map:ChNote/!/_obj-194:1
    }
    
    void expr_23_out1_set(number v) {
        this->expr_23_out1 = v;
        this->numberobj_44_value_set(this->expr_23_out1);
        this->expr_22_in1_set(this->expr_23_out1);
    }
    
    void expr_23_in1_set(number in1) {
        this->expr_23_in1 = in1;
        this->expr_23_out1_set(fixnan(rnbo_pow(2, this->expr_23_in1)));//#map:ChNote/expr_obj-195:1
    }
    
    void message_69_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_23_in1_set(converted);
        }
    }
    
    void message_69_trigger_bang() {
        this->message_69_out_set(this->message_69_set);
    }
    
    void select_06_match2_bang() {
        this->message_69_trigger_bang();
    }
    
    void message_70_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_24_in1_set(converted);
        }
    }
    
    void message_70_trigger_bang() {
        this->message_70_out_set(this->message_70_set);
    }
    
    void select_06_match3_bang() {
        this->message_70_trigger_bang();
    }
    
    void message_71_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_23_in1_set(converted);
        }
    }
    
    void message_71_trigger_bang() {
        this->message_71_out_set(this->message_71_set);
    }
    
    void select_06_match4_bang() {
        this->message_71_trigger_bang();
    }
    
    void select_06_nomatch_number_set(number ) {}
    
    void select_06_input_number_set(number v) {
        if (v == this->select_06_test1)
            this->select_06_match1_bang();
        else if (v == this->select_06_test2)
            this->select_06_match2_bang();
        else if (v == this->select_06_test3)
            this->select_06_match3_bang();
        else if (v == this->select_06_test4)
            this->select_06_match4_bang();
        else
            this->select_06_nomatch_number_set(v);
    }
    
    void param_11_value_set(number v) {
        v = this->param_11_value_constrain(v);
        this->param_11_value = v;
        this->sendParameter(0, false);
    
        if (this->param_11_value != this->param_11_lastValue) {
            this->getEngine()->presetTouched();
            this->param_11_lastValue = this->param_11_value;
        }
    
        this->select_06_input_number_set(v);
    }
    
    void numberobj_43_output_set(number v) {
        this->param_11_value_set(v);
    }
    
    void numberobj_43_value_set(number v) {
        this->numberobj_43_value_setter(v);
        v = this->numberobj_43_value;
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("ChNote/number_obj-207"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_43_output_set(localvalue);
    }
    
    void eventinlet_19_out1_number_set(number v) {
        this->numberobj_43_value_set(v);
    }
    
    void numberobj_43_value_bang() {
        number v = this->numberobj_43_value;
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("ChNote/number_obj-207"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_43_output_set(localvalue);
    }
    
    void message_67_set_set(const list& v) {
        this->message_67_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNote/message_obj-200"), v, this->_currentTime);
    }
    
    void message_68_out_set(const list& ) {}
    
    void message_68_trigger_bang() {
        this->message_68_out_set(this->message_68_set);
    }
    
    void message_69_set_set(const list& v) {
        this->message_69_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNote/message_obj-201"), v, this->_currentTime);
    }
    
    void message_70_set_set(const list& v) {
        this->message_70_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNote/message_obj-203"), v, this->_currentTime);
    }
    
    void message_71_set_set(const list& v) {
        this->message_71_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChNote/message_obj-204"), v, this->_currentTime);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_43_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_43_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_43_value = localvalue;
    }
    
    void numberobj_44_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_44_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_44_value = localvalue;
    }
    
    void numberobj_45_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_45_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_45_value = localvalue;
    }
    
    void numberobj_43_init() {
        this->numberobj_43_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChNote/number_obj-207"), 1, this->_currentTime);
    }
    
    void numberobj_43_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_43_value;
    }
    
    void numberobj_43_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_43_value_set(preset["value"]);
    }
    
    void message_67_init() {
        this->message_67_set_set({0});
    }
    
    void translate_02_onTempoChanged(number tempo) {
        RNBO_UNUSED(tempo);
    
        {
            this->translate_02_value_set(this->translate_02_value);
        }
    }
    
    void translate_02_onSampleRateChanged(number ) {}
    
    void param_11_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_11_value;
    }
    
    void param_11_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_11_value_set(preset["value"]);
    }
    
    void message_68_init() {
        this->message_68_set_set({3000});
    }
    
    void message_69_init() {
        this->message_69_set_set({0});
    }
    
    void numberobj_44_init() {
        this->numberobj_44_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChNote/number_obj-193"), 1, this->_currentTime);
    }
    
    void numberobj_44_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_44_value;
    }
    
    void numberobj_44_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_44_value_set(preset["value"]);
    }
    
    void message_70_init() {
        this->message_70_set_set({1});
    }
    
    void numberobj_45_init() {
        this->numberobj_45_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChNote/number_obj-4"), 1, this->_currentTime);
    }
    
    void numberobj_45_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_45_value;
    }
    
    void numberobj_45_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_45_value_set(preset["value"]);
    }
    
    void message_71_init() {
        this->message_71_set_set({1});
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        numberobj_43_value = 0;
        numberobj_43_value_setter(numberobj_43_value);
        select_06_test1 = 0;
        select_06_test2 = 1;
        select_06_test3 = 2;
        select_06_test4 = 3;
        expr_22_in1 = 0;
        expr_22_in2 = 1920;
        expr_22_out1 = 0;
        expr_23_in1 = 0;
        expr_23_out1 = 0;
        translate_02_value = 0;
        param_11_value = 1;
        numberobj_44_value = 0;
        numberobj_44_value_setter(numberobj_44_value);
        expr_24_in1 = 0;
        expr_24_out1 = 0;
        expr_25_in1 = 0;
        expr_25_in2 = 2880;
        expr_25_out1 = 0;
        numberobj_45_value = 0;
        numberobj_45_value_setter(numberobj_45_value);
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_43_currentFormat = 6;
        numberobj_43_lastValue = 0;
        param_11_lastValue = 0;
        numberobj_44_currentFormat = 6;
        numberobj_44_lastValue = 0;
        numberobj_45_currentFormat = 6;
        numberobj_45_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number numberobj_43_value;
        list message_67_set;
        number select_06_test1;
        number select_06_test2;
        number select_06_test3;
        number select_06_test4;
        number expr_22_in1;
        number expr_22_in2;
        number expr_22_out1;
        number expr_23_in1;
        number expr_23_out1;
        number translate_02_value;
        number param_11_value;
        list message_68_set;
        list message_69_set;
        number numberobj_44_value;
        list message_70_set;
        number expr_24_in1;
        number expr_24_out1;
        number expr_25_in1;
        number expr_25_in2;
        number expr_25_out1;
        number numberobj_45_value;
        list message_71_set;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_43_currentFormat;
        number numberobj_43_lastValue;
        number param_11_lastValue;
        Int numberobj_44_currentFormat;
        number numberobj_44_lastValue;
        Int numberobj_45_currentFormat;
        number numberobj_45_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
    
};

class RNBOSubpatcher_178 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_166 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_178;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_157 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_166;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_157()
                        {
                        }
                        
                        ~RNBOSubpatcher_157()
                        {
                        }
                        
                        virtual RNBOSubpatcher_166* getPatcher() const {
                            return static_cast<RNBOSubpatcher_166 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                            getEngine()->flushClockEvents(this, -871642103, false);
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return globalrandom() * range + low;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                            RNBO_UNUSED(value);
                            RNBO_UNUSED(hasValue);
                            this->updateTime(time);
                        
                            switch (index) {
                            case -871642103:
                                {
                                this->loadbang_06_startupbang_bang();
                                break;
                                }
                            }
                        }
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-14") == objectId)
                                    this->numberobj_46_valin_set(payload);
                        
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-6") == objectId)
                                    this->numberobj_47_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-14") == objectId)
                                    this->numberobj_46_format_set(payload);
                        
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-6") == objectId)
                                    this->numberobj_47_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_72_listin_number_set(payload);
                        
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_73_listin_number_set(payload);
                        
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_74_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_72_listin_list_set(payload);
                        
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_73_listin_list_set(payload);
                        
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_74_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/button_obj-16") == objectId)
                                    this->button_14_bangin_bang();
                        
                                break;
                                }
                            case TAG("startupbang"):
                                {
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/loadbang_obj-197") == objectId)
                                    this->loadbang_06_startupbang_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_72_listin_bang_bang();
                        
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_73_listin_bang_bang();
                        
                                if (TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_74_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/MelodiesColl/I_chordVariants/button_obj-16"):
                                {
                                return "Melodies/MelodiesColl/I_chordVariants/button_obj-16";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-14"):
                                {
                                return "Melodies/MelodiesColl/I_chordVariants/number_obj-14";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-43"):
                                {
                                return "Melodies/MelodiesColl/I_chordVariants/message_obj-43";
                                }
                            case TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-3"):
                                {
                                return "Melodies/MelodiesColl/I_chordVariants/message_obj-3";
                                }
                            case TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-8"):
                                {
                                return "Melodies/MelodiesColl/I_chordVariants/message_obj-8";
                                }
                            case TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-6"):
                                {
                                return "Melodies/MelodiesColl/I_chordVariants/number_obj-6";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("startupbang"):
                                {
                                return "startupbang";
                                }
                            case TAG("Melodies/MelodiesColl/I_chordVariants/loadbang_obj-197"):
                                {
                                return "Melodies/MelodiesColl/I_chordVariants/loadbang_obj-197";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->liststore_07_storage_storageobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 1;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->liststore_07_storage_storage = new Float64Buffer(this->liststore_07_storage_storageobj);
                            }
                        }
                        
                        void initialize() {
                            this->liststore_07_storage_storageobj = initDataRef("liststore_07_storage_storageobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->liststore_07_storage_storageobj->setIndex(6);
                            this->liststore_07_storage_storage = new Float64Buffer(this->liststore_07_storage_storageobj);
                        }
                        
                        protected:
                        
                        void button_14_bangin_bang() {
                            this->button_14_bangval_bang();
                        }
                        
                        void numberobj_46_valin_set(number v) {
                            this->numberobj_46_value_set(v);
                        }
                        
                        void numberobj_46_format_set(number v) {
                            this->numberobj_46_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_20_out1_bang_bang() {
                            this->trigger_07_input_bang_bang();
                        }
                        
                        void eventinlet_20_out1_number_set(number v) {
                            this->trigger_07_input_number_set(v);
                        }
                        
                        void eventinlet_20_out1_list_set(const list& v) {
                            this->trigger_07_input_list_set(v);
                        }
                        
                        void loadbang_06_startupbang_bang() {
                            this->loadbang_06_output_bang();
                        }
                        
                        void message_72_listin_list_set(const list& v) {
                            this->message_72_set_set(v);
                        }
                        
                        void message_72_listin_number_set(number v) {
                            this->message_72_set_set(v);
                        }
                        
                        void message_72_listin_bang_bang() {
                            this->message_72_trigger_bang();
                        }
                        
                        void message_73_listin_list_set(const list& v) {
                            this->message_73_set_set(v);
                        }
                        
                        void message_73_listin_number_set(number v) {
                            this->message_73_set_set(v);
                        }
                        
                        void message_73_listin_bang_bang() {
                            this->message_73_trigger_bang();
                        }
                        
                        void message_74_listin_list_set(const list& v) {
                            this->message_74_set_set(v);
                        }
                        
                        void message_74_listin_number_set(number v) {
                            this->message_74_set_set(v);
                        }
                        
                        void message_74_listin_bang_bang() {
                            this->message_74_trigger_bang();
                        }
                        
                        void numberobj_47_valin_set(number v) {
                            this->numberobj_47_value_set(v);
                        }
                        
                        void numberobj_47_format_set(number v) {
                            this->numberobj_47_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->numberobj_46_init();
                            this->random_03_nz_init();
                            this->liststore_07_storage_init();
                            this->message_72_init();
                            this->message_73_init();
                            this->message_74_init();
                            this->numberobj_47_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
                        }
                        
                        void allocateDataRefs() {
                            this->liststore_07_storage_storage = this->liststore_07_storage_storage->allocateIfNeeded();
                        
                            if (this->liststore_07_storage_storageobj->hasRequestedSize()) {
                                if (this->liststore_07_storage_storageobj->wantsFill())
                                    this->zeroDataRef(this->liststore_07_storage_storageobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        }
                        
                        void liststore_07_out3_set(number ) {}
                        
                        void message_74_set_set(const list& v) {
                            this->message_74_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-8"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventoutlet_15_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_17_out1_list_set((list)v);
                        }
                        
                        void liststore_07_out1_set(const list& v) {
                            this->message_74_set_set(v);
                            this->eventoutlet_15_in1_list_set(v);
                        }
                        
                        void liststore_07_out2_bang() {}
                        
                        void liststore_07_lookupidx_set(number v) {
                            this->liststore_07_lookupidx = v;
                            list val = this->liststore_07_storage_lookup(v);
                            this->liststore_07_out3_set(v);
                        
                            if ((bool)(val->length)) {
                                this->liststore_07_out1_set(this->liststore_07_storage_lookup(v));
                            } else {
                                this->liststore_07_out2_bang();
                            }
                        }
                        
                        void numberobj_46_output_set(number v) {
                            this->liststore_07_lookupidx_set(v);
                        }
                        
                        void numberobj_46_value_set(number v) {
                            this->numberobj_46_value_setter(v);
                            v = this->numberobj_46_value;
                            number localvalue = v;
                        
                            if (this->numberobj_46_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-14"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_46_output_set(localvalue);
                        }
                        
                        void random_03_result_set(number v) {
                            this->numberobj_46_value_set(v);
                        }
                        
                        void random_03_trigger_bang() {
                            this->random_03_result_set(rnbo_abs(this->random_03_nz_next()) * this->random_03_limit);
                        }
                        
                        void button_14_output_bang() {
                            this->random_03_trigger_bang();
                        }
                        
                        void button_14_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/MelodiesColl/I_chordVariants/button_obj-16"),
                                this->_currentTime
                            );;
                        
                            this->button_14_output_bang();
                        }
                        
                        void liststore_07_storeidx_set(number v) {
                            this->liststore_07_storeidx = v;
                        }
                        
                        void numberobj_47_output_set(number v) {
                            this->liststore_07_storeidx_set(v);
                        }
                        
                        void numberobj_47_value_set(number v) {
                            this->numberobj_47_value_setter(v);
                            v = this->numberobj_47_value;
                            number localvalue = v;
                        
                            if (this->numberobj_47_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-6"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_47_output_set(localvalue);
                        }
                        
                        void liststore_07_storelist_set(const list& v) {
                            this->liststore_07_storelist = jsCreateListCopy(v);
                            this->liststore_07_storage_store(this->liststore_07_storeidx, v);
                        }
                        
                        void message_72_out_set(const list& v) {
                            this->liststore_07_storelist_set(v);
                        }
                        
                        void message_72_trigger_bang() {
                            this->message_72_out_set(this->message_72_set);
                        }
                        
                        void select_07_match1_bang() {
                            this->message_72_trigger_bang();
                        }
                        
                        void message_73_out_set(const list& v) {
                            this->liststore_07_storelist_set(v);
                        }
                        
                        void message_73_trigger_bang() {
                            this->message_73_out_set(this->message_73_set);
                        }
                        
                        void select_07_match2_bang() {
                            this->message_73_trigger_bang();
                        }
                        
                        void select_07_nomatch_number_set(number ) {}
                        
                        void select_07_input_number_set(number v) {
                            if (v == this->select_07_test1)
                                this->select_07_match1_bang();
                            else if (v == this->select_07_test2)
                                this->select_07_match2_bang();
                            else
                                this->select_07_nomatch_number_set(v);
                        }
                        
                        void uzi_05_index_set(number v) {
                            this->numberobj_47_value_set(v);
                            this->select_07_input_number_set(v);
                        }
                        
                        void uzi_05_out_bang() {}
                        
                        void uzi_05_carry_bang() {}
                        
                        void uzi_05_start_bang_bang() {
                            this->uzi_05_gobang(0);
                        }
                        
                        void loadbang_06_output_bang() {
                            this->uzi_05_start_bang_bang();
                        }
                        
                        void loadbang_06_input_bang() {
                            this->loadbang_06_output_bang();
                        }
                        
                        void trigger_07_out2_bang() {
                            this->loadbang_06_input_bang();
                        }
                        
                        void trigger_07_out1_bang() {
                            this->button_14_bangval_bang();
                        }
                        
                        void trigger_07_input_bang_bang() {
                            this->trigger_07_out2_bang();
                            this->trigger_07_out1_bang();
                        }
                        
                        void trigger_07_input_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->trigger_07_out2_bang();
                            this->trigger_07_out1_bang();
                        }
                        
                        void trigger_07_input_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->trigger_07_out2_bang();
                            this->trigger_07_out1_bang();
                        }
                        
                        void message_72_set_set(const list& v) {
                            this->message_72_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-43"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_73_set_set(const list& v) {
                            this->message_73_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/MelodiesColl/I_chordVariants/message_obj-3"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_74_out_set(const list& ) {}
                        
                        void message_74_trigger_bang() {
                            this->message_74_out_set(this->message_74_set);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_46_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_46_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_46_value = localvalue;
                        }
                        
                        void random_03_limit_setter(number v) {
                            if (v >= 0)
                                this->random_03_limit = v;
                        }
                        
                        void numberobj_47_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_47_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_47_value = localvalue;
                        }
                        
                        void numberobj_46_init() {
                            this->numberobj_46_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-14"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_46_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_46_value;
                        }
                        
                        void numberobj_46_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_46_value_set(preset["value"]);
                        }
                        
                        void random_03_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_03_nz_state
                            );
                        }
                        
                        void random_03_nz_init() {
                            this->random_03_nz_reset();
                        }
                        
                        void random_03_nz_seed(number v) {
                            xoshiro_reset(v, this->random_03_nz_state);
                        }
                        
                        number random_03_nz_next() {
                            return xoshiro_next(this->random_03_nz_state);
                        }
                        
                        list liststore_07_storage_next(number index) {
                            return this->liststore_07_storage_lookup(index);
                        }
                        
                        list liststore_07_storage_lookup(number index) {
                            list tmp1 = {};
                            int64_t idx = (int64_t)(index);
                        
                            if (index >= 0 && index < this->liststore_07_storage__slotcount) {
                                number entrylength = this->liststore_07_storage_storage[(Index)(idx * this->liststore_07_storage__entrysize)];
                        
                                if (entrylength > 0) {
                                    for (number i = 0; i < entrylength; i++) {
                                        tmp1->push(
                                            this->liststore_07_storage_storage[(Index)(idx * this->liststore_07_storage__entrysize + i + 1)]
                                        );
                                    }
                                }
                            }
                        
                            return tmp1;
                        }
                        
                        void liststore_07_storage_store(number index, list value) {
                            int64_t idx = (int64_t)(index);
                        
                            if (index >= 0 && index < this->liststore_07_storage__slotcount) {
                                number entrylength = value->length;
                                this->liststore_07_storage_storage[(Index)(idx * this->liststore_07_storage__entrysize)] = entrylength;
                        
                                if (entrylength > 0) {
                                    for (number i = 0; i < entrylength; i++) {
                                        this->liststore_07_storage_storage[(Index)(idx * this->liststore_07_storage__entrysize + i + 1)] = value[(Index)i];
                                    }
                                }
                            }
                        }
                        
                        void liststore_07_storage_init() {
                            this->liststore_07_storage__entrysize = 4 + 1;
                            this->liststore_07_storage__slotcount = 2;
                            int64_t storagesize = (int64_t)(2 * this->liststore_07_storage__entrysize);
                            this->liststore_07_storage_storage->requestSize((Index)(storagesize), 1);
                        }
                        
                        void liststore_07_storage_clear() {
                            this->liststore_07_storage_storage->setZero();
                        }
                        
                        void liststore_07_storage_reset() {
                            this->liststore_07_storage_init();
                            this->liststore_07_storage_clear();
                        }
                        
                        void uzi_05_gobang(number start) {
                            this->uzi_05_doPause = 0;
                            this->uzi_05_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_05_count; i++) {
                                if ((bool)(this->uzi_05_doPause)) {
                                    this->uzi_05_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_05_index_set(i + this->uzi_05_base);
                                    this->uzi_05_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_05_carry_bang();
                        }
                        
                        void message_72_init() {
                            this->message_72_set_set({48, 55, 64, 71});
                        }
                        
                        void message_73_init() {
                            this->message_73_set_set({48, 55, 64, 69});
                        }
                        
                        void message_74_init() {
                            this->message_74_set_set({48, 55, 64, 69});
                        }
                        
                        void numberobj_47_init() {
                            this->numberobj_47_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/MelodiesColl/I_chordVariants/number_obj-6"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_47_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_47_value;
                        }
                        
                        void numberobj_47_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_47_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            numberobj_46_value = 0;
                            numberobj_46_value_setter(numberobj_46_value);
                            random_03_limit = 2;
                            random_03_limit_setter(random_03_limit);
                            random_03_seed = 0;
                            liststore_07_lookupidx = 0;
                            liststore_07_storeidx = 0;
                            uzi_05_start_number = 0;
                            uzi_05_count = 2;
                            uzi_05_base = 0;
                            select_07_test1 = 0;
                            select_07_test2 = 1;
                            numberobj_47_value = 0;
                            numberobj_47_value_setter(numberobj_47_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_46_currentFormat = 6;
                            numberobj_46_lastValue = 0;
                            liststore_07_storage__slotcount = 1024;
                            liststore_07_storage__entrysize = 65;
                            uzi_05_doPause = 0;
                            uzi_05_pausecount = 0;
                            numberobj_47_currentFormat = 6;
                            numberobj_47_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number numberobj_46_value;
                            number random_03_limit;
                            number random_03_seed;
                            number liststore_07_lookupidx;
                            list liststore_07_storelist;
                            number liststore_07_storeidx;
                            number uzi_05_start_number;
                            number uzi_05_count;
                            number uzi_05_base;
                            number select_07_test1;
                            number select_07_test2;
                            list message_72_set;
                            list message_73_set;
                            list message_74_set;
                            number numberobj_47_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_46_currentFormat;
                            number numberobj_46_lastValue;
                            UInt random_03_nz_state[4] = { };
                            Float64BufferRef liststore_07_storage_storage;
                            number liststore_07_storage__slotcount;
                            number liststore_07_storage__entrysize;
                            number uzi_05_doPause;
                            long uzi_05_pausecount;
                            Int numberobj_47_currentFormat;
                            number numberobj_47_lastValue;
                            number stackprotect_count;
                            DataRef liststore_07_storage_storageobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_166()
            {
            }
            
            ~RNBOSubpatcher_166()
            {
                delete this->p_17;
            }
            
            virtual RNBOSubpatcher_178* getPatcher() const {
                return static_cast<RNBOSubpatcher_178 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -871642103, false);
                getEngine()->flushClockEvents(this, -1735137014, false);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_17_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_17->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_17 = new RNBOSubpatcher_157();
                this->p_17->setEngineAndPatcher(this->getEngine(), this);
                this->p_17->initialize();
                this->p_17->setParameterOffset(this->getParameterOffset(this->p_17));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_17->getPreset(getSubState(getSubState(preset, "__sps"), "I_chordVariants"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_17->getNumParameters())
                        this->p_17->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_17->getNumParameters())
                        return this->p_17->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_17->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_17->getNumParameters())
                        return this->p_17->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_17->getNumParameters())
                        return this->p_17->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_17->getNumParameters())
                            this->p_17->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_17)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_17->getNumParameters())
                        return this->p_17->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_17->getNumParameters())
                        return this->p_17->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_17->getNumParameters())
                        return this->p_17->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -871642103:
                    {
                    this->loadbang_07_startupbang_bang();
                    break;
                    }
                case -1735137014:
                    {
                    this->loadbang_08_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Melodies/MelodiesColl/number_obj-61") == objectId)
                        this->numberobj_48_valin_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/number_obj-55") == objectId)
                        this->numberobj_49_valin_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/number_obj-32") == objectId)
                        this->numberobj_50_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Melodies/MelodiesColl/number_obj-61") == objectId)
                        this->numberobj_48_format_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/number_obj-55") == objectId)
                        this->numberobj_49_format_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/number_obj-32") == objectId)
                        this->numberobj_50_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Melodies/MelodiesColl/message_obj-203") == objectId)
                        this->message_75_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-43") == objectId)
                        this->message_76_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-42") == objectId)
                        this->message_77_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-41") == objectId)
                        this->message_78_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-36") == objectId)
                        this->message_79_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-201") == objectId)
                        this->message_80_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-34") == objectId)
                        this->message_81_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-33") == objectId)
                        this->message_82_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-30") == objectId)
                        this->message_83_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-49") == objectId)
                        this->message_84_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-48") == objectId)
                        this->message_85_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-47") == objectId)
                        this->message_86_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-46") == objectId)
                        this->message_87_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-83") == objectId)
                        this->message_88_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-45") == objectId)
                        this->message_89_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-80") == objectId)
                        this->message_90_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-44") == objectId)
                        this->message_91_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-71") == objectId)
                        this->message_92_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-28") == objectId)
                        this->message_93_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-77") == objectId)
                        this->message_94_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-51") == objectId)
                        this->message_95_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-75") == objectId)
                        this->message_96_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-65") == objectId)
                        this->message_97_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-67") == objectId)
                        this->message_98_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-66") == objectId)
                        this->message_99_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-81") == objectId)
                        this->message_100_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-79") == objectId)
                        this->message_101_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-78") == objectId)
                        this->message_102_listin_number_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-119") == objectId)
                        this->message_103_listin_number_set(payload);
            
                    break;
                    }
                }
            
                this->p_17->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Melodies/MelodiesColl/message_obj-203") == objectId)
                        this->message_75_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-43") == objectId)
                        this->message_76_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-42") == objectId)
                        this->message_77_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-41") == objectId)
                        this->message_78_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-36") == objectId)
                        this->message_79_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-201") == objectId)
                        this->message_80_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-34") == objectId)
                        this->message_81_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-33") == objectId)
                        this->message_82_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-30") == objectId)
                        this->message_83_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-49") == objectId)
                        this->message_84_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-48") == objectId)
                        this->message_85_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-47") == objectId)
                        this->message_86_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-46") == objectId)
                        this->message_87_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-83") == objectId)
                        this->message_88_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-45") == objectId)
                        this->message_89_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-80") == objectId)
                        this->message_90_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-44") == objectId)
                        this->message_91_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-71") == objectId)
                        this->message_92_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-28") == objectId)
                        this->message_93_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-77") == objectId)
                        this->message_94_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-51") == objectId)
                        this->message_95_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-75") == objectId)
                        this->message_96_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-65") == objectId)
                        this->message_97_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-67") == objectId)
                        this->message_98_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-66") == objectId)
                        this->message_99_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-81") == objectId)
                        this->message_100_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-79") == objectId)
                        this->message_101_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-78") == objectId)
                        this->message_102_listin_list_set(payload);
            
                    if (TAG("Melodies/MelodiesColl/message_obj-119") == objectId)
                        this->message_103_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_17->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("Melodies/MelodiesColl/button_obj-35") == objectId)
                        this->button_15_bangin_bang();
            
                    if (TAG("Melodies/MelodiesColl/button_obj-27") == objectId)
                        this->button_16_bangin_bang();
            
                    if (TAG("Melodies/MelodiesColl/button_obj-29") == objectId)
                        this->button_17_bangin_bang();
            
                    if (TAG("Melodies/MelodiesColl/button_obj-8") == objectId)
                        this->button_18_bangin_bang();
            
                    if (TAG("Melodies/MelodiesColl/button_obj-186") == objectId)
                        this->button_19_bangin_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("Melodies/MelodiesColl/loadbang_obj-6") == objectId)
                        this->loadbang_07_startupbang_bang();
            
                    if (TAG("Melodies/MelodiesColl/loadbang_obj-197") == objectId)
                        this->loadbang_08_startupbang_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Melodies/MelodiesColl/message_obj-203") == objectId)
                        this->message_75_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-43") == objectId)
                        this->message_76_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-42") == objectId)
                        this->message_77_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-41") == objectId)
                        this->message_78_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-36") == objectId)
                        this->message_79_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-201") == objectId)
                        this->message_80_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-34") == objectId)
                        this->message_81_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-33") == objectId)
                        this->message_82_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-30") == objectId)
                        this->message_83_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-49") == objectId)
                        this->message_84_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-48") == objectId)
                        this->message_85_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-47") == objectId)
                        this->message_86_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-46") == objectId)
                        this->message_87_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-83") == objectId)
                        this->message_88_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-45") == objectId)
                        this->message_89_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-80") == objectId)
                        this->message_90_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-44") == objectId)
                        this->message_91_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-71") == objectId)
                        this->message_92_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-28") == objectId)
                        this->message_93_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-77") == objectId)
                        this->message_94_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-51") == objectId)
                        this->message_95_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-75") == objectId)
                        this->message_96_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-65") == objectId)
                        this->message_97_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-67") == objectId)
                        this->message_98_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-66") == objectId)
                        this->message_99_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-81") == objectId)
                        this->message_100_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-79") == objectId)
                        this->message_101_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-78") == objectId)
                        this->message_102_listin_bang_bang();
            
                    if (TAG("Melodies/MelodiesColl/message_obj-119") == objectId)
                        this->message_103_listin_bang_bang();
            
                    break;
                    }
                }
            
                this->p_17->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Melodies/MelodiesColl/number_obj-61"):
                    {
                    return "Melodies/MelodiesColl/number_obj-61";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Melodies/MelodiesColl/button_obj-35"):
                    {
                    return "Melodies/MelodiesColl/button_obj-35";
                    }
                case TAG("Melodies/MelodiesColl/button_obj-27"):
                    {
                    return "Melodies/MelodiesColl/button_obj-27";
                    }
                case TAG("Melodies/MelodiesColl/button_obj-29"):
                    {
                    return "Melodies/MelodiesColl/button_obj-29";
                    }
                case TAG("Melodies/MelodiesColl/number_obj-55"):
                    {
                    return "Melodies/MelodiesColl/number_obj-55";
                    }
                case TAG("Melodies/MelodiesColl/button_obj-8"):
                    {
                    return "Melodies/MelodiesColl/button_obj-8";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-203"):
                    {
                    return "Melodies/MelodiesColl/message_obj-203";
                    }
                case TAG("Melodies/MelodiesColl/button_obj-186"):
                    {
                    return "Melodies/MelodiesColl/button_obj-186";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-43"):
                    {
                    return "Melodies/MelodiesColl/message_obj-43";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-42"):
                    {
                    return "Melodies/MelodiesColl/message_obj-42";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-41"):
                    {
                    return "Melodies/MelodiesColl/message_obj-41";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-36"):
                    {
                    return "Melodies/MelodiesColl/message_obj-36";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-201"):
                    {
                    return "Melodies/MelodiesColl/message_obj-201";
                    }
                case TAG("Melodies/MelodiesColl/number_obj-32"):
                    {
                    return "Melodies/MelodiesColl/number_obj-32";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-34"):
                    {
                    return "Melodies/MelodiesColl/message_obj-34";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-33"):
                    {
                    return "Melodies/MelodiesColl/message_obj-33";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-30"):
                    {
                    return "Melodies/MelodiesColl/message_obj-30";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-49"):
                    {
                    return "Melodies/MelodiesColl/message_obj-49";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-48"):
                    {
                    return "Melodies/MelodiesColl/message_obj-48";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-47"):
                    {
                    return "Melodies/MelodiesColl/message_obj-47";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-46"):
                    {
                    return "Melodies/MelodiesColl/message_obj-46";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-83"):
                    {
                    return "Melodies/MelodiesColl/message_obj-83";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-45"):
                    {
                    return "Melodies/MelodiesColl/message_obj-45";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-80"):
                    {
                    return "Melodies/MelodiesColl/message_obj-80";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-44"):
                    {
                    return "Melodies/MelodiesColl/message_obj-44";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-71"):
                    {
                    return "Melodies/MelodiesColl/message_obj-71";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-28"):
                    {
                    return "Melodies/MelodiesColl/message_obj-28";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-77"):
                    {
                    return "Melodies/MelodiesColl/message_obj-77";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-51"):
                    {
                    return "Melodies/MelodiesColl/message_obj-51";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-75"):
                    {
                    return "Melodies/MelodiesColl/message_obj-75";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-65"):
                    {
                    return "Melodies/MelodiesColl/message_obj-65";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-67"):
                    {
                    return "Melodies/MelodiesColl/message_obj-67";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-66"):
                    {
                    return "Melodies/MelodiesColl/message_obj-66";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-81"):
                    {
                    return "Melodies/MelodiesColl/message_obj-81";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-79"):
                    {
                    return "Melodies/MelodiesColl/message_obj-79";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-78"):
                    {
                    return "Melodies/MelodiesColl/message_obj-78";
                    }
                case TAG("Melodies/MelodiesColl/message_obj-119"):
                    {
                    return "Melodies/MelodiesColl/message_obj-119";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("Melodies/MelodiesColl/loadbang_obj-6"):
                    {
                    return "Melodies/MelodiesColl/loadbang_obj-6";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("Melodies/MelodiesColl/loadbang_obj-197"):
                    {
                    return "Melodies/MelodiesColl/loadbang_obj-197";
                    }
                }
            
                auto subpatchResult_0 = this->p_17->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->liststore_08_storage_storageobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->liststore_09_storage_storageobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 2;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->liststore_08_storage_storage = new Float64Buffer(this->liststore_08_storage_storageobj);
                }
            
                if (index == 5) {
                    this->liststore_09_storage_storage = new Float64Buffer(this->liststore_09_storage_storageobj);
                }
            
                this->p_17->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->liststore_08_storage_storageobj = initDataRef("liststore_08_storage_storageobj", true, nullptr, "buffer~");
                this->liststore_09_storage_storageobj = initDataRef("liststore_09_storage_storageobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->liststore_08_storage_storageobj->setIndex(4);
                this->liststore_08_storage_storage = new Float64Buffer(this->liststore_08_storage_storageobj);
                this->liststore_09_storage_storageobj->setIndex(5);
                this->liststore_09_storage_storage = new Float64Buffer(this->liststore_09_storage_storageobj);
            }
            
            protected:
            
            void eventinlet_21_out1_bang_bang() {
                this->numberobj_48_value_bang();
            }
            
            void eventinlet_21_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_48_value_set(converted);
                }
            }
            
            void numberobj_48_valin_set(number v) {
                this->numberobj_48_value_set(v);
            }
            
            void numberobj_48_format_set(number v) {
                this->numberobj_48_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void button_15_bangin_bang() {
                this->button_15_bangval_bang();
            }
            
            void button_16_bangin_bang() {
                this->button_16_bangval_bang();
            }
            
            void button_17_bangin_bang() {
                this->button_17_bangval_bang();
            }
            
            void numberobj_49_valin_set(number v) {
                this->numberobj_49_value_set(v);
            }
            
            void numberobj_49_format_set(number v) {
                this->numberobj_49_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void loadbang_07_startupbang_bang() {
                this->loadbang_07_output_bang();
            }
            
            void button_18_bangin_bang() {
                this->button_18_bangval_bang();
            }
            
            void message_75_listin_list_set(const list& v) {
                this->message_75_set_set(v);
            }
            
            void message_75_listin_number_set(number v) {
                this->message_75_set_set(v);
            }
            
            void message_75_listin_bang_bang() {
                this->message_75_trigger_bang();
            }
            
            void loadbang_08_startupbang_bang() {
                this->loadbang_08_output_bang();
            }
            
            void button_19_bangin_bang() {
                this->button_19_bangval_bang();
            }
            
            void message_76_listin_list_set(const list& v) {
                this->message_76_set_set(v);
            }
            
            void message_76_listin_number_set(number v) {
                this->message_76_set_set(v);
            }
            
            void message_76_listin_bang_bang() {
                this->message_76_trigger_bang();
            }
            
            void message_77_listin_list_set(const list& v) {
                this->message_77_set_set(v);
            }
            
            void message_77_listin_number_set(number v) {
                this->message_77_set_set(v);
            }
            
            void message_77_listin_bang_bang() {
                this->message_77_trigger_bang();
            }
            
            void message_78_listin_list_set(const list& v) {
                this->message_78_set_set(v);
            }
            
            void message_78_listin_number_set(number v) {
                this->message_78_set_set(v);
            }
            
            void message_78_listin_bang_bang() {
                this->message_78_trigger_bang();
            }
            
            void message_79_listin_list_set(const list& v) {
                this->message_79_set_set(v);
            }
            
            void message_79_listin_number_set(number v) {
                this->message_79_set_set(v);
            }
            
            void message_79_listin_bang_bang() {
                this->message_79_trigger_bang();
            }
            
            void message_80_listin_list_set(const list& v) {
                this->message_80_set_set(v);
            }
            
            void message_80_listin_number_set(number v) {
                this->message_80_set_set(v);
            }
            
            void message_80_listin_bang_bang() {
                this->message_80_trigger_bang();
            }
            
            void numberobj_50_valin_set(number v) {
                this->numberobj_50_value_set(v);
            }
            
            void numberobj_50_format_set(number v) {
                this->numberobj_50_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_81_listin_list_set(const list& v) {
                this->message_81_set_set(v);
            }
            
            void message_81_listin_number_set(number v) {
                this->message_81_set_set(v);
            }
            
            void message_81_listin_bang_bang() {
                this->message_81_trigger_bang();
            }
            
            void message_82_listin_list_set(const list& v) {
                this->message_82_set_set(v);
            }
            
            void message_82_listin_number_set(number v) {
                this->message_82_set_set(v);
            }
            
            void message_82_listin_bang_bang() {
                this->message_82_trigger_bang();
            }
            
            void message_83_listin_list_set(const list& v) {
                this->message_83_set_set(v);
            }
            
            void message_83_listin_number_set(number v) {
                this->message_83_set_set(v);
            }
            
            void message_83_listin_bang_bang() {
                this->message_83_trigger_bang();
            }
            
            void message_84_listin_list_set(const list& v) {
                this->message_84_set_set(v);
            }
            
            void message_84_listin_number_set(number v) {
                this->message_84_set_set(v);
            }
            
            void message_84_listin_bang_bang() {
                this->message_84_trigger_bang();
            }
            
            void message_85_listin_list_set(const list& v) {
                this->message_85_set_set(v);
            }
            
            void message_85_listin_number_set(number v) {
                this->message_85_set_set(v);
            }
            
            void message_85_listin_bang_bang() {
                this->message_85_trigger_bang();
            }
            
            void message_86_listin_list_set(const list& v) {
                this->message_86_set_set(v);
            }
            
            void message_86_listin_number_set(number v) {
                this->message_86_set_set(v);
            }
            
            void message_86_listin_bang_bang() {
                this->message_86_trigger_bang();
            }
            
            void message_87_listin_list_set(const list& v) {
                this->message_87_set_set(v);
            }
            
            void message_87_listin_number_set(number v) {
                this->message_87_set_set(v);
            }
            
            void message_87_listin_bang_bang() {
                this->message_87_trigger_bang();
            }
            
            void message_88_listin_list_set(const list& v) {
                this->message_88_set_set(v);
            }
            
            void message_88_listin_number_set(number v) {
                this->message_88_set_set(v);
            }
            
            void message_88_listin_bang_bang() {
                this->message_88_trigger_bang();
            }
            
            void message_89_listin_list_set(const list& v) {
                this->message_89_set_set(v);
            }
            
            void message_89_listin_number_set(number v) {
                this->message_89_set_set(v);
            }
            
            void message_89_listin_bang_bang() {
                this->message_89_trigger_bang();
            }
            
            void message_90_listin_list_set(const list& v) {
                this->message_90_set_set(v);
            }
            
            void message_90_listin_number_set(number v) {
                this->message_90_set_set(v);
            }
            
            void message_90_listin_bang_bang() {
                this->message_90_trigger_bang();
            }
            
            void message_91_listin_list_set(const list& v) {
                this->message_91_set_set(v);
            }
            
            void message_91_listin_number_set(number v) {
                this->message_91_set_set(v);
            }
            
            void message_91_listin_bang_bang() {
                this->message_91_trigger_bang();
            }
            
            void message_92_listin_list_set(const list& v) {
                this->message_92_set_set(v);
            }
            
            void message_92_listin_number_set(number v) {
                this->message_92_set_set(v);
            }
            
            void message_92_listin_bang_bang() {
                this->message_92_trigger_bang();
            }
            
            void message_93_listin_list_set(const list& v) {
                this->message_93_set_set(v);
            }
            
            void message_93_listin_number_set(number v) {
                this->message_93_set_set(v);
            }
            
            void message_93_listin_bang_bang() {
                this->message_93_trigger_bang();
            }
            
            void message_94_listin_list_set(const list& v) {
                this->message_94_set_set(v);
            }
            
            void message_94_listin_number_set(number v) {
                this->message_94_set_set(v);
            }
            
            void message_94_listin_bang_bang() {
                this->message_94_trigger_bang();
            }
            
            void message_95_listin_list_set(const list& v) {
                this->message_95_set_set(v);
            }
            
            void message_95_listin_number_set(number v) {
                this->message_95_set_set(v);
            }
            
            void message_95_listin_bang_bang() {
                this->message_95_trigger_bang();
            }
            
            void message_96_listin_list_set(const list& v) {
                this->message_96_set_set(v);
            }
            
            void message_96_listin_number_set(number v) {
                this->message_96_set_set(v);
            }
            
            void message_96_listin_bang_bang() {
                this->message_96_trigger_bang();
            }
            
            void message_97_listin_list_set(const list& v) {
                this->message_97_set_set(v);
            }
            
            void message_97_listin_number_set(number v) {
                this->message_97_set_set(v);
            }
            
            void message_97_listin_bang_bang() {
                this->message_97_trigger_bang();
            }
            
            void message_98_listin_list_set(const list& v) {
                this->message_98_set_set(v);
            }
            
            void message_98_listin_number_set(number v) {
                this->message_98_set_set(v);
            }
            
            void message_98_listin_bang_bang() {
                this->message_98_trigger_bang();
            }
            
            void message_99_listin_list_set(const list& v) {
                this->message_99_set_set(v);
            }
            
            void message_99_listin_number_set(number v) {
                this->message_99_set_set(v);
            }
            
            void message_99_listin_bang_bang() {
                this->message_99_trigger_bang();
            }
            
            void message_100_listin_list_set(const list& v) {
                this->message_100_set_set(v);
            }
            
            void message_100_listin_number_set(number v) {
                this->message_100_set_set(v);
            }
            
            void message_100_listin_bang_bang() {
                this->message_100_trigger_bang();
            }
            
            void message_101_listin_list_set(const list& v) {
                this->message_101_set_set(v);
            }
            
            void message_101_listin_number_set(number v) {
                this->message_101_set_set(v);
            }
            
            void message_101_listin_bang_bang() {
                this->message_101_trigger_bang();
            }
            
            void message_102_listin_list_set(const list& v) {
                this->message_102_set_set(v);
            }
            
            void message_102_listin_number_set(number v) {
                this->message_102_set_set(v);
            }
            
            void message_102_listin_bang_bang() {
                this->message_102_trigger_bang();
            }
            
            void message_103_listin_list_set(const list& v) {
                this->message_103_set_set(v);
            }
            
            void message_103_listin_number_set(number v) {
                this->message_103_set_set(v);
            }
            
            void message_103_listin_bang_bang() {
                this->message_103_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_48_init();
                this->liststore_08_storage_init();
                this->liststore_09_storage_init();
                this->numberobj_49_init();
                this->message_75_init();
                this->change_03_init();
                this->message_76_init();
                this->message_77_init();
                this->message_78_init();
                this->message_79_init();
                this->message_80_init();
                this->numberobj_50_init();
                this->message_81_init();
                this->message_82_init();
                this->message_83_init();
                this->message_84_init();
                this->message_85_init();
                this->message_86_init();
                this->message_87_init();
                this->message_88_init();
                this->message_89_init();
                this->message_90_init();
                this->message_91_init();
                this->message_92_init();
                this->message_93_init();
                this->message_94_init();
                this->message_95_init();
                this->message_96_init();
                this->message_97_init();
                this->message_98_init();
                this->message_99_init();
                this->message_100_init();
                this->message_101_init();
                this->message_102_init();
                this->message_103_init();
                this->p_17->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_17->startup();
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
                this->getEngine()->scheduleClockEvent(this, -1735137014, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->p_17->allocateDataRefs();
                this->liststore_08_storage_storage = this->liststore_08_storage_storage->allocateIfNeeded();
            
                if (this->liststore_08_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_08_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_08_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->liststore_09_storage_storage = this->liststore_09_storage_storage->allocateIfNeeded();
            
                if (this->liststore_09_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_09_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_09_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            }
            
            void message_75_set_set(const list& v) {
                this->message_75_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-203"),
                    v,
                    this->_currentTime
                );
            }
            
            void eventoutlet_17_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_26_out2_number_set(v);
            }
            
            void liststore_08_out3_set(number v) {
                {
                    list converted = {v};
                    this->message_75_set_set(converted);
                }
            
                this->eventoutlet_17_in1_number_set(v);
            }
            
            void eventoutlet_16_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_26_out1_number_set(v);
            }
            
            void expr_26_out1_set(number v) {
                this->expr_26_out1 = v;
                this->eventoutlet_16_in1_number_set(this->expr_26_out1);
            }
            
            void expr_26_in1_set(number in1) {
                this->expr_26_in1 = in1;
                this->expr_26_out1_set(this->expr_26_in1 + this->expr_26_in2);//#map:Melodies/MelodiesColl/+_obj-5:1
            }
            
            void expr_26_in2_set(number v) {
                this->expr_26_in2 = v;
            }
            
            void liststore_08_out1_set(const list& v) {
                {
                    if (v->length > 1)
                        this->expr_26_in2_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_26_in1_set(converted);
                }
            }
            
            void liststore_08_out2_bang() {}
            
            void liststore_08_lookupidx_set(number v) {
                this->liststore_08_lookupidx = v;
                list val = this->liststore_08_storage_lookup(v);
                this->liststore_08_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_08_out1_set(this->liststore_08_storage_lookup(v));
                } else {
                    this->liststore_08_out2_bang();
                }
            }
            
            void numberobj_48_output_set(number v) {
                this->liststore_08_lookupidx_set(v);
            }
            
            void numberobj_48_value_set(number v) {
                this->numberobj_48_value_setter(v);
                v = this->numberobj_48_value;
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 14) {
                    localvalue = 14;
                }
            
                if (this->numberobj_48_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/MelodiesColl/number_obj-61"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_48_output_set(localvalue);
            }
            
            void eventinlet_21_out1_number_set(number v) {
                this->numberobj_48_value_set(v);
            }
            
            void numberobj_48_value_bang() {
                number v = this->numberobj_48_value;
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 14) {
                    localvalue = 14;
                }
            
                if (this->numberobj_48_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/MelodiesColl/number_obj-61"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_48_output_set(localvalue);
            }
            
            void message_80_set_set(const list& v) {
                this->message_80_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-201"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_08_out4_set(number v) {
                {
                    list converted = {v};
                    this->message_80_set_set(converted);
                }
            }
            
            void liststore_08_count_bang() {
                number n = 0;
            
                for (number i = 0; i < 15; i++) {
                    if (this->liststore_08_storage_lookup(i)->length > 0)
                        n++;
                }
            
                this->liststore_08_out4_set(n);
            }
            
            void button_15_output_bang() {
                this->liststore_08_count_bang();
            }
            
            void button_15_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/MelodiesColl/button_obj-35"),
                    this->_currentTime
                );;
            
                this->button_15_output_bang();
            }
            
            void liststore_08_dump_bang() {
                for (number i = 0; i < 15; i++) {
                    list val = this->liststore_08_storage_lookup(i);
            
                    if (val->length > 0) {
                        this->liststore_08_out3_set(i);
                        this->liststore_08_out1_set(val);
                    }
                }
            }
            
            void button_16_output_bang() {
                this->liststore_08_dump_bang();
            }
            
            void button_16_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/MelodiesColl/button_obj-27"),
                    this->_currentTime
                );;
            
                this->button_16_output_bang();
            }
            
            void liststore_08_reset_bang() {
                this->liststore_08_storage_reset();
            }
            
            void button_17_output_bang() {
                this->liststore_08_reset_bang();
            }
            
            void button_17_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/MelodiesColl/button_obj-29"),
                    this->_currentTime
                );;
            
                this->button_17_output_bang();
            }
            
            void liststore_08_remove_set(number v) {
                this->liststore_08_storage_store(v, {});
            }
            
            void numberobj_49_output_set(number v) {
                this->liststore_08_remove_set(v);
            }
            
            void numberobj_49_value_set(number v) {
                this->numberobj_49_value_setter(v);
                v = this->numberobj_49_value;
                number localvalue = v;
            
                if (this->numberobj_49_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/MelodiesColl/number_obj-55"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_49_output_set(localvalue);
            }
            
            void select_08_match1_bang() {}
            
            void select_08_match2_bang() {}
            
            void select_08_match3_bang() {}
            
            void select_08_nomatch_number_set(number ) {}
            
            void select_08_input_number_set(number v) {
                if (v == this->select_08_test1)
                    this->select_08_match1_bang();
                else if (v == this->select_08_test2)
                    this->select_08_match2_bang();
                else if (v == this->select_08_test3)
                    this->select_08_match3_bang();
                else
                    this->select_08_nomatch_number_set(v);
            }
            
            void uzi_06_index_set(number v) {
                this->select_08_input_number_set(v);
            }
            
            void uzi_06_out_bang() {}
            
            void uzi_06_carry_bang() {}
            
            void uzi_06_start_bang_bang() {
                this->uzi_06_gobang(0);
            }
            
            void loadbang_07_output_bang() {
                this->uzi_06_start_bang_bang();
            }
            
            void loadbang_07_input_bang() {
                this->loadbang_07_output_bang();
            }
            
            void button_18_output_bang() {
                this->loadbang_07_input_bang();
            }
            
            void button_18_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/MelodiesColl/button_obj-8"),
                    this->_currentTime
                );;
            
                this->button_18_output_bang();
            }
            
            void message_75_out_set(const list& ) {}
            
            void message_75_trigger_bang() {
                this->message_75_out_set(this->message_75_set);
            }
            
            void liststore_08_storeidx_set(number v) {
                this->liststore_08_storeidx = v;
            }
            
            void numberobj_50_output_set(number v) {
                this->liststore_08_storeidx_set(v);
            }
            
            void numberobj_50_value_set(number v) {
                this->numberobj_50_value_setter(v);
                v = this->numberobj_50_value;
                number localvalue = v;
            
                if (this->numberobj_50_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/MelodiesColl/number_obj-32"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_50_output_set(localvalue);
            }
            
            void liststore_08_storelist_set(const list& v) {
                this->liststore_08_storelist = jsCreateListCopy(v);
                this->liststore_08_storage_store(this->liststore_08_storeidx, v);
            }
            
            void message_76_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_76_trigger_bang() {
                this->message_76_out_set(this->message_76_set);
            }
            
            void select_09_match1_bang() {
                this->message_76_trigger_bang();
            }
            
            void message_77_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_77_trigger_bang() {
                this->message_77_out_set(this->message_77_set);
            }
            
            void select_09_match2_bang() {
                this->message_77_trigger_bang();
            }
            
            void message_78_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_78_trigger_bang() {
                this->message_78_out_set(this->message_78_set);
            }
            
            void select_09_match3_bang() {
                this->message_78_trigger_bang();
            }
            
            void message_79_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_79_trigger_bang() {
                this->message_79_out_set(this->message_79_set);
            }
            
            void select_09_match4_bang() {
                this->message_79_trigger_bang();
            }
            
            void message_81_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_81_trigger_bang() {
                this->message_81_out_set(this->message_81_set);
            }
            
            void select_09_match5_bang() {
                this->message_81_trigger_bang();
            }
            
            void message_82_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_82_trigger_bang() {
                this->message_82_out_set(this->message_82_set);
            }
            
            void select_09_match6_bang() {
                this->message_82_trigger_bang();
            }
            
            void message_83_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_83_trigger_bang() {
                this->message_83_out_set(this->message_83_set);
            }
            
            void select_09_match7_bang() {
                this->message_83_trigger_bang();
            }
            
            void message_84_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_84_trigger_bang() {
                this->message_84_out_set(this->message_84_set);
            }
            
            void select_09_match8_bang() {
                this->message_84_trigger_bang();
            }
            
            void message_85_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_85_trigger_bang() {
                this->message_85_out_set(this->message_85_set);
            }
            
            void select_09_match9_bang() {
                this->message_85_trigger_bang();
            }
            
            void message_86_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_86_trigger_bang() {
                this->message_86_out_set(this->message_86_set);
            }
            
            void select_09_match10_bang() {
                this->message_86_trigger_bang();
            }
            
            void message_87_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_87_trigger_bang() {
                this->message_87_out_set(this->message_87_set);
            }
            
            void select_09_match11_bang() {
                this->message_87_trigger_bang();
            }
            
            void message_89_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_89_trigger_bang() {
                this->message_89_out_set(this->message_89_set);
            }
            
            void select_09_match12_bang() {
                this->message_89_trigger_bang();
            }
            
            void message_91_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_91_trigger_bang() {
                this->message_91_out_set(this->message_91_set);
            }
            
            void select_09_match13_bang() {
                this->message_91_trigger_bang();
            }
            
            void message_93_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_93_trigger_bang() {
                this->message_93_out_set(this->message_93_set);
            }
            
            void select_09_match14_bang() {
                this->message_93_trigger_bang();
            }
            
            void message_95_out_set(const list& v) {
                this->liststore_08_storelist_set(v);
            }
            
            void message_95_trigger_bang() {
                this->message_95_out_set(this->message_95_set);
            }
            
            void select_09_match15_bang() {
                this->message_95_trigger_bang();
            }
            
            void select_09_nomatch_number_set(number ) {}
            
            void select_09_input_number_set(number v) {
                if (v == this->select_09_test1)
                    this->select_09_match1_bang();
                else if (v == this->select_09_test2)
                    this->select_09_match2_bang();
                else if (v == this->select_09_test3)
                    this->select_09_match3_bang();
                else if (v == this->select_09_test4)
                    this->select_09_match4_bang();
                else if (v == this->select_09_test5)
                    this->select_09_match5_bang();
                else if (v == this->select_09_test6)
                    this->select_09_match6_bang();
                else if (v == this->select_09_test7)
                    this->select_09_match7_bang();
                else if (v == this->select_09_test8)
                    this->select_09_match8_bang();
                else if (v == this->select_09_test9)
                    this->select_09_match9_bang();
                else if (v == this->select_09_test10)
                    this->select_09_match10_bang();
                else if (v == this->select_09_test11)
                    this->select_09_match11_bang();
                else if (v == this->select_09_test12)
                    this->select_09_match12_bang();
                else if (v == this->select_09_test13)
                    this->select_09_match13_bang();
                else if (v == this->select_09_test14)
                    this->select_09_match14_bang();
                else if (v == this->select_09_test15)
                    this->select_09_match15_bang();
                else
                    this->select_09_nomatch_number_set(v);
            }
            
            void uzi_07_index_set(number v) {
                this->numberobj_50_value_set(v);
                this->select_09_input_number_set(v);
            }
            
            void uzi_07_out_bang() {}
            
            void uzi_07_carry_bang() {}
            
            void uzi_07_start_bang_bang() {
                this->uzi_07_gobang(0);
            }
            
            void loadbang_08_output_bang() {
                this->uzi_07_start_bang_bang();
            }
            
            void loadbang_08_input_bang() {
                this->loadbang_08_output_bang();
            }
            
            void button_19_output_bang() {
                this->loadbang_08_input_bang();
            }
            
            void button_19_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/MelodiesColl/button_obj-186"),
                    this->_currentTime
                );;
            
                this->button_19_output_bang();
            }
            
            void message_76_set_set(const list& v) {
                this->message_76_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-43"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_77_set_set(const list& v) {
                this->message_77_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-42"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_78_set_set(const list& v) {
                this->message_78_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-41"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_79_set_set(const list& v) {
                this->message_79_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-36"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_80_out_set(const list& ) {}
            
            void message_80_trigger_bang() {
                this->message_80_out_set(this->message_80_set);
            }
            
            void message_81_set_set(const list& v) {
                this->message_81_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-34"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_82_set_set(const list& v) {
                this->message_82_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-33"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_83_set_set(const list& v) {
                this->message_83_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-30"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_84_set_set(const list& v) {
                this->message_84_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-49"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_85_set_set(const list& v) {
                this->message_85_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-48"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_86_set_set(const list& v) {
                this->message_86_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-47"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_87_set_set(const list& v) {
                this->message_87_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-46"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_88_set_set(const list& v) {
                this->message_88_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-83"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_88_out_set(const list& ) {}
            
            void message_88_trigger_bang() {
                this->message_88_out_set(this->message_88_set);
            }
            
            void message_89_set_set(const list& v) {
                this->message_89_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-45"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_90_set_set(const list& v) {
                this->message_90_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-80"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_90_out_set(const list& ) {}
            
            void message_90_trigger_bang() {
                this->message_90_out_set(this->message_90_set);
            }
            
            void message_91_set_set(const list& v) {
                this->message_91_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-44"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_92_set_set(const list& v) {
                this->message_92_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-71"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_92_out_set(const list& ) {}
            
            void message_92_trigger_bang() {
                this->message_92_out_set(this->message_92_set);
            }
            
            void message_93_set_set(const list& v) {
                this->message_93_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-28"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_94_set_set(const list& v) {
                this->message_94_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-77"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_94_out_set(const list& ) {}
            
            void message_94_trigger_bang() {
                this->message_94_out_set(this->message_94_set);
            }
            
            void message_95_set_set(const list& v) {
                this->message_95_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-51"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_96_set_set(const list& v) {
                this->message_96_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-75"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_96_out_set(const list& ) {}
            
            void message_96_trigger_bang() {
                this->message_96_out_set(this->message_96_set);
            }
            
            void message_97_set_set(const list& v) {
                this->message_97_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-65"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_97_out_set(const list& ) {}
            
            void message_97_trigger_bang() {
                this->message_97_out_set(this->message_97_set);
            }
            
            void message_98_set_set(const list& v) {
                this->message_98_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-67"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_98_out_set(const list& ) {}
            
            void message_98_trigger_bang() {
                this->message_98_out_set(this->message_98_set);
            }
            
            void message_99_set_set(const list& v) {
                this->message_99_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_99_out_set(const list& ) {}
            
            void message_99_trigger_bang() {
                this->message_99_out_set(this->message_99_set);
            }
            
            void message_100_set_set(const list& v) {
                this->message_100_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-81"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_100_out_set(const list& ) {}
            
            void message_100_trigger_bang() {
                this->message_100_out_set(this->message_100_set);
            }
            
            void message_101_set_set(const list& v) {
                this->message_101_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-79"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_101_out_set(const list& ) {}
            
            void message_101_trigger_bang() {
                this->message_101_out_set(this->message_101_set);
            }
            
            void message_102_set_set(const list& v) {
                this->message_102_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-78"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_102_out_set(const list& ) {}
            
            void message_102_trigger_bang() {
                this->message_102_out_set(this->message_102_set);
            }
            
            void message_103_set_set(const list& v) {
                this->message_103_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelodiesColl/message_obj-119"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_103_out_set(const list& ) {}
            
            void message_103_trigger_bang() {
                this->message_103_out_set(this->message_103_set);
            }
            
            void p_17_out1_list_set(const list& ) {}
            
            void p_17_perform(Index n) {
                // subpatcher: I_chordVariants
                this->p_17->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_48_value_setter(number v) {
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 14) {
                    localvalue = 14;
                }
            
                if (this->numberobj_48_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_48_value = localvalue;
            }
            
            void numberobj_49_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_49_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_49_value = localvalue;
            }
            
            void numberobj_50_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_50_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_50_value = localvalue;
            }
            
            void numberobj_48_init() {
                this->numberobj_48_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/MelodiesColl/number_obj-61"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_48_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_48_value;
            }
            
            void numberobj_48_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_48_value_set(preset["value"]);
            }
            
            list liststore_08_storage_next(number index) {
                return this->liststore_08_storage_lookup(index);
            }
            
            list liststore_08_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_08_storage__slotcount) {
                    number entrylength = this->liststore_08_storage_storage[(Index)(idx * this->liststore_08_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_08_storage_storage[(Index)(idx * this->liststore_08_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_08_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_08_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_08_storage_storage[(Index)(idx * this->liststore_08_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_08_storage_storage[(Index)(idx * this->liststore_08_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_08_storage_init() {
                this->liststore_08_storage__entrysize = 1 + 1;
                this->liststore_08_storage__slotcount = 15;
                int64_t storagesize = (int64_t)(15 * this->liststore_08_storage__entrysize);
                this->liststore_08_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_08_storage_clear() {
                this->liststore_08_storage_storage->setZero();
            }
            
            void liststore_08_storage_reset() {
                this->liststore_08_storage_init();
                this->liststore_08_storage_clear();
            }
            
            list liststore_09_storage_next(number index) {
                return this->liststore_09_storage_lookup(index);
            }
            
            list liststore_09_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_09_storage__slotcount) {
                    number entrylength = this->liststore_09_storage_storage[(Index)(idx * this->liststore_09_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_09_storage_storage[(Index)(idx * this->liststore_09_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_09_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_09_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_09_storage_storage[(Index)(idx * this->liststore_09_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_09_storage_storage[(Index)(idx * this->liststore_09_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_09_storage_init() {
                this->liststore_09_storage__entrysize = 3 + 1;
                this->liststore_09_storage__slotcount = 5;
                int64_t storagesize = (int64_t)(5 * this->liststore_09_storage__entrysize);
                this->liststore_09_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_09_storage_clear() {
                this->liststore_09_storage_storage->setZero();
            }
            
            void liststore_09_storage_reset() {
                this->liststore_09_storage_init();
                this->liststore_09_storage_clear();
            }
            
            void numberobj_49_init() {
                this->numberobj_49_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/MelodiesColl/number_obj-55"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_49_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_49_value;
            }
            
            void numberobj_49_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_49_value_set(preset["value"]);
            }
            
            void uzi_06_gobang(number start) {
                this->uzi_06_doPause = 0;
                this->uzi_06_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_06_count; i++) {
                    if ((bool)(this->uzi_06_doPause)) {
                        this->uzi_06_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_06_index_set(i + this->uzi_06_base);
                        this->uzi_06_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_06_carry_bang();
            }
            
            void message_75_init() {
                this->message_75_set_set({5});
            }
            
            void uzi_07_gobang(number start) {
                this->uzi_07_doPause = 0;
                this->uzi_07_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_07_count; i++) {
                    if ((bool)(this->uzi_07_doPause)) {
                        this->uzi_07_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_07_index_set(i + this->uzi_07_base);
                        this->uzi_07_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_07_carry_bang();
            }
            
            void change_03_init() {
                this->change_03_prev = this->change_03_input;
            }
            
            void message_76_init() {
                this->message_76_set_set({48});
            }
            
            void message_77_init() {
                this->message_77_set_set({50});
            }
            
            void message_78_init() {
                this->message_78_set_set({52});
            }
            
            void message_79_init() {
                this->message_79_set_set({53});
            }
            
            void message_80_init() {
                this->message_80_set_set({7});
            }
            
            void numberobj_50_init() {
                this->numberobj_50_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/MelodiesColl/number_obj-32"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_50_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_50_value;
            }
            
            void numberobj_50_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_50_value_set(preset["value"]);
            }
            
            void message_81_init() {
                this->message_81_set_set({55});
            }
            
            void message_82_init() {
                this->message_82_set_set({57});
            }
            
            void message_83_init() {
                this->message_83_set_set({59});
            }
            
            void message_84_init() {
                this->message_84_set_set({60});
            }
            
            void message_85_init() {
                this->message_85_set_set({62});
            }
            
            void message_86_init() {
                this->message_86_set_set({64});
            }
            
            void message_87_init() {
                this->message_87_set_set({65});
            }
            
            void message_88_init() {
                this->message_88_set_set({52, 59, 67, 74});
            }
            
            void message_89_init() {
                this->message_89_set_set({67});
            }
            
            void message_90_init() {
                this->message_90_set_set({57, 64, 72, 79});
            }
            
            void message_91_init() {
                this->message_91_set_set({69});
            }
            
            void message_92_init() {
                this->message_92_set_set({50, 57, 65, 72});
            }
            
            void message_93_init() {
                this->message_93_set_set({71});
            }
            
            void message_94_init() {
                this->message_94_set_set({53, 60, 69, 76});
            }
            
            void message_95_init() {
                this->message_95_set_set({72});
            }
            
            void message_96_init() {
                this->message_96_set_set({59, 65, 74, 81});
            }
            
            void message_97_init() {
                this->message_97_set_set({55, 62, 71, 77});
            }
            
            void message_98_init() {
                this->message_98_set_set({57, 64, 73, 79});
            }
            
            void message_99_init() {
                this->message_99_set_set({59, 66, 75, 81});
            }
            
            void message_100_init() {
                this->message_100_set_set({60, 67, 76, 82});
            }
            
            void message_101_init() {
                this->message_101_set_set({62, 69, 78, 84});
            }
            
            void message_102_init() {
                this->message_102_set_set({64, 71, 80, 86});
            }
            
            void message_103_init() {
                this->message_103_set_set({53, 60, 69, 75});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                expr_26_in1 = 0;
                expr_26_in2 = 12;
                expr_26_out1 = 0;
                numberobj_48_value = 0;
                numberobj_48_value_setter(numberobj_48_value);
                liststore_08_lookupidx = 0;
                liststore_08_storeidx = 0;
                listchange_02_compare = { 0 };
                liststore_09_lookupidx = 0;
                liststore_09_storeidx = 0;
                numberobj_49_value = 0;
                numberobj_49_value_setter(numberobj_49_value);
                uzi_06_start_number = 0;
                uzi_06_count = 7;
                uzi_06_base = 0;
                select_08_test1 = 0;
                select_08_test2 = 1;
                select_08_test3 = 2;
                uzi_07_start_number = 0;
                uzi_07_count = 15;
                uzi_07_base = 0;
                change_03_input = 0;
                change_03_out = 0;
                select_09_test1 = 0;
                select_09_test2 = 1;
                select_09_test3 = 2;
                select_09_test4 = 3;
                select_09_test5 = 4;
                select_09_test6 = 5;
                select_09_test7 = 6;
                select_09_test8 = 7;
                select_09_test9 = 8;
                select_09_test10 = 9;
                select_09_test11 = 10;
                select_09_test12 = 11;
                select_09_test13 = 12;
                select_09_test14 = 13;
                select_09_test15 = 14;
                numberobj_50_value = 0;
                numberobj_50_value_setter(numberobj_50_value);
                p_17_target = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_48_currentFormat = 6;
                numberobj_48_lastValue = 0;
                liststore_08_storage__slotcount = 1024;
                liststore_08_storage__entrysize = 65;
                liststore_09_storage__slotcount = 1024;
                liststore_09_storage__entrysize = 65;
                numberobj_49_currentFormat = 6;
                numberobj_49_lastValue = 0;
                uzi_06_doPause = 0;
                uzi_06_pausecount = 0;
                uzi_07_doPause = 0;
                uzi_07_pausecount = 0;
                numberobj_50_currentFormat = 6;
                numberobj_50_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number expr_26_in1;
                number expr_26_in2;
                number expr_26_out1;
                number numberobj_48_value;
                number liststore_08_lookupidx;
                list liststore_08_storelist;
                number liststore_08_storeidx;
                list listchange_02_input;
                list listchange_02_compare;
                number liststore_09_lookupidx;
                list liststore_09_storelist;
                number liststore_09_storeidx;
                number numberobj_49_value;
                number uzi_06_start_number;
                number uzi_06_count;
                number uzi_06_base;
                number select_08_test1;
                number select_08_test2;
                number select_08_test3;
                list message_75_set;
                number uzi_07_start_number;
                number uzi_07_count;
                number uzi_07_base;
                number change_03_input;
                number change_03_out;
                list message_76_set;
                number select_09_test1;
                number select_09_test2;
                number select_09_test3;
                number select_09_test4;
                number select_09_test5;
                number select_09_test6;
                number select_09_test7;
                number select_09_test8;
                number select_09_test9;
                number select_09_test10;
                number select_09_test11;
                number select_09_test12;
                number select_09_test13;
                number select_09_test14;
                number select_09_test15;
                list message_77_set;
                list message_78_set;
                list message_79_set;
                list message_80_set;
                number numberobj_50_value;
                list message_81_set;
                list message_82_set;
                list message_83_set;
                list message_84_set;
                list message_85_set;
                list message_86_set;
                number p_17_target;
                list message_87_set;
                list message_88_set;
                list message_89_set;
                list message_90_set;
                list message_91_set;
                list message_92_set;
                list message_93_set;
                list message_94_set;
                list message_95_set;
                list message_96_set;
                list message_97_set;
                list message_98_set;
                list message_99_set;
                list message_100_set;
                list message_101_set;
                list message_102_set;
                list message_103_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_48_currentFormat;
                number numberobj_48_lastValue;
                Float64BufferRef liststore_08_storage_storage;
                number liststore_08_storage__slotcount;
                number liststore_08_storage__entrysize;
                Float64BufferRef liststore_09_storage_storage;
                number liststore_09_storage__slotcount;
                number liststore_09_storage__entrysize;
                Int numberobj_49_currentFormat;
                number numberobj_49_lastValue;
                number uzi_06_doPause;
                long uzi_06_pausecount;
                number uzi_07_doPause;
                long uzi_07_pausecount;
                number change_03_prev;
                Int numberobj_50_currentFormat;
                number numberobj_50_lastValue;
                number stackprotect_count;
                DataRef liststore_08_storage_storageobj;
                DataRef liststore_09_storage_storageobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_157* p_17;
            
    };
    
    class RNBOSubpatcher_167 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_178;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_158 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_167;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_158()
                        {
                        }
                        
                        ~RNBOSubpatcher_158()
                        {
                        }
                        
                        virtual RNBOSubpatcher_167* getPatcher() const {
                            return static_cast<RNBOSubpatcher_167 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-91") == objectId)
                                    this->message_104_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-75") == objectId)
                                    this->message_105_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-89") == objectId)
                                    this->message_106_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-67") == objectId)
                                    this->message_107_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-93") == objectId)
                                    this->message_108_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-64") == objectId)
                                    this->message_109_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-62") == objectId)
                                    this->message_110_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-60") == objectId)
                                    this->message_111_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-52") == objectId)
                                    this->message_112_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-51") == objectId)
                                    this->message_113_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-41") == objectId)
                                    this->message_114_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-97") == objectId)
                                    this->message_115_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-45") == objectId)
                                    this->message_116_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-36") == objectId)
                                    this->message_117_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-34") == objectId)
                                    this->message_118_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-33") == objectId)
                                    this->message_119_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/number_obj-2") == objectId)
                                    this->numberobj_51_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/number_obj-2") == objectId)
                                    this->numberobj_51_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-91") == objectId)
                                    this->message_104_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-75") == objectId)
                                    this->message_105_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-89") == objectId)
                                    this->message_106_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-67") == objectId)
                                    this->message_107_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-93") == objectId)
                                    this->message_108_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-64") == objectId)
                                    this->message_109_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-62") == objectId)
                                    this->message_110_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-60") == objectId)
                                    this->message_111_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-52") == objectId)
                                    this->message_112_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-51") == objectId)
                                    this->message_113_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-41") == objectId)
                                    this->message_114_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-97") == objectId)
                                    this->message_115_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-45") == objectId)
                                    this->message_116_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-36") == objectId)
                                    this->message_117_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-34") == objectId)
                                    this->message_118_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-33") == objectId)
                                    this->message_119_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/button_obj-54") == objectId)
                                    this->button_20_bangin_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-91") == objectId)
                                    this->message_104_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-75") == objectId)
                                    this->message_105_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-89") == objectId)
                                    this->message_106_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-67") == objectId)
                                    this->message_107_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-93") == objectId)
                                    this->message_108_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-64") == objectId)
                                    this->message_109_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-62") == objectId)
                                    this->message_110_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-60") == objectId)
                                    this->message_111_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-52") == objectId)
                                    this->message_112_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-51") == objectId)
                                    this->message_113_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-41") == objectId)
                                    this->message_114_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-97") == objectId)
                                    this->message_115_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-45") == objectId)
                                    this->message_116_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-36") == objectId)
                                    this->message_117_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-34") == objectId)
                                    this->message_118_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-33") == objectId)
                                    this->message_119_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/button_obj-54"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/button_obj-54";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-91"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-91";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/number_obj-2"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/number_obj-2";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-75"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-75";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-89"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-89";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-67"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-67";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-93"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-93";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-64"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-64";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-62"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-62";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-60"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-60";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-52"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-52";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-51"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-51";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-41"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-41";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-97"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-97";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-45"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-45";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-36"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-36";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-34"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-34";
                                }
                            case TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-33"):
                                {
                                return "Melodies/NextNote/Imaj7ChordScale/message_obj-33";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_22_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->button_20_bangval_bang();
                        }
                        
                        void eventinlet_22_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->button_20_bangval_bang();
                        }
                        
                        void button_20_bangin_bang() {
                            this->button_20_bangval_bang();
                        }
                        
                        void message_104_listin_list_set(const list& v) {
                            this->message_104_set_set(v);
                        }
                        
                        void message_104_listin_number_set(number v) {
                            this->message_104_set_set(v);
                        }
                        
                        void message_104_listin_bang_bang() {
                            this->message_104_trigger_bang();
                        }
                        
                        void numberobj_51_valin_set(number v) {
                            this->numberobj_51_value_set(v);
                        }
                        
                        void numberobj_51_format_set(number v) {
                            this->numberobj_51_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_105_listin_list_set(const list& v) {
                            this->message_105_set_set(v);
                        }
                        
                        void message_105_listin_number_set(number v) {
                            this->message_105_set_set(v);
                        }
                        
                        void message_105_listin_bang_bang() {
                            this->message_105_trigger_bang();
                        }
                        
                        void message_106_listin_list_set(const list& v) {
                            this->message_106_set_set(v);
                        }
                        
                        void message_106_listin_number_set(number v) {
                            this->message_106_set_set(v);
                        }
                        
                        void message_106_listin_bang_bang() {
                            this->message_106_trigger_bang();
                        }
                        
                        void message_107_listin_list_set(const list& v) {
                            this->message_107_set_set(v);
                        }
                        
                        void message_107_listin_number_set(number v) {
                            this->message_107_set_set(v);
                        }
                        
                        void message_107_listin_bang_bang() {
                            this->message_107_trigger_bang();
                        }
                        
                        void message_108_listin_list_set(const list& v) {
                            this->message_108_set_set(v);
                        }
                        
                        void message_108_listin_number_set(number v) {
                            this->message_108_set_set(v);
                        }
                        
                        void message_108_listin_bang_bang() {
                            this->message_108_trigger_bang();
                        }
                        
                        void message_109_listin_list_set(const list& v) {
                            this->message_109_set_set(v);
                        }
                        
                        void message_109_listin_number_set(number v) {
                            this->message_109_set_set(v);
                        }
                        
                        void message_109_listin_bang_bang() {
                            this->message_109_trigger_bang();
                        }
                        
                        void message_110_listin_list_set(const list& v) {
                            this->message_110_set_set(v);
                        }
                        
                        void message_110_listin_number_set(number v) {
                            this->message_110_set_set(v);
                        }
                        
                        void message_110_listin_bang_bang() {
                            this->message_110_trigger_bang();
                        }
                        
                        void message_111_listin_list_set(const list& v) {
                            this->message_111_set_set(v);
                        }
                        
                        void message_111_listin_number_set(number v) {
                            this->message_111_set_set(v);
                        }
                        
                        void message_111_listin_bang_bang() {
                            this->message_111_trigger_bang();
                        }
                        
                        void message_112_listin_list_set(const list& v) {
                            this->message_112_set_set(v);
                        }
                        
                        void message_112_listin_number_set(number v) {
                            this->message_112_set_set(v);
                        }
                        
                        void message_112_listin_bang_bang() {
                            this->message_112_trigger_bang();
                        }
                        
                        void message_113_listin_list_set(const list& v) {
                            this->message_113_set_set(v);
                        }
                        
                        void message_113_listin_number_set(number v) {
                            this->message_113_set_set(v);
                        }
                        
                        void message_113_listin_bang_bang() {
                            this->message_113_trigger_bang();
                        }
                        
                        void message_114_listin_list_set(const list& v) {
                            this->message_114_set_set(v);
                        }
                        
                        void message_114_listin_number_set(number v) {
                            this->message_114_set_set(v);
                        }
                        
                        void message_114_listin_bang_bang() {
                            this->message_114_trigger_bang();
                        }
                        
                        void message_115_listin_list_set(const list& v) {
                            this->message_115_set_set(v);
                        }
                        
                        void message_115_listin_number_set(number v) {
                            this->message_115_set_set(v);
                        }
                        
                        void message_115_listin_bang_bang() {
                            this->message_115_trigger_bang();
                        }
                        
                        void message_116_listin_list_set(const list& v) {
                            this->message_116_set_set(v);
                        }
                        
                        void message_116_listin_number_set(number v) {
                            this->message_116_set_set(v);
                        }
                        
                        void message_116_listin_bang_bang() {
                            this->message_116_trigger_bang();
                        }
                        
                        void message_117_listin_list_set(const list& v) {
                            this->message_117_set_set(v);
                        }
                        
                        void message_117_listin_number_set(number v) {
                            this->message_117_set_set(v);
                        }
                        
                        void message_117_listin_bang_bang() {
                            this->message_117_trigger_bang();
                        }
                        
                        void message_118_listin_list_set(const list& v) {
                            this->message_118_set_set(v);
                        }
                        
                        void message_118_listin_number_set(number v) {
                            this->message_118_set_set(v);
                        }
                        
                        void message_118_listin_bang_bang() {
                            this->message_118_trigger_bang();
                        }
                        
                        void message_119_listin_list_set(const list& v) {
                            this->message_119_set_set(v);
                        }
                        
                        void message_119_listin_number_set(number v) {
                            this->message_119_set_set(v);
                        }
                        
                        void message_119_listin_bang_bang() {
                            this->message_119_trigger_bang();
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_104_init();
                            this->numberobj_51_init();
                            this->message_105_init();
                            this->message_106_init();
                            this->message_107_init();
                            this->message_108_init();
                            this->message_109_init();
                            this->message_110_init();
                            this->message_111_init();
                            this->message_112_init();
                            this->message_113_init();
                            this->message_114_init();
                            this->message_115_init();
                            this->message_116_init();
                            this->message_117_init();
                            this->message_118_init();
                            this->message_119_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void eventoutlet_19_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_18_out2_number_set(v);
                        }
                        
                        void numberobj_51_output_set(number v) {
                            this->eventoutlet_19_in1_number_set(v);
                        }
                        
                        void numberobj_51_value_set(number v) {
                            this->numberobj_51_value_setter(v);
                            v = this->numberobj_51_value;
                            number localvalue = v;
                        
                            if (this->numberobj_51_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_51_output_set(localvalue);
                        }
                        
                        void eventoutlet_18_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_18_out1_list_set((list)v);
                        }
                        
                        void message_104_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_104_trigger_bang() {
                            this->message_104_out_set(this->message_104_set);
                        }
                        
                        void select_10_match1_bang() {
                            this->message_104_trigger_bang();
                        }
                        
                        void message_105_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_105_trigger_bang() {
                            this->message_105_out_set(this->message_105_set);
                        }
                        
                        void select_10_match2_bang() {
                            this->message_105_trigger_bang();
                        }
                        
                        void message_107_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_107_trigger_bang() {
                            this->message_107_out_set(this->message_107_set);
                        }
                        
                        void select_10_match3_bang() {
                            this->message_107_trigger_bang();
                        }
                        
                        void message_108_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_108_trigger_bang() {
                            this->message_108_out_set(this->message_108_set);
                        }
                        
                        void select_10_match4_bang() {
                            this->message_108_trigger_bang();
                        }
                        
                        void message_109_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_109_trigger_bang() {
                            this->message_109_out_set(this->message_109_set);
                        }
                        
                        void select_10_match5_bang() {
                            this->message_109_trigger_bang();
                        }
                        
                        void message_110_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_110_trigger_bang() {
                            this->message_110_out_set(this->message_110_set);
                        }
                        
                        void select_10_match6_bang() {
                            this->message_110_trigger_bang();
                        }
                        
                        void message_111_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_111_trigger_bang() {
                            this->message_111_out_set(this->message_111_set);
                        }
                        
                        void select_10_match7_bang() {
                            this->message_111_trigger_bang();
                        }
                        
                        void message_112_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_112_trigger_bang() {
                            this->message_112_out_set(this->message_112_set);
                        }
                        
                        void select_10_match8_bang() {
                            this->message_112_trigger_bang();
                        }
                        
                        void message_113_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_113_trigger_bang() {
                            this->message_113_out_set(this->message_113_set);
                        }
                        
                        void select_10_match9_bang() {
                            this->message_113_trigger_bang();
                        }
                        
                        void message_114_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_114_trigger_bang() {
                            this->message_114_out_set(this->message_114_set);
                        }
                        
                        void select_10_match10_bang() {
                            this->message_114_trigger_bang();
                        }
                        
                        void message_115_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_115_trigger_bang() {
                            this->message_115_out_set(this->message_115_set);
                        }
                        
                        void select_10_match11_bang() {
                            this->message_115_trigger_bang();
                        }
                        
                        void message_116_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_116_trigger_bang() {
                            this->message_116_out_set(this->message_116_set);
                        }
                        
                        void select_10_match12_bang() {
                            this->message_116_trigger_bang();
                        }
                        
                        void message_117_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_117_trigger_bang() {
                            this->message_117_out_set(this->message_117_set);
                        }
                        
                        void select_10_match13_bang() {
                            this->message_117_trigger_bang();
                        }
                        
                        void message_118_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_118_trigger_bang() {
                            this->message_118_out_set(this->message_118_set);
                        }
                        
                        void select_10_match14_bang() {
                            this->message_118_trigger_bang();
                        }
                        
                        void message_119_out_set(const list& v) {
                            this->eventoutlet_18_in1_list_set(v);
                        }
                        
                        void message_119_trigger_bang() {
                            this->message_119_out_set(this->message_119_set);
                        }
                        
                        void select_10_match15_bang() {
                            this->message_119_trigger_bang();
                        }
                        
                        void select_10_nomatch_number_set(number ) {}
                        
                        void select_10_input_number_set(number v) {
                            if (v == this->select_10_test1)
                                this->select_10_match1_bang();
                            else if (v == this->select_10_test2)
                                this->select_10_match2_bang();
                            else if (v == this->select_10_test3)
                                this->select_10_match3_bang();
                            else if (v == this->select_10_test4)
                                this->select_10_match4_bang();
                            else if (v == this->select_10_test5)
                                this->select_10_match5_bang();
                            else if (v == this->select_10_test6)
                                this->select_10_match6_bang();
                            else if (v == this->select_10_test7)
                                this->select_10_match7_bang();
                            else if (v == this->select_10_test8)
                                this->select_10_match8_bang();
                            else if (v == this->select_10_test9)
                                this->select_10_match9_bang();
                            else if (v == this->select_10_test10)
                                this->select_10_match10_bang();
                            else if (v == this->select_10_test11)
                                this->select_10_match11_bang();
                            else if (v == this->select_10_test12)
                                this->select_10_match12_bang();
                            else if (v == this->select_10_test13)
                                this->select_10_match13_bang();
                            else if (v == this->select_10_test14)
                                this->select_10_match14_bang();
                            else if (v == this->select_10_test15)
                                this->select_10_match15_bang();
                            else
                                this->select_10_nomatch_number_set(v);
                        }
                        
                        void uzi_08_index_set(number v) {
                            this->numberobj_51_value_set(v);
                            this->select_10_input_number_set(v);
                        }
                        
                        void uzi_08_out_bang() {}
                        
                        void uzi_08_carry_bang() {}
                        
                        void uzi_08_start_bang_bang() {
                            this->uzi_08_gobang(0);
                        }
                        
                        void button_20_output_bang() {
                            this->uzi_08_start_bang_bang();
                        }
                        
                        void button_20_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/button_obj-54"),
                                this->_currentTime
                            );;
                        
                            this->button_20_output_bang();
                        }
                        
                        void eventinlet_22_out1_bang_bang() {
                            this->button_20_bangval_bang();
                        }
                        
                        void message_104_set_set(const list& v) {
                            this->message_104_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-91"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_105_set_set(const list& v) {
                            this->message_105_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-75"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_106_set_set(const list& v) {
                            this->message_106_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-89"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_106_out_set(const list& ) {}
                        
                        void message_106_trigger_bang() {
                            this->message_106_out_set(this->message_106_set);
                        }
                        
                        void message_107_set_set(const list& v) {
                            this->message_107_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-67"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_108_set_set(const list& v) {
                            this->message_108_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-93"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_109_set_set(const list& v) {
                            this->message_109_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-64"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_110_set_set(const list& v) {
                            this->message_110_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-62"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_111_set_set(const list& v) {
                            this->message_111_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-60"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_112_set_set(const list& v) {
                            this->message_112_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-52"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_113_set_set(const list& v) {
                            this->message_113_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-51"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_114_set_set(const list& v) {
                            this->message_114_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-41"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_115_set_set(const list& v) {
                            this->message_115_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-97"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_116_set_set(const list& v) {
                            this->message_116_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-45"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_117_set_set(const list& v) {
                            this->message_117_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-36"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_118_set_set(const list& v) {
                            this->message_118_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-34"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_119_set_set(const list& v) {
                            this->message_119_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/message_obj-33"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_51_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_51_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_51_value = localvalue;
                        }
                        
                        void uzi_08_gobang(number start) {
                            this->uzi_08_doPause = 0;
                            this->uzi_08_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_08_count; i++) {
                                if ((bool)(this->uzi_08_doPause)) {
                                    this->uzi_08_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_08_index_set(i + this->uzi_08_base);
                                    this->uzi_08_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_08_carry_bang();
                        }
                        
                        void message_104_init() {
                            this->message_104_set_set({0, 1, 1, 2, 2, 2, 4});
                        }
                        
                        void numberobj_51_init() {
                            this->numberobj_51_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/Imaj7ChordScale/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_51_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_51_value;
                        }
                        
                        void numberobj_51_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_51_value_set(preset["value"]);
                        }
                        
                        void message_105_init() {
                            this->message_105_set_set({0, 0, 1, 2, 2, 4, 4, 5});
                        }
                        
                        void message_106_init() {
                            this->message_106_set_set({0, 1, 2, 4, 5, 6, 7});
                        }
                        
                        void message_107_init() {
                            this->message_107_set_set({0, 0, 0, 1, 1, 2, 4, 4, 4, 5, 6});
                        }
                        
                        void message_108_init() {
                            this->message_108_set_set({2, 4});
                        }
                        
                        void message_109_init() {
                            this->message_109_set_set({0, 0, 1, 2, 2, 2, 2, 4, 5, 6, 6, 6, 7, 7, 7});
                        }
                        
                        void message_110_init() {
                            this->message_110_set_set({1, 2, 4, 4, 4, 5, 6, 7, 7, 7, 8});
                        }
                        
                        void message_111_init() {
                            this->message_111_set_set({4, 4, 4, 5, 6, 7, 7, 8, 8, 9, 9, 9});
                        }
                        
                        void message_112_init() {
                            this->message_112_set_set({4, 5, 6, 6, 7, 8, 8, 9, 9, 9});
                        }
                        
                        void message_113_init() {
                            this->message_113_set_set({5, 6, 6, 6, 7, 9, 9, 11, 11, 12, 12});
                        }
                        
                        void message_114_init() {
                            this->message_114_set_set({6, 7, 7, 8, 8, 9, 11, 11, 12, 12, 12, 13});
                        }
                        
                        void message_115_init() {
                            this->message_115_set_set({9, 11});
                        }
                        
                        void message_116_init() {
                            this->message_116_set_set({8, 9, 9, 11, 12, 12, 13, 13, 14, 14, 14});
                        }
                        
                        void message_117_init() {
                            this->message_117_set_set({9, 11, 11, 11, 12, 13, 14, 14, 14});
                        }
                        
                        void message_118_init() {
                            this->message_118_set_set({11, 11, 11, 12, 13, 14, 14});
                        }
                        
                        void message_119_init() {
                            this->message_119_set_set({11, 12, 12, 13, 13, 13, 14});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            uzi_08_start_number = 0;
                            uzi_08_count = 15;
                            uzi_08_base = 0;
                            select_10_test1 = 0;
                            select_10_test2 = 1;
                            select_10_test3 = 2;
                            select_10_test4 = 3;
                            select_10_test5 = 4;
                            select_10_test6 = 5;
                            select_10_test7 = 6;
                            select_10_test8 = 7;
                            select_10_test9 = 8;
                            select_10_test10 = 9;
                            select_10_test11 = 10;
                            select_10_test12 = 11;
                            select_10_test13 = 12;
                            select_10_test14 = 13;
                            select_10_test15 = 14;
                            numberobj_51_value = 0;
                            numberobj_51_value_setter(numberobj_51_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            uzi_08_doPause = 0;
                            uzi_08_pausecount = 0;
                            numberobj_51_currentFormat = 6;
                            numberobj_51_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number uzi_08_start_number;
                            number uzi_08_count;
                            number uzi_08_base;
                            list message_104_set;
                            number select_10_test1;
                            number select_10_test2;
                            number select_10_test3;
                            number select_10_test4;
                            number select_10_test5;
                            number select_10_test6;
                            number select_10_test7;
                            number select_10_test8;
                            number select_10_test9;
                            number select_10_test10;
                            number select_10_test11;
                            number select_10_test12;
                            number select_10_test13;
                            number select_10_test14;
                            number select_10_test15;
                            number numberobj_51_value;
                            list message_105_set;
                            list message_106_set;
                            list message_107_set;
                            list message_108_set;
                            list message_109_set;
                            list message_110_set;
                            list message_111_set;
                            list message_112_set;
                            list message_113_set;
                            list message_114_set;
                            list message_115_set;
                            list message_116_set;
                            list message_117_set;
                            list message_118_set;
                            list message_119_set;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number uzi_08_doPause;
                            long uzi_08_pausecount;
                            Int numberobj_51_currentFormat;
                            number numberobj_51_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_159 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_167;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_159()
                        {
                        }
                        
                        ~RNBOSubpatcher_159()
                        {
                        }
                        
                        virtual RNBOSubpatcher_167* getPatcher() const {
                            return static_cast<RNBOSubpatcher_167 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-69") == objectId)
                                    this->message_120_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-31") == objectId)
                                    this->message_121_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-25") == objectId)
                                    this->message_122_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-93") == objectId)
                                    this->message_123_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-70") == objectId)
                                    this->message_124_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-22") == objectId)
                                    this->message_125_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-20") == objectId)
                                    this->message_126_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-19") == objectId)
                                    this->message_127_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-39") == objectId)
                                    this->message_128_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-15") == objectId)
                                    this->message_129_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-5") == objectId)
                                    this->message_130_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-97") == objectId)
                                    this->message_131_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-9") == objectId)
                                    this->message_132_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-4") == objectId)
                                    this->message_133_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-3") == objectId)
                                    this->message_134_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-56") == objectId)
                                    this->message_135_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/NextNote/III-7ChordScale/number_obj-2") == objectId)
                                    this->numberobj_52_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/NextNote/III-7ChordScale/number_obj-2") == objectId)
                                    this->numberobj_52_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-69") == objectId)
                                    this->message_120_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-31") == objectId)
                                    this->message_121_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-25") == objectId)
                                    this->message_122_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-93") == objectId)
                                    this->message_123_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-70") == objectId)
                                    this->message_124_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-22") == objectId)
                                    this->message_125_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-20") == objectId)
                                    this->message_126_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-19") == objectId)
                                    this->message_127_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-39") == objectId)
                                    this->message_128_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-15") == objectId)
                                    this->message_129_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-5") == objectId)
                                    this->message_130_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-97") == objectId)
                                    this->message_131_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-9") == objectId)
                                    this->message_132_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-4") == objectId)
                                    this->message_133_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-3") == objectId)
                                    this->message_134_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-56") == objectId)
                                    this->message_135_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/NextNote/III-7ChordScale/button_obj-74") == objectId)
                                    this->button_21_bangin_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-69") == objectId)
                                    this->message_120_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-31") == objectId)
                                    this->message_121_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-25") == objectId)
                                    this->message_122_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-93") == objectId)
                                    this->message_123_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-70") == objectId)
                                    this->message_124_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-22") == objectId)
                                    this->message_125_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-20") == objectId)
                                    this->message_126_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-19") == objectId)
                                    this->message_127_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-39") == objectId)
                                    this->message_128_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-15") == objectId)
                                    this->message_129_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-5") == objectId)
                                    this->message_130_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-97") == objectId)
                                    this->message_131_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-9") == objectId)
                                    this->message_132_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-4") == objectId)
                                    this->message_133_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-3") == objectId)
                                    this->message_134_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/III-7ChordScale/message_obj-56") == objectId)
                                    this->message_135_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/button_obj-74"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/button_obj-74";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-69"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-69";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/number_obj-2"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/number_obj-2";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-31"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-31";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-25"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-25";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-93"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-93";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-70"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-70";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-22"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-22";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-20"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-20";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-19"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-19";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-39"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-39";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-15"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-15";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-5"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-5";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-97"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-97";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-9"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-9";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-4"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-4";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-3"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-3";
                                }
                            case TAG("Melodies/NextNote/III-7ChordScale/message_obj-56"):
                                {
                                return "Melodies/NextNote/III-7ChordScale/message_obj-56";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_23_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->button_21_bangval_bang();
                        }
                        
                        void eventinlet_23_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->button_21_bangval_bang();
                        }
                        
                        void button_21_bangin_bang() {
                            this->button_21_bangval_bang();
                        }
                        
                        void message_120_listin_list_set(const list& v) {
                            this->message_120_set_set(v);
                        }
                        
                        void message_120_listin_number_set(number v) {
                            this->message_120_set_set(v);
                        }
                        
                        void message_120_listin_bang_bang() {
                            this->message_120_trigger_bang();
                        }
                        
                        void numberobj_52_valin_set(number v) {
                            this->numberobj_52_value_set(v);
                        }
                        
                        void numberobj_52_format_set(number v) {
                            this->numberobj_52_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_121_listin_list_set(const list& v) {
                            this->message_121_set_set(v);
                        }
                        
                        void message_121_listin_number_set(number v) {
                            this->message_121_set_set(v);
                        }
                        
                        void message_121_listin_bang_bang() {
                            this->message_121_trigger_bang();
                        }
                        
                        void message_122_listin_list_set(const list& v) {
                            this->message_122_set_set(v);
                        }
                        
                        void message_122_listin_number_set(number v) {
                            this->message_122_set_set(v);
                        }
                        
                        void message_122_listin_bang_bang() {
                            this->message_122_trigger_bang();
                        }
                        
                        void message_123_listin_list_set(const list& v) {
                            this->message_123_set_set(v);
                        }
                        
                        void message_123_listin_number_set(number v) {
                            this->message_123_set_set(v);
                        }
                        
                        void message_123_listin_bang_bang() {
                            this->message_123_trigger_bang();
                        }
                        
                        void message_124_listin_list_set(const list& v) {
                            this->message_124_set_set(v);
                        }
                        
                        void message_124_listin_number_set(number v) {
                            this->message_124_set_set(v);
                        }
                        
                        void message_124_listin_bang_bang() {
                            this->message_124_trigger_bang();
                        }
                        
                        void message_125_listin_list_set(const list& v) {
                            this->message_125_set_set(v);
                        }
                        
                        void message_125_listin_number_set(number v) {
                            this->message_125_set_set(v);
                        }
                        
                        void message_125_listin_bang_bang() {
                            this->message_125_trigger_bang();
                        }
                        
                        void message_126_listin_list_set(const list& v) {
                            this->message_126_set_set(v);
                        }
                        
                        void message_126_listin_number_set(number v) {
                            this->message_126_set_set(v);
                        }
                        
                        void message_126_listin_bang_bang() {
                            this->message_126_trigger_bang();
                        }
                        
                        void message_127_listin_list_set(const list& v) {
                            this->message_127_set_set(v);
                        }
                        
                        void message_127_listin_number_set(number v) {
                            this->message_127_set_set(v);
                        }
                        
                        void message_127_listin_bang_bang() {
                            this->message_127_trigger_bang();
                        }
                        
                        void message_128_listin_list_set(const list& v) {
                            this->message_128_set_set(v);
                        }
                        
                        void message_128_listin_number_set(number v) {
                            this->message_128_set_set(v);
                        }
                        
                        void message_128_listin_bang_bang() {
                            this->message_128_trigger_bang();
                        }
                        
                        void message_129_listin_list_set(const list& v) {
                            this->message_129_set_set(v);
                        }
                        
                        void message_129_listin_number_set(number v) {
                            this->message_129_set_set(v);
                        }
                        
                        void message_129_listin_bang_bang() {
                            this->message_129_trigger_bang();
                        }
                        
                        void message_130_listin_list_set(const list& v) {
                            this->message_130_set_set(v);
                        }
                        
                        void message_130_listin_number_set(number v) {
                            this->message_130_set_set(v);
                        }
                        
                        void message_130_listin_bang_bang() {
                            this->message_130_trigger_bang();
                        }
                        
                        void message_131_listin_list_set(const list& v) {
                            this->message_131_set_set(v);
                        }
                        
                        void message_131_listin_number_set(number v) {
                            this->message_131_set_set(v);
                        }
                        
                        void message_131_listin_bang_bang() {
                            this->message_131_trigger_bang();
                        }
                        
                        void message_132_listin_list_set(const list& v) {
                            this->message_132_set_set(v);
                        }
                        
                        void message_132_listin_number_set(number v) {
                            this->message_132_set_set(v);
                        }
                        
                        void message_132_listin_bang_bang() {
                            this->message_132_trigger_bang();
                        }
                        
                        void message_133_listin_list_set(const list& v) {
                            this->message_133_set_set(v);
                        }
                        
                        void message_133_listin_number_set(number v) {
                            this->message_133_set_set(v);
                        }
                        
                        void message_133_listin_bang_bang() {
                            this->message_133_trigger_bang();
                        }
                        
                        void message_134_listin_list_set(const list& v) {
                            this->message_134_set_set(v);
                        }
                        
                        void message_134_listin_number_set(number v) {
                            this->message_134_set_set(v);
                        }
                        
                        void message_134_listin_bang_bang() {
                            this->message_134_trigger_bang();
                        }
                        
                        void message_135_listin_list_set(const list& v) {
                            this->message_135_set_set(v);
                        }
                        
                        void message_135_listin_number_set(number v) {
                            this->message_135_set_set(v);
                        }
                        
                        void message_135_listin_bang_bang() {
                            this->message_135_trigger_bang();
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_120_init();
                            this->numberobj_52_init();
                            this->message_121_init();
                            this->message_122_init();
                            this->message_123_init();
                            this->message_124_init();
                            this->message_125_init();
                            this->message_126_init();
                            this->message_127_init();
                            this->message_128_init();
                            this->message_129_init();
                            this->message_130_init();
                            this->message_131_init();
                            this->message_132_init();
                            this->message_133_init();
                            this->message_134_init();
                            this->message_135_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void eventoutlet_21_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_19_out2_number_set(v);
                        }
                        
                        void numberobj_52_output_set(number v) {
                            this->eventoutlet_21_in1_number_set(v);
                        }
                        
                        void numberobj_52_value_set(number v) {
                            this->numberobj_52_value_setter(v);
                            v = this->numberobj_52_value;
                            number localvalue = v;
                        
                            if (this->numberobj_52_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/III-7ChordScale/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_52_output_set(localvalue);
                        }
                        
                        void eventoutlet_20_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_19_out1_list_set((list)v);
                        }
                        
                        void message_120_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_120_trigger_bang() {
                            this->message_120_out_set(this->message_120_set);
                        }
                        
                        void select_11_match1_bang() {
                            this->message_120_trigger_bang();
                        }
                        
                        void message_121_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_121_trigger_bang() {
                            this->message_121_out_set(this->message_121_set);
                        }
                        
                        void select_11_match2_bang() {
                            this->message_121_trigger_bang();
                        }
                        
                        void message_122_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_122_trigger_bang() {
                            this->message_122_out_set(this->message_122_set);
                        }
                        
                        void select_11_match3_bang() {
                            this->message_122_trigger_bang();
                        }
                        
                        void message_123_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_123_trigger_bang() {
                            this->message_123_out_set(this->message_123_set);
                        }
                        
                        void select_11_match4_bang() {
                            this->message_123_trigger_bang();
                        }
                        
                        void message_125_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_125_trigger_bang() {
                            this->message_125_out_set(this->message_125_set);
                        }
                        
                        void select_11_match5_bang() {
                            this->message_125_trigger_bang();
                        }
                        
                        void message_126_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_126_trigger_bang() {
                            this->message_126_out_set(this->message_126_set);
                        }
                        
                        void select_11_match6_bang() {
                            this->message_126_trigger_bang();
                        }
                        
                        void message_127_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_127_trigger_bang() {
                            this->message_127_out_set(this->message_127_set);
                        }
                        
                        void select_11_match7_bang() {
                            this->message_127_trigger_bang();
                        }
                        
                        void message_128_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_128_trigger_bang() {
                            this->message_128_out_set(this->message_128_set);
                        }
                        
                        void select_11_match8_bang() {
                            this->message_128_trigger_bang();
                        }
                        
                        void message_129_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_129_trigger_bang() {
                            this->message_129_out_set(this->message_129_set);
                        }
                        
                        void select_11_match9_bang() {
                            this->message_129_trigger_bang();
                        }
                        
                        void message_130_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_130_trigger_bang() {
                            this->message_130_out_set(this->message_130_set);
                        }
                        
                        void select_11_match10_bang() {
                            this->message_130_trigger_bang();
                        }
                        
                        void message_131_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_131_trigger_bang() {
                            this->message_131_out_set(this->message_131_set);
                        }
                        
                        void select_11_match11_bang() {
                            this->message_131_trigger_bang();
                        }
                        
                        void message_132_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_132_trigger_bang() {
                            this->message_132_out_set(this->message_132_set);
                        }
                        
                        void select_11_match12_bang() {
                            this->message_132_trigger_bang();
                        }
                        
                        void message_133_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_133_trigger_bang() {
                            this->message_133_out_set(this->message_133_set);
                        }
                        
                        void select_11_match13_bang() {
                            this->message_133_trigger_bang();
                        }
                        
                        void message_134_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_134_trigger_bang() {
                            this->message_134_out_set(this->message_134_set);
                        }
                        
                        void select_11_match14_bang() {
                            this->message_134_trigger_bang();
                        }
                        
                        void message_135_out_set(const list& v) {
                            this->eventoutlet_20_in1_list_set(v);
                        }
                        
                        void message_135_trigger_bang() {
                            this->message_135_out_set(this->message_135_set);
                        }
                        
                        void select_11_match15_bang() {
                            this->message_135_trigger_bang();
                        }
                        
                        void select_11_nomatch_number_set(number ) {}
                        
                        void select_11_input_number_set(number v) {
                            if (v == this->select_11_test1)
                                this->select_11_match1_bang();
                            else if (v == this->select_11_test2)
                                this->select_11_match2_bang();
                            else if (v == this->select_11_test3)
                                this->select_11_match3_bang();
                            else if (v == this->select_11_test4)
                                this->select_11_match4_bang();
                            else if (v == this->select_11_test5)
                                this->select_11_match5_bang();
                            else if (v == this->select_11_test6)
                                this->select_11_match6_bang();
                            else if (v == this->select_11_test7)
                                this->select_11_match7_bang();
                            else if (v == this->select_11_test8)
                                this->select_11_match8_bang();
                            else if (v == this->select_11_test9)
                                this->select_11_match9_bang();
                            else if (v == this->select_11_test10)
                                this->select_11_match10_bang();
                            else if (v == this->select_11_test11)
                                this->select_11_match11_bang();
                            else if (v == this->select_11_test12)
                                this->select_11_match12_bang();
                            else if (v == this->select_11_test13)
                                this->select_11_match13_bang();
                            else if (v == this->select_11_test14)
                                this->select_11_match14_bang();
                            else if (v == this->select_11_test15)
                                this->select_11_match15_bang();
                            else
                                this->select_11_nomatch_number_set(v);
                        }
                        
                        void uzi_09_index_set(number v) {
                            this->numberobj_52_value_set(v);
                            this->select_11_input_number_set(v);
                        }
                        
                        void uzi_09_out_bang() {}
                        
                        void uzi_09_carry_bang() {}
                        
                        void uzi_09_start_bang_bang() {
                            this->uzi_09_gobang(0);
                        }
                        
                        void button_21_output_bang() {
                            this->uzi_09_start_bang_bang();
                        }
                        
                        void button_21_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/NextNote/III-7ChordScale/button_obj-74"),
                                this->_currentTime
                            );;
                        
                            this->button_21_output_bang();
                        }
                        
                        void eventinlet_23_out1_bang_bang() {
                            this->button_21_bangval_bang();
                        }
                        
                        void message_120_set_set(const list& v) {
                            this->message_120_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-69"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_121_set_set(const list& v) {
                            this->message_121_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-31"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_122_set_set(const list& v) {
                            this->message_122_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-25"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_123_set_set(const list& v) {
                            this->message_123_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-93"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_124_set_set(const list& v) {
                            this->message_124_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-70"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_124_out_set(const list& ) {}
                        
                        void message_124_trigger_bang() {
                            this->message_124_out_set(this->message_124_set);
                        }
                        
                        void message_125_set_set(const list& v) {
                            this->message_125_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-22"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_126_set_set(const list& v) {
                            this->message_126_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-20"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_127_set_set(const list& v) {
                            this->message_127_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-19"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_128_set_set(const list& v) {
                            this->message_128_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-39"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_129_set_set(const list& v) {
                            this->message_129_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-15"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_130_set_set(const list& v) {
                            this->message_130_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-5"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_131_set_set(const list& v) {
                            this->message_131_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-97"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_132_set_set(const list& v) {
                            this->message_132_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-9"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_133_set_set(const list& v) {
                            this->message_133_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-4"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_134_set_set(const list& v) {
                            this->message_134_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-3"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_135_set_set(const list& v) {
                            this->message_135_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/III-7ChordScale/message_obj-56"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_52_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_52_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_52_value = localvalue;
                        }
                        
                        void uzi_09_gobang(number start) {
                            this->uzi_09_doPause = 0;
                            this->uzi_09_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_09_count; i++) {
                                if ((bool)(this->uzi_09_doPause)) {
                                    this->uzi_09_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_09_index_set(i + this->uzi_09_base);
                                    this->uzi_09_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_09_carry_bang();
                        }
                        
                        void message_120_init() {
                            this->message_120_set_set({1});
                        }
                        
                        void numberobj_52_init() {
                            this->numberobj_52_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/III-7ChordScale/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_52_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_52_value;
                        }
                        
                        void numberobj_52_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_52_value_set(preset["value"]);
                        }
                        
                        void message_121_init() {
                            this->message_121_set_set({1, 2, 2, 4, 4, 5});
                        }
                        
                        void message_122_init() {
                            this->message_122_set_set({1, 1, 1, 2, 4, 4, 4, 5, 5, 6});
                        }
                        
                        void message_123_init() {
                            this->message_123_set_set({2, 2, 2, 4});
                        }
                        
                        void message_124_init() {
                            this->message_124_set_set({1, 2, 4, 5, 6, 8, 9});
                        }
                        
                        void message_125_init() {
                            this->message_125_set_set({1, 2, 2, 2, 2, 4, 5, 6, 6, 6, 8, 9});
                        }
                        
                        void message_126_init() {
                            this->message_126_set_set({1, 2, 4, 4, 4, 5, 6, 8, 9});
                        }
                        
                        void message_127_init() {
                            this->message_127_set_set({2, 4, 4, 4, 5, 6, 8, 8, 9, 9, 9});
                        }
                        
                        void message_128_init() {
                            this->message_128_set_set({6, 8});
                        }
                        
                        void message_129_init() {
                            this->message_129_set_set({5, 6, 6, 9, 9, 9, 9, 11, 11, 12, 12});
                        }
                        
                        void message_130_init() {
                            this->message_130_set_set({6, 8, 9, 11, 11, 12, 12, 12, 13});
                        }
                        
                        void message_131_init() {
                            this->message_131_set_set({9, 9, 11});
                        }
                        
                        void message_132_init() {
                            this->message_132_set_set({8, 9, 9, 9, 9, 11, 12, 12, 13, 13});
                        }
                        
                        void message_133_init() {
                            this->message_133_set_set({9, 9, 11, 11, 11, 12, 13});
                        }
                        
                        void message_134_init() {
                            this->message_134_set_set({11, 11, 11, 12, 13});
                        }
                        
                        void message_135_init() {
                            this->message_135_set_set({13});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            uzi_09_start_number = 0;
                            uzi_09_count = 15;
                            uzi_09_base = 0;
                            select_11_test1 = 0;
                            select_11_test2 = 1;
                            select_11_test3 = 2;
                            select_11_test4 = 3;
                            select_11_test5 = 4;
                            select_11_test6 = 5;
                            select_11_test7 = 6;
                            select_11_test8 = 7;
                            select_11_test9 = 8;
                            select_11_test10 = 9;
                            select_11_test11 = 10;
                            select_11_test12 = 11;
                            select_11_test13 = 12;
                            select_11_test14 = 13;
                            select_11_test15 = 14;
                            numberobj_52_value = 0;
                            numberobj_52_value_setter(numberobj_52_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            uzi_09_doPause = 0;
                            uzi_09_pausecount = 0;
                            numberobj_52_currentFormat = 6;
                            numberobj_52_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number uzi_09_start_number;
                            number uzi_09_count;
                            number uzi_09_base;
                            list message_120_set;
                            number select_11_test1;
                            number select_11_test2;
                            number select_11_test3;
                            number select_11_test4;
                            number select_11_test5;
                            number select_11_test6;
                            number select_11_test7;
                            number select_11_test8;
                            number select_11_test9;
                            number select_11_test10;
                            number select_11_test11;
                            number select_11_test12;
                            number select_11_test13;
                            number select_11_test14;
                            number select_11_test15;
                            number numberobj_52_value;
                            list message_121_set;
                            list message_122_set;
                            list message_123_set;
                            list message_124_set;
                            list message_125_set;
                            list message_126_set;
                            list message_127_set;
                            list message_128_set;
                            list message_129_set;
                            list message_130_set;
                            list message_131_set;
                            list message_132_set;
                            list message_133_set;
                            list message_134_set;
                            list message_135_set;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number uzi_09_doPause;
                            long uzi_09_pausecount;
                            Int numberobj_52_currentFormat;
                            number numberobj_52_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_160 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_167;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_160()
                        {
                        }
                        
                        ~RNBOSubpatcher_160()
                        {
                        }
                        
                        virtual RNBOSubpatcher_167* getPatcher() const {
                            return static_cast<RNBOSubpatcher_167 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-91") == objectId)
                                    this->message_136_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-37") == objectId)
                                    this->message_137_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-28") == objectId)
                                    this->message_138_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-93") == objectId)
                                    this->message_139_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-26") == objectId)
                                    this->message_140_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-40") == objectId)
                                    this->message_141_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-23") == objectId)
                                    this->message_142_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-22") == objectId)
                                    this->message_143_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-17") == objectId)
                                    this->message_144_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-16") == objectId)
                                    this->message_145_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-6") == objectId)
                                    this->message_146_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-97") == objectId)
                                    this->message_147_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-10") == objectId)
                                    this->message_148_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-5") == objectId)
                                    this->message_149_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-4") == objectId)
                                    this->message_150_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-3") == objectId)
                                    this->message_151_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/NextNote/VI-7ChordScale/number_obj-103") == objectId)
                                    this->numberobj_53_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/NextNote/VI-7ChordScale/number_obj-103") == objectId)
                                    this->numberobj_53_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-91") == objectId)
                                    this->message_136_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-37") == objectId)
                                    this->message_137_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-28") == objectId)
                                    this->message_138_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-93") == objectId)
                                    this->message_139_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-26") == objectId)
                                    this->message_140_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-40") == objectId)
                                    this->message_141_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-23") == objectId)
                                    this->message_142_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-22") == objectId)
                                    this->message_143_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-17") == objectId)
                                    this->message_144_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-16") == objectId)
                                    this->message_145_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-6") == objectId)
                                    this->message_146_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-97") == objectId)
                                    this->message_147_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-10") == objectId)
                                    this->message_148_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-5") == objectId)
                                    this->message_149_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-4") == objectId)
                                    this->message_150_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-3") == objectId)
                                    this->message_151_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/NextNote/VI-7ChordScale/button_obj-18") == objectId)
                                    this->button_22_bangin_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-91") == objectId)
                                    this->message_136_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-37") == objectId)
                                    this->message_137_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-28") == objectId)
                                    this->message_138_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-93") == objectId)
                                    this->message_139_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-26") == objectId)
                                    this->message_140_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-40") == objectId)
                                    this->message_141_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-23") == objectId)
                                    this->message_142_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-22") == objectId)
                                    this->message_143_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-17") == objectId)
                                    this->message_144_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-16") == objectId)
                                    this->message_145_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-6") == objectId)
                                    this->message_146_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-97") == objectId)
                                    this->message_147_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-10") == objectId)
                                    this->message_148_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-5") == objectId)
                                    this->message_149_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-4") == objectId)
                                    this->message_150_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VI-7ChordScale/message_obj-3") == objectId)
                                    this->message_151_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/button_obj-18"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/button_obj-18";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-91"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-91";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/number_obj-103"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/number_obj-103";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-37"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-37";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-28"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-28";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-93"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-93";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-26"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-26";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-40"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-40";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-23"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-23";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-22"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-22";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-17"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-17";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-16"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-16";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-6"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-6";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-97"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-97";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-10"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-10";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-5"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-5";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-4"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-4";
                                }
                            case TAG("Melodies/NextNote/VI-7ChordScale/message_obj-3"):
                                {
                                return "Melodies/NextNote/VI-7ChordScale/message_obj-3";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_24_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->button_22_bangval_bang();
                        }
                        
                        void eventinlet_24_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->button_22_bangval_bang();
                        }
                        
                        void button_22_bangin_bang() {
                            this->button_22_bangval_bang();
                        }
                        
                        void message_136_listin_list_set(const list& v) {
                            this->message_136_set_set(v);
                        }
                        
                        void message_136_listin_number_set(number v) {
                            this->message_136_set_set(v);
                        }
                        
                        void message_136_listin_bang_bang() {
                            this->message_136_trigger_bang();
                        }
                        
                        void numberobj_53_valin_set(number v) {
                            this->numberobj_53_value_set(v);
                        }
                        
                        void numberobj_53_format_set(number v) {
                            this->numberobj_53_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_137_listin_list_set(const list& v) {
                            this->message_137_set_set(v);
                        }
                        
                        void message_137_listin_number_set(number v) {
                            this->message_137_set_set(v);
                        }
                        
                        void message_137_listin_bang_bang() {
                            this->message_137_trigger_bang();
                        }
                        
                        void message_138_listin_list_set(const list& v) {
                            this->message_138_set_set(v);
                        }
                        
                        void message_138_listin_number_set(number v) {
                            this->message_138_set_set(v);
                        }
                        
                        void message_138_listin_bang_bang() {
                            this->message_138_trigger_bang();
                        }
                        
                        void message_139_listin_list_set(const list& v) {
                            this->message_139_set_set(v);
                        }
                        
                        void message_139_listin_number_set(number v) {
                            this->message_139_set_set(v);
                        }
                        
                        void message_139_listin_bang_bang() {
                            this->message_139_trigger_bang();
                        }
                        
                        void message_140_listin_list_set(const list& v) {
                            this->message_140_set_set(v);
                        }
                        
                        void message_140_listin_number_set(number v) {
                            this->message_140_set_set(v);
                        }
                        
                        void message_140_listin_bang_bang() {
                            this->message_140_trigger_bang();
                        }
                        
                        void message_141_listin_list_set(const list& v) {
                            this->message_141_set_set(v);
                        }
                        
                        void message_141_listin_number_set(number v) {
                            this->message_141_set_set(v);
                        }
                        
                        void message_141_listin_bang_bang() {
                            this->message_141_trigger_bang();
                        }
                        
                        void message_142_listin_list_set(const list& v) {
                            this->message_142_set_set(v);
                        }
                        
                        void message_142_listin_number_set(number v) {
                            this->message_142_set_set(v);
                        }
                        
                        void message_142_listin_bang_bang() {
                            this->message_142_trigger_bang();
                        }
                        
                        void message_143_listin_list_set(const list& v) {
                            this->message_143_set_set(v);
                        }
                        
                        void message_143_listin_number_set(number v) {
                            this->message_143_set_set(v);
                        }
                        
                        void message_143_listin_bang_bang() {
                            this->message_143_trigger_bang();
                        }
                        
                        void message_144_listin_list_set(const list& v) {
                            this->message_144_set_set(v);
                        }
                        
                        void message_144_listin_number_set(number v) {
                            this->message_144_set_set(v);
                        }
                        
                        void message_144_listin_bang_bang() {
                            this->message_144_trigger_bang();
                        }
                        
                        void message_145_listin_list_set(const list& v) {
                            this->message_145_set_set(v);
                        }
                        
                        void message_145_listin_number_set(number v) {
                            this->message_145_set_set(v);
                        }
                        
                        void message_145_listin_bang_bang() {
                            this->message_145_trigger_bang();
                        }
                        
                        void message_146_listin_list_set(const list& v) {
                            this->message_146_set_set(v);
                        }
                        
                        void message_146_listin_number_set(number v) {
                            this->message_146_set_set(v);
                        }
                        
                        void message_146_listin_bang_bang() {
                            this->message_146_trigger_bang();
                        }
                        
                        void message_147_listin_list_set(const list& v) {
                            this->message_147_set_set(v);
                        }
                        
                        void message_147_listin_number_set(number v) {
                            this->message_147_set_set(v);
                        }
                        
                        void message_147_listin_bang_bang() {
                            this->message_147_trigger_bang();
                        }
                        
                        void message_148_listin_list_set(const list& v) {
                            this->message_148_set_set(v);
                        }
                        
                        void message_148_listin_number_set(number v) {
                            this->message_148_set_set(v);
                        }
                        
                        void message_148_listin_bang_bang() {
                            this->message_148_trigger_bang();
                        }
                        
                        void message_149_listin_list_set(const list& v) {
                            this->message_149_set_set(v);
                        }
                        
                        void message_149_listin_number_set(number v) {
                            this->message_149_set_set(v);
                        }
                        
                        void message_149_listin_bang_bang() {
                            this->message_149_trigger_bang();
                        }
                        
                        void message_150_listin_list_set(const list& v) {
                            this->message_150_set_set(v);
                        }
                        
                        void message_150_listin_number_set(number v) {
                            this->message_150_set_set(v);
                        }
                        
                        void message_150_listin_bang_bang() {
                            this->message_150_trigger_bang();
                        }
                        
                        void message_151_listin_list_set(const list& v) {
                            this->message_151_set_set(v);
                        }
                        
                        void message_151_listin_number_set(number v) {
                            this->message_151_set_set(v);
                        }
                        
                        void message_151_listin_bang_bang() {
                            this->message_151_trigger_bang();
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_136_init();
                            this->numberobj_53_init();
                            this->message_137_init();
                            this->message_138_init();
                            this->message_139_init();
                            this->message_140_init();
                            this->message_141_init();
                            this->message_142_init();
                            this->message_143_init();
                            this->message_144_init();
                            this->message_145_init();
                            this->message_146_init();
                            this->message_147_init();
                            this->message_148_init();
                            this->message_149_init();
                            this->message_150_init();
                            this->message_151_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void eventoutlet_23_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_20_out2_number_set(v);
                        }
                        
                        void numberobj_53_output_set(number v) {
                            this->eventoutlet_23_in1_number_set(v);
                        }
                        
                        void numberobj_53_value_set(number v) {
                            this->numberobj_53_value_setter(v);
                            v = this->numberobj_53_value;
                            number localvalue = v;
                        
                            if (this->numberobj_53_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/number_obj-103"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_53_output_set(localvalue);
                        }
                        
                        void eventoutlet_22_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_20_out1_list_set((list)v);
                        }
                        
                        void message_136_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_136_trigger_bang() {
                            this->message_136_out_set(this->message_136_set);
                        }
                        
                        void select_12_match1_bang() {
                            this->message_136_trigger_bang();
                        }
                        
                        void message_137_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_137_trigger_bang() {
                            this->message_137_out_set(this->message_137_set);
                        }
                        
                        void select_12_match2_bang() {
                            this->message_137_trigger_bang();
                        }
                        
                        void message_138_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_138_trigger_bang() {
                            this->message_138_out_set(this->message_138_set);
                        }
                        
                        void select_12_match3_bang() {
                            this->message_138_trigger_bang();
                        }
                        
                        void message_139_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_139_trigger_bang() {
                            this->message_139_out_set(this->message_139_set);
                        }
                        
                        void select_12_match4_bang() {
                            this->message_139_trigger_bang();
                        }
                        
                        void message_140_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_140_trigger_bang() {
                            this->message_140_out_set(this->message_140_set);
                        }
                        
                        void select_12_match5_bang() {
                            this->message_140_trigger_bang();
                        }
                        
                        void message_142_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_142_trigger_bang() {
                            this->message_142_out_set(this->message_142_set);
                        }
                        
                        void select_12_match6_bang() {
                            this->message_142_trigger_bang();
                        }
                        
                        void message_143_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_143_trigger_bang() {
                            this->message_143_out_set(this->message_143_set);
                        }
                        
                        void select_12_match7_bang() {
                            this->message_143_trigger_bang();
                        }
                        
                        void message_144_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_144_trigger_bang() {
                            this->message_144_out_set(this->message_144_set);
                        }
                        
                        void select_12_match8_bang() {
                            this->message_144_trigger_bang();
                        }
                        
                        void message_145_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_145_trigger_bang() {
                            this->message_145_out_set(this->message_145_set);
                        }
                        
                        void select_12_match9_bang() {
                            this->message_145_trigger_bang();
                        }
                        
                        void message_146_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_146_trigger_bang() {
                            this->message_146_out_set(this->message_146_set);
                        }
                        
                        void select_12_match10_bang() {
                            this->message_146_trigger_bang();
                        }
                        
                        void message_147_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_147_trigger_bang() {
                            this->message_147_out_set(this->message_147_set);
                        }
                        
                        void select_12_match11_bang() {
                            this->message_147_trigger_bang();
                        }
                        
                        void message_148_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_148_trigger_bang() {
                            this->message_148_out_set(this->message_148_set);
                        }
                        
                        void select_12_match12_bang() {
                            this->message_148_trigger_bang();
                        }
                        
                        void message_149_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_149_trigger_bang() {
                            this->message_149_out_set(this->message_149_set);
                        }
                        
                        void select_12_match13_bang() {
                            this->message_149_trigger_bang();
                        }
                        
                        void message_150_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_150_trigger_bang() {
                            this->message_150_out_set(this->message_150_set);
                        }
                        
                        void select_12_match14_bang() {
                            this->message_150_trigger_bang();
                        }
                        
                        void message_151_out_set(const list& v) {
                            this->eventoutlet_22_in1_list_set(v);
                        }
                        
                        void message_151_trigger_bang() {
                            this->message_151_out_set(this->message_151_set);
                        }
                        
                        void select_12_match15_bang() {
                            this->message_151_trigger_bang();
                        }
                        
                        void select_12_nomatch_number_set(number ) {}
                        
                        void select_12_input_number_set(number v) {
                            if (v == this->select_12_test1)
                                this->select_12_match1_bang();
                            else if (v == this->select_12_test2)
                                this->select_12_match2_bang();
                            else if (v == this->select_12_test3)
                                this->select_12_match3_bang();
                            else if (v == this->select_12_test4)
                                this->select_12_match4_bang();
                            else if (v == this->select_12_test5)
                                this->select_12_match5_bang();
                            else if (v == this->select_12_test6)
                                this->select_12_match6_bang();
                            else if (v == this->select_12_test7)
                                this->select_12_match7_bang();
                            else if (v == this->select_12_test8)
                                this->select_12_match8_bang();
                            else if (v == this->select_12_test9)
                                this->select_12_match9_bang();
                            else if (v == this->select_12_test10)
                                this->select_12_match10_bang();
                            else if (v == this->select_12_test11)
                                this->select_12_match11_bang();
                            else if (v == this->select_12_test12)
                                this->select_12_match12_bang();
                            else if (v == this->select_12_test13)
                                this->select_12_match13_bang();
                            else if (v == this->select_12_test14)
                                this->select_12_match14_bang();
                            else if (v == this->select_12_test15)
                                this->select_12_match15_bang();
                            else
                                this->select_12_nomatch_number_set(v);
                        }
                        
                        void uzi_10_index_set(number v) {
                            this->numberobj_53_value_set(v);
                            this->select_12_input_number_set(v);
                        }
                        
                        void uzi_10_out_bang() {}
                        
                        void uzi_10_carry_bang() {}
                        
                        void uzi_10_start_bang_bang() {
                            this->uzi_10_gobang(0);
                        }
                        
                        void button_22_output_bang() {
                            this->uzi_10_start_bang_bang();
                        }
                        
                        void button_22_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/button_obj-18"),
                                this->_currentTime
                            );;
                        
                            this->button_22_output_bang();
                        }
                        
                        void eventinlet_24_out1_bang_bang() {
                            this->button_22_bangval_bang();
                        }
                        
                        void message_136_set_set(const list& v) {
                            this->message_136_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-91"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_137_set_set(const list& v) {
                            this->message_137_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-37"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_138_set_set(const list& v) {
                            this->message_138_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-28"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_139_set_set(const list& v) {
                            this->message_139_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-93"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_140_set_set(const list& v) {
                            this->message_140_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-26"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_141_set_set(const list& v) {
                            this->message_141_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-40"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_141_out_set(const list& ) {}
                        
                        void message_141_trigger_bang() {
                            this->message_141_out_set(this->message_141_set);
                        }
                        
                        void message_142_set_set(const list& v) {
                            this->message_142_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-23"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_143_set_set(const list& v) {
                            this->message_143_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-22"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_144_set_set(const list& v) {
                            this->message_144_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-17"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_145_set_set(const list& v) {
                            this->message_145_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-16"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_146_set_set(const list& v) {
                            this->message_146_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-6"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_147_set_set(const list& v) {
                            this->message_147_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-97"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_148_set_set(const list& v) {
                            this->message_148_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-10"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_149_set_set(const list& v) {
                            this->message_149_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-5"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_150_set_set(const list& v) {
                            this->message_150_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-4"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_151_set_set(const list& v) {
                            this->message_151_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VI-7ChordScale/message_obj-3"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_53_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_53_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_53_value = localvalue;
                        }
                        
                        void uzi_10_gobang(number start) {
                            this->uzi_10_doPause = 0;
                            this->uzi_10_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_10_count; i++) {
                                if ((bool)(this->uzi_10_doPause)) {
                                    this->uzi_10_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_10_index_set(i + this->uzi_10_base);
                                    this->uzi_10_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_10_carry_bang();
                        }
                        
                        void message_136_init() {
                            this->message_136_set_set({0, 1, 1, 2, 2, 2, 4});
                        }
                        
                        void numberobj_53_init() {
                            this->numberobj_53_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/VI-7ChordScale/number_obj-103"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_53_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_53_value;
                        }
                        
                        void numberobj_53_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_53_value_set(preset["value"]);
                        }
                        
                        void message_137_init() {
                            this->message_137_set_set({0, 1, 2, 2, 4, 4, 5});
                        }
                        
                        void message_138_init() {
                            this->message_138_set_set({0, 1, 1, 2, 4, 4, 4, 5, 6});
                        }
                        
                        void message_139_init() {
                            this->message_139_set_set({2, 4});
                        }
                        
                        void message_140_init() {
                            this->message_140_set_set({1, 2, 2, 4, 5, 5, 5, 5, 6, 6, 6, 7});
                        }
                        
                        void message_141_init() {
                            this->message_141_set_set({0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12});
                        }
                        
                        void message_142_init() {
                            this->message_142_set_set({1, 2, 4, 4, 4, 5, 6, 7, 7, 7, 8});
                        }
                        
                        void message_143_init() {
                            this->message_143_set_set({4, 4, 4, 5, 5, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9});
                        }
                        
                        void message_144_init() {
                            this->message_144_set_set({4, 5, 5, 5, 6, 7, 8, 8, 9, 9});
                        }
                        
                        void message_145_init() {
                            this->message_145_set_set({5, 6, 6, 6, 7, 9, 9, 11, 11, 11, 11, 12});
                        }
                        
                        void message_146_init() {
                            this->message_146_set_set({6, 7, 7, 8, 8, 9, 11, 11, 11, 11, 12, 12, 13});
                        }
                        
                        void message_147_init() {
                            this->message_147_set_set({9, 11});
                        }
                        
                        void message_148_init() {
                            this->message_148_set_set({8, 9, 9, 11, 12, 12, 12, 12, 13, 13, 14});
                        }
                        
                        void message_149_init() {
                            this->message_149_set_set({9, 11, 12, 13, 13, 13, 14});
                        }
                        
                        void message_150_init() {
                            this->message_150_set_set({11, 12, 12, 12, 13, 14, 14});
                        }
                        
                        void message_151_init() {
                            this->message_151_set_set({11, 12, 12, 12, 12, 12, 13, 13, 13, 14});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            uzi_10_start_number = 0;
                            uzi_10_count = 15;
                            uzi_10_base = 0;
                            select_12_test1 = 0;
                            select_12_test2 = 1;
                            select_12_test3 = 2;
                            select_12_test4 = 3;
                            select_12_test5 = 4;
                            select_12_test6 = 5;
                            select_12_test7 = 6;
                            select_12_test8 = 7;
                            select_12_test9 = 8;
                            select_12_test10 = 9;
                            select_12_test11 = 10;
                            select_12_test12 = 11;
                            select_12_test13 = 12;
                            select_12_test14 = 13;
                            select_12_test15 = 14;
                            numberobj_53_value = 0;
                            numberobj_53_value_setter(numberobj_53_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            uzi_10_doPause = 0;
                            uzi_10_pausecount = 0;
                            numberobj_53_currentFormat = 6;
                            numberobj_53_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number uzi_10_start_number;
                            number uzi_10_count;
                            number uzi_10_base;
                            list message_136_set;
                            number select_12_test1;
                            number select_12_test2;
                            number select_12_test3;
                            number select_12_test4;
                            number select_12_test5;
                            number select_12_test6;
                            number select_12_test7;
                            number select_12_test8;
                            number select_12_test9;
                            number select_12_test10;
                            number select_12_test11;
                            number select_12_test12;
                            number select_12_test13;
                            number select_12_test14;
                            number select_12_test15;
                            number numberobj_53_value;
                            list message_137_set;
                            list message_138_set;
                            list message_139_set;
                            list message_140_set;
                            list message_141_set;
                            list message_142_set;
                            list message_143_set;
                            list message_144_set;
                            list message_145_set;
                            list message_146_set;
                            list message_147_set;
                            list message_148_set;
                            list message_149_set;
                            list message_150_set;
                            list message_151_set;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number uzi_10_doPause;
                            long uzi_10_pausecount;
                            Int numberobj_53_currentFormat;
                            number numberobj_53_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_161 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_167;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_161()
                        {
                        }
                        
                        ~RNBOSubpatcher_161()
                        {
                        }
                        
                        virtual RNBOSubpatcher_167* getPatcher() const {
                            return static_cast<RNBOSubpatcher_167 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                            getEngine()->flushClockEvents(this, -871642103, false);
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                            RNBO_UNUSED(value);
                            RNBO_UNUSED(hasValue);
                            this->updateTime(time);
                        
                            switch (index) {
                            case -871642103:
                                {
                                this->loadbang_09_startupbang_bang();
                                break;
                                }
                            }
                        }
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-91") == objectId)
                                    this->message_152_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-37") == objectId)
                                    this->message_153_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-28") == objectId)
                                    this->message_154_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-39") == objectId)
                                    this->message_155_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-79") == objectId)
                                    this->message_156_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-80") == objectId)
                                    this->message_157_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-23") == objectId)
                                    this->message_158_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-82") == objectId)
                                    this->message_159_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-17") == objectId)
                                    this->message_160_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-16") == objectId)
                                    this->message_161_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-6") == objectId)
                                    this->message_162_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-76") == objectId)
                                    this->message_163_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-86") == objectId)
                                    this->message_164_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-5") == objectId)
                                    this->message_165_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-84") == objectId)
                                    this->message_166_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-3") == objectId)
                                    this->message_167_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/NextNote/II-7ChordScale/number_obj-87") == objectId)
                                    this->numberobj_54_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/NextNote/II-7ChordScale/number_obj-87") == objectId)
                                    this->numberobj_54_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-91") == objectId)
                                    this->message_152_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-37") == objectId)
                                    this->message_153_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-28") == objectId)
                                    this->message_154_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-39") == objectId)
                                    this->message_155_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-79") == objectId)
                                    this->message_156_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-80") == objectId)
                                    this->message_157_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-23") == objectId)
                                    this->message_158_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-82") == objectId)
                                    this->message_159_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-17") == objectId)
                                    this->message_160_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-16") == objectId)
                                    this->message_161_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-6") == objectId)
                                    this->message_162_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-76") == objectId)
                                    this->message_163_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-86") == objectId)
                                    this->message_164_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-5") == objectId)
                                    this->message_165_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-84") == objectId)
                                    this->message_166_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-3") == objectId)
                                    this->message_167_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("startupbang"):
                                {
                                if (TAG("Melodies/NextNote/II-7ChordScale/loadbang_obj-53") == objectId)
                                    this->loadbang_09_startupbang_bang();
                        
                                break;
                                }
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/NextNote/II-7ChordScale/button_obj-54") == objectId)
                                    this->button_23_bangin_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-91") == objectId)
                                    this->message_152_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-37") == objectId)
                                    this->message_153_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-28") == objectId)
                                    this->message_154_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-39") == objectId)
                                    this->message_155_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-79") == objectId)
                                    this->message_156_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-80") == objectId)
                                    this->message_157_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-23") == objectId)
                                    this->message_158_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-82") == objectId)
                                    this->message_159_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-17") == objectId)
                                    this->message_160_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-16") == objectId)
                                    this->message_161_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-6") == objectId)
                                    this->message_162_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-76") == objectId)
                                    this->message_163_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-86") == objectId)
                                    this->message_164_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-5") == objectId)
                                    this->message_165_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-84") == objectId)
                                    this->message_166_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/II-7ChordScale/message_obj-3") == objectId)
                                    this->message_167_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/button_obj-54"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/button_obj-54";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-91"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-91";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-37"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-37";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-28"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-28";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/number_obj-87"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/number_obj-87";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-39"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-39";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-79"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-79";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-80"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-80";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-23"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-23";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-82"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-82";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-17"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-17";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-16"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-16";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-6"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-6";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-76"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-76";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-86"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-86";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-5"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-5";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-84"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-84";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/message_obj-3"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/message_obj-3";
                                }
                            case TAG("startupbang"):
                                {
                                return "startupbang";
                                }
                            case TAG("Melodies/NextNote/II-7ChordScale/loadbang_obj-53"):
                                {
                                return "Melodies/NextNote/II-7ChordScale/loadbang_obj-53";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void loadbang_09_startupbang_bang() {
                            this->loadbang_09_output_bang();
                        }
                        
                        void button_23_bangin_bang() {
                            this->button_23_bangval_bang();
                        }
                        
                        void message_152_listin_list_set(const list& v) {
                            this->message_152_set_set(v);
                        }
                        
                        void message_152_listin_number_set(number v) {
                            this->message_152_set_set(v);
                        }
                        
                        void message_152_listin_bang_bang() {
                            this->message_152_trigger_bang();
                        }
                        
                        void message_153_listin_list_set(const list& v) {
                            this->message_153_set_set(v);
                        }
                        
                        void message_153_listin_number_set(number v) {
                            this->message_153_set_set(v);
                        }
                        
                        void message_153_listin_bang_bang() {
                            this->message_153_trigger_bang();
                        }
                        
                        void message_154_listin_list_set(const list& v) {
                            this->message_154_set_set(v);
                        }
                        
                        void message_154_listin_number_set(number v) {
                            this->message_154_set_set(v);
                        }
                        
                        void message_154_listin_bang_bang() {
                            this->message_154_trigger_bang();
                        }
                        
                        void numberobj_54_valin_set(number v) {
                            this->numberobj_54_value_set(v);
                        }
                        
                        void numberobj_54_format_set(number v) {
                            this->numberobj_54_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_155_listin_list_set(const list& v) {
                            this->message_155_set_set(v);
                        }
                        
                        void message_155_listin_number_set(number v) {
                            this->message_155_set_set(v);
                        }
                        
                        void message_155_listin_bang_bang() {
                            this->message_155_trigger_bang();
                        }
                        
                        void message_156_listin_list_set(const list& v) {
                            this->message_156_set_set(v);
                        }
                        
                        void message_156_listin_number_set(number v) {
                            this->message_156_set_set(v);
                        }
                        
                        void message_156_listin_bang_bang() {
                            this->message_156_trigger_bang();
                        }
                        
                        void message_157_listin_list_set(const list& v) {
                            this->message_157_set_set(v);
                        }
                        
                        void message_157_listin_number_set(number v) {
                            this->message_157_set_set(v);
                        }
                        
                        void message_157_listin_bang_bang() {
                            this->message_157_trigger_bang();
                        }
                        
                        void message_158_listin_list_set(const list& v) {
                            this->message_158_set_set(v);
                        }
                        
                        void message_158_listin_number_set(number v) {
                            this->message_158_set_set(v);
                        }
                        
                        void message_158_listin_bang_bang() {
                            this->message_158_trigger_bang();
                        }
                        
                        void message_159_listin_list_set(const list& v) {
                            this->message_159_set_set(v);
                        }
                        
                        void message_159_listin_number_set(number v) {
                            this->message_159_set_set(v);
                        }
                        
                        void message_159_listin_bang_bang() {
                            this->message_159_trigger_bang();
                        }
                        
                        void message_160_listin_list_set(const list& v) {
                            this->message_160_set_set(v);
                        }
                        
                        void message_160_listin_number_set(number v) {
                            this->message_160_set_set(v);
                        }
                        
                        void message_160_listin_bang_bang() {
                            this->message_160_trigger_bang();
                        }
                        
                        void message_161_listin_list_set(const list& v) {
                            this->message_161_set_set(v);
                        }
                        
                        void message_161_listin_number_set(number v) {
                            this->message_161_set_set(v);
                        }
                        
                        void message_161_listin_bang_bang() {
                            this->message_161_trigger_bang();
                        }
                        
                        void message_162_listin_list_set(const list& v) {
                            this->message_162_set_set(v);
                        }
                        
                        void message_162_listin_number_set(number v) {
                            this->message_162_set_set(v);
                        }
                        
                        void message_162_listin_bang_bang() {
                            this->message_162_trigger_bang();
                        }
                        
                        void message_163_listin_list_set(const list& v) {
                            this->message_163_set_set(v);
                        }
                        
                        void message_163_listin_number_set(number v) {
                            this->message_163_set_set(v);
                        }
                        
                        void message_163_listin_bang_bang() {
                            this->message_163_trigger_bang();
                        }
                        
                        void message_164_listin_list_set(const list& v) {
                            this->message_164_set_set(v);
                        }
                        
                        void message_164_listin_number_set(number v) {
                            this->message_164_set_set(v);
                        }
                        
                        void message_164_listin_bang_bang() {
                            this->message_164_trigger_bang();
                        }
                        
                        void message_165_listin_list_set(const list& v) {
                            this->message_165_set_set(v);
                        }
                        
                        void message_165_listin_number_set(number v) {
                            this->message_165_set_set(v);
                        }
                        
                        void message_165_listin_bang_bang() {
                            this->message_165_trigger_bang();
                        }
                        
                        void message_166_listin_list_set(const list& v) {
                            this->message_166_set_set(v);
                        }
                        
                        void message_166_listin_number_set(number v) {
                            this->message_166_set_set(v);
                        }
                        
                        void message_166_listin_bang_bang() {
                            this->message_166_trigger_bang();
                        }
                        
                        void message_167_listin_list_set(const list& v) {
                            this->message_167_set_set(v);
                        }
                        
                        void message_167_listin_number_set(number v) {
                            this->message_167_set_set(v);
                        }
                        
                        void message_167_listin_bang_bang() {
                            this->message_167_trigger_bang();
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_152_init();
                            this->message_153_init();
                            this->message_154_init();
                            this->numberobj_54_init();
                            this->message_155_init();
                            this->message_156_init();
                            this->message_157_init();
                            this->message_158_init();
                            this->message_159_init();
                            this->message_160_init();
                            this->message_161_init();
                            this->message_162_init();
                            this->message_163_init();
                            this->message_164_init();
                            this->message_165_init();
                            this->message_166_init();
                            this->message_167_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
                        }
                        
                        void allocateDataRefs() {}
                        
                        void eventoutlet_25_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_21_out2_number_set(v);
                        }
                        
                        void numberobj_54_output_set(number v) {
                            this->eventoutlet_25_in1_number_set(v);
                        }
                        
                        void numberobj_54_value_set(number v) {
                            this->numberobj_54_value_setter(v);
                            v = this->numberobj_54_value;
                            number localvalue = v;
                        
                            if (this->numberobj_54_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/II-7ChordScale/number_obj-87"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_54_output_set(localvalue);
                        }
                        
                        void eventoutlet_24_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_21_out1_list_set((list)v);
                        }
                        
                        void message_152_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_152_trigger_bang() {
                            this->message_152_out_set(this->message_152_set);
                        }
                        
                        void select_13_match1_bang() {
                            this->message_152_trigger_bang();
                        }
                        
                        void message_153_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_153_trigger_bang() {
                            this->message_153_out_set(this->message_153_set);
                        }
                        
                        void select_13_match2_bang() {
                            this->message_153_trigger_bang();
                        }
                        
                        void message_154_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_154_trigger_bang() {
                            this->message_154_out_set(this->message_154_set);
                        }
                        
                        void select_13_match3_bang() {
                            this->message_154_trigger_bang();
                        }
                        
                        void message_155_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_155_trigger_bang() {
                            this->message_155_out_set(this->message_155_set);
                        }
                        
                        void select_13_match4_bang() {
                            this->message_155_trigger_bang();
                        }
                        
                        void message_156_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_156_trigger_bang() {
                            this->message_156_out_set(this->message_156_set);
                        }
                        
                        void select_13_match5_bang() {
                            this->message_156_trigger_bang();
                        }
                        
                        void message_158_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_158_trigger_bang() {
                            this->message_158_out_set(this->message_158_set);
                        }
                        
                        void select_13_match6_bang() {
                            this->message_158_trigger_bang();
                        }
                        
                        void message_159_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_159_trigger_bang() {
                            this->message_159_out_set(this->message_159_set);
                        }
                        
                        void select_13_match7_bang() {
                            this->message_159_trigger_bang();
                        }
                        
                        void message_160_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_160_trigger_bang() {
                            this->message_160_out_set(this->message_160_set);
                        }
                        
                        void select_13_match8_bang() {
                            this->message_160_trigger_bang();
                        }
                        
                        void message_161_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_161_trigger_bang() {
                            this->message_161_out_set(this->message_161_set);
                        }
                        
                        void select_13_match9_bang() {
                            this->message_161_trigger_bang();
                        }
                        
                        void message_162_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_162_trigger_bang() {
                            this->message_162_out_set(this->message_162_set);
                        }
                        
                        void select_13_match10_bang() {
                            this->message_162_trigger_bang();
                        }
                        
                        void message_163_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_163_trigger_bang() {
                            this->message_163_out_set(this->message_163_set);
                        }
                        
                        void select_13_match11_bang() {
                            this->message_163_trigger_bang();
                        }
                        
                        void message_164_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_164_trigger_bang() {
                            this->message_164_out_set(this->message_164_set);
                        }
                        
                        void select_13_match12_bang() {
                            this->message_164_trigger_bang();
                        }
                        
                        void message_165_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_165_trigger_bang() {
                            this->message_165_out_set(this->message_165_set);
                        }
                        
                        void select_13_match13_bang() {
                            this->message_165_trigger_bang();
                        }
                        
                        void message_166_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_166_trigger_bang() {
                            this->message_166_out_set(this->message_166_set);
                        }
                        
                        void select_13_match14_bang() {
                            this->message_166_trigger_bang();
                        }
                        
                        void message_167_out_set(const list& v) {
                            this->eventoutlet_24_in1_list_set(v);
                        }
                        
                        void message_167_trigger_bang() {
                            this->message_167_out_set(this->message_167_set);
                        }
                        
                        void select_13_match15_bang() {
                            this->message_167_trigger_bang();
                        }
                        
                        void select_13_nomatch_number_set(number ) {}
                        
                        void select_13_input_number_set(number v) {
                            if (v == this->select_13_test1)
                                this->select_13_match1_bang();
                            else if (v == this->select_13_test2)
                                this->select_13_match2_bang();
                            else if (v == this->select_13_test3)
                                this->select_13_match3_bang();
                            else if (v == this->select_13_test4)
                                this->select_13_match4_bang();
                            else if (v == this->select_13_test5)
                                this->select_13_match5_bang();
                            else if (v == this->select_13_test6)
                                this->select_13_match6_bang();
                            else if (v == this->select_13_test7)
                                this->select_13_match7_bang();
                            else if (v == this->select_13_test8)
                                this->select_13_match8_bang();
                            else if (v == this->select_13_test9)
                                this->select_13_match9_bang();
                            else if (v == this->select_13_test10)
                                this->select_13_match10_bang();
                            else if (v == this->select_13_test11)
                                this->select_13_match11_bang();
                            else if (v == this->select_13_test12)
                                this->select_13_match12_bang();
                            else if (v == this->select_13_test13)
                                this->select_13_match13_bang();
                            else if (v == this->select_13_test14)
                                this->select_13_match14_bang();
                            else if (v == this->select_13_test15)
                                this->select_13_match15_bang();
                            else
                                this->select_13_nomatch_number_set(v);
                        }
                        
                        void uzi_11_index_set(number v) {
                            this->numberobj_54_value_set(v);
                            this->select_13_input_number_set(v);
                        }
                        
                        void uzi_11_out_bang() {}
                        
                        void uzi_11_carry_bang() {}
                        
                        void uzi_11_start_bang_bang() {
                            this->uzi_11_gobang(0);
                        }
                        
                        void loadbang_09_output_bang() {
                            this->uzi_11_start_bang_bang();
                        }
                        
                        void loadbang_09_input_bang() {
                            this->loadbang_09_output_bang();
                        }
                        
                        void button_23_output_bang() {
                            this->loadbang_09_input_bang();
                        }
                        
                        void button_23_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/NextNote/II-7ChordScale/button_obj-54"),
                                this->_currentTime
                            );;
                        
                            this->button_23_output_bang();
                        }
                        
                        void message_152_set_set(const list& v) {
                            this->message_152_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-91"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_153_set_set(const list& v) {
                            this->message_153_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-37"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_154_set_set(const list& v) {
                            this->message_154_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-28"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_155_set_set(const list& v) {
                            this->message_155_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-39"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_156_set_set(const list& v) {
                            this->message_156_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-79"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_157_set_set(const list& v) {
                            this->message_157_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-80"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_157_out_set(const list& ) {}
                        
                        void message_157_trigger_bang() {
                            this->message_157_out_set(this->message_157_set);
                        }
                        
                        void message_158_set_set(const list& v) {
                            this->message_158_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-23"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_159_set_set(const list& v) {
                            this->message_159_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-82"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_160_set_set(const list& v) {
                            this->message_160_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-17"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_161_set_set(const list& v) {
                            this->message_161_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-16"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_162_set_set(const list& v) {
                            this->message_162_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-6"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_163_set_set(const list& v) {
                            this->message_163_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-76"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_164_set_set(const list& v) {
                            this->message_164_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-86"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_165_set_set(const list& v) {
                            this->message_165_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-5"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_166_set_set(const list& v) {
                            this->message_166_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-84"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_167_set_set(const list& v) {
                            this->message_167_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/II-7ChordScale/message_obj-3"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_54_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_54_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_54_value = localvalue;
                        }
                        
                        void uzi_11_gobang(number start) {
                            this->uzi_11_doPause = 0;
                            this->uzi_11_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_11_count; i++) {
                                if ((bool)(this->uzi_11_doPause)) {
                                    this->uzi_11_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_11_index_set(i + this->uzi_11_base);
                                    this->uzi_11_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_11_carry_bang();
                        }
                        
                        void message_152_init() {
                            this->message_152_set_set({0, 1, 1, 1, 1, 2, 2, 3});
                        }
                        
                        void message_153_init() {
                            this->message_153_set_set({0, 0, 1, 2, 2, 2, 3, 3, 4});
                        }
                        
                        void message_154_init() {
                            this->message_154_set_set({0, 1, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5});
                        }
                        
                        void numberobj_54_init() {
                            this->numberobj_54_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/II-7ChordScale/number_obj-87"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_54_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_54_value;
                        }
                        
                        void numberobj_54_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_54_value_set(preset["value"]);
                        }
                        
                        void message_155_init() {
                            this->message_155_set_set({1, 2, 2, 2, 3, 4, 4, 4, 5, 5});
                        }
                        
                        void message_156_init() {
                            this->message_156_set_set({1, 1, 2, 3, 3, 3, 4, 5, 5, 5, 7});
                        }
                        
                        void message_157_init() {
                            this->message_157_set_set({0, 1, 2, 3, 4, 5, 7, 8});
                        }
                        
                        void message_158_init() {
                            this->message_158_set_set({1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 7, 7, 7, 8});
                        }
                        
                        void message_159_init() {
                            this->message_159_set_set({5, 7});
                        }
                        
                        void message_160_init() {
                            this->message_160_set_set({4, 5, 5, 7, 8, 8, 8, 8, 8, 9, 9, 9, 10});
                        }
                        
                        void message_161_init() {
                            this->message_161_set_set({5, 7, 7, 8, 9, 9, 9, 10, 10, 10, 11});
                        }
                        
                        void message_162_init() {
                            this->message_162_set_set({7, 7, 8, 8, 8, 8, 8, 9, 10, 10, 10, 11, 11, 12});
                        }
                        
                        void message_163_init() {
                            this->message_163_set_set({7, 8, 8, 8, 9, 9, 9, 9, 10, 11, 11, 11, 12});
                        }
                        
                        void message_164_init() {
                            this->message_164_set_set({8, 9, 9, 10, 10, 10, 11, 11, 12, 12, 14, 14, 14});
                        }
                        
                        void message_165_init() {
                            this->message_165_set_set({9, 10, 10, 11, 11, 11, 12, 14});
                        }
                        
                        void message_166_init() {
                            this->message_166_set_set({12, 14});
                        }
                        
                        void message_167_init() {
                            this->message_167_set_set({10, 11, 11, 12, 12, 12});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            uzi_11_start_number = 0;
                            uzi_11_count = 15;
                            uzi_11_base = 0;
                            select_13_test1 = 0;
                            select_13_test2 = 1;
                            select_13_test3 = 2;
                            select_13_test4 = 3;
                            select_13_test5 = 4;
                            select_13_test6 = 5;
                            select_13_test7 = 6;
                            select_13_test8 = 7;
                            select_13_test9 = 8;
                            select_13_test10 = 9;
                            select_13_test11 = 10;
                            select_13_test12 = 11;
                            select_13_test13 = 12;
                            select_13_test14 = 13;
                            select_13_test15 = 14;
                            numberobj_54_value = 0;
                            numberobj_54_value_setter(numberobj_54_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            uzi_11_doPause = 0;
                            uzi_11_pausecount = 0;
                            numberobj_54_currentFormat = 6;
                            numberobj_54_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number uzi_11_start_number;
                            number uzi_11_count;
                            number uzi_11_base;
                            list message_152_set;
                            number select_13_test1;
                            number select_13_test2;
                            number select_13_test3;
                            number select_13_test4;
                            number select_13_test5;
                            number select_13_test6;
                            number select_13_test7;
                            number select_13_test8;
                            number select_13_test9;
                            number select_13_test10;
                            number select_13_test11;
                            number select_13_test12;
                            number select_13_test13;
                            number select_13_test14;
                            number select_13_test15;
                            list message_153_set;
                            list message_154_set;
                            number numberobj_54_value;
                            list message_155_set;
                            list message_156_set;
                            list message_157_set;
                            list message_158_set;
                            list message_159_set;
                            list message_160_set;
                            list message_161_set;
                            list message_162_set;
                            list message_163_set;
                            list message_164_set;
                            list message_165_set;
                            list message_166_set;
                            list message_167_set;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number uzi_11_doPause;
                            long uzi_11_pausecount;
                            Int numberobj_54_currentFormat;
                            number numberobj_54_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_162 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_167;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_162()
                        {
                        }
                        
                        ~RNBOSubpatcher_162()
                        {
                        }
                        
                        virtual RNBOSubpatcher_167* getPatcher() const {
                            return static_cast<RNBOSubpatcher_167 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-77") == objectId)
                                    this->message_168_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-75") == objectId)
                                    this->message_169_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-67") == objectId)
                                    this->message_170_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-66") == objectId)
                                    this->message_171_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-64") == objectId)
                                    this->message_172_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-69") == objectId)
                                    this->message_173_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-62") == objectId)
                                    this->message_174_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-60") == objectId)
                                    this->message_175_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-52") == objectId)
                                    this->message_176_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-51") == objectId)
                                    this->message_177_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-41") == objectId)
                                    this->message_178_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-24") == objectId)
                                    this->message_179_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-45") == objectId)
                                    this->message_180_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-36") == objectId)
                                    this->message_181_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-34") == objectId)
                                    this->message_182_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-33") == objectId)
                                    this->message_183_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/number_obj-2") == objectId)
                                    this->numberobj_55_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/number_obj-2") == objectId)
                                    this->numberobj_55_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-77") == objectId)
                                    this->message_168_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-75") == objectId)
                                    this->message_169_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-67") == objectId)
                                    this->message_170_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-66") == objectId)
                                    this->message_171_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-64") == objectId)
                                    this->message_172_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-69") == objectId)
                                    this->message_173_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-62") == objectId)
                                    this->message_174_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-60") == objectId)
                                    this->message_175_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-52") == objectId)
                                    this->message_176_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-51") == objectId)
                                    this->message_177_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-41") == objectId)
                                    this->message_178_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-24") == objectId)
                                    this->message_179_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-45") == objectId)
                                    this->message_180_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-36") == objectId)
                                    this->message_181_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-34") == objectId)
                                    this->message_182_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-33") == objectId)
                                    this->message_183_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/button_obj-54") == objectId)
                                    this->button_24_bangin_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-77") == objectId)
                                    this->message_168_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-75") == objectId)
                                    this->message_169_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-67") == objectId)
                                    this->message_170_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-66") == objectId)
                                    this->message_171_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-64") == objectId)
                                    this->message_172_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-69") == objectId)
                                    this->message_173_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-62") == objectId)
                                    this->message_174_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-60") == objectId)
                                    this->message_175_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-52") == objectId)
                                    this->message_176_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-51") == objectId)
                                    this->message_177_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-41") == objectId)
                                    this->message_178_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-24") == objectId)
                                    this->message_179_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-45") == objectId)
                                    this->message_180_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-36") == objectId)
                                    this->message_181_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-34") == objectId)
                                    this->message_182_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-33") == objectId)
                                    this->message_183_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/button_obj-54"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/button_obj-54";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-77"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-77";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-75"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-75";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/number_obj-2"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/number_obj-2";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-67"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-67";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-66"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-66";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-64"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-64";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-69"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-69";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-62"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-62";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-60"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-60";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-52"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-52";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-51"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-51";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-41"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-41";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-24"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-24";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-45"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-45";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-36"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-36";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-34"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-34";
                                }
                            case TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-33"):
                                {
                                return "Melodies/NextNote/IVmaj7ChordScale/message_obj-33";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_25_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->button_24_bangval_bang();
                        }
                        
                        void eventinlet_25_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->button_24_bangval_bang();
                        }
                        
                        void button_24_bangin_bang() {
                            this->button_24_bangval_bang();
                        }
                        
                        void message_168_listin_list_set(const list& v) {
                            this->message_168_set_set(v);
                        }
                        
                        void message_168_listin_number_set(number v) {
                            this->message_168_set_set(v);
                        }
                        
                        void message_168_listin_bang_bang() {
                            this->message_168_trigger_bang();
                        }
                        
                        void message_169_listin_list_set(const list& v) {
                            this->message_169_set_set(v);
                        }
                        
                        void message_169_listin_number_set(number v) {
                            this->message_169_set_set(v);
                        }
                        
                        void message_169_listin_bang_bang() {
                            this->message_169_trigger_bang();
                        }
                        
                        void numberobj_55_valin_set(number v) {
                            this->numberobj_55_value_set(v);
                        }
                        
                        void numberobj_55_format_set(number v) {
                            this->numberobj_55_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_170_listin_list_set(const list& v) {
                            this->message_170_set_set(v);
                        }
                        
                        void message_170_listin_number_set(number v) {
                            this->message_170_set_set(v);
                        }
                        
                        void message_170_listin_bang_bang() {
                            this->message_170_trigger_bang();
                        }
                        
                        void message_171_listin_list_set(const list& v) {
                            this->message_171_set_set(v);
                        }
                        
                        void message_171_listin_number_set(number v) {
                            this->message_171_set_set(v);
                        }
                        
                        void message_171_listin_bang_bang() {
                            this->message_171_trigger_bang();
                        }
                        
                        void message_172_listin_list_set(const list& v) {
                            this->message_172_set_set(v);
                        }
                        
                        void message_172_listin_number_set(number v) {
                            this->message_172_set_set(v);
                        }
                        
                        void message_172_listin_bang_bang() {
                            this->message_172_trigger_bang();
                        }
                        
                        void message_173_listin_list_set(const list& v) {
                            this->message_173_set_set(v);
                        }
                        
                        void message_173_listin_number_set(number v) {
                            this->message_173_set_set(v);
                        }
                        
                        void message_173_listin_bang_bang() {
                            this->message_173_trigger_bang();
                        }
                        
                        void message_174_listin_list_set(const list& v) {
                            this->message_174_set_set(v);
                        }
                        
                        void message_174_listin_number_set(number v) {
                            this->message_174_set_set(v);
                        }
                        
                        void message_174_listin_bang_bang() {
                            this->message_174_trigger_bang();
                        }
                        
                        void message_175_listin_list_set(const list& v) {
                            this->message_175_set_set(v);
                        }
                        
                        void message_175_listin_number_set(number v) {
                            this->message_175_set_set(v);
                        }
                        
                        void message_175_listin_bang_bang() {
                            this->message_175_trigger_bang();
                        }
                        
                        void message_176_listin_list_set(const list& v) {
                            this->message_176_set_set(v);
                        }
                        
                        void message_176_listin_number_set(number v) {
                            this->message_176_set_set(v);
                        }
                        
                        void message_176_listin_bang_bang() {
                            this->message_176_trigger_bang();
                        }
                        
                        void message_177_listin_list_set(const list& v) {
                            this->message_177_set_set(v);
                        }
                        
                        void message_177_listin_number_set(number v) {
                            this->message_177_set_set(v);
                        }
                        
                        void message_177_listin_bang_bang() {
                            this->message_177_trigger_bang();
                        }
                        
                        void message_178_listin_list_set(const list& v) {
                            this->message_178_set_set(v);
                        }
                        
                        void message_178_listin_number_set(number v) {
                            this->message_178_set_set(v);
                        }
                        
                        void message_178_listin_bang_bang() {
                            this->message_178_trigger_bang();
                        }
                        
                        void message_179_listin_list_set(const list& v) {
                            this->message_179_set_set(v);
                        }
                        
                        void message_179_listin_number_set(number v) {
                            this->message_179_set_set(v);
                        }
                        
                        void message_179_listin_bang_bang() {
                            this->message_179_trigger_bang();
                        }
                        
                        void message_180_listin_list_set(const list& v) {
                            this->message_180_set_set(v);
                        }
                        
                        void message_180_listin_number_set(number v) {
                            this->message_180_set_set(v);
                        }
                        
                        void message_180_listin_bang_bang() {
                            this->message_180_trigger_bang();
                        }
                        
                        void message_181_listin_list_set(const list& v) {
                            this->message_181_set_set(v);
                        }
                        
                        void message_181_listin_number_set(number v) {
                            this->message_181_set_set(v);
                        }
                        
                        void message_181_listin_bang_bang() {
                            this->message_181_trigger_bang();
                        }
                        
                        void message_182_listin_list_set(const list& v) {
                            this->message_182_set_set(v);
                        }
                        
                        void message_182_listin_number_set(number v) {
                            this->message_182_set_set(v);
                        }
                        
                        void message_182_listin_bang_bang() {
                            this->message_182_trigger_bang();
                        }
                        
                        void message_183_listin_list_set(const list& v) {
                            this->message_183_set_set(v);
                        }
                        
                        void message_183_listin_number_set(number v) {
                            this->message_183_set_set(v);
                        }
                        
                        void message_183_listin_bang_bang() {
                            this->message_183_trigger_bang();
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_168_init();
                            this->message_169_init();
                            this->numberobj_55_init();
                            this->message_170_init();
                            this->message_171_init();
                            this->message_172_init();
                            this->message_173_init();
                            this->message_174_init();
                            this->message_175_init();
                            this->message_176_init();
                            this->message_177_init();
                            this->message_178_init();
                            this->message_179_init();
                            this->message_180_init();
                            this->message_181_init();
                            this->message_182_init();
                            this->message_183_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void eventoutlet_27_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_22_out2_number_set(v);
                        }
                        
                        void numberobj_55_output_set(number v) {
                            this->eventoutlet_27_in1_number_set(v);
                        }
                        
                        void numberobj_55_value_set(number v) {
                            this->numberobj_55_value_setter(v);
                            v = this->numberobj_55_value;
                            number localvalue = v;
                        
                            if (this->numberobj_55_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_55_output_set(localvalue);
                        }
                        
                        void eventoutlet_26_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_22_out1_list_set((list)v);
                        }
                        
                        void message_168_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_168_trigger_bang() {
                            this->message_168_out_set(this->message_168_set);
                        }
                        
                        void select_14_match1_bang() {
                            this->message_168_trigger_bang();
                        }
                        
                        void message_169_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_169_trigger_bang() {
                            this->message_169_out_set(this->message_169_set);
                        }
                        
                        void select_14_match2_bang() {
                            this->message_169_trigger_bang();
                        }
                        
                        void message_170_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_170_trigger_bang() {
                            this->message_170_out_set(this->message_170_set);
                        }
                        
                        void select_14_match3_bang() {
                            this->message_170_trigger_bang();
                        }
                        
                        void message_171_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_171_trigger_bang() {
                            this->message_171_out_set(this->message_171_set);
                        }
                        
                        void select_14_match4_bang() {
                            this->message_171_trigger_bang();
                        }
                        
                        void message_172_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_172_trigger_bang() {
                            this->message_172_out_set(this->message_172_set);
                        }
                        
                        void select_14_match5_bang() {
                            this->message_172_trigger_bang();
                        }
                        
                        void message_174_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_174_trigger_bang() {
                            this->message_174_out_set(this->message_174_set);
                        }
                        
                        void select_14_match6_bang() {
                            this->message_174_trigger_bang();
                        }
                        
                        void message_175_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_175_trigger_bang() {
                            this->message_175_out_set(this->message_175_set);
                        }
                        
                        void select_14_match7_bang() {
                            this->message_175_trigger_bang();
                        }
                        
                        void message_176_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_176_trigger_bang() {
                            this->message_176_out_set(this->message_176_set);
                        }
                        
                        void select_14_match8_bang() {
                            this->message_176_trigger_bang();
                        }
                        
                        void message_177_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_177_trigger_bang() {
                            this->message_177_out_set(this->message_177_set);
                        }
                        
                        void select_14_match9_bang() {
                            this->message_177_trigger_bang();
                        }
                        
                        void message_178_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_178_trigger_bang() {
                            this->message_178_out_set(this->message_178_set);
                        }
                        
                        void select_14_match10_bang() {
                            this->message_178_trigger_bang();
                        }
                        
                        void message_179_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_179_trigger_bang() {
                            this->message_179_out_set(this->message_179_set);
                        }
                        
                        void select_14_match11_bang() {
                            this->message_179_trigger_bang();
                        }
                        
                        void message_180_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_180_trigger_bang() {
                            this->message_180_out_set(this->message_180_set);
                        }
                        
                        void select_14_match12_bang() {
                            this->message_180_trigger_bang();
                        }
                        
                        void message_181_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_181_trigger_bang() {
                            this->message_181_out_set(this->message_181_set);
                        }
                        
                        void select_14_match13_bang() {
                            this->message_181_trigger_bang();
                        }
                        
                        void message_182_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_182_trigger_bang() {
                            this->message_182_out_set(this->message_182_set);
                        }
                        
                        void select_14_match14_bang() {
                            this->message_182_trigger_bang();
                        }
                        
                        void message_183_out_set(const list& v) {
                            this->eventoutlet_26_in1_list_set(v);
                        }
                        
                        void message_183_trigger_bang() {
                            this->message_183_out_set(this->message_183_set);
                        }
                        
                        void select_14_match15_bang() {
                            this->message_183_trigger_bang();
                        }
                        
                        void select_14_nomatch_number_set(number ) {}
                        
                        void select_14_input_number_set(number v) {
                            if (v == this->select_14_test1)
                                this->select_14_match1_bang();
                            else if (v == this->select_14_test2)
                                this->select_14_match2_bang();
                            else if (v == this->select_14_test3)
                                this->select_14_match3_bang();
                            else if (v == this->select_14_test4)
                                this->select_14_match4_bang();
                            else if (v == this->select_14_test5)
                                this->select_14_match5_bang();
                            else if (v == this->select_14_test6)
                                this->select_14_match6_bang();
                            else if (v == this->select_14_test7)
                                this->select_14_match7_bang();
                            else if (v == this->select_14_test8)
                                this->select_14_match8_bang();
                            else if (v == this->select_14_test9)
                                this->select_14_match9_bang();
                            else if (v == this->select_14_test10)
                                this->select_14_match10_bang();
                            else if (v == this->select_14_test11)
                                this->select_14_match11_bang();
                            else if (v == this->select_14_test12)
                                this->select_14_match12_bang();
                            else if (v == this->select_14_test13)
                                this->select_14_match13_bang();
                            else if (v == this->select_14_test14)
                                this->select_14_match14_bang();
                            else if (v == this->select_14_test15)
                                this->select_14_match15_bang();
                            else
                                this->select_14_nomatch_number_set(v);
                        }
                        
                        void uzi_12_index_set(number v) {
                            this->numberobj_55_value_set(v);
                            this->select_14_input_number_set(v);
                        }
                        
                        void uzi_12_out_bang() {}
                        
                        void uzi_12_carry_bang() {}
                        
                        void uzi_12_start_bang_bang() {
                            this->uzi_12_gobang(0);
                        }
                        
                        void button_24_output_bang() {
                            this->uzi_12_start_bang_bang();
                        }
                        
                        void button_24_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/button_obj-54"),
                                this->_currentTime
                            );;
                        
                            this->button_24_output_bang();
                        }
                        
                        void eventinlet_25_out1_bang_bang() {
                            this->button_24_bangval_bang();
                        }
                        
                        void message_168_set_set(const list& v) {
                            this->message_168_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-77"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_169_set_set(const list& v) {
                            this->message_169_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-75"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_170_set_set(const list& v) {
                            this->message_170_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-67"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_171_set_set(const list& v) {
                            this->message_171_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-66"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_172_set_set(const list& v) {
                            this->message_172_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-64"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_173_set_set(const list& v) {
                            this->message_173_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-69"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_173_out_set(const list& ) {}
                        
                        void message_173_trigger_bang() {
                            this->message_173_out_set(this->message_173_set);
                        }
                        
                        void message_174_set_set(const list& v) {
                            this->message_174_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-62"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_175_set_set(const list& v) {
                            this->message_175_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-60"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_176_set_set(const list& v) {
                            this->message_176_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-52"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_177_set_set(const list& v) {
                            this->message_177_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-51"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_178_set_set(const list& v) {
                            this->message_178_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-41"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_179_set_set(const list& v) {
                            this->message_179_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-24"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_180_set_set(const list& v) {
                            this->message_180_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-45"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_181_set_set(const list& v) {
                            this->message_181_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-36"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_182_set_set(const list& v) {
                            this->message_182_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-34"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_183_set_set(const list& v) {
                            this->message_183_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/message_obj-33"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_55_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_55_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_55_value = localvalue;
                        }
                        
                        void uzi_12_gobang(number start) {
                            this->uzi_12_doPause = 0;
                            this->uzi_12_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_12_count; i++) {
                                if ((bool)(this->uzi_12_doPause)) {
                                    this->uzi_12_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_12_index_set(i + this->uzi_12_base);
                                    this->uzi_12_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_12_carry_bang();
                        }
                        
                        void message_168_init() {
                            this->message_168_set_set({0, 1, 1, 2, 2, 3, 3});
                        }
                        
                        void message_169_init() {
                            this->message_169_set_set({0, 0, 1, 2, 2, 3, 3, 3, 4, 4});
                        }
                        
                        void numberobj_55_init() {
                            this->numberobj_55_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/IVmaj7ChordScale/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_55_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_55_value;
                        }
                        
                        void numberobj_55_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_55_value_set(preset["value"]);
                        }
                        
                        void message_170_init() {
                            this->message_170_set_set({1, 2, 3, 3, 3, 4, 4, 5});
                        }
                        
                        void message_171_init() {
                            this->message_171_set_set({1, 2, 2, 2, 3, 4, 4, 5, 6});
                        }
                        
                        void message_172_init() {
                            this->message_172_set_set({1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 7, 7});
                        }
                        
                        void message_173_init() {
                            this->message_173_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
                        }
                        
                        void message_174_init() {
                            this->message_174_set_set({2, 3, 3, 3, 3, 3, 4, 4, 5, 6, 7, 7, 7, 8});
                        }
                        
                        void message_175_init() {
                            this->message_175_set_set({3, 3, 4, 4, 4, 5, 5, 7, 7, 7, 6, 8, 8, 8, 9});
                        }
                        
                        void message_176_init() {
                            this->message_176_set_set({4, 5, 6, 6, 7, 8, 8, 9, 9, 9, 10, 10});
                        }
                        
                        void message_177_init() {
                            this->message_177_set_set({5, 6, 6, 6, 7, 8, 9, 9, 10, 10, 10, 10, 11, 11});
                        }
                        
                        void message_178_init() {
                            this->message_178_set_set({6, 7, 7, 8, 8, 9, 10, 10, 10, 1011, 11});
                        }
                        
                        void message_179_init() {
                            this->message_179_set_set({7, 8, 8, 9, 9, 9, 10, 11, 11, 11, 12});
                        }
                        
                        void message_180_init() {
                            this->message_180_set_set({8, 9, 9, 10, 10, 10, 11, 12, 12, 13, 13, 14});
                        }
                        
                        void message_181_init() {
                            this->message_181_set_set({9, 10, 10, 11, 11, 12, 13, 14, 14});
                        }
                        
                        void message_182_init() {
                            this->message_182_set_set({10, 10, 11, 12, 12, 13, 14, 14, 14});
                        }
                        
                        void message_183_init() {
                            this->message_183_set_set({11, 12, 12, 12, 13, 13, 14});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            uzi_12_start_number = 0;
                            uzi_12_count = 15;
                            uzi_12_base = 0;
                            select_14_test1 = 0;
                            select_14_test2 = 1;
                            select_14_test3 = 2;
                            select_14_test4 = 3;
                            select_14_test5 = 4;
                            select_14_test6 = 5;
                            select_14_test7 = 6;
                            select_14_test8 = 7;
                            select_14_test9 = 8;
                            select_14_test10 = 9;
                            select_14_test11 = 10;
                            select_14_test12 = 11;
                            select_14_test13 = 12;
                            select_14_test14 = 13;
                            select_14_test15 = 14;
                            numberobj_55_value = 0;
                            numberobj_55_value_setter(numberobj_55_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            uzi_12_doPause = 0;
                            uzi_12_pausecount = 0;
                            numberobj_55_currentFormat = 6;
                            numberobj_55_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number uzi_12_start_number;
                            number uzi_12_count;
                            number uzi_12_base;
                            number select_14_test1;
                            number select_14_test2;
                            number select_14_test3;
                            number select_14_test4;
                            number select_14_test5;
                            number select_14_test6;
                            number select_14_test7;
                            number select_14_test8;
                            number select_14_test9;
                            number select_14_test10;
                            number select_14_test11;
                            number select_14_test12;
                            number select_14_test13;
                            number select_14_test14;
                            number select_14_test15;
                            list message_168_set;
                            list message_169_set;
                            number numberobj_55_value;
                            list message_170_set;
                            list message_171_set;
                            list message_172_set;
                            list message_173_set;
                            list message_174_set;
                            list message_175_set;
                            list message_176_set;
                            list message_177_set;
                            list message_178_set;
                            list message_179_set;
                            list message_180_set;
                            list message_181_set;
                            list message_182_set;
                            list message_183_set;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number uzi_12_doPause;
                            long uzi_12_pausecount;
                            Int numberobj_55_currentFormat;
                            number numberobj_55_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_163 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_167;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_163()
                        {
                        }
                        
                        ~RNBOSubpatcher_163()
                        {
                        }
                        
                        virtual RNBOSubpatcher_167* getPatcher() const {
                            return static_cast<RNBOSubpatcher_167 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-171") == objectId)
                                    this->message_184_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-168") == objectId)
                                    this->message_185_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-163") == objectId)
                                    this->message_186_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-162") == objectId)
                                    this->message_187_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-160") == objectId)
                                    this->message_188_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-158") == objectId)
                                    this->message_189_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-39") == objectId)
                                    this->message_190_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-157") == objectId)
                                    this->message_191_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-173") == objectId)
                                    this->message_192_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-153") == objectId)
                                    this->message_193_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-143") == objectId)
                                    this->message_194_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-139") == objectId)
                                    this->message_195_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-147") == objectId)
                                    this->message_196_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-142") == objectId)
                                    this->message_197_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-141") == objectId)
                                    this->message_198_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-175") == objectId)
                                    this->message_199_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/number_obj-2") == objectId)
                                    this->numberobj_56_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/number_obj-2") == objectId)
                                    this->numberobj_56_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-171") == objectId)
                                    this->message_184_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-168") == objectId)
                                    this->message_185_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-163") == objectId)
                                    this->message_186_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-162") == objectId)
                                    this->message_187_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-160") == objectId)
                                    this->message_188_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-158") == objectId)
                                    this->message_189_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-39") == objectId)
                                    this->message_190_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-157") == objectId)
                                    this->message_191_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-173") == objectId)
                                    this->message_192_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-153") == objectId)
                                    this->message_193_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-143") == objectId)
                                    this->message_194_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-139") == objectId)
                                    this->message_195_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-147") == objectId)
                                    this->message_196_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-142") == objectId)
                                    this->message_197_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-141") == objectId)
                                    this->message_198_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-175") == objectId)
                                    this->message_199_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/button_obj-74") == objectId)
                                    this->button_25_bangin_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-171") == objectId)
                                    this->message_184_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-168") == objectId)
                                    this->message_185_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-163") == objectId)
                                    this->message_186_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-162") == objectId)
                                    this->message_187_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-160") == objectId)
                                    this->message_188_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-158") == objectId)
                                    this->message_189_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-39") == objectId)
                                    this->message_190_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-157") == objectId)
                                    this->message_191_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-173") == objectId)
                                    this->message_192_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-153") == objectId)
                                    this->message_193_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-143") == objectId)
                                    this->message_194_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-139") == objectId)
                                    this->message_195_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-147") == objectId)
                                    this->message_196_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-142") == objectId)
                                    this->message_197_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-141") == objectId)
                                    this->message_198_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-175") == objectId)
                                    this->message_199_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/button_obj-74"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/button_obj-74";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-171"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-171";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/number_obj-2"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/number_obj-2";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-168"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-168";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-163"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-163";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-162"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-162";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-160"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-160";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-158"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-158";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-39"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-39";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-157"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-157";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-173"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-173";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-153"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-153";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-143"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-143";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-139"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-139";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-147"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-147";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-142"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-142";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-141"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-141";
                                }
                            case TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-175"):
                                {
                                return "Melodies/NextNote/VII-7(b5)ChordScale/message_obj-175";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_26_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->button_25_bangval_bang();
                        }
                        
                        void eventinlet_26_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->button_25_bangval_bang();
                        }
                        
                        void button_25_bangin_bang() {
                            this->button_25_bangval_bang();
                        }
                        
                        void message_184_listin_list_set(const list& v) {
                            this->message_184_set_set(v);
                        }
                        
                        void message_184_listin_number_set(number v) {
                            this->message_184_set_set(v);
                        }
                        
                        void message_184_listin_bang_bang() {
                            this->message_184_trigger_bang();
                        }
                        
                        void numberobj_56_valin_set(number v) {
                            this->numberobj_56_value_set(v);
                        }
                        
                        void numberobj_56_format_set(number v) {
                            this->numberobj_56_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_185_listin_list_set(const list& v) {
                            this->message_185_set_set(v);
                        }
                        
                        void message_185_listin_number_set(number v) {
                            this->message_185_set_set(v);
                        }
                        
                        void message_185_listin_bang_bang() {
                            this->message_185_trigger_bang();
                        }
                        
                        void message_186_listin_list_set(const list& v) {
                            this->message_186_set_set(v);
                        }
                        
                        void message_186_listin_number_set(number v) {
                            this->message_186_set_set(v);
                        }
                        
                        void message_186_listin_bang_bang() {
                            this->message_186_trigger_bang();
                        }
                        
                        void message_187_listin_list_set(const list& v) {
                            this->message_187_set_set(v);
                        }
                        
                        void message_187_listin_number_set(number v) {
                            this->message_187_set_set(v);
                        }
                        
                        void message_187_listin_bang_bang() {
                            this->message_187_trigger_bang();
                        }
                        
                        void message_188_listin_list_set(const list& v) {
                            this->message_188_set_set(v);
                        }
                        
                        void message_188_listin_number_set(number v) {
                            this->message_188_set_set(v);
                        }
                        
                        void message_188_listin_bang_bang() {
                            this->message_188_trigger_bang();
                        }
                        
                        void message_189_listin_list_set(const list& v) {
                            this->message_189_set_set(v);
                        }
                        
                        void message_189_listin_number_set(number v) {
                            this->message_189_set_set(v);
                        }
                        
                        void message_189_listin_bang_bang() {
                            this->message_189_trigger_bang();
                        }
                        
                        void message_190_listin_list_set(const list& v) {
                            this->message_190_set_set(v);
                        }
                        
                        void message_190_listin_number_set(number v) {
                            this->message_190_set_set(v);
                        }
                        
                        void message_190_listin_bang_bang() {
                            this->message_190_trigger_bang();
                        }
                        
                        void message_191_listin_list_set(const list& v) {
                            this->message_191_set_set(v);
                        }
                        
                        void message_191_listin_number_set(number v) {
                            this->message_191_set_set(v);
                        }
                        
                        void message_191_listin_bang_bang() {
                            this->message_191_trigger_bang();
                        }
                        
                        void message_192_listin_list_set(const list& v) {
                            this->message_192_set_set(v);
                        }
                        
                        void message_192_listin_number_set(number v) {
                            this->message_192_set_set(v);
                        }
                        
                        void message_192_listin_bang_bang() {
                            this->message_192_trigger_bang();
                        }
                        
                        void message_193_listin_list_set(const list& v) {
                            this->message_193_set_set(v);
                        }
                        
                        void message_193_listin_number_set(number v) {
                            this->message_193_set_set(v);
                        }
                        
                        void message_193_listin_bang_bang() {
                            this->message_193_trigger_bang();
                        }
                        
                        void message_194_listin_list_set(const list& v) {
                            this->message_194_set_set(v);
                        }
                        
                        void message_194_listin_number_set(number v) {
                            this->message_194_set_set(v);
                        }
                        
                        void message_194_listin_bang_bang() {
                            this->message_194_trigger_bang();
                        }
                        
                        void message_195_listin_list_set(const list& v) {
                            this->message_195_set_set(v);
                        }
                        
                        void message_195_listin_number_set(number v) {
                            this->message_195_set_set(v);
                        }
                        
                        void message_195_listin_bang_bang() {
                            this->message_195_trigger_bang();
                        }
                        
                        void message_196_listin_list_set(const list& v) {
                            this->message_196_set_set(v);
                        }
                        
                        void message_196_listin_number_set(number v) {
                            this->message_196_set_set(v);
                        }
                        
                        void message_196_listin_bang_bang() {
                            this->message_196_trigger_bang();
                        }
                        
                        void message_197_listin_list_set(const list& v) {
                            this->message_197_set_set(v);
                        }
                        
                        void message_197_listin_number_set(number v) {
                            this->message_197_set_set(v);
                        }
                        
                        void message_197_listin_bang_bang() {
                            this->message_197_trigger_bang();
                        }
                        
                        void message_198_listin_list_set(const list& v) {
                            this->message_198_set_set(v);
                        }
                        
                        void message_198_listin_number_set(number v) {
                            this->message_198_set_set(v);
                        }
                        
                        void message_198_listin_bang_bang() {
                            this->message_198_trigger_bang();
                        }
                        
                        void message_199_listin_list_set(const list& v) {
                            this->message_199_set_set(v);
                        }
                        
                        void message_199_listin_number_set(number v) {
                            this->message_199_set_set(v);
                        }
                        
                        void message_199_listin_bang_bang() {
                            this->message_199_trigger_bang();
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_184_init();
                            this->numberobj_56_init();
                            this->message_185_init();
                            this->message_186_init();
                            this->message_187_init();
                            this->message_188_init();
                            this->message_189_init();
                            this->message_190_init();
                            this->message_191_init();
                            this->message_192_init();
                            this->message_193_init();
                            this->message_194_init();
                            this->message_195_init();
                            this->message_196_init();
                            this->message_197_init();
                            this->message_198_init();
                            this->message_199_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void eventoutlet_29_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_23_out2_number_set(v);
                        }
                        
                        void numberobj_56_output_set(number v) {
                            this->eventoutlet_29_in1_number_set(v);
                        }
                        
                        void numberobj_56_value_set(number v) {
                            this->numberobj_56_value_setter(v);
                            v = this->numberobj_56_value;
                            number localvalue = v;
                        
                            if (this->numberobj_56_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_56_output_set(localvalue);
                        }
                        
                        void eventoutlet_28_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_23_out1_list_set((list)v);
                        }
                        
                        void message_184_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_184_trigger_bang() {
                            this->message_184_out_set(this->message_184_set);
                        }
                        
                        void select_15_match1_bang() {
                            this->message_184_trigger_bang();
                        }
                        
                        void message_185_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_185_trigger_bang() {
                            this->message_185_out_set(this->message_185_set);
                        }
                        
                        void select_15_match2_bang() {
                            this->message_185_trigger_bang();
                        }
                        
                        void message_186_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_186_trigger_bang() {
                            this->message_186_out_set(this->message_186_set);
                        }
                        
                        void select_15_match3_bang() {
                            this->message_186_trigger_bang();
                        }
                        
                        void message_187_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_187_trigger_bang() {
                            this->message_187_out_set(this->message_187_set);
                        }
                        
                        void select_15_match4_bang() {
                            this->message_187_trigger_bang();
                        }
                        
                        void message_188_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_188_trigger_bang() {
                            this->message_188_out_set(this->message_188_set);
                        }
                        
                        void select_15_match5_bang() {
                            this->message_188_trigger_bang();
                        }
                        
                        void message_189_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_189_trigger_bang() {
                            this->message_189_out_set(this->message_189_set);
                        }
                        
                        void select_15_match6_bang() {
                            this->message_189_trigger_bang();
                        }
                        
                        void message_191_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_191_trigger_bang() {
                            this->message_191_out_set(this->message_191_set);
                        }
                        
                        void select_15_match7_bang() {
                            this->message_191_trigger_bang();
                        }
                        
                        void message_192_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_192_trigger_bang() {
                            this->message_192_out_set(this->message_192_set);
                        }
                        
                        void select_15_match8_bang() {
                            this->message_192_trigger_bang();
                        }
                        
                        void message_193_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_193_trigger_bang() {
                            this->message_193_out_set(this->message_193_set);
                        }
                        
                        void select_15_match9_bang() {
                            this->message_193_trigger_bang();
                        }
                        
                        void message_194_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_194_trigger_bang() {
                            this->message_194_out_set(this->message_194_set);
                        }
                        
                        void select_15_match10_bang() {
                            this->message_194_trigger_bang();
                        }
                        
                        void message_195_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_195_trigger_bang() {
                            this->message_195_out_set(this->message_195_set);
                        }
                        
                        void select_15_match11_bang() {
                            this->message_195_trigger_bang();
                        }
                        
                        void message_196_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_196_trigger_bang() {
                            this->message_196_out_set(this->message_196_set);
                        }
                        
                        void select_15_match12_bang() {
                            this->message_196_trigger_bang();
                        }
                        
                        void message_197_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_197_trigger_bang() {
                            this->message_197_out_set(this->message_197_set);
                        }
                        
                        void select_15_match13_bang() {
                            this->message_197_trigger_bang();
                        }
                        
                        void message_198_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_198_trigger_bang() {
                            this->message_198_out_set(this->message_198_set);
                        }
                        
                        void select_15_match14_bang() {
                            this->message_198_trigger_bang();
                        }
                        
                        void message_199_out_set(const list& v) {
                            this->eventoutlet_28_in1_list_set(v);
                        }
                        
                        void message_199_trigger_bang() {
                            this->message_199_out_set(this->message_199_set);
                        }
                        
                        void select_15_match15_bang() {
                            this->message_199_trigger_bang();
                        }
                        
                        void select_15_nomatch_number_set(number ) {}
                        
                        void select_15_input_number_set(number v) {
                            if (v == this->select_15_test1)
                                this->select_15_match1_bang();
                            else if (v == this->select_15_test2)
                                this->select_15_match2_bang();
                            else if (v == this->select_15_test3)
                                this->select_15_match3_bang();
                            else if (v == this->select_15_test4)
                                this->select_15_match4_bang();
                            else if (v == this->select_15_test5)
                                this->select_15_match5_bang();
                            else if (v == this->select_15_test6)
                                this->select_15_match6_bang();
                            else if (v == this->select_15_test7)
                                this->select_15_match7_bang();
                            else if (v == this->select_15_test8)
                                this->select_15_match8_bang();
                            else if (v == this->select_15_test9)
                                this->select_15_match9_bang();
                            else if (v == this->select_15_test10)
                                this->select_15_match10_bang();
                            else if (v == this->select_15_test11)
                                this->select_15_match11_bang();
                            else if (v == this->select_15_test12)
                                this->select_15_match12_bang();
                            else if (v == this->select_15_test13)
                                this->select_15_match13_bang();
                            else if (v == this->select_15_test14)
                                this->select_15_match14_bang();
                            else if (v == this->select_15_test15)
                                this->select_15_match15_bang();
                            else
                                this->select_15_nomatch_number_set(v);
                        }
                        
                        void uzi_13_index_set(number v) {
                            this->numberobj_56_value_set(v);
                            this->select_15_input_number_set(v);
                        }
                        
                        void uzi_13_out_bang() {}
                        
                        void uzi_13_carry_bang() {}
                        
                        void uzi_13_start_bang_bang() {
                            this->uzi_13_gobang(0);
                        }
                        
                        void button_25_output_bang() {
                            this->uzi_13_start_bang_bang();
                        }
                        
                        void button_25_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/button_obj-74"),
                                this->_currentTime
                            );;
                        
                            this->button_25_output_bang();
                        }
                        
                        void eventinlet_26_out1_bang_bang() {
                            this->button_25_bangval_bang();
                        }
                        
                        void message_184_set_set(const list& v) {
                            this->message_184_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-171"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_185_set_set(const list& v) {
                            this->message_185_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-168"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_186_set_set(const list& v) {
                            this->message_186_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-163"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_187_set_set(const list& v) {
                            this->message_187_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-162"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_188_set_set(const list& v) {
                            this->message_188_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-160"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_189_set_set(const list& v) {
                            this->message_189_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-158"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_190_set_set(const list& v) {
                            this->message_190_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-39"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_190_out_set(const list& ) {}
                        
                        void message_190_trigger_bang() {
                            this->message_190_out_set(this->message_190_set);
                        }
                        
                        void message_191_set_set(const list& v) {
                            this->message_191_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-157"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_192_set_set(const list& v) {
                            this->message_192_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-173"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_193_set_set(const list& v) {
                            this->message_193_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-153"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_194_set_set(const list& v) {
                            this->message_194_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-143"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_195_set_set(const list& v) {
                            this->message_195_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-139"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_196_set_set(const list& v) {
                            this->message_196_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-147"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_197_set_set(const list& v) {
                            this->message_197_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-142"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_198_set_set(const list& v) {
                            this->message_198_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-141"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_199_set_set(const list& v) {
                            this->message_199_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/message_obj-175"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_56_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_56_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_56_value = localvalue;
                        }
                        
                        void uzi_13_gobang(number start) {
                            this->uzi_13_doPause = 0;
                            this->uzi_13_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_13_count; i++) {
                                if ((bool)(this->uzi_13_doPause)) {
                                    this->uzi_13_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_13_index_set(i + this->uzi_13_base);
                                    this->uzi_13_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_13_carry_bang();
                        }
                        
                        void message_184_init() {
                            this->message_184_set_set({1, 1});
                        }
                        
                        void numberobj_56_init() {
                            this->numberobj_56_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/VII-7(b5)ChordScale/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_56_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_56_value;
                        }
                        
                        void numberobj_56_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_56_value_set(preset["value"]);
                        }
                        
                        void message_185_init() {
                            this->message_185_set_set({1, 2, 2, 3, 3, 3, 4, 4});
                        }
                        
                        void message_186_init() {
                            this->message_186_set_set({1, 2, 3, 3, 3, 4, 4, 5});
                        }
                        
                        void message_187_init() {
                            this->message_187_set_set({1, 2, 2, 2, 3, 4, 4, 5, 6});
                        }
                        
                        void message_188_init() {
                            this->message_188_set_set({1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6});
                        }
                        
                        void message_189_init() {
                            this->message_189_set_set({2, 3, 3, 4, 4, 4, 5, 6, 8});
                        }
                        
                        void message_190_init() {
                            this->message_190_set_set({1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13});
                        }
                        
                        void message_191_init() {
                            this->message_191_set_set({3, 3, 4, 4, 4, 5, 6, 8, 8, 9, 9});
                        }
                        
                        void message_192_init() {
                            this->message_192_set_set({6, 6, 8});
                        }
                        
                        void message_193_init() {
                            this->message_193_set_set({5, 6, 6, 6, 8, 9, 9, 10, 10, 11, 11});
                        }
                        
                        void message_194_init() {
                            this->message_194_set_set({6, 8, 8, 9, 10, 10, 10, 11, 11});
                        }
                        
                        void message_195_init() {
                            this->message_195_set_set({8, 9, 9, 10, 11, 11, 11, 12});
                        }
                        
                        void message_196_init() {
                            this->message_196_set_set({8, 9, 9, 10, 10, 10, 11, 12, 12, 13, 13});
                        }
                        
                        void message_197_init() {
                            this->message_197_set_set({9, 10, 11, 11, 12, 12, 13, 13, 13});
                        }
                        
                        void message_198_init() {
                            this->message_198_set_set({10, 11, 11, 11, 12, 13});
                        }
                        
                        void message_199_init() {
                            this->message_199_set_set({13, 13});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            uzi_13_start_number = 0;
                            uzi_13_count = 15;
                            uzi_13_base = 0;
                            select_15_test1 = 0;
                            select_15_test2 = 1;
                            select_15_test3 = 2;
                            select_15_test4 = 3;
                            select_15_test5 = 4;
                            select_15_test6 = 5;
                            select_15_test7 = 6;
                            select_15_test8 = 7;
                            select_15_test9 = 8;
                            select_15_test10 = 9;
                            select_15_test11 = 10;
                            select_15_test12 = 11;
                            select_15_test13 = 12;
                            select_15_test14 = 13;
                            select_15_test15 = 14;
                            numberobj_56_value = 0;
                            numberobj_56_value_setter(numberobj_56_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            uzi_13_doPause = 0;
                            uzi_13_pausecount = 0;
                            numberobj_56_currentFormat = 6;
                            numberobj_56_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number uzi_13_start_number;
                            number uzi_13_count;
                            number uzi_13_base;
                            list message_184_set;
                            number select_15_test1;
                            number select_15_test2;
                            number select_15_test3;
                            number select_15_test4;
                            number select_15_test5;
                            number select_15_test6;
                            number select_15_test7;
                            number select_15_test8;
                            number select_15_test9;
                            number select_15_test10;
                            number select_15_test11;
                            number select_15_test12;
                            number select_15_test13;
                            number select_15_test14;
                            number select_15_test15;
                            number numberobj_56_value;
                            list message_185_set;
                            list message_186_set;
                            list message_187_set;
                            list message_188_set;
                            list message_189_set;
                            list message_190_set;
                            list message_191_set;
                            list message_192_set;
                            list message_193_set;
                            list message_194_set;
                            list message_195_set;
                            list message_196_set;
                            list message_197_set;
                            list message_198_set;
                            list message_199_set;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number uzi_13_doPause;
                            long uzi_13_pausecount;
                            Int numberobj_56_currentFormat;
                            number numberobj_56_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_164 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_167;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_164()
                        {
                        }
                        
                        ~RNBOSubpatcher_164()
                        {
                        }
                        
                        virtual RNBOSubpatcher_167* getPatcher() const {
                            return static_cast<RNBOSubpatcher_167 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                            getEngine()->flushClockEvents(this, -871642103, false);
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return globalrandom() * range + low;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                            RNBO_UNUSED(value);
                            RNBO_UNUSED(hasValue);
                            this->updateTime(time);
                        
                            switch (index) {
                            case -871642103:
                                {
                                this->loadbang_10_startupbang_bang();
                                break;
                                }
                            }
                        }
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/NextNote/I_chordVariants/number_obj-14") == objectId)
                                    this->numberobj_57_valin_set(payload);
                        
                                if (TAG("Melodies/NextNote/I_chordVariants/number_obj-6") == objectId)
                                    this->numberobj_58_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/NextNote/I_chordVariants/number_obj-14") == objectId)
                                    this->numberobj_57_format_set(payload);
                        
                                if (TAG("Melodies/NextNote/I_chordVariants/number_obj-6") == objectId)
                                    this->numberobj_58_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-43") == objectId)
                                    this->message_200_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-3") == objectId)
                                    this->message_201_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-8") == objectId)
                                    this->message_202_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-43") == objectId)
                                    this->message_200_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-3") == objectId)
                                    this->message_201_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-8") == objectId)
                                    this->message_202_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/NextNote/I_chordVariants/button_obj-16") == objectId)
                                    this->button_26_bangin_bang();
                        
                                break;
                                }
                            case TAG("startupbang"):
                                {
                                if (TAG("Melodies/NextNote/I_chordVariants/loadbang_obj-197") == objectId)
                                    this->loadbang_10_startupbang_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-43") == objectId)
                                    this->message_200_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-3") == objectId)
                                    this->message_201_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/I_chordVariants/message_obj-8") == objectId)
                                    this->message_202_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/NextNote/I_chordVariants/button_obj-16"):
                                {
                                return "Melodies/NextNote/I_chordVariants/button_obj-16";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/NextNote/I_chordVariants/number_obj-14"):
                                {
                                return "Melodies/NextNote/I_chordVariants/number_obj-14";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/NextNote/I_chordVariants/message_obj-43"):
                                {
                                return "Melodies/NextNote/I_chordVariants/message_obj-43";
                                }
                            case TAG("Melodies/NextNote/I_chordVariants/message_obj-3"):
                                {
                                return "Melodies/NextNote/I_chordVariants/message_obj-3";
                                }
                            case TAG("Melodies/NextNote/I_chordVariants/message_obj-8"):
                                {
                                return "Melodies/NextNote/I_chordVariants/message_obj-8";
                                }
                            case TAG("Melodies/NextNote/I_chordVariants/number_obj-6"):
                                {
                                return "Melodies/NextNote/I_chordVariants/number_obj-6";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("startupbang"):
                                {
                                return "startupbang";
                                }
                            case TAG("Melodies/NextNote/I_chordVariants/loadbang_obj-197"):
                                {
                                return "Melodies/NextNote/I_chordVariants/loadbang_obj-197";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 5:
                                {
                                return addressOf(this->liststore_10_storage_storageobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 1;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 5) {
                                this->liststore_10_storage_storage = new Float64Buffer(this->liststore_10_storage_storageobj);
                            }
                        }
                        
                        void initialize() {
                            this->liststore_10_storage_storageobj = initDataRef("liststore_10_storage_storageobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->liststore_10_storage_storageobj->setIndex(5);
                            this->liststore_10_storage_storage = new Float64Buffer(this->liststore_10_storage_storageobj);
                        }
                        
                        protected:
                        
                        void button_26_bangin_bang() {
                            this->button_26_bangval_bang();
                        }
                        
                        void numberobj_57_valin_set(number v) {
                            this->numberobj_57_value_set(v);
                        }
                        
                        void numberobj_57_format_set(number v) {
                            this->numberobj_57_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_27_out1_bang_bang() {
                            this->trigger_08_input_bang_bang();
                        }
                        
                        void eventinlet_27_out1_number_set(number v) {
                            this->trigger_08_input_number_set(v);
                        }
                        
                        void eventinlet_27_out1_list_set(const list& v) {
                            this->trigger_08_input_list_set(v);
                        }
                        
                        void loadbang_10_startupbang_bang() {
                            this->loadbang_10_output_bang();
                        }
                        
                        void message_200_listin_list_set(const list& v) {
                            this->message_200_set_set(v);
                        }
                        
                        void message_200_listin_number_set(number v) {
                            this->message_200_set_set(v);
                        }
                        
                        void message_200_listin_bang_bang() {
                            this->message_200_trigger_bang();
                        }
                        
                        void message_201_listin_list_set(const list& v) {
                            this->message_201_set_set(v);
                        }
                        
                        void message_201_listin_number_set(number v) {
                            this->message_201_set_set(v);
                        }
                        
                        void message_201_listin_bang_bang() {
                            this->message_201_trigger_bang();
                        }
                        
                        void message_202_listin_list_set(const list& v) {
                            this->message_202_set_set(v);
                        }
                        
                        void message_202_listin_number_set(number v) {
                            this->message_202_set_set(v);
                        }
                        
                        void message_202_listin_bang_bang() {
                            this->message_202_trigger_bang();
                        }
                        
                        void numberobj_58_valin_set(number v) {
                            this->numberobj_58_value_set(v);
                        }
                        
                        void numberobj_58_format_set(number v) {
                            this->numberobj_58_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->numberobj_57_init();
                            this->random_04_nz_init();
                            this->liststore_10_storage_init();
                            this->message_200_init();
                            this->message_201_init();
                            this->message_202_init();
                            this->numberobj_58_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
                        }
                        
                        void allocateDataRefs() {
                            this->liststore_10_storage_storage = this->liststore_10_storage_storage->allocateIfNeeded();
                        
                            if (this->liststore_10_storage_storageobj->hasRequestedSize()) {
                                if (this->liststore_10_storage_storageobj->wantsFill())
                                    this->zeroDataRef(this->liststore_10_storage_storageobj);
                        
                                this->getEngine()->sendDataRefUpdated(5);
                            }
                        }
                        
                        void liststore_10_out3_set(number ) {}
                        
                        void message_202_set_set(const list& v) {
                            this->message_202_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/I_chordVariants/message_obj-8"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventoutlet_30_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_24_out1_list_set((list)v);
                        }
                        
                        void liststore_10_out1_set(const list& v) {
                            this->message_202_set_set(v);
                            this->eventoutlet_30_in1_list_set(v);
                        }
                        
                        void liststore_10_out2_bang() {}
                        
                        void liststore_10_lookupidx_set(number v) {
                            this->liststore_10_lookupidx = v;
                            list val = this->liststore_10_storage_lookup(v);
                            this->liststore_10_out3_set(v);
                        
                            if ((bool)(val->length)) {
                                this->liststore_10_out1_set(this->liststore_10_storage_lookup(v));
                            } else {
                                this->liststore_10_out2_bang();
                            }
                        }
                        
                        void numberobj_57_output_set(number v) {
                            this->liststore_10_lookupidx_set(v);
                        }
                        
                        void numberobj_57_value_set(number v) {
                            this->numberobj_57_value_setter(v);
                            v = this->numberobj_57_value;
                            number localvalue = v;
                        
                            if (this->numberobj_57_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/I_chordVariants/number_obj-14"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_57_output_set(localvalue);
                        }
                        
                        void random_04_result_set(number v) {
                            this->numberobj_57_value_set(v);
                        }
                        
                        void random_04_trigger_bang() {
                            this->random_04_result_set(rnbo_abs(this->random_04_nz_next()) * this->random_04_limit);
                        }
                        
                        void button_26_output_bang() {
                            this->random_04_trigger_bang();
                        }
                        
                        void button_26_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/NextNote/I_chordVariants/button_obj-16"),
                                this->_currentTime
                            );;
                        
                            this->button_26_output_bang();
                        }
                        
                        void liststore_10_storeidx_set(number v) {
                            this->liststore_10_storeidx = v;
                        }
                        
                        void numberobj_58_output_set(number v) {
                            this->liststore_10_storeidx_set(v);
                        }
                        
                        void numberobj_58_value_set(number v) {
                            this->numberobj_58_value_setter(v);
                            v = this->numberobj_58_value;
                            number localvalue = v;
                        
                            if (this->numberobj_58_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/I_chordVariants/number_obj-6"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_58_output_set(localvalue);
                        }
                        
                        void liststore_10_storelist_set(const list& v) {
                            this->liststore_10_storelist = jsCreateListCopy(v);
                            this->liststore_10_storage_store(this->liststore_10_storeidx, v);
                        }
                        
                        void message_200_out_set(const list& v) {
                            this->liststore_10_storelist_set(v);
                        }
                        
                        void message_200_trigger_bang() {
                            this->message_200_out_set(this->message_200_set);
                        }
                        
                        void select_16_match1_bang() {
                            this->message_200_trigger_bang();
                        }
                        
                        void message_201_out_set(const list& v) {
                            this->liststore_10_storelist_set(v);
                        }
                        
                        void message_201_trigger_bang() {
                            this->message_201_out_set(this->message_201_set);
                        }
                        
                        void select_16_match2_bang() {
                            this->message_201_trigger_bang();
                        }
                        
                        void select_16_nomatch_number_set(number ) {}
                        
                        void select_16_input_number_set(number v) {
                            if (v == this->select_16_test1)
                                this->select_16_match1_bang();
                            else if (v == this->select_16_test2)
                                this->select_16_match2_bang();
                            else
                                this->select_16_nomatch_number_set(v);
                        }
                        
                        void uzi_14_index_set(number v) {
                            this->numberobj_58_value_set(v);
                            this->select_16_input_number_set(v);
                        }
                        
                        void uzi_14_out_bang() {}
                        
                        void uzi_14_carry_bang() {}
                        
                        void uzi_14_start_bang_bang() {
                            this->uzi_14_gobang(0);
                        }
                        
                        void loadbang_10_output_bang() {
                            this->uzi_14_start_bang_bang();
                        }
                        
                        void loadbang_10_input_bang() {
                            this->loadbang_10_output_bang();
                        }
                        
                        void trigger_08_out2_bang() {
                            this->loadbang_10_input_bang();
                        }
                        
                        void trigger_08_out1_bang() {
                            this->button_26_bangval_bang();
                        }
                        
                        void trigger_08_input_bang_bang() {
                            this->trigger_08_out2_bang();
                            this->trigger_08_out1_bang();
                        }
                        
                        void trigger_08_input_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->trigger_08_out2_bang();
                            this->trigger_08_out1_bang();
                        }
                        
                        void trigger_08_input_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->trigger_08_out2_bang();
                            this->trigger_08_out1_bang();
                        }
                        
                        void message_200_set_set(const list& v) {
                            this->message_200_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/I_chordVariants/message_obj-43"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_201_set_set(const list& v) {
                            this->message_201_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/I_chordVariants/message_obj-3"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_202_out_set(const list& ) {}
                        
                        void message_202_trigger_bang() {
                            this->message_202_out_set(this->message_202_set);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_57_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_57_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_57_value = localvalue;
                        }
                        
                        void random_04_limit_setter(number v) {
                            if (v >= 0)
                                this->random_04_limit = v;
                        }
                        
                        void numberobj_58_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_58_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_58_value = localvalue;
                        }
                        
                        void numberobj_57_init() {
                            this->numberobj_57_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/I_chordVariants/number_obj-14"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_57_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_57_value;
                        }
                        
                        void numberobj_57_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_57_value_set(preset["value"]);
                        }
                        
                        void random_04_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_04_nz_state
                            );
                        }
                        
                        void random_04_nz_init() {
                            this->random_04_nz_reset();
                        }
                        
                        void random_04_nz_seed(number v) {
                            xoshiro_reset(v, this->random_04_nz_state);
                        }
                        
                        number random_04_nz_next() {
                            return xoshiro_next(this->random_04_nz_state);
                        }
                        
                        list liststore_10_storage_next(number index) {
                            return this->liststore_10_storage_lookup(index);
                        }
                        
                        list liststore_10_storage_lookup(number index) {
                            list tmp1 = {};
                            int64_t idx = (int64_t)(index);
                        
                            if (index >= 0 && index < this->liststore_10_storage__slotcount) {
                                number entrylength = this->liststore_10_storage_storage[(Index)(idx * this->liststore_10_storage__entrysize)];
                        
                                if (entrylength > 0) {
                                    for (number i = 0; i < entrylength; i++) {
                                        tmp1->push(
                                            this->liststore_10_storage_storage[(Index)(idx * this->liststore_10_storage__entrysize + i + 1)]
                                        );
                                    }
                                }
                            }
                        
                            return tmp1;
                        }
                        
                        void liststore_10_storage_store(number index, list value) {
                            int64_t idx = (int64_t)(index);
                        
                            if (index >= 0 && index < this->liststore_10_storage__slotcount) {
                                number entrylength = value->length;
                                this->liststore_10_storage_storage[(Index)(idx * this->liststore_10_storage__entrysize)] = entrylength;
                        
                                if (entrylength > 0) {
                                    for (number i = 0; i < entrylength; i++) {
                                        this->liststore_10_storage_storage[(Index)(idx * this->liststore_10_storage__entrysize + i + 1)] = value[(Index)i];
                                    }
                                }
                            }
                        }
                        
                        void liststore_10_storage_init() {
                            this->liststore_10_storage__entrysize = 4 + 1;
                            this->liststore_10_storage__slotcount = 2;
                            int64_t storagesize = (int64_t)(2 * this->liststore_10_storage__entrysize);
                            this->liststore_10_storage_storage->requestSize((Index)(storagesize), 1);
                        }
                        
                        void liststore_10_storage_clear() {
                            this->liststore_10_storage_storage->setZero();
                        }
                        
                        void liststore_10_storage_reset() {
                            this->liststore_10_storage_init();
                            this->liststore_10_storage_clear();
                        }
                        
                        void uzi_14_gobang(number start) {
                            this->uzi_14_doPause = 0;
                            this->uzi_14_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_14_count; i++) {
                                if ((bool)(this->uzi_14_doPause)) {
                                    this->uzi_14_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_14_index_set(i + this->uzi_14_base);
                                    this->uzi_14_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_14_carry_bang();
                        }
                        
                        void message_200_init() {
                            this->message_200_set_set({48, 55, 64, 71});
                        }
                        
                        void message_201_init() {
                            this->message_201_set_set({48, 55, 64, 69});
                        }
                        
                        void message_202_init() {
                            this->message_202_set_set({48, 55, 64, 69});
                        }
                        
                        void numberobj_58_init() {
                            this->numberobj_58_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/I_chordVariants/number_obj-6"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_58_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_58_value;
                        }
                        
                        void numberobj_58_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_58_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            numberobj_57_value = 0;
                            numberobj_57_value_setter(numberobj_57_value);
                            random_04_limit = 2;
                            random_04_limit_setter(random_04_limit);
                            random_04_seed = 0;
                            liststore_10_lookupidx = 0;
                            liststore_10_storeidx = 0;
                            uzi_14_start_number = 0;
                            uzi_14_count = 2;
                            uzi_14_base = 0;
                            select_16_test1 = 0;
                            select_16_test2 = 1;
                            numberobj_58_value = 0;
                            numberobj_58_value_setter(numberobj_58_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_57_currentFormat = 6;
                            numberobj_57_lastValue = 0;
                            liststore_10_storage__slotcount = 1024;
                            liststore_10_storage__entrysize = 65;
                            uzi_14_doPause = 0;
                            uzi_14_pausecount = 0;
                            numberobj_58_currentFormat = 6;
                            numberobj_58_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number numberobj_57_value;
                            number random_04_limit;
                            number random_04_seed;
                            number liststore_10_lookupidx;
                            list liststore_10_storelist;
                            number liststore_10_storeidx;
                            number uzi_14_start_number;
                            number uzi_14_count;
                            number uzi_14_base;
                            number select_16_test1;
                            number select_16_test2;
                            list message_200_set;
                            list message_201_set;
                            list message_202_set;
                            number numberobj_58_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_57_currentFormat;
                            number numberobj_57_lastValue;
                            UInt random_04_nz_state[4] = { };
                            Float64BufferRef liststore_10_storage_storage;
                            number liststore_10_storage__slotcount;
                            number liststore_10_storage__entrysize;
                            number uzi_14_doPause;
                            long uzi_14_pausecount;
                            Int numberobj_58_currentFormat;
                            number numberobj_58_lastValue;
                            number stackprotect_count;
                            DataRef liststore_10_storage_storageobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            class RNBOSubpatcher_165 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_167;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_165()
                        {
                        }
                        
                        ~RNBOSubpatcher_165()
                        {
                        }
                        
                        virtual RNBOSubpatcher_167* getPatcher() const {
                            return static_cast<RNBOSubpatcher_167 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-171") == objectId)
                                    this->message_203_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-168") == objectId)
                                    this->message_204_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-163") == objectId)
                                    this->message_205_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-162") == objectId)
                                    this->message_206_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-160") == objectId)
                                    this->message_207_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-56") == objectId)
                                    this->message_208_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-158") == objectId)
                                    this->message_209_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-157") == objectId)
                                    this->message_210_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-173") == objectId)
                                    this->message_211_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-153") == objectId)
                                    this->message_212_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-143") == objectId)
                                    this->message_213_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-139") == objectId)
                                    this->message_214_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-147") == objectId)
                                    this->message_215_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-142") == objectId)
                                    this->message_216_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-141") == objectId)
                                    this->message_217_listin_number_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-175") == objectId)
                                    this->message_218_listin_number_set(payload);
                        
                                break;
                                }
                            case TAG("valin"):
                                {
                                if (TAG("Melodies/NextNote/V7ChordScale/number_obj-2") == objectId)
                                    this->numberobj_59_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Melodies/NextNote/V7ChordScale/number_obj-2") == objectId)
                                    this->numberobj_59_format_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-171") == objectId)
                                    this->message_203_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-168") == objectId)
                                    this->message_204_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-163") == objectId)
                                    this->message_205_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-162") == objectId)
                                    this->message_206_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-160") == objectId)
                                    this->message_207_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-56") == objectId)
                                    this->message_208_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-158") == objectId)
                                    this->message_209_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-157") == objectId)
                                    this->message_210_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-173") == objectId)
                                    this->message_211_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-153") == objectId)
                                    this->message_212_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-143") == objectId)
                                    this->message_213_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-139") == objectId)
                                    this->message_214_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-147") == objectId)
                                    this->message_215_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-142") == objectId)
                                    this->message_216_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-141") == objectId)
                                    this->message_217_listin_list_set(payload);
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-175") == objectId)
                                    this->message_218_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Melodies/NextNote/V7ChordScale/button_obj-74") == objectId)
                                    this->button_27_bangin_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-171") == objectId)
                                    this->message_203_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-168") == objectId)
                                    this->message_204_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-163") == objectId)
                                    this->message_205_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-162") == objectId)
                                    this->message_206_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-160") == objectId)
                                    this->message_207_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-56") == objectId)
                                    this->message_208_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-158") == objectId)
                                    this->message_209_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-157") == objectId)
                                    this->message_210_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-173") == objectId)
                                    this->message_211_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-153") == objectId)
                                    this->message_212_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-143") == objectId)
                                    this->message_213_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-139") == objectId)
                                    this->message_214_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-147") == objectId)
                                    this->message_215_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-142") == objectId)
                                    this->message_216_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-141") == objectId)
                                    this->message_217_listin_bang_bang();
                        
                                if (TAG("Melodies/NextNote/V7ChordScale/message_obj-175") == objectId)
                                    this->message_218_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/button_obj-74"):
                                {
                                return "Melodies/NextNote/V7ChordScale/button_obj-74";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-171"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-171";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/number_obj-2"):
                                {
                                return "Melodies/NextNote/V7ChordScale/number_obj-2";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-168"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-168";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-163"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-163";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-162"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-162";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-160"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-160";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-56"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-56";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-158"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-158";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-157"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-157";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-173"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-173";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-153"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-153";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-143"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-143";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-139"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-139";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-147"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-147";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-142"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-142";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-141"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-141";
                                }
                            case TAG("Melodies/NextNote/V7ChordScale/message_obj-175"):
                                {
                                return "Melodies/NextNote/V7ChordScale/message_obj-175";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 0;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
                        
                        void initialize() {
                            this->assign_defaults();
                            this->setState();
                        }
                        
                        protected:
                        
                        void eventinlet_28_out1_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->button_27_bangval_bang();
                        }
                        
                        void eventinlet_28_out1_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->button_27_bangval_bang();
                        }
                        
                        void button_27_bangin_bang() {
                            this->button_27_bangval_bang();
                        }
                        
                        void message_203_listin_list_set(const list& v) {
                            this->message_203_set_set(v);
                        }
                        
                        void message_203_listin_number_set(number v) {
                            this->message_203_set_set(v);
                        }
                        
                        void message_203_listin_bang_bang() {
                            this->message_203_trigger_bang();
                        }
                        
                        void numberobj_59_valin_set(number v) {
                            this->numberobj_59_value_set(v);
                        }
                        
                        void numberobj_59_format_set(number v) {
                            this->numberobj_59_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void message_204_listin_list_set(const list& v) {
                            this->message_204_set_set(v);
                        }
                        
                        void message_204_listin_number_set(number v) {
                            this->message_204_set_set(v);
                        }
                        
                        void message_204_listin_bang_bang() {
                            this->message_204_trigger_bang();
                        }
                        
                        void message_205_listin_list_set(const list& v) {
                            this->message_205_set_set(v);
                        }
                        
                        void message_205_listin_number_set(number v) {
                            this->message_205_set_set(v);
                        }
                        
                        void message_205_listin_bang_bang() {
                            this->message_205_trigger_bang();
                        }
                        
                        void message_206_listin_list_set(const list& v) {
                            this->message_206_set_set(v);
                        }
                        
                        void message_206_listin_number_set(number v) {
                            this->message_206_set_set(v);
                        }
                        
                        void message_206_listin_bang_bang() {
                            this->message_206_trigger_bang();
                        }
                        
                        void message_207_listin_list_set(const list& v) {
                            this->message_207_set_set(v);
                        }
                        
                        void message_207_listin_number_set(number v) {
                            this->message_207_set_set(v);
                        }
                        
                        void message_207_listin_bang_bang() {
                            this->message_207_trigger_bang();
                        }
                        
                        void message_208_listin_list_set(const list& v) {
                            this->message_208_set_set(v);
                        }
                        
                        void message_208_listin_number_set(number v) {
                            this->message_208_set_set(v);
                        }
                        
                        void message_208_listin_bang_bang() {
                            this->message_208_trigger_bang();
                        }
                        
                        void message_209_listin_list_set(const list& v) {
                            this->message_209_set_set(v);
                        }
                        
                        void message_209_listin_number_set(number v) {
                            this->message_209_set_set(v);
                        }
                        
                        void message_209_listin_bang_bang() {
                            this->message_209_trigger_bang();
                        }
                        
                        void message_210_listin_list_set(const list& v) {
                            this->message_210_set_set(v);
                        }
                        
                        void message_210_listin_number_set(number v) {
                            this->message_210_set_set(v);
                        }
                        
                        void message_210_listin_bang_bang() {
                            this->message_210_trigger_bang();
                        }
                        
                        void message_211_listin_list_set(const list& v) {
                            this->message_211_set_set(v);
                        }
                        
                        void message_211_listin_number_set(number v) {
                            this->message_211_set_set(v);
                        }
                        
                        void message_211_listin_bang_bang() {
                            this->message_211_trigger_bang();
                        }
                        
                        void message_212_listin_list_set(const list& v) {
                            this->message_212_set_set(v);
                        }
                        
                        void message_212_listin_number_set(number v) {
                            this->message_212_set_set(v);
                        }
                        
                        void message_212_listin_bang_bang() {
                            this->message_212_trigger_bang();
                        }
                        
                        void message_213_listin_list_set(const list& v) {
                            this->message_213_set_set(v);
                        }
                        
                        void message_213_listin_number_set(number v) {
                            this->message_213_set_set(v);
                        }
                        
                        void message_213_listin_bang_bang() {
                            this->message_213_trigger_bang();
                        }
                        
                        void message_214_listin_list_set(const list& v) {
                            this->message_214_set_set(v);
                        }
                        
                        void message_214_listin_number_set(number v) {
                            this->message_214_set_set(v);
                        }
                        
                        void message_214_listin_bang_bang() {
                            this->message_214_trigger_bang();
                        }
                        
                        void message_215_listin_list_set(const list& v) {
                            this->message_215_set_set(v);
                        }
                        
                        void message_215_listin_number_set(number v) {
                            this->message_215_set_set(v);
                        }
                        
                        void message_215_listin_bang_bang() {
                            this->message_215_trigger_bang();
                        }
                        
                        void message_216_listin_list_set(const list& v) {
                            this->message_216_set_set(v);
                        }
                        
                        void message_216_listin_number_set(number v) {
                            this->message_216_set_set(v);
                        }
                        
                        void message_216_listin_bang_bang() {
                            this->message_216_trigger_bang();
                        }
                        
                        void message_217_listin_list_set(const list& v) {
                            this->message_217_set_set(v);
                        }
                        
                        void message_217_listin_number_set(number v) {
                            this->message_217_set_set(v);
                        }
                        
                        void message_217_listin_bang_bang() {
                            this->message_217_trigger_bang();
                        }
                        
                        void message_218_listin_list_set(const list& v) {
                            this->message_218_set_set(v);
                        }
                        
                        void message_218_listin_number_set(number v) {
                            this->message_218_set_set(v);
                        }
                        
                        void message_218_listin_bang_bang() {
                            this->message_218_trigger_bang();
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->message_203_init();
                            this->numberobj_59_init();
                            this->message_204_init();
                            this->message_205_init();
                            this->message_206_init();
                            this->message_207_init();
                            this->message_208_init();
                            this->message_209_init();
                            this->message_210_init();
                            this->message_211_init();
                            this->message_212_init();
                            this->message_213_init();
                            this->message_214_init();
                            this->message_215_init();
                            this->message_216_init();
                            this->message_217_init();
                            this->message_218_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {}
                        
                        void allocateDataRefs() {}
                        
                        void eventoutlet_32_in1_number_set(number v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_25_out2_number_set(v);
                        }
                        
                        void numberobj_59_output_set(number v) {
                            this->eventoutlet_32_in1_number_set(v);
                        }
                        
                        void numberobj_59_value_set(number v) {
                            this->numberobj_59_value_setter(v);
                            v = this->numberobj_59_value;
                            number localvalue = v;
                        
                            if (this->numberobj_59_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Melodies/NextNote/V7ChordScale/number_obj-2"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_59_output_set(localvalue);
                        }
                        
                        void eventoutlet_31_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_25_out1_list_set((list)v);
                        }
                        
                        void message_203_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_203_trigger_bang() {
                            this->message_203_out_set(this->message_203_set);
                        }
                        
                        void select_17_match1_bang() {
                            this->message_203_trigger_bang();
                        }
                        
                        void message_204_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_204_trigger_bang() {
                            this->message_204_out_set(this->message_204_set);
                        }
                        
                        void select_17_match2_bang() {
                            this->message_204_trigger_bang();
                        }
                        
                        void message_205_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_205_trigger_bang() {
                            this->message_205_out_set(this->message_205_set);
                        }
                        
                        void select_17_match3_bang() {
                            this->message_205_trigger_bang();
                        }
                        
                        void message_206_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_206_trigger_bang() {
                            this->message_206_out_set(this->message_206_set);
                        }
                        
                        void select_17_match4_bang() {
                            this->message_206_trigger_bang();
                        }
                        
                        void message_207_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_207_trigger_bang() {
                            this->message_207_out_set(this->message_207_set);
                        }
                        
                        void select_17_match5_bang() {
                            this->message_207_trigger_bang();
                        }
                        
                        void message_209_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_209_trigger_bang() {
                            this->message_209_out_set(this->message_209_set);
                        }
                        
                        void select_17_match6_bang() {
                            this->message_209_trigger_bang();
                        }
                        
                        void message_210_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_210_trigger_bang() {
                            this->message_210_out_set(this->message_210_set);
                        }
                        
                        void select_17_match7_bang() {
                            this->message_210_trigger_bang();
                        }
                        
                        void message_211_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_211_trigger_bang() {
                            this->message_211_out_set(this->message_211_set);
                        }
                        
                        void select_17_match8_bang() {
                            this->message_211_trigger_bang();
                        }
                        
                        void message_212_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_212_trigger_bang() {
                            this->message_212_out_set(this->message_212_set);
                        }
                        
                        void select_17_match9_bang() {
                            this->message_212_trigger_bang();
                        }
                        
                        void message_213_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_213_trigger_bang() {
                            this->message_213_out_set(this->message_213_set);
                        }
                        
                        void select_17_match10_bang() {
                            this->message_213_trigger_bang();
                        }
                        
                        void message_214_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_214_trigger_bang() {
                            this->message_214_out_set(this->message_214_set);
                        }
                        
                        void select_17_match11_bang() {
                            this->message_214_trigger_bang();
                        }
                        
                        void message_215_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_215_trigger_bang() {
                            this->message_215_out_set(this->message_215_set);
                        }
                        
                        void select_17_match12_bang() {
                            this->message_215_trigger_bang();
                        }
                        
                        void message_216_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_216_trigger_bang() {
                            this->message_216_out_set(this->message_216_set);
                        }
                        
                        void select_17_match13_bang() {
                            this->message_216_trigger_bang();
                        }
                        
                        void message_217_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_217_trigger_bang() {
                            this->message_217_out_set(this->message_217_set);
                        }
                        
                        void select_17_match14_bang() {
                            this->message_217_trigger_bang();
                        }
                        
                        void message_218_out_set(const list& v) {
                            this->eventoutlet_31_in1_list_set(v);
                        }
                        
                        void message_218_trigger_bang() {
                            this->message_218_out_set(this->message_218_set);
                        }
                        
                        void select_17_match15_bang() {
                            this->message_218_trigger_bang();
                        }
                        
                        void select_17_nomatch_number_set(number ) {}
                        
                        void select_17_input_number_set(number v) {
                            if (v == this->select_17_test1)
                                this->select_17_match1_bang();
                            else if (v == this->select_17_test2)
                                this->select_17_match2_bang();
                            else if (v == this->select_17_test3)
                                this->select_17_match3_bang();
                            else if (v == this->select_17_test4)
                                this->select_17_match4_bang();
                            else if (v == this->select_17_test5)
                                this->select_17_match5_bang();
                            else if (v == this->select_17_test6)
                                this->select_17_match6_bang();
                            else if (v == this->select_17_test7)
                                this->select_17_match7_bang();
                            else if (v == this->select_17_test8)
                                this->select_17_match8_bang();
                            else if (v == this->select_17_test9)
                                this->select_17_match9_bang();
                            else if (v == this->select_17_test10)
                                this->select_17_match10_bang();
                            else if (v == this->select_17_test11)
                                this->select_17_match11_bang();
                            else if (v == this->select_17_test12)
                                this->select_17_match12_bang();
                            else if (v == this->select_17_test13)
                                this->select_17_match13_bang();
                            else if (v == this->select_17_test14)
                                this->select_17_match14_bang();
                            else if (v == this->select_17_test15)
                                this->select_17_match15_bang();
                            else
                                this->select_17_nomatch_number_set(v);
                        }
                        
                        void uzi_15_index_set(number v) {
                            this->numberobj_59_value_set(v);
                            this->select_17_input_number_set(v);
                        }
                        
                        void uzi_15_out_bang() {}
                        
                        void uzi_15_carry_bang() {}
                        
                        void uzi_15_start_bang_bang() {
                            this->uzi_15_gobang(0);
                        }
                        
                        void button_27_output_bang() {
                            this->uzi_15_start_bang_bang();
                        }
                        
                        void button_27_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Melodies/NextNote/V7ChordScale/button_obj-74"),
                                this->_currentTime
                            );;
                        
                            this->button_27_output_bang();
                        }
                        
                        void eventinlet_28_out1_bang_bang() {
                            this->button_27_bangval_bang();
                        }
                        
                        void message_203_set_set(const list& v) {
                            this->message_203_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-171"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_204_set_set(const list& v) {
                            this->message_204_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-168"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_205_set_set(const list& v) {
                            this->message_205_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-163"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_206_set_set(const list& v) {
                            this->message_206_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-162"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_207_set_set(const list& v) {
                            this->message_207_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-160"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_208_set_set(const list& v) {
                            this->message_208_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-56"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_208_out_set(const list& ) {}
                        
                        void message_208_trigger_bang() {
                            this->message_208_out_set(this->message_208_set);
                        }
                        
                        void message_209_set_set(const list& v) {
                            this->message_209_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-158"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_210_set_set(const list& v) {
                            this->message_210_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-157"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_211_set_set(const list& v) {
                            this->message_211_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-173"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_212_set_set(const list& v) {
                            this->message_212_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-153"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_213_set_set(const list& v) {
                            this->message_213_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-143"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_214_set_set(const list& v) {
                            this->message_214_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-139"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_215_set_set(const list& v) {
                            this->message_215_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-147"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_216_set_set(const list& v) {
                            this->message_216_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-142"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_217_set_set(const list& v) {
                            this->message_217_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-141"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_218_set_set(const list& v) {
                            this->message_218_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Melodies/NextNote/V7ChordScale/message_obj-175"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_59_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_59_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_59_value = localvalue;
                        }
                        
                        void uzi_15_gobang(number start) {
                            this->uzi_15_doPause = 0;
                            this->uzi_15_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_15_count; i++) {
                                if ((bool)(this->uzi_15_doPause)) {
                                    this->uzi_15_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_15_index_set(i + this->uzi_15_base);
                                    this->uzi_15_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_15_carry_bang();
                        }
                        
                        void message_203_init() {
                            this->message_203_set_set({1, 1});
                        }
                        
                        void numberobj_59_init() {
                            this->numberobj_59_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Melodies/NextNote/V7ChordScale/number_obj-2"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_59_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_59_value;
                        }
                        
                        void numberobj_59_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_59_value_set(preset["value"]);
                        }
                        
                        void message_204_init() {
                            this->message_204_set_set({1, 2, 2, 3, 3, 3, 4, 4});
                        }
                        
                        void message_205_init() {
                            this->message_205_set_set({1, 2, 3, 3, 3, 4, 4, 5});
                        }
                        
                        void message_206_init() {
                            this->message_206_set_set({1, 2, 2, 2, 3, 4, 4, 5, 6});
                        }
                        
                        void message_207_init() {
                            this->message_207_set_set({1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 6, 6, 6});
                        }
                        
                        void message_208_init() {
                            this->message_208_set_set({1, 2, 3, 4, 5, 6, 8, 9, 10, 11});
                        }
                        
                        void message_209_init() {
                            this->message_209_set_set({2, 3, 3, 4, 4, 4, 5, 6, 8});
                        }
                        
                        void message_210_init() {
                            this->message_210_set_set({3, 3, 4, 4, 4, 5, 6, 8, 8, 9, 9});
                        }
                        
                        void message_211_init() {
                            this->message_211_set_set({6, 6, 8});
                        }
                        
                        void message_212_init() {
                            this->message_212_set_set({5, 6, 6, 6, 8, 9, 9, 10, 10, 11, 11});
                        }
                        
                        void message_213_init() {
                            this->message_213_set_set({6, 8, 8, 9, 10, 10, 10, 11, 11});
                        }
                        
                        void message_214_init() {
                            this->message_214_set_set({8, 9, 9, 10, 11, 11, 11, 12});
                        }
                        
                        void message_215_init() {
                            this->message_215_set_set({8, 9, 9, 10, 10, 10, 11, 12, 12, 13, 13});
                        }
                        
                        void message_216_init() {
                            this->message_216_set_set({9, 10, 11, 11, 12, 12, 13, 13, 13});
                        }
                        
                        void message_217_init() {
                            this->message_217_set_set({10, 11, 11, 11, 12, 13});
                        }
                        
                        void message_218_init() {
                            this->message_218_set_set({12, 12, 12, 13, 13});
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            uzi_15_start_number = 0;
                            uzi_15_count = 15;
                            uzi_15_base = 0;
                            select_17_test1 = 0;
                            select_17_test2 = 1;
                            select_17_test3 = 2;
                            select_17_test4 = 3;
                            select_17_test5 = 4;
                            select_17_test6 = 5;
                            select_17_test7 = 6;
                            select_17_test8 = 7;
                            select_17_test9 = 8;
                            select_17_test10 = 9;
                            select_17_test11 = 10;
                            select_17_test12 = 11;
                            select_17_test13 = 12;
                            select_17_test14 = 13;
                            select_17_test15 = 14;
                            numberobj_59_value = 0;
                            numberobj_59_value_setter(numberobj_59_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            uzi_15_doPause = 0;
                            uzi_15_pausecount = 0;
                            numberobj_59_currentFormat = 6;
                            numberobj_59_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number uzi_15_start_number;
                            number uzi_15_count;
                            number uzi_15_base;
                            list message_203_set;
                            number select_17_test1;
                            number select_17_test2;
                            number select_17_test3;
                            number select_17_test4;
                            number select_17_test5;
                            number select_17_test6;
                            number select_17_test7;
                            number select_17_test8;
                            number select_17_test9;
                            number select_17_test10;
                            number select_17_test11;
                            number select_17_test12;
                            number select_17_test13;
                            number select_17_test14;
                            number select_17_test15;
                            number numberobj_59_value;
                            list message_204_set;
                            list message_205_set;
                            list message_206_set;
                            list message_207_set;
                            list message_208_set;
                            list message_209_set;
                            list message_210_set;
                            list message_211_set;
                            list message_212_set;
                            list message_213_set;
                            list message_214_set;
                            list message_215_set;
                            list message_216_set;
                            list message_217_set;
                            list message_218_set;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            number uzi_15_doPause;
                            long uzi_15_pausecount;
                            Int numberobj_59_currentFormat;
                            number numberobj_59_lastValue;
                            number stackprotect_count;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_167()
            {
            }
            
            ~RNBOSubpatcher_167()
            {
                delete this->p_18;
                delete this->p_19;
                delete this->p_20;
                delete this->p_21;
                delete this->p_22;
                delete this->p_23;
                delete this->p_24;
                delete this->p_25;
            }
            
            virtual RNBOSubpatcher_178* getPatcher() const {
                return static_cast<RNBOSubpatcher_178 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_18_perform(n);
                this->p_19_perform(n);
                this->p_20_perform(n);
                this->p_21_perform(n);
                this->p_22_perform(n);
                this->p_23_perform(n);
                this->p_24_perform(n);
                this->p_25_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_18->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_19->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_20->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_21->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_22->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_23->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_24->prepareToProcess(sampleRate, maxBlockSize, force);
                this->p_25->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_18 = new RNBOSubpatcher_158();
                this->p_18->setEngineAndPatcher(this->getEngine(), this);
                this->p_18->initialize();
                this->p_18->setParameterOffset(this->getParameterOffset(this->p_18));
                this->p_19 = new RNBOSubpatcher_159();
                this->p_19->setEngineAndPatcher(this->getEngine(), this);
                this->p_19->initialize();
                this->p_19->setParameterOffset(this->getParameterOffset(this->p_19));
                this->p_20 = new RNBOSubpatcher_160();
                this->p_20->setEngineAndPatcher(this->getEngine(), this);
                this->p_20->initialize();
                this->p_20->setParameterOffset(this->getParameterOffset(this->p_20));
                this->p_21 = new RNBOSubpatcher_161();
                this->p_21->setEngineAndPatcher(this->getEngine(), this);
                this->p_21->initialize();
                this->p_21->setParameterOffset(this->getParameterOffset(this->p_21));
                this->p_22 = new RNBOSubpatcher_162();
                this->p_22->setEngineAndPatcher(this->getEngine(), this);
                this->p_22->initialize();
                this->p_22->setParameterOffset(this->getParameterOffset(this->p_22));
                this->p_23 = new RNBOSubpatcher_163();
                this->p_23->setEngineAndPatcher(this->getEngine(), this);
                this->p_23->initialize();
                this->p_23->setParameterOffset(this->getParameterOffset(this->p_23));
                this->p_24 = new RNBOSubpatcher_164();
                this->p_24->setEngineAndPatcher(this->getEngine(), this);
                this->p_24->initialize();
                this->p_24->setParameterOffset(this->getParameterOffset(this->p_24));
                this->p_25 = new RNBOSubpatcher_165();
                this->p_25->setEngineAndPatcher(this->getEngine(), this);
                this->p_25->initialize();
                this->p_25->setParameterOffset(this->getParameterOffset(this->p_25));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_18->getPreset(getSubState(getSubState(preset, "__sps"), "Imaj7ChordScale"));
                this->p_19->getPreset(getSubState(getSubState(preset, "__sps"), "III-7ChordScale"));
                this->p_20->getPreset(getSubState(getSubState(preset, "__sps"), "VI-7ChordScale"));
                this->p_21->getPreset(getSubState(getSubState(preset, "__sps"), "II-7ChordScale"));
                this->p_22->getPreset(getSubState(getSubState(preset, "__sps"), "IVmaj7ChordScale"));
                this->p_23->getPreset(getSubState(getSubState(preset, "__sps"), "VII-7(b5)ChordScale"));
                this->p_24->getPreset(getSubState(getSubState(preset, "__sps"), "I_chordVariants"));
                this->p_25->getPreset(getSubState(getSubState(preset, "__sps"), "V7ChordScale"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_18->getNumParameters())
                        this->p_18->setParameterValue(index, v, time);
            
                    index -= this->p_18->getNumParameters();
            
                    if (index < this->p_19->getNumParameters())
                        this->p_19->setParameterValue(index, v, time);
            
                    index -= this->p_19->getNumParameters();
            
                    if (index < this->p_20->getNumParameters())
                        this->p_20->setParameterValue(index, v, time);
            
                    index -= this->p_20->getNumParameters();
            
                    if (index < this->p_21->getNumParameters())
                        this->p_21->setParameterValue(index, v, time);
            
                    index -= this->p_21->getNumParameters();
            
                    if (index < this->p_22->getNumParameters())
                        this->p_22->setParameterValue(index, v, time);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        this->p_23->setParameterValue(index, v, time);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        this->p_24->setParameterValue(index, v, time);
            
                    index -= this->p_24->getNumParameters();
            
                    if (index < this->p_25->getNumParameters())
                        this->p_25->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_18->getNumParameters())
                        return this->p_18->getParameterValue(index);
            
                    index -= this->p_18->getNumParameters();
            
                    if (index < this->p_19->getNumParameters())
                        return this->p_19->getParameterValue(index);
            
                    index -= this->p_19->getNumParameters();
            
                    if (index < this->p_20->getNumParameters())
                        return this->p_20->getParameterValue(index);
            
                    index -= this->p_20->getNumParameters();
            
                    if (index < this->p_21->getNumParameters())
                        return this->p_21->getParameterValue(index);
            
                    index -= this->p_21->getNumParameters();
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->getParameterValue(index);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->getParameterValue(index);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->getParameterValue(index);
            
                    index -= this->p_24->getNumParameters();
            
                    if (index < this->p_25->getNumParameters())
                        return this->p_25->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters() + this->p_23->getNumParameters() + this->p_24->getNumParameters() + this->p_25->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_18->getNumParameters())
                        return this->p_18->getParameterName(index);
            
                    index -= this->p_18->getNumParameters();
            
                    if (index < this->p_19->getNumParameters())
                        return this->p_19->getParameterName(index);
            
                    index -= this->p_19->getNumParameters();
            
                    if (index < this->p_20->getNumParameters())
                        return this->p_20->getParameterName(index);
            
                    index -= this->p_20->getNumParameters();
            
                    if (index < this->p_21->getNumParameters())
                        return this->p_21->getParameterName(index);
            
                    index -= this->p_21->getNumParameters();
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->getParameterName(index);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->getParameterName(index);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->getParameterName(index);
            
                    index -= this->p_24->getNumParameters();
            
                    if (index < this->p_25->getNumParameters())
                        return this->p_25->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_18->getNumParameters())
                        return this->p_18->getParameterId(index);
            
                    index -= this->p_18->getNumParameters();
            
                    if (index < this->p_19->getNumParameters())
                        return this->p_19->getParameterId(index);
            
                    index -= this->p_19->getNumParameters();
            
                    if (index < this->p_20->getNumParameters())
                        return this->p_20->getParameterId(index);
            
                    index -= this->p_20->getNumParameters();
            
                    if (index < this->p_21->getNumParameters())
                        return this->p_21->getParameterId(index);
            
                    index -= this->p_21->getNumParameters();
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->getParameterId(index);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->getParameterId(index);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->getParameterId(index);
            
                    index -= this->p_24->getNumParameters();
            
                    if (index < this->p_25->getNumParameters())
                        return this->p_25->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_18->getNumParameters())
                            this->p_18->getParameterInfo(index, info);
            
                        index -= this->p_18->getNumParameters();
            
                        if (index < this->p_19->getNumParameters())
                            this->p_19->getParameterInfo(index, info);
            
                        index -= this->p_19->getNumParameters();
            
                        if (index < this->p_20->getNumParameters())
                            this->p_20->getParameterInfo(index, info);
            
                        index -= this->p_20->getNumParameters();
            
                        if (index < this->p_21->getNumParameters())
                            this->p_21->getParameterInfo(index, info);
            
                        index -= this->p_21->getNumParameters();
            
                        if (index < this->p_22->getNumParameters())
                            this->p_22->getParameterInfo(index, info);
            
                        index -= this->p_22->getNumParameters();
            
                        if (index < this->p_23->getNumParameters())
                            this->p_23->getParameterInfo(index, info);
            
                        index -= this->p_23->getNumParameters();
            
                        if (index < this->p_24->getNumParameters())
                            this->p_24->getParameterInfo(index, info);
            
                        index -= this->p_24->getNumParameters();
            
                        if (index < this->p_25->getNumParameters())
                            this->p_25->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_18)
                    return 0;
            
                if (subpatcher == this->p_19)
                    return 0 + this->p_18->getNumParameters();
            
                if (subpatcher == this->p_20)
                    return 0 + this->p_18->getNumParameters() + this->p_19->getNumParameters();
            
                if (subpatcher == this->p_21)
                    return 0 + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters();
            
                if (subpatcher == this->p_22)
                    return 0 + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters();
            
                if (subpatcher == this->p_23)
                    return 0 + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters();
            
                if (subpatcher == this->p_24)
                    return 0 + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters() + this->p_23->getNumParameters();
            
                if (subpatcher == this->p_25)
                    return 0 + this->p_18->getNumParameters() + this->p_19->getNumParameters() + this->p_20->getNumParameters() + this->p_21->getNumParameters() + this->p_22->getNumParameters() + this->p_23->getNumParameters() + this->p_24->getNumParameters();
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_18->getNumParameters())
                        return this->p_18->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_18->getNumParameters();
            
                    if (index < this->p_19->getNumParameters())
                        return this->p_19->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_19->getNumParameters();
            
                    if (index < this->p_20->getNumParameters())
                        return this->p_20->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_20->getNumParameters();
            
                    if (index < this->p_21->getNumParameters())
                        return this->p_21->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_21->getNumParameters();
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->convertToNormalizedParameterValue(index, value);
            
                    index -= this->p_24->getNumParameters();
            
                    if (index < this->p_25->getNumParameters())
                        return this->p_25->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_18->getNumParameters())
                        return this->p_18->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_18->getNumParameters();
            
                    if (index < this->p_19->getNumParameters())
                        return this->p_19->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_19->getNumParameters();
            
                    if (index < this->p_20->getNumParameters())
                        return this->p_20->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_20->getNumParameters();
            
                    if (index < this->p_21->getNumParameters())
                        return this->p_21->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_21->getNumParameters();
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->convertFromNormalizedParameterValue(index, value);
            
                    index -= this->p_24->getNumParameters();
            
                    if (index < this->p_25->getNumParameters())
                        return this->p_25->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_18->getNumParameters())
                        return this->p_18->constrainParameterValue(index, value);
            
                    index -= this->p_18->getNumParameters();
            
                    if (index < this->p_19->getNumParameters())
                        return this->p_19->constrainParameterValue(index, value);
            
                    index -= this->p_19->getNumParameters();
            
                    if (index < this->p_20->getNumParameters())
                        return this->p_20->constrainParameterValue(index, value);
            
                    index -= this->p_20->getNumParameters();
            
                    if (index < this->p_21->getNumParameters())
                        return this->p_21->constrainParameterValue(index, value);
            
                    index -= this->p_21->getNumParameters();
            
                    if (index < this->p_22->getNumParameters())
                        return this->p_22->constrainParameterValue(index, value);
            
                    index -= this->p_22->getNumParameters();
            
                    if (index < this->p_23->getNumParameters())
                        return this->p_23->constrainParameterValue(index, value);
            
                    index -= this->p_23->getNumParameters();
            
                    if (index < this->p_24->getNumParameters())
                        return this->p_24->constrainParameterValue(index, value);
            
                    index -= this->p_24->getNumParameters();
            
                    if (index < this->p_25->getNumParameters())
                        return this->p_25->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Melodies/NextNote/number_obj-81") == objectId)
                        this->numberobj_60_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Melodies/NextNote/number_obj-81") == objectId)
                        this->numberobj_60_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextNote/message_obj-143") == objectId)
                        this->message_219_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-142") == objectId)
                        this->message_220_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-137") == objectId)
                        this->message_221_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-136") == objectId)
                        this->message_222_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-170") == objectId)
                        this->message_223_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-132") == objectId)
                        this->message_224_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-130") == objectId)
                        this->message_225_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-129") == objectId)
                        this->message_226_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-116") == objectId)
                        this->message_227_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-115") == objectId)
                        this->message_228_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-71") == objectId)
                        this->message_229_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-77") == objectId)
                        this->message_230_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-75") == objectId)
                        this->message_231_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-65") == objectId)
                        this->message_232_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-67") == objectId)
                        this->message_233_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-66") == objectId)
                        this->message_234_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-111") == objectId)
                        this->message_235_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-79") == objectId)
                        this->message_236_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-110") == objectId)
                        this->message_237_listin_number_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-119") == objectId)
                        this->message_238_listin_number_set(payload);
            
                    break;
                    }
                }
            
                this->p_18->processNumMessage(tag, objectId, time, payload);
                this->p_19->processNumMessage(tag, objectId, time, payload);
                this->p_20->processNumMessage(tag, objectId, time, payload);
                this->p_21->processNumMessage(tag, objectId, time, payload);
                this->p_22->processNumMessage(tag, objectId, time, payload);
                this->p_23->processNumMessage(tag, objectId, time, payload);
                this->p_24->processNumMessage(tag, objectId, time, payload);
                this->p_25->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextNote/message_obj-143") == objectId)
                        this->message_219_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-142") == objectId)
                        this->message_220_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-137") == objectId)
                        this->message_221_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-136") == objectId)
                        this->message_222_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-170") == objectId)
                        this->message_223_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-132") == objectId)
                        this->message_224_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-130") == objectId)
                        this->message_225_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-129") == objectId)
                        this->message_226_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-116") == objectId)
                        this->message_227_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-115") == objectId)
                        this->message_228_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-71") == objectId)
                        this->message_229_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-77") == objectId)
                        this->message_230_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-75") == objectId)
                        this->message_231_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-65") == objectId)
                        this->message_232_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-67") == objectId)
                        this->message_233_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-66") == objectId)
                        this->message_234_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-111") == objectId)
                        this->message_235_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-79") == objectId)
                        this->message_236_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-110") == objectId)
                        this->message_237_listin_list_set(payload);
            
                    if (TAG("Melodies/NextNote/message_obj-119") == objectId)
                        this->message_238_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_18->processListMessage(tag, objectId, time, payload);
                this->p_19->processListMessage(tag, objectId, time, payload);
                this->p_20->processListMessage(tag, objectId, time, payload);
                this->p_21->processListMessage(tag, objectId, time, payload);
                this->p_22->processListMessage(tag, objectId, time, payload);
                this->p_23->processListMessage(tag, objectId, time, payload);
                this->p_24->processListMessage(tag, objectId, time, payload);
                this->p_25->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextNote/message_obj-143") == objectId)
                        this->message_219_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-142") == objectId)
                        this->message_220_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-137") == objectId)
                        this->message_221_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-136") == objectId)
                        this->message_222_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-170") == objectId)
                        this->message_223_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-132") == objectId)
                        this->message_224_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-130") == objectId)
                        this->message_225_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-129") == objectId)
                        this->message_226_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-116") == objectId)
                        this->message_227_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-115") == objectId)
                        this->message_228_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-71") == objectId)
                        this->message_229_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-77") == objectId)
                        this->message_230_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-75") == objectId)
                        this->message_231_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-65") == objectId)
                        this->message_232_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-67") == objectId)
                        this->message_233_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-66") == objectId)
                        this->message_234_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-111") == objectId)
                        this->message_235_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-79") == objectId)
                        this->message_236_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-110") == objectId)
                        this->message_237_listin_bang_bang();
            
                    if (TAG("Melodies/NextNote/message_obj-119") == objectId)
                        this->message_238_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("Melodies/NextNote/button_obj-27") == objectId)
                        this->button_28_bangin_bang();
            
                    if (TAG("Melodies/NextNote/button_obj-156") == objectId)
                        this->button_29_bangin_bang();
            
                    if (TAG("Melodies/NextNote/button_obj-162") == objectId)
                        this->button_30_bangin_bang();
            
                    if (TAG("Melodies/NextNote/button_obj-163") == objectId)
                        this->button_31_bangin_bang();
            
                    if (TAG("Melodies/NextNote/button_obj-164") == objectId)
                        this->button_32_bangin_bang();
            
                    if (TAG("Melodies/NextNote/button_obj-165") == objectId)
                        this->button_33_bangin_bang();
            
                    if (TAG("Melodies/NextNote/button_obj-158") == objectId)
                        this->button_34_bangin_bang();
            
                    if (TAG("Melodies/NextNote/button_obj-160") == objectId)
                        this->button_35_bangin_bang();
            
                    break;
                    }
                }
            
                this->p_18->processBangMessage(tag, objectId, time);
                this->p_19->processBangMessage(tag, objectId, time);
                this->p_20->processBangMessage(tag, objectId, time);
                this->p_21->processBangMessage(tag, objectId, time);
                this->p_22->processBangMessage(tag, objectId, time);
                this->p_23->processBangMessage(tag, objectId, time);
                this->p_24->processBangMessage(tag, objectId, time);
                this->p_25->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Melodies/NextNote/number_obj-81"):
                    {
                    return "Melodies/NextNote/number_obj-81";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Melodies/NextNote/message_obj-143"):
                    {
                    return "Melodies/NextNote/message_obj-143";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Melodies/NextNote/button_obj-27"):
                    {
                    return "Melodies/NextNote/button_obj-27";
                    }
                case TAG("Melodies/NextNote/message_obj-142"):
                    {
                    return "Melodies/NextNote/message_obj-142";
                    }
                case TAG("Melodies/NextNote/button_obj-156"):
                    {
                    return "Melodies/NextNote/button_obj-156";
                    }
                case TAG("Melodies/NextNote/message_obj-137"):
                    {
                    return "Melodies/NextNote/message_obj-137";
                    }
                case TAG("Melodies/NextNote/message_obj-136"):
                    {
                    return "Melodies/NextNote/message_obj-136";
                    }
                case TAG("Melodies/NextNote/button_obj-162"):
                    {
                    return "Melodies/NextNote/button_obj-162";
                    }
                case TAG("Melodies/NextNote/message_obj-170"):
                    {
                    return "Melodies/NextNote/message_obj-170";
                    }
                case TAG("Melodies/NextNote/message_obj-132"):
                    {
                    return "Melodies/NextNote/message_obj-132";
                    }
                case TAG("Melodies/NextNote/message_obj-130"):
                    {
                    return "Melodies/NextNote/message_obj-130";
                    }
                case TAG("Melodies/NextNote/button_obj-163"):
                    {
                    return "Melodies/NextNote/button_obj-163";
                    }
                case TAG("Melodies/NextNote/message_obj-129"):
                    {
                    return "Melodies/NextNote/message_obj-129";
                    }
                case TAG("Melodies/NextNote/button_obj-164"):
                    {
                    return "Melodies/NextNote/button_obj-164";
                    }
                case TAG("Melodies/NextNote/button_obj-165"):
                    {
                    return "Melodies/NextNote/button_obj-165";
                    }
                case TAG("Melodies/NextNote/button_obj-158"):
                    {
                    return "Melodies/NextNote/button_obj-158";
                    }
                case TAG("Melodies/NextNote/message_obj-116"):
                    {
                    return "Melodies/NextNote/message_obj-116";
                    }
                case TAG("Melodies/NextNote/message_obj-115"):
                    {
                    return "Melodies/NextNote/message_obj-115";
                    }
                case TAG("Melodies/NextNote/button_obj-160"):
                    {
                    return "Melodies/NextNote/button_obj-160";
                    }
                case TAG("Melodies/NextNote/message_obj-71"):
                    {
                    return "Melodies/NextNote/message_obj-71";
                    }
                case TAG("Melodies/NextNote/message_obj-77"):
                    {
                    return "Melodies/NextNote/message_obj-77";
                    }
                case TAG("Melodies/NextNote/message_obj-75"):
                    {
                    return "Melodies/NextNote/message_obj-75";
                    }
                case TAG("Melodies/NextNote/message_obj-65"):
                    {
                    return "Melodies/NextNote/message_obj-65";
                    }
                case TAG("Melodies/NextNote/message_obj-67"):
                    {
                    return "Melodies/NextNote/message_obj-67";
                    }
                case TAG("Melodies/NextNote/message_obj-66"):
                    {
                    return "Melodies/NextNote/message_obj-66";
                    }
                case TAG("Melodies/NextNote/message_obj-111"):
                    {
                    return "Melodies/NextNote/message_obj-111";
                    }
                case TAG("Melodies/NextNote/message_obj-79"):
                    {
                    return "Melodies/NextNote/message_obj-79";
                    }
                case TAG("Melodies/NextNote/message_obj-110"):
                    {
                    return "Melodies/NextNote/message_obj-110";
                    }
                case TAG("Melodies/NextNote/message_obj-119"):
                    {
                    return "Melodies/NextNote/message_obj-119";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                }
            
                auto subpatchResult_0 = this->p_18->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                auto subpatchResult_1 = this->p_19->resolveTag(tag);
            
                if (subpatchResult_1)
                    return subpatchResult_1;
            
                auto subpatchResult_2 = this->p_20->resolveTag(tag);
            
                if (subpatchResult_2)
                    return subpatchResult_2;
            
                auto subpatchResult_3 = this->p_21->resolveTag(tag);
            
                if (subpatchResult_3)
                    return subpatchResult_3;
            
                auto subpatchResult_4 = this->p_22->resolveTag(tag);
            
                if (subpatchResult_4)
                    return subpatchResult_4;
            
                auto subpatchResult_5 = this->p_23->resolveTag(tag);
            
                if (subpatchResult_5)
                    return subpatchResult_5;
            
                auto subpatchResult_6 = this->p_24->resolveTag(tag);
            
                if (subpatchResult_6)
                    return subpatchResult_6;
            
                auto subpatchResult_7 = this->p_25->resolveTag(tag);
            
                if (subpatchResult_7)
                    return subpatchResult_7;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->liststore_11_storage_storageobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 1;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->liststore_11_storage_storage = new Float64Buffer(this->liststore_11_storage_storageobj);
                }
            
                this->p_18->processDataViewUpdate(index, time);
                this->p_19->processDataViewUpdate(index, time);
                this->p_20->processDataViewUpdate(index, time);
                this->p_21->processDataViewUpdate(index, time);
                this->p_22->processDataViewUpdate(index, time);
                this->p_23->processDataViewUpdate(index, time);
                this->p_24->processDataViewUpdate(index, time);
                this->p_25->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->liststore_11_storage_storageobj = initDataRef("liststore_11_storage_storageobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->liststore_11_storage_storageobj->setIndex(4);
                this->liststore_11_storage_storage = new Float64Buffer(this->liststore_11_storage_storageobj);
            }
            
            protected:
            
            void eventinlet_29_out1_bang_bang() {
                this->numberobj_60_value_bang();
            }
            
            void eventinlet_29_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_60_value_set(converted);
                }
            }
            
            void numberobj_60_valin_set(number v) {
                this->numberobj_60_value_set(v);
            }
            
            void numberobj_60_format_set(number v) {
                this->numberobj_60_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_219_listin_list_set(const list& v) {
                this->message_219_set_set(v);
            }
            
            void message_219_listin_number_set(number v) {
                this->message_219_set_set(v);
            }
            
            void message_219_listin_bang_bang() {
                this->message_219_trigger_bang();
            }
            
            void button_28_bangin_bang() {
                this->button_28_bangval_bang();
            }
            
            void message_220_listin_list_set(const list& v) {
                this->message_220_set_set(v);
            }
            
            void message_220_listin_number_set(number v) {
                this->message_220_set_set(v);
            }
            
            void message_220_listin_bang_bang() {
                this->message_220_trigger_bang();
            }
            
            void button_29_bangin_bang() {
                this->button_29_bangval_bang();
            }
            
            void eventinlet_30_out1_bang_bang() {
                this->select_18_input_bang_bang();
            }
            
            void eventinlet_30_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->select_18_input_number_set(converted);
                }
            }
            
            void message_221_listin_list_set(const list& v) {
                this->message_221_set_set(v);
            }
            
            void message_221_listin_number_set(number v) {
                this->message_221_set_set(v);
            }
            
            void message_221_listin_bang_bang() {
                this->message_221_trigger_bang();
            }
            
            void message_222_listin_list_set(const list& v) {
                this->message_222_set_set(v);
            }
            
            void message_222_listin_number_set(number v) {
                this->message_222_set_set(v);
            }
            
            void message_222_listin_bang_bang() {
                this->message_222_trigger_bang();
            }
            
            void button_30_bangin_bang() {
                this->button_30_bangval_bang();
            }
            
            void message_223_listin_list_set(const list& v) {
                this->message_223_set_set(v);
            }
            
            void message_223_listin_number_set(number v) {
                this->message_223_set_set(v);
            }
            
            void message_223_listin_bang_bang() {
                this->message_223_trigger_bang();
            }
            
            void message_224_listin_list_set(const list& v) {
                this->message_224_set_set(v);
            }
            
            void message_224_listin_number_set(number v) {
                this->message_224_set_set(v);
            }
            
            void message_224_listin_bang_bang() {
                this->message_224_trigger_bang();
            }
            
            void message_225_listin_list_set(const list& v) {
                this->message_225_set_set(v);
            }
            
            void message_225_listin_number_set(number v) {
                this->message_225_set_set(v);
            }
            
            void message_225_listin_bang_bang() {
                this->message_225_trigger_bang();
            }
            
            void button_31_bangin_bang() {
                this->button_31_bangval_bang();
            }
            
            void message_226_listin_list_set(const list& v) {
                this->message_226_set_set(v);
            }
            
            void message_226_listin_number_set(number v) {
                this->message_226_set_set(v);
            }
            
            void message_226_listin_bang_bang() {
                this->message_226_trigger_bang();
            }
            
            void button_32_bangin_bang() {
                this->button_32_bangval_bang();
            }
            
            void button_33_bangin_bang() {
                this->button_33_bangval_bang();
            }
            
            void button_34_bangin_bang() {
                this->button_34_bangval_bang();
            }
            
            void message_227_listin_list_set(const list& v) {
                this->message_227_set_set(v);
            }
            
            void message_227_listin_number_set(number v) {
                this->message_227_set_set(v);
            }
            
            void message_227_listin_bang_bang() {
                this->message_227_trigger_bang();
            }
            
            void message_228_listin_list_set(const list& v) {
                this->message_228_set_set(v);
            }
            
            void message_228_listin_number_set(number v) {
                this->message_228_set_set(v);
            }
            
            void message_228_listin_bang_bang() {
                this->message_228_trigger_bang();
            }
            
            void button_35_bangin_bang() {
                this->button_35_bangval_bang();
            }
            
            void message_229_listin_list_set(const list& v) {
                this->message_229_set_set(v);
            }
            
            void message_229_listin_number_set(number v) {
                this->message_229_set_set(v);
            }
            
            void message_229_listin_bang_bang() {
                this->message_229_trigger_bang();
            }
            
            void message_230_listin_list_set(const list& v) {
                this->message_230_set_set(v);
            }
            
            void message_230_listin_number_set(number v) {
                this->message_230_set_set(v);
            }
            
            void message_230_listin_bang_bang() {
                this->message_230_trigger_bang();
            }
            
            void message_231_listin_list_set(const list& v) {
                this->message_231_set_set(v);
            }
            
            void message_231_listin_number_set(number v) {
                this->message_231_set_set(v);
            }
            
            void message_231_listin_bang_bang() {
                this->message_231_trigger_bang();
            }
            
            void message_232_listin_list_set(const list& v) {
                this->message_232_set_set(v);
            }
            
            void message_232_listin_number_set(number v) {
                this->message_232_set_set(v);
            }
            
            void message_232_listin_bang_bang() {
                this->message_232_trigger_bang();
            }
            
            void message_233_listin_list_set(const list& v) {
                this->message_233_set_set(v);
            }
            
            void message_233_listin_number_set(number v) {
                this->message_233_set_set(v);
            }
            
            void message_233_listin_bang_bang() {
                this->message_233_trigger_bang();
            }
            
            void message_234_listin_list_set(const list& v) {
                this->message_234_set_set(v);
            }
            
            void message_234_listin_number_set(number v) {
                this->message_234_set_set(v);
            }
            
            void message_234_listin_bang_bang() {
                this->message_234_trigger_bang();
            }
            
            void message_235_listin_list_set(const list& v) {
                this->message_235_set_set(v);
            }
            
            void message_235_listin_number_set(number v) {
                this->message_235_set_set(v);
            }
            
            void message_235_listin_bang_bang() {
                this->message_235_trigger_bang();
            }
            
            void message_236_listin_list_set(const list& v) {
                this->message_236_set_set(v);
            }
            
            void message_236_listin_number_set(number v) {
                this->message_236_set_set(v);
            }
            
            void message_236_listin_bang_bang() {
                this->message_236_trigger_bang();
            }
            
            void message_237_listin_list_set(const list& v) {
                this->message_237_set_set(v);
            }
            
            void message_237_listin_number_set(number v) {
                this->message_237_set_set(v);
            }
            
            void message_237_listin_bang_bang() {
                this->message_237_trigger_bang();
            }
            
            void message_238_listin_list_set(const list& v) {
                this->message_238_set_set(v);
            }
            
            void message_238_listin_number_set(number v) {
                this->message_238_set_set(v);
            }
            
            void message_238_listin_bang_bang() {
                this->message_238_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->liststore_11_storage_init();
                this->numberobj_60_init();
                this->message_219_init();
                this->message_220_init();
                this->message_221_init();
                this->message_222_init();
                this->message_223_init();
                this->message_224_init();
                this->message_225_init();
                this->message_226_init();
                this->message_227_init();
                this->message_228_init();
                this->message_229_init();
                this->message_230_init();
                this->message_231_init();
                this->message_232_init();
                this->message_233_init();
                this->message_234_init();
                this->message_235_init();
                this->message_236_init();
                this->message_237_init();
                this->message_238_init();
                this->p_18->initializeObjects();
                this->p_19->initializeObjects();
                this->p_20->initializeObjects();
                this->p_21->initializeObjects();
                this->p_22->initializeObjects();
                this->p_23->initializeObjects();
                this->p_24->initializeObjects();
                this->p_25->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_18->startup();
                this->p_19->startup();
                this->p_20->startup();
                this->p_21->startup();
                this->p_22->startup();
                this->p_23->startup();
                this->p_24->startup();
                this->p_25->startup();
            }
            
            void allocateDataRefs() {
                this->p_18->allocateDataRefs();
                this->p_19->allocateDataRefs();
                this->p_20->allocateDataRefs();
                this->p_21->allocateDataRefs();
                this->p_22->allocateDataRefs();
                this->p_23->allocateDataRefs();
                this->p_24->allocateDataRefs();
                this->p_25->allocateDataRefs();
                this->liststore_11_storage_storage = this->liststore_11_storage_storage->allocateIfNeeded();
            
                if (this->liststore_11_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_11_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_11_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            }
            
            void liststore_11_storeidx_set(number v) {
                this->liststore_11_storeidx = v;
            }
            
            void p_18_out2_number_set(number v) {
                this->liststore_11_storeidx_set(v);
            }
            
            void liststore_11_storelist_set(const list& v) {
                this->liststore_11_storelist = jsCreateListCopy(v);
                this->liststore_11_storage_store(this->liststore_11_storeidx, v);
            }
            
            void p_18_out1_list_set(const list& v) {
                this->liststore_11_storelist_set(v);
            }
            
            void p_18_in1_bang_bang() {
                this->p_18->updateTime(this->_currentTime);
                this->p_18->eventinlet_22_out1_bang_bang();
            }
            
            void button_29_output_bang() {
                this->p_18_in1_bang_bang();
            }
            
            void button_29_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextNote/button_obj-156"),
                    this->_currentTime
                );;
            
                this->button_29_output_bang();
            }
            
            void select_18_match1_bang() {
                this->button_29_bangval_bang();
            }
            
            void p_19_out2_number_set(number v) {
                this->liststore_11_storeidx_set(v);
            }
            
            void p_19_out1_list_set(const list& v) {
                this->liststore_11_storelist_set(v);
            }
            
            void p_19_in1_bang_bang() {
                this->p_19->updateTime(this->_currentTime);
                this->p_19->eventinlet_23_out1_bang_bang();
            }
            
            void button_30_output_bang() {
                this->p_19_in1_bang_bang();
            }
            
            void button_30_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextNote/button_obj-162"),
                    this->_currentTime
                );;
            
                this->button_30_output_bang();
            }
            
            void select_18_match2_bang() {
                this->button_30_bangval_bang();
            }
            
            void p_20_out2_number_set(number ) {}
            
            void p_20_out1_list_set(const list& v) {
                this->liststore_11_storelist_set(v);
            }
            
            void p_20_in1_bang_bang() {
                this->p_20->updateTime(this->_currentTime);
                this->p_20->eventinlet_24_out1_bang_bang();
            }
            
            void button_31_output_bang() {
                this->p_20_in1_bang_bang();
            }
            
            void button_31_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextNote/button_obj-163"),
                    this->_currentTime
                );;
            
                this->button_31_output_bang();
            }
            
            void select_18_match3_bang() {
                this->button_31_bangval_bang();
            }
            
            void p_21_dummy_bang() {}
            
            void button_32_output_bang() {
                this->p_21_dummy_bang();
            }
            
            void button_32_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextNote/button_obj-164"),
                    this->_currentTime
                );;
            
                this->button_32_output_bang();
            }
            
            void select_18_match4_bang() {
                this->button_32_bangval_bang();
            }
            
            void p_22_out2_number_set(number v) {
                this->liststore_11_storeidx_set(v);
            }
            
            void p_22_out1_list_set(const list& v) {
                this->liststore_11_storelist_set(v);
            }
            
            void p_22_in1_bang_bang() {
                this->p_22->updateTime(this->_currentTime);
                this->p_22->eventinlet_25_out1_bang_bang();
            }
            
            void button_33_output_bang() {
                this->p_22_in1_bang_bang();
            }
            
            void button_33_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextNote/button_obj-165"),
                    this->_currentTime
                );;
            
                this->button_33_output_bang();
            }
            
            void select_18_match5_bang() {
                this->button_33_bangval_bang();
            }
            
            void p_23_out2_number_set(number v) {
                this->liststore_11_storeidx_set(v);
            }
            
            void p_23_out1_list_set(const list& v) {
                this->liststore_11_storelist_set(v);
            }
            
            void p_23_in1_bang_bang() {
                this->p_23->updateTime(this->_currentTime);
                this->p_23->eventinlet_26_out1_bang_bang();
            }
            
            void button_34_output_bang() {
                this->p_23_in1_bang_bang();
            }
            
            void button_34_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextNote/button_obj-158"),
                    this->_currentTime
                );;
            
                this->button_34_output_bang();
            }
            
            void select_18_match6_bang() {
                this->button_34_bangval_bang();
            }
            
            void p_25_out2_number_set(number v) {
                this->liststore_11_storeidx_set(v);
            }
            
            void p_25_out1_list_set(const list& v) {
                this->liststore_11_storelist_set(v);
            }
            
            void p_25_in1_bang_bang() {
                this->p_25->updateTime(this->_currentTime);
                this->p_25->eventinlet_28_out1_bang_bang();
            }
            
            void button_35_output_bang() {
                this->p_25_in1_bang_bang();
            }
            
            void button_35_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextNote/button_obj-160"),
                    this->_currentTime
                );;
            
                this->button_35_output_bang();
            }
            
            void select_18_match7_bang() {
                this->button_35_bangval_bang();
            }
            
            void select_18_nomatch_number_set(number ) {}
            
            void select_18_input_number_set(number v) {
                if (v == this->select_18_test1)
                    this->select_18_match1_bang();
                else if (v == this->select_18_test2)
                    this->select_18_match2_bang();
                else if (v == this->select_18_test3)
                    this->select_18_match3_bang();
                else if (v == this->select_18_test4)
                    this->select_18_match4_bang();
                else if (v == this->select_18_test5)
                    this->select_18_match5_bang();
                else if (v == this->select_18_test6)
                    this->select_18_match6_bang();
                else if (v == this->select_18_test7)
                    this->select_18_match7_bang();
                else
                    this->select_18_nomatch_number_set(v);
            }
            
            void eventinlet_30_out1_number_set(number v) {
                this->select_18_input_number_set(v);
            }
            
            void liststore_11_out3_set(number ) {}
            
            void eventoutlet_33_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_27_out1_list_set((list)v);
            }
            
            void liststore_11_out1_set(const list& v) {
                this->eventoutlet_33_in1_list_set(v);
            }
            
            void liststore_11_out2_bang() {}
            
            void liststore_11_lookupidx_set(number v) {
                this->liststore_11_lookupidx = v;
                list val = this->liststore_11_storage_lookup(v);
                this->liststore_11_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_11_out1_set(this->liststore_11_storage_lookup(v));
                } else {
                    this->liststore_11_out2_bang();
                }
            }
            
            void numberobj_60_output_set(number v) {
                this->liststore_11_lookupidx_set(v);
            }
            
            void numberobj_60_value_set(number v) {
                this->numberobj_60_value_setter(v);
                v = this->numberobj_60_value;
                number localvalue = v;
            
                if (this->numberobj_60_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/NextNote/number_obj-81"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_60_output_set(localvalue);
            }
            
            void eventinlet_29_out1_number_set(number v) {
                this->numberobj_60_value_set(v);
            }
            
            void numberobj_60_value_bang() {
                number v = this->numberobj_60_value;
                number localvalue = v;
            
                if (this->numberobj_60_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/NextNote/number_obj-81"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_60_output_set(localvalue);
            }
            
            void message_219_set_set(const list& v) {
                this->message_219_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-143"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_219_out_set(const list& ) {}
            
            void message_219_trigger_bang() {
                this->message_219_out_set(this->message_219_set);
            }
            
            void liststore_11_dump_bang() {
                for (number i = 0; i < 15; i++) {
                    list val = this->liststore_11_storage_lookup(i);
            
                    if (val->length > 0) {
                        this->liststore_11_out3_set(i);
                        this->liststore_11_out1_set(val);
                    }
                }
            }
            
            void button_28_output_bang() {
                this->liststore_11_dump_bang();
            }
            
            void button_28_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Melodies/NextNote/button_obj-27"), this->_currentTime);;
                this->button_28_output_bang();
            }
            
            void message_220_set_set(const list& v) {
                this->message_220_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-142"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_220_out_set(const list& ) {}
            
            void message_220_trigger_bang() {
                this->message_220_out_set(this->message_220_set);
            }
            
            void select_18_nomatch_bang_bang() {}
            
            void select_18_input_bang_bang() {
                this->select_18_nomatch_bang_bang();
            }
            
            void message_221_set_set(const list& v) {
                this->message_221_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-137"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_221_out_set(const list& ) {}
            
            void message_221_trigger_bang() {
                this->message_221_out_set(this->message_221_set);
            }
            
            void message_222_set_set(const list& v) {
                this->message_222_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-136"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_222_out_set(const list& ) {}
            
            void message_222_trigger_bang() {
                this->message_222_out_set(this->message_222_set);
            }
            
            void message_223_set_set(const list& v) {
                this->message_223_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-170"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_223_out_set(const list& ) {}
            
            void message_223_trigger_bang() {
                this->message_223_out_set(this->message_223_set);
            }
            
            void message_224_set_set(const list& v) {
                this->message_224_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-132"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_224_out_set(const list& ) {}
            
            void message_224_trigger_bang() {
                this->message_224_out_set(this->message_224_set);
            }
            
            void message_225_set_set(const list& v) {
                this->message_225_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-130"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_225_out_set(const list& ) {}
            
            void message_225_trigger_bang() {
                this->message_225_out_set(this->message_225_set);
            }
            
            void message_226_set_set(const list& v) {
                this->message_226_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-129"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_226_out_set(const list& ) {}
            
            void message_226_trigger_bang() {
                this->message_226_out_set(this->message_226_set);
            }
            
            void message_227_set_set(const list& v) {
                this->message_227_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-116"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_227_out_set(const list& ) {}
            
            void message_227_trigger_bang() {
                this->message_227_out_set(this->message_227_set);
            }
            
            void message_228_set_set(const list& v) {
                this->message_228_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-115"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_228_out_set(const list& ) {}
            
            void message_228_trigger_bang() {
                this->message_228_out_set(this->message_228_set);
            }
            
            void message_229_set_set(const list& v) {
                this->message_229_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-71"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_229_out_set(const list& ) {}
            
            void message_229_trigger_bang() {
                this->message_229_out_set(this->message_229_set);
            }
            
            void message_230_set_set(const list& v) {
                this->message_230_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-77"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_230_out_set(const list& ) {}
            
            void message_230_trigger_bang() {
                this->message_230_out_set(this->message_230_set);
            }
            
            void message_231_set_set(const list& v) {
                this->message_231_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-75"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_231_out_set(const list& ) {}
            
            void message_231_trigger_bang() {
                this->message_231_out_set(this->message_231_set);
            }
            
            void message_232_set_set(const list& v) {
                this->message_232_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-65"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_232_out_set(const list& ) {}
            
            void message_232_trigger_bang() {
                this->message_232_out_set(this->message_232_set);
            }
            
            void message_233_set_set(const list& v) {
                this->message_233_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-67"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_233_out_set(const list& ) {}
            
            void message_233_trigger_bang() {
                this->message_233_out_set(this->message_233_set);
            }
            
            void message_234_set_set(const list& v) {
                this->message_234_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_234_out_set(const list& ) {}
            
            void message_234_trigger_bang() {
                this->message_234_out_set(this->message_234_set);
            }
            
            void message_235_set_set(const list& v) {
                this->message_235_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-111"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_235_out_set(const list& ) {}
            
            void message_235_trigger_bang() {
                this->message_235_out_set(this->message_235_set);
            }
            
            void message_236_set_set(const list& v) {
                this->message_236_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-79"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_236_out_set(const list& ) {}
            
            void message_236_trigger_bang() {
                this->message_236_out_set(this->message_236_set);
            }
            
            void message_237_set_set(const list& v) {
                this->message_237_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-110"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_237_out_set(const list& ) {}
            
            void message_237_trigger_bang() {
                this->message_237_out_set(this->message_237_set);
            }
            
            void message_238_set_set(const list& v) {
                this->message_238_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextNote/message_obj-119"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_238_out_set(const list& ) {}
            
            void message_238_trigger_bang() {
                this->message_238_out_set(this->message_238_set);
            }
            
            void p_21_out2_number_set(number v) {
                this->liststore_11_storeidx_set(v);
            }
            
            void p_21_out1_list_set(const list& v) {
                this->liststore_11_storelist_set(v);
            }
            
            void p_24_out1_list_set(const list& ) {}
            
            void p_18_perform(Index n) {
                // subpatcher: Imaj7ChordScale
                this->p_18->process(nullptr, 0, nullptr, 0, n);
            }
            
            void p_19_perform(Index n) {
                // subpatcher: III-7ChordScale
                this->p_19->process(nullptr, 0, nullptr, 0, n);
            }
            
            void p_20_perform(Index n) {
                // subpatcher: VI-7ChordScale
                this->p_20->process(nullptr, 0, nullptr, 0, n);
            }
            
            void p_21_perform(Index n) {
                // subpatcher: II-7ChordScale
                this->p_21->process(nullptr, 0, nullptr, 0, n);
            }
            
            void p_22_perform(Index n) {
                // subpatcher: IVmaj7ChordScale
                this->p_22->process(nullptr, 0, nullptr, 0, n);
            }
            
            void p_23_perform(Index n) {
                // subpatcher: VII-7(b5)ChordScale
                this->p_23->process(nullptr, 0, nullptr, 0, n);
            }
            
            void p_24_perform(Index n) {
                // subpatcher: I_chordVariants
                this->p_24->process(nullptr, 0, nullptr, 0, n);
            }
            
            void p_25_perform(Index n) {
                // subpatcher: V7ChordScale
                this->p_25->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_60_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_60_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_60_value = localvalue;
            }
            
            list liststore_11_storage_next(number index) {
                return this->liststore_11_storage_lookup(index);
            }
            
            list liststore_11_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_11_storage__slotcount) {
                    number entrylength = this->liststore_11_storage_storage[(Index)(idx * this->liststore_11_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_11_storage_storage[(Index)(idx * this->liststore_11_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_11_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_11_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_11_storage_storage[(Index)(idx * this->liststore_11_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_11_storage_storage[(Index)(idx * this->liststore_11_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_11_storage_init() {
                this->liststore_11_storage__entrysize = 20 + 1;
                this->liststore_11_storage__slotcount = 15;
                int64_t storagesize = (int64_t)(15 * this->liststore_11_storage__entrysize);
                this->liststore_11_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_11_storage_clear() {
                this->liststore_11_storage_storage->setZero();
            }
            
            void liststore_11_storage_reset() {
                this->liststore_11_storage_init();
                this->liststore_11_storage_clear();
            }
            
            void numberobj_60_init() {
                this->numberobj_60_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/NextNote/number_obj-81"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_60_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_60_value;
            }
            
            void numberobj_60_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_60_value_set(preset["value"]);
            }
            
            void message_219_init() {
                this->message_219_set_set({0, 1, 2, 4, 5, 6, 7});
            }
            
            void message_220_init() {
                this->message_220_set_set({0, 1, 2, 3, 4, 5, 7, 8});
            }
            
            void message_221_init() {
                this->message_221_set_set({1, 2, 4, 5, 6, 8, 9});
            }
            
            void message_222_init() {
                this->message_222_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10});
            }
            
            void message_223_init() {
                this->message_223_set_set({});
            }
            
            void message_224_init() {
                this->message_224_set_set({1, 2, 3, 4, 5, 6, 8, 9, 10, 11});
            }
            
            void message_225_init() {
                this->message_225_set_set({0, 1, 2, 4, 5, 6, 7, 8, 9, 11, 12});
            }
            
            void message_226_init() {
                this->message_226_set_set({1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13});
            }
            
            void message_227_init() {
                this->message_227_set_set({52, 59, 67, 74});
            }
            
            void message_228_init() {
                this->message_228_set_set({57, 64, 72, 79});
            }
            
            void message_229_init() {
                this->message_229_set_set({50, 57, 65, 72});
            }
            
            void message_230_init() {
                this->message_230_set_set({53, 60, 69, 76});
            }
            
            void message_231_init() {
                this->message_231_set_set({59, 65, 74, 81});
            }
            
            void message_232_init() {
                this->message_232_set_set({55, 62, 71, 77});
            }
            
            void message_233_init() {
                this->message_233_set_set({57, 64, 73, 79});
            }
            
            void message_234_init() {
                this->message_234_set_set({59, 66, 75, 81});
            }
            
            void message_235_init() {
                this->message_235_set_set({60, 67, 76, 82});
            }
            
            void message_236_init() {
                this->message_236_set_set({62, 69, 78, 84});
            }
            
            void message_237_init() {
                this->message_237_set_set({64, 71, 80, 86});
            }
            
            void message_238_init() {
                this->message_238_set_set({53, 60, 69, 75});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                liststore_11_lookupidx = 0;
                liststore_11_storeidx = 0;
                numberobj_60_value = 0;
                numberobj_60_value_setter(numberobj_60_value);
                select_18_test1 = 0;
                select_18_test2 = 1;
                select_18_test3 = 2;
                select_18_test4 = 3;
                select_18_test5 = 4;
                select_18_test6 = 5;
                select_18_test7 = 6;
                p_18_target = 0;
                p_19_target = 0;
                p_20_target = 0;
                p_21_target = 0;
                p_22_target = 0;
                p_23_target = 0;
                p_24_target = 0;
                p_25_target = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                liststore_11_storage__slotcount = 1024;
                liststore_11_storage__entrysize = 65;
                numberobj_60_currentFormat = 6;
                numberobj_60_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number liststore_11_lookupidx;
                list liststore_11_storelist;
                number liststore_11_storeidx;
                number numberobj_60_value;
                list message_219_set;
                list message_220_set;
                number select_18_test1;
                number select_18_test2;
                number select_18_test3;
                number select_18_test4;
                number select_18_test5;
                number select_18_test6;
                number select_18_test7;
                number p_18_target;
                list message_221_set;
                list message_222_set;
                number p_19_target;
                list message_223_set;
                list message_224_set;
                list message_225_set;
                number p_20_target;
                list message_226_set;
                number p_21_target;
                number p_22_target;
                number p_23_target;
                number p_24_target;
                list message_227_set;
                list message_228_set;
                number p_25_target;
                list message_229_set;
                list message_230_set;
                list message_231_set;
                list message_232_set;
                list message_233_set;
                list message_234_set;
                list message_235_set;
                list message_236_set;
                list message_237_set;
                list message_238_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef liststore_11_storage_storage;
                number liststore_11_storage__slotcount;
                number liststore_11_storage__entrysize;
                Int numberobj_60_currentFormat;
                number numberobj_60_lastValue;
                number stackprotect_count;
                DataRef liststore_11_storage_storageobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_158* p_18;
                RNBOSubpatcher_159* p_19;
                RNBOSubpatcher_160* p_20;
                RNBOSubpatcher_161* p_21;
                RNBOSubpatcher_162* p_22;
                RNBOSubpatcher_163* p_23;
                RNBOSubpatcher_164* p_24;
                RNBOSubpatcher_165* p_25;
            
    };
    
    class RNBOSubpatcher_168 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_178;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_168()
            {
            }
            
            ~RNBOSubpatcher_168()
            {
            }
            
            virtual RNBOSubpatcher_178* getPatcher() const {
                return static_cast<RNBOSubpatcher_178 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            MillisecondTime currenttime() {
                return this->_currentTime;
            }
            
            number tempo() {
                return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
            }
            
            number tickstoms(number ticks) {
                return ticks / (number)480 * this->safediv(60, this->tempo()) * 1000;
            }
            
            ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
                return this->convertFromNormalizedParameterValue(index, normalizedValue);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            number fold(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high) {
                    return low;
                }
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
                int numWraps = 0;
            
                if (x >= hi) {
                    x -= range;
            
                    if (x >= hi) {
                        numWraps = (x - lo) / range;
                        x -= range * numWraps;
                    }
            
                    numWraps++;
                } else if (x < lo) {
                    x += range;
            
                    if (x < lo) {
                        numWraps = (x - lo) / range - 1;
                        x -= range * numWraps;
                    }
            
                    numWraps--;
                }
            
                if ((BinOpInt)((BinOpInt)numWraps & (BinOpInt)1))
                    x = hi + lo - x;
            
                return x;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double samplerate) {
                this->translate_03_onSampleRateChanged(samplerate);
            }
            
            void processTempoEvent(MillisecondTime time, Tempo tempo) {
                this->updateTime(time);
                this->translate_03_onTempoChanged(tempo);
            }
            
            void processTransportEvent(MillisecondTime , TransportState ) {}
            
            void processBeatTimeEvent(MillisecondTime , BeatTime ) {}
            
            void processTimeSignatureEvent(MillisecondTime , int , int ) {}
            
            void processBBUEvent(MillisecondTime , number , number , number ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& preset) {
                this->param_12_getPresetValue(getSubState(preset, "MelDur"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                this->updateTime(time);
            
                switch (index) {
                case 0:
                    {
                    this->param_12_value_set(v);
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                case 0:
                    {
                    return this->param_12_value;
                    }
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 1;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "MelDur";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                case 0:
                    {
                    return "Melodies/MelNote/MelDur";
                    }
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    case 0:
                        {
                        info->type = ParameterTypeNumber;
                        info->initialValue = 2;
                        info->min = 0;
                        info->max = 6;
                        info->exponent = 1;
                        info->steps = 7;
                        static const char * eVal0[] = {"1nd", "2nd", "4nd", "8nd", "16nd", "32nd", "64nd"};
                        info->enumValues = eVal0;
                        info->debug = false;
                        info->saveable = true;
                        info->transmittable = true;
                        info->initialized = true;
                        info->visible = true;
                        info->displayName = "";
                        info->unit = "";
                        info->ioType = IOTypeUndefined;
                        info->signalIndex = INVALID_INDEX;
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    {
                        value = (value < 0 ? 0 : (value > 6 ? 6 : value));
                        ParameterValue normalizedValue = (value - 0) / (6 - 0);
            
                        {
                            normalizedValue = this->applyStepsToNormalizedParameterValue(normalizedValue, 7);
                        }
            
                        return normalizedValue;
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                case 0:
                    {
                    {
                        {
                            value = this->applyStepsToNormalizedParameterValue(value, 7);
                        }
            
                        {
                            return 0 + value * (6 - 0);
                        }
                    }
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                case 0:
                    {
                    return this->param_12_value_constrain(value);
                    }
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Melodies/MelNote/message_obj-200") == objectId)
                        this->message_239_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-196") == objectId)
                        this->message_240_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-203") == objectId)
                        this->message_241_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-54") == objectId)
                        this->message_242_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-59") == objectId)
                        this->message_243_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-56") == objectId)
                        this->message_244_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-57") == objectId)
                        this->message_245_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-4") == objectId)
                        this->message_246_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-26") == objectId)
                        this->message_247_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-25") == objectId)
                        this->message_248_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-24") == objectId)
                        this->message_249_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-22") == objectId)
                        this->message_250_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-21") == objectId)
                        this->message_251_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-20") == objectId)
                        this->message_252_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-17") == objectId)
                        this->message_253_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-16") == objectId)
                        this->message_254_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-19") == objectId)
                        this->message_255_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-15") == objectId)
                        this->message_256_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-18") == objectId)
                        this->message_257_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-14") == objectId)
                        this->message_258_listin_number_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-13") == objectId)
                        this->message_259_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("Melodies/MelNote/number_obj-23") == objectId)
                        this->numberobj_61_valin_set(payload);
            
                    if (TAG("Melodies/MelNote/number_obj-49") == objectId)
                        this->numberobj_62_valin_set(payload);
            
                    if (TAG("Melodies/MelNote/number_obj-193") == objectId)
                        this->numberobj_63_valin_set(payload);
            
                    if (TAG("Melodies/MelNote/number_obj-28") == objectId)
                        this->numberobj_64_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Melodies/MelNote/number_obj-23") == objectId)
                        this->numberobj_61_format_set(payload);
            
                    if (TAG("Melodies/MelNote/number_obj-49") == objectId)
                        this->numberobj_62_format_set(payload);
            
                    if (TAG("Melodies/MelNote/number_obj-193") == objectId)
                        this->numberobj_63_format_set(payload);
            
                    if (TAG("Melodies/MelNote/number_obj-28") == objectId)
                        this->numberobj_64_format_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Melodies/MelNote/message_obj-200") == objectId)
                        this->message_239_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-196") == objectId)
                        this->message_240_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-203") == objectId)
                        this->message_241_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-54") == objectId)
                        this->message_242_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-59") == objectId)
                        this->message_243_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-56") == objectId)
                        this->message_244_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-57") == objectId)
                        this->message_245_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-4") == objectId)
                        this->message_246_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-26") == objectId)
                        this->message_247_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-25") == objectId)
                        this->message_248_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-24") == objectId)
                        this->message_249_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-22") == objectId)
                        this->message_250_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-21") == objectId)
                        this->message_251_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-20") == objectId)
                        this->message_252_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-17") == objectId)
                        this->message_253_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-16") == objectId)
                        this->message_254_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-19") == objectId)
                        this->message_255_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-15") == objectId)
                        this->message_256_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-18") == objectId)
                        this->message_257_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-14") == objectId)
                        this->message_258_listin_list_set(payload);
            
                    if (TAG("Melodies/MelNote/message_obj-13") == objectId)
                        this->message_259_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Melodies/MelNote/message_obj-200") == objectId)
                        this->message_239_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-196") == objectId)
                        this->message_240_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-203") == objectId)
                        this->message_241_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-54") == objectId)
                        this->message_242_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-59") == objectId)
                        this->message_243_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-56") == objectId)
                        this->message_244_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-57") == objectId)
                        this->message_245_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-4") == objectId)
                        this->message_246_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-26") == objectId)
                        this->message_247_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-25") == objectId)
                        this->message_248_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-24") == objectId)
                        this->message_249_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-22") == objectId)
                        this->message_250_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-21") == objectId)
                        this->message_251_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-20") == objectId)
                        this->message_252_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-17") == objectId)
                        this->message_253_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-16") == objectId)
                        this->message_254_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-19") == objectId)
                        this->message_255_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-15") == objectId)
                        this->message_256_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-18") == objectId)
                        this->message_257_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-14") == objectId)
                        this->message_258_listin_bang_bang();
            
                    if (TAG("Melodies/MelNote/message_obj-13") == objectId)
                        this->message_259_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("Melodies/MelNote/button_obj-9") == objectId)
                        this->button_36_bangin_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Melodies/MelNote/message_obj-200"):
                    {
                    return "Melodies/MelNote/message_obj-200";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Melodies/MelNote/number_obj-23"):
                    {
                    return "Melodies/MelNote/number_obj-23";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Melodies/MelNote/message_obj-196"):
                    {
                    return "Melodies/MelNote/message_obj-196";
                    }
                case TAG("Melodies/MelNote/message_obj-203"):
                    {
                    return "Melodies/MelNote/message_obj-203";
                    }
                case TAG("Melodies/MelNote/message_obj-54"):
                    {
                    return "Melodies/MelNote/message_obj-54";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Melodies/MelNote/button_obj-9"):
                    {
                    return "Melodies/MelNote/button_obj-9";
                    }
                case TAG("Melodies/MelNote/number_obj-49"):
                    {
                    return "Melodies/MelNote/number_obj-49";
                    }
                case TAG("Melodies/MelNote/number_obj-193"):
                    {
                    return "Melodies/MelNote/number_obj-193";
                    }
                case TAG("Melodies/MelNote/message_obj-59"):
                    {
                    return "Melodies/MelNote/message_obj-59";
                    }
                case TAG("Melodies/MelNote/message_obj-56"):
                    {
                    return "Melodies/MelNote/message_obj-56";
                    }
                case TAG("Melodies/MelNote/message_obj-57"):
                    {
                    return "Melodies/MelNote/message_obj-57";
                    }
                case TAG("Melodies/MelNote/message_obj-4"):
                    {
                    return "Melodies/MelNote/message_obj-4";
                    }
                case TAG("Melodies/MelNote/number_obj-28"):
                    {
                    return "Melodies/MelNote/number_obj-28";
                    }
                case TAG("Melodies/MelNote/message_obj-26"):
                    {
                    return "Melodies/MelNote/message_obj-26";
                    }
                case TAG("Melodies/MelNote/message_obj-25"):
                    {
                    return "Melodies/MelNote/message_obj-25";
                    }
                case TAG("Melodies/MelNote/message_obj-24"):
                    {
                    return "Melodies/MelNote/message_obj-24";
                    }
                case TAG("Melodies/MelNote/message_obj-22"):
                    {
                    return "Melodies/MelNote/message_obj-22";
                    }
                case TAG("Melodies/MelNote/message_obj-21"):
                    {
                    return "Melodies/MelNote/message_obj-21";
                    }
                case TAG("Melodies/MelNote/message_obj-20"):
                    {
                    return "Melodies/MelNote/message_obj-20";
                    }
                case TAG("Melodies/MelNote/message_obj-17"):
                    {
                    return "Melodies/MelNote/message_obj-17";
                    }
                case TAG("Melodies/MelNote/message_obj-16"):
                    {
                    return "Melodies/MelNote/message_obj-16";
                    }
                case TAG("Melodies/MelNote/message_obj-19"):
                    {
                    return "Melodies/MelNote/message_obj-19";
                    }
                case TAG("Melodies/MelNote/message_obj-15"):
                    {
                    return "Melodies/MelNote/message_obj-15";
                    }
                case TAG("Melodies/MelNote/message_obj-18"):
                    {
                    return "Melodies/MelNote/message_obj-18";
                    }
                case TAG("Melodies/MelNote/message_obj-14"):
                    {
                    return "Melodies/MelNote/message_obj-14";
                    }
                case TAG("Melodies/MelNote/message_obj-13"):
                    {
                    return "Melodies/MelNote/message_obj-13";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void eventinlet_31_out1_bang_bang() {
                this->param_12_value_bang();
            }
            
            void eventinlet_31_out1_list_set(const list& v) {
                {
                    if (v->length > 1)
                        this->param_12_normalizedvalue_set(v[1]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->param_12_value_set(converted);
                }
            }
            
            void message_239_listin_list_set(const list& v) {
                this->message_239_set_set(v);
            }
            
            void message_239_listin_number_set(number v) {
                this->message_239_set_set(v);
            }
            
            void message_239_listin_bang_bang() {
                this->message_239_trigger_bang();
            }
            
            void numberobj_61_valin_set(number v) {
                this->numberobj_61_value_set(v);
            }
            
            void numberobj_61_format_set(number v) {
                this->numberobj_61_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_240_listin_list_set(const list& v) {
                this->message_240_set_set(v);
            }
            
            void message_240_listin_number_set(number v) {
                this->message_240_set_set(v);
            }
            
            void message_240_listin_bang_bang() {
                this->message_240_trigger_bang();
            }
            
            void message_241_listin_list_set(const list& v) {
                this->message_241_set_set(v);
            }
            
            void message_241_listin_number_set(number v) {
                this->message_241_set_set(v);
            }
            
            void message_241_listin_bang_bang() {
                this->message_241_trigger_bang();
            }
            
            void message_242_listin_list_set(const list& v) {
                this->message_242_set_set(v);
            }
            
            void message_242_listin_number_set(number v) {
                this->message_242_set_set(v);
            }
            
            void message_242_listin_bang_bang() {
                this->message_242_trigger_bang();
            }
            
            void button_36_bangin_bang() {
                this->button_36_bangval_bang();
            }
            
            void numberobj_62_valin_set(number v) {
                this->numberobj_62_value_set(v);
            }
            
            void numberobj_62_format_set(number v) {
                this->numberobj_62_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_63_valin_set(number v) {
                this->numberobj_63_value_set(v);
            }
            
            void numberobj_63_format_set(number v) {
                this->numberobj_63_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_243_listin_list_set(const list& v) {
                this->message_243_set_set(v);
            }
            
            void message_243_listin_number_set(number v) {
                this->message_243_set_set(v);
            }
            
            void message_243_listin_bang_bang() {
                this->message_243_trigger_bang();
            }
            
            void message_244_listin_list_set(const list& v) {
                this->message_244_set_set(v);
            }
            
            void message_244_listin_number_set(number v) {
                this->message_244_set_set(v);
            }
            
            void message_244_listin_bang_bang() {
                this->message_244_trigger_bang();
            }
            
            void message_245_listin_list_set(const list& v) {
                this->message_245_set_set(v);
            }
            
            void message_245_listin_number_set(number v) {
                this->message_245_set_set(v);
            }
            
            void message_245_listin_bang_bang() {
                this->message_245_trigger_bang();
            }
            
            void message_246_listin_list_set(const list& v) {
                this->message_246_set_set(v);
            }
            
            void message_246_listin_number_set(number v) {
                this->message_246_set_set(v);
            }
            
            void message_246_listin_bang_bang() {
                this->message_246_trigger_bang();
            }
            
            void numberobj_64_valin_set(number v) {
                this->numberobj_64_value_set(v);
            }
            
            void numberobj_64_format_set(number v) {
                this->numberobj_64_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_247_listin_list_set(const list& v) {
                this->message_247_set_set(v);
            }
            
            void message_247_listin_number_set(number v) {
                this->message_247_set_set(v);
            }
            
            void message_247_listin_bang_bang() {
                this->message_247_trigger_bang();
            }
            
            void message_248_listin_list_set(const list& v) {
                this->message_248_set_set(v);
            }
            
            void message_248_listin_number_set(number v) {
                this->message_248_set_set(v);
            }
            
            void message_248_listin_bang_bang() {
                this->message_248_trigger_bang();
            }
            
            void message_249_listin_list_set(const list& v) {
                this->message_249_set_set(v);
            }
            
            void message_249_listin_number_set(number v) {
                this->message_249_set_set(v);
            }
            
            void message_249_listin_bang_bang() {
                this->message_249_trigger_bang();
            }
            
            void message_250_listin_list_set(const list& v) {
                this->message_250_set_set(v);
            }
            
            void message_250_listin_number_set(number v) {
                this->message_250_set_set(v);
            }
            
            void message_250_listin_bang_bang() {
                this->message_250_trigger_bang();
            }
            
            void message_251_listin_list_set(const list& v) {
                this->message_251_set_set(v);
            }
            
            void message_251_listin_number_set(number v) {
                this->message_251_set_set(v);
            }
            
            void message_251_listin_bang_bang() {
                this->message_251_trigger_bang();
            }
            
            void message_252_listin_list_set(const list& v) {
                this->message_252_set_set(v);
            }
            
            void message_252_listin_number_set(number v) {
                this->message_252_set_set(v);
            }
            
            void message_252_listin_bang_bang() {
                this->message_252_trigger_bang();
            }
            
            void message_253_listin_list_set(const list& v) {
                this->message_253_set_set(v);
            }
            
            void message_253_listin_number_set(number v) {
                this->message_253_set_set(v);
            }
            
            void message_253_listin_bang_bang() {
                this->message_253_trigger_bang();
            }
            
            void message_254_listin_list_set(const list& v) {
                this->message_254_set_set(v);
            }
            
            void message_254_listin_number_set(number v) {
                this->message_254_set_set(v);
            }
            
            void message_254_listin_bang_bang() {
                this->message_254_trigger_bang();
            }
            
            void message_255_listin_list_set(const list& v) {
                this->message_255_set_set(v);
            }
            
            void message_255_listin_number_set(number v) {
                this->message_255_set_set(v);
            }
            
            void message_255_listin_bang_bang() {
                this->message_255_trigger_bang();
            }
            
            void message_256_listin_list_set(const list& v) {
                this->message_256_set_set(v);
            }
            
            void message_256_listin_number_set(number v) {
                this->message_256_set_set(v);
            }
            
            void message_256_listin_bang_bang() {
                this->message_256_trigger_bang();
            }
            
            void message_257_listin_list_set(const list& v) {
                this->message_257_set_set(v);
            }
            
            void message_257_listin_number_set(number v) {
                this->message_257_set_set(v);
            }
            
            void message_257_listin_bang_bang() {
                this->message_257_trigger_bang();
            }
            
            void message_258_listin_list_set(const list& v) {
                this->message_258_set_set(v);
            }
            
            void message_258_listin_number_set(number v) {
                this->message_258_set_set(v);
            }
            
            void message_258_listin_bang_bang() {
                this->message_258_trigger_bang();
            }
            
            void message_259_listin_list_set(const list& v) {
                this->message_259_set_set(v);
            }
            
            void message_259_listin_number_set(number v) {
                this->message_259_set_set(v);
            }
            
            void message_259_listin_bang_bang() {
                this->message_259_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_239_init();
                this->numberobj_61_init();
                this->message_240_init();
                this->message_241_init();
                this->message_242_init();
                this->drunk_02_nz_init();
                this->numberobj_62_init();
                this->numberobj_63_init();
                this->message_243_init();
                this->message_244_init();
                this->message_245_init();
                this->message_246_init();
                this->numberobj_64_init();
                this->message_247_init();
                this->message_248_init();
                this->message_249_init();
                this->message_250_init();
                this->message_251_init();
                this->message_252_init();
                this->message_253_init();
                this->message_254_init();
                this->message_255_init();
                this->message_256_init();
                this->message_257_init();
                this->message_258_init();
                this->message_259_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->drunk_02_lastValue = this->drunk_02_size * 0.5;
            
                {
                    this->scheduleParamInit(0, 0);
                }
            }
            
            void allocateDataRefs() {}
            
            number param_12_value_constrain(number v) const {
                v = (v > 6 ? 6 : (v < 0 ? 0 : v));
            
                {
                    number oneStep = (number)6 / (number)6;
                    number oneStepInv = (oneStep != 0 ? (number)1 / oneStep : 0);
                    number numberOfSteps = rnbo_fround(v * oneStepInv * 1 / (number)1) * 1;
                    v = numberOfSteps * oneStep;
                }
            
                return v;
            }
            
            void send_04_input_number_set(number v) {
                this->send_04_input_number = v;
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_28_source_CurMelDur_number_set(v);
            }
            
            void numberobj_63_output_set(number ) {}
            
            void numberobj_63_value_set(number v) {
                this->numberobj_63_value_setter(v);
                v = this->numberobj_63_value;
                number localvalue = v;
            
                if (this->numberobj_63_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/MelNote/number_obj-193"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_63_output_set(localvalue);
            }
            
            void numberobj_62_output_set(number ) {}
            
            void numberobj_62_value_set(number v) {
                this->numberobj_62_value_setter(v);
                v = this->numberobj_62_value;
                number localvalue = v;
            
                if (this->numberobj_62_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/MelNote/number_obj-49"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_62_output_set(localvalue);
            }
            
            void message_240_set_set(const list& v) {
                this->message_240_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-196"),
                    v,
                    this->_currentTime
                );
            }
            
            void eventoutlet_34_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_28_out1_number_set(v);
            }
            
            void translate_03_out_set(number v) {
                {
                    list converted = {v};
                    this->message_240_set_set(converted);
                }
            
                this->eventoutlet_34_in1_number_set(v);
            }
            
            void translate_03_value_set(number v) {
                this->translate_03_value = v;
            
                {
                    {
                        {
                            this->translate_03_out_set(this->tickstoms(v));
                        }
                    }
                }
            }
            
            void expr_30_out1_set(number v) {
                this->expr_30_out1 = v;
                this->numberobj_62_value_set(this->expr_30_out1);
                this->translate_03_value_set(this->expr_30_out1);
            }
            
            void expr_30_in1_set(number in1) {
                this->expr_30_in1 = in1;
                this->expr_30_out1_set((this->expr_30_in1 == 0. ? 0. : this->expr_30_in2 / this->expr_30_in1));//#map:Melodies/MelNote/!/_obj-189:1
            }
            
            void expr_29_out1_set(number v) {
                this->expr_29_out1 = v;
                this->numberobj_63_value_set(this->expr_29_out1);
                this->expr_30_in1_set(this->expr_29_out1);
            }
            
            void expr_29_in1_set(number in1) {
                this->expr_29_in1 = in1;
                this->expr_29_out1_set(fixnan(rnbo_pow(2, this->expr_29_in1)));//#map:Melodies/MelNote/expr_obj-188:1
            }
            
            void message_239_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_29_in1_set(converted);
                }
            }
            
            void message_239_trigger_bang() {
                this->message_239_out_set(this->message_239_set);
            }
            
            void select_19_match1_bang() {
                this->message_239_trigger_bang();
            }
            
            void message_241_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_29_in1_set(converted);
                }
            }
            
            void message_241_trigger_bang() {
                this->message_241_out_set(this->message_241_set);
            }
            
            void select_19_match2_bang() {
                this->message_241_trigger_bang();
            }
            
            void message_242_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_29_in1_set(converted);
                }
            }
            
            void message_242_trigger_bang() {
                this->message_242_out_set(this->message_242_set);
            }
            
            void select_19_match3_bang() {
                this->message_242_trigger_bang();
            }
            
            void message_243_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_29_in1_set(converted);
                }
            }
            
            void message_243_trigger_bang() {
                this->message_243_out_set(this->message_243_set);
            }
            
            void select_19_match4_bang() {
                this->message_243_trigger_bang();
            }
            
            void message_244_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_29_in1_set(converted);
                }
            }
            
            void message_244_trigger_bang() {
                this->message_244_out_set(this->message_244_set);
            }
            
            void select_19_match5_bang() {
                this->message_244_trigger_bang();
            }
            
            void message_245_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_29_in1_set(converted);
                }
            }
            
            void message_245_trigger_bang() {
                this->message_245_out_set(this->message_245_set);
            }
            
            void select_19_match6_bang() {
                this->message_245_trigger_bang();
            }
            
            void message_246_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->expr_29_in1_set(converted);
                }
            }
            
            void message_246_trigger_bang() {
                this->message_246_out_set(this->message_246_set);
            }
            
            void select_19_match7_bang() {
                this->message_246_trigger_bang();
            }
            
            void select_19_nomatch_number_set(number ) {}
            
            void select_19_input_number_set(number v) {
                if (v == this->select_19_test1)
                    this->select_19_match1_bang();
                else if (v == this->select_19_test2)
                    this->select_19_match2_bang();
                else if (v == this->select_19_test3)
                    this->select_19_match3_bang();
                else if (v == this->select_19_test4)
                    this->select_19_match4_bang();
                else if (v == this->select_19_test5)
                    this->select_19_match5_bang();
                else if (v == this->select_19_test6)
                    this->select_19_match6_bang();
                else if (v == this->select_19_test7)
                    this->select_19_match7_bang();
                else
                    this->select_19_nomatch_number_set(v);
            }
            
            void numberobj_61_output_set(number v) {
                this->send_04_input_number_set(v);
                this->select_19_input_number_set(v);
            }
            
            void numberobj_61_value_set(number v) {
                this->numberobj_61_value_setter(v);
                v = this->numberobj_61_value;
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 6) {
                    localvalue = 6;
                }
            
                if (this->numberobj_61_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/MelNote/number_obj-23"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_61_output_set(localvalue);
            }
            
            void param_12_value_set(number v) {
                v = this->param_12_value_constrain(v);
                this->param_12_value = v;
                this->sendParameter(0, false);
            
                if (this->param_12_value != this->param_12_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_12_lastValue = this->param_12_value;
                }
            
                this->numberobj_61_value_set(v);
            }
            
            void eventinlet_31_out1_number_set(number v) {
                this->param_12_value_set(v);
            }
            
            void param_12_value_bang() {
                number v = this->param_12_value;
                this->sendParameter(0, false);
            
                if (this->param_12_value != this->param_12_lastValue) {
                    this->getEngine()->presetTouched();
                    this->param_12_lastValue = this->param_12_value;
                }
            
                this->numberobj_61_value_set(v);
            }
            
            void param_12_normalizedvalue_set(number v) {
                this->param_12_value_set(this->fromnormalized(0, v));
            }
            
            void message_239_set_set(const list& v) {
                this->message_239_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-200"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_240_out_set(const list& ) {}
            
            void message_240_trigger_bang() {
                this->message_240_out_set(this->message_240_set);
            }
            
            void message_241_set_set(const list& v) {
                this->message_241_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-203"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_242_set_set(const list& v) {
                this->message_242_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-54"),
                    v,
                    this->_currentTime
                );
            }
            
            void drunk_02_out_set(number v) {
                this->drunk_02_out = v;
            }
            
            void drunk_02_trigger_bang_bang() {
                {
                    this->drunk_02_lastValue = this->drunk_02_getDoubleRandom();
                }
            
                this->drunk_02_out_set(this->drunk_02_lastValue);
            }
            
            void button_36_output_bang() {
                this->drunk_02_trigger_bang_bang();
            }
            
            void button_36_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Melodies/MelNote/button_obj-9"), this->_currentTime);;
                this->button_36_output_bang();
            }
            
            void message_243_set_set(const list& v) {
                this->message_243_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-59"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_244_set_set(const list& v) {
                this->message_244_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-56"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_245_set_set(const list& v) {
                this->message_245_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-57"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_246_set_set(const list& v) {
                this->message_246_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-4"),
                    v,
                    this->_currentTime
                );
            }
            
            void numberobj_64_output_set(number ) {}
            
            void numberobj_64_value_set(number v) {
                this->numberobj_64_value_setter(v);
                v = this->numberobj_64_value;
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 12) {
                    localvalue = 12;
                }
            
                if (this->numberobj_64_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/MelNote/number_obj-28"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_64_output_set(localvalue);
            }
            
            void message_247_set_set(const list& v) {
                this->message_247_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-26"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_247_out_set(const list& ) {}
            
            void message_247_trigger_bang() {
                this->message_247_out_set(this->message_247_set);
            }
            
            void message_248_set_set(const list& v) {
                this->message_248_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-25"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_248_out_set(const list& ) {}
            
            void message_248_trigger_bang() {
                this->message_248_out_set(this->message_248_set);
            }
            
            void message_249_set_set(const list& v) {
                this->message_249_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-24"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_249_out_set(const list& ) {}
            
            void message_249_trigger_bang() {
                this->message_249_out_set(this->message_249_set);
            }
            
            void message_250_set_set(const list& v) {
                this->message_250_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-22"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_250_out_set(const list& ) {}
            
            void message_250_trigger_bang() {
                this->message_250_out_set(this->message_250_set);
            }
            
            void message_251_set_set(const list& v) {
                this->message_251_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-21"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_251_out_set(const list& ) {}
            
            void message_251_trigger_bang() {
                this->message_251_out_set(this->message_251_set);
            }
            
            void message_252_set_set(const list& v) {
                this->message_252_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-20"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_252_out_set(const list& ) {}
            
            void message_252_trigger_bang() {
                this->message_252_out_set(this->message_252_set);
            }
            
            void message_253_set_set(const list& v) {
                this->message_253_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-17"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_253_out_set(const list& ) {}
            
            void message_253_trigger_bang() {
                this->message_253_out_set(this->message_253_set);
            }
            
            void message_254_set_set(const list& v) {
                this->message_254_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-16"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_254_out_set(const list& ) {}
            
            void message_254_trigger_bang() {
                this->message_254_out_set(this->message_254_set);
            }
            
            void message_255_set_set(const list& v) {
                this->message_255_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-19"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_255_out_set(const list& ) {}
            
            void message_255_trigger_bang() {
                this->message_255_out_set(this->message_255_set);
            }
            
            void message_256_set_set(const list& v) {
                this->message_256_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-15"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_256_out_set(const list& ) {}
            
            void message_256_trigger_bang() {
                this->message_256_out_set(this->message_256_set);
            }
            
            void message_257_set_set(const list& v) {
                this->message_257_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-18"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_257_out_set(const list& ) {}
            
            void message_257_trigger_bang() {
                this->message_257_out_set(this->message_257_set);
            }
            
            void message_258_set_set(const list& v) {
                this->message_258_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-14"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_258_out_set(const list& ) {}
            
            void message_258_trigger_bang() {
                this->message_258_out_set(this->message_258_set);
            }
            
            void message_259_set_set(const list& v) {
                this->message_259_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/MelNote/message_obj-13"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_259_out_set(const list& ) {}
            
            void message_259_trigger_bang() {
                this->message_259_out_set(this->message_259_set);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_61_value_setter(number v) {
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 6) {
                    localvalue = 6;
                }
            
                if (this->numberobj_61_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_61_value = localvalue;
            }
            
            void drunk_02_size_setter(number v) {
                this->drunk_02_size = this->maximum(rnbo_floor(v), 1);
            }
            
            void drunk_02_stepsize_setter(number v) {
                this->drunk_02_stepsize = this->maximum(v, 1);
            }
            
            void numberobj_62_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_62_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_62_value = localvalue;
            }
            
            void numberobj_63_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_63_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_63_value = localvalue;
            }
            
            void numberobj_64_value_setter(number v) {
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 12) {
                    localvalue = 12;
                }
            
                if (this->numberobj_64_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_64_value = localvalue;
            }
            
            void message_239_init() {
                this->message_239_set_set({0});
            }
            
            void translate_03_onTempoChanged(number tempo) {
                RNBO_UNUSED(tempo);
            
                {
                    this->translate_03_value_set(this->translate_03_value);
                }
            }
            
            void translate_03_onSampleRateChanged(number ) {}
            
            void numberobj_61_init() {
                this->numberobj_61_currentFormat = 0;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/MelNote/number_obj-23"), 1, this->_currentTime);
            }
            
            void numberobj_61_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_61_value;
            }
            
            void numberobj_61_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_61_value_set(preset["value"]);
            }
            
            void param_12_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->param_12_value;
            }
            
            void param_12_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->param_12_value_set(preset["value"]);
            }
            
            void message_240_init() {
                this->message_240_set_set({1500});
            }
            
            void message_241_init() {
                this->message_241_set_set({1});
            }
            
            void message_242_init() {
                this->message_242_set_set({2});
            }
            
            void drunk_02_nz_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->drunk_02_nz_state
                );
            }
            
            void drunk_02_nz_init() {
                this->drunk_02_nz_reset();
            }
            
            void drunk_02_nz_seed(number v) {
                xoshiro_reset(v, this->drunk_02_nz_state);
            }
            
            number drunk_02_nz_next() {
                return xoshiro_next(this->drunk_02_nz_state);
            }
            
            number drunk_02_getDoubleRandom() {
                number r = this->drunk_02_nz_next();
            
                return this->fold(
                    this->drunk_02_lastValue + r * (this->drunk_02_stepsize - 1),
                    0,
                    this->drunk_02_size
                );
            }
            
            void numberobj_62_init() {
                this->numberobj_62_currentFormat = 0;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/MelNote/number_obj-49"), 1, this->_currentTime);
            }
            
            void numberobj_62_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_62_value;
            }
            
            void numberobj_62_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_62_value_set(preset["value"]);
            }
            
            void numberobj_63_init() {
                this->numberobj_63_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/MelNote/number_obj-193"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_63_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_63_value;
            }
            
            void numberobj_63_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_63_value_set(preset["value"]);
            }
            
            void message_243_init() {
                this->message_243_set_set({3});
            }
            
            void message_244_init() {
                this->message_244_set_set({4});
            }
            
            void message_245_init() {
                this->message_245_set_set({5});
            }
            
            void message_246_init() {
                this->message_246_set_set({6});
            }
            
            void numberobj_64_init() {
                this->numberobj_64_currentFormat = 0;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/MelNote/number_obj-28"), 1, this->_currentTime);
            }
            
            void numberobj_64_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_64_value;
            }
            
            void numberobj_64_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_64_value_set(preset["value"]);
            }
            
            void message_247_init() {
                this->message_247_set_set({0});
            }
            
            void message_248_init() {
                this->message_248_set_set({0});
            }
            
            void message_249_init() {
                this->message_249_set_set({1});
            }
            
            void message_250_init() {
                this->message_250_set_set({1});
            }
            
            void message_251_init() {
                this->message_251_set_set({2});
            }
            
            void message_252_init() {
                this->message_252_set_set({2});
            }
            
            void message_253_init() {
                this->message_253_set_set({3});
            }
            
            void message_254_init() {
                this->message_254_set_set({3});
            }
            
            void message_255_init() {
                this->message_255_set_set({4});
            }
            
            void message_256_init() {
                this->message_256_set_set({4});
            }
            
            void message_257_init() {
                this->message_257_set_set({5});
            }
            
            void message_258_init() {
                this->message_258_set_set({5});
            }
            
            void message_259_init() {
                this->message_259_set_set({6});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                select_19_test1 = 0;
                select_19_test2 = 1;
                select_19_test3 = 2;
                select_19_test4 = 3;
                select_19_test5 = 4;
                select_19_test6 = 5;
                select_19_test7 = 6;
                expr_27_in1 = 0;
                expr_27_in2 = 1920;
                expr_27_out1 = 0;
                expr_28_in1 = 0;
                expr_28_out1 = 0;
                translate_03_value = 0;
                numberobj_61_value = 0;
                numberobj_61_value_setter(numberobj_61_value);
                param_12_value = 2;
                expr_29_in1 = 0;
                expr_29_out1 = 0;
                expr_30_in1 = 0;
                expr_30_in2 = 2880;
                expr_30_out1 = 0;
                drunk_02_trigger_number = 0;
                drunk_02_size = 7;
                drunk_02_size_setter(drunk_02_size);
                drunk_02_stepsize = 7;
                drunk_02_stepsize_setter(drunk_02_stepsize);
                drunk_02_seed = 0;
                drunk_02_out = 0;
                numberobj_62_value = 0;
                numberobj_62_value_setter(numberobj_62_value);
                send_04_input_number = 0;
                numberobj_63_value = 0;
                numberobj_63_value_setter(numberobj_63_value);
                numberobj_64_value = 0;
                numberobj_64_value_setter(numberobj_64_value);
                select_20_test1 = 0;
                select_20_test2 = 1;
                select_20_test3 = 2;
                select_20_test4 = 3;
                select_20_test5 = 4;
                select_20_test6 = 5;
                select_20_test7 = 6;
                select_20_test8 = 7;
                select_20_test9 = 8;
                select_20_test10 = 9;
                select_20_test11 = 10;
                select_20_test12 = 11;
                select_20_test13 = 12;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_61_currentFormat = 6;
                numberobj_61_lastValue = 0;
                param_12_lastValue = 0;
                drunk_02_lastValue = -1;
                numberobj_62_currentFormat = 6;
                numberobj_62_lastValue = 0;
                numberobj_63_currentFormat = 6;
                numberobj_63_lastValue = 0;
                numberobj_64_currentFormat = 6;
                numberobj_64_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list message_239_set;
                number select_19_test1;
                number select_19_test2;
                number select_19_test3;
                number select_19_test4;
                number select_19_test5;
                number select_19_test6;
                number select_19_test7;
                number expr_27_in1;
                number expr_27_in2;
                number expr_27_out1;
                number expr_28_in1;
                number expr_28_out1;
                number translate_03_value;
                number numberobj_61_value;
                number param_12_value;
                list message_240_set;
                list message_241_set;
                number expr_29_in1;
                number expr_29_out1;
                number expr_30_in1;
                number expr_30_in2;
                number expr_30_out1;
                list message_242_set;
                number drunk_02_trigger_number;
                number drunk_02_size;
                number drunk_02_stepsize;
                number drunk_02_seed;
                number drunk_02_out;
                number numberobj_62_value;
                number send_04_input_number;
                list send_04_input_list;
                number numberobj_63_value;
                list message_243_set;
                list message_244_set;
                list message_245_set;
                list message_246_set;
                number numberobj_64_value;
                list message_247_set;
                number select_20_test1;
                number select_20_test2;
                number select_20_test3;
                number select_20_test4;
                number select_20_test5;
                number select_20_test6;
                number select_20_test7;
                number select_20_test8;
                number select_20_test9;
                number select_20_test10;
                number select_20_test11;
                number select_20_test12;
                number select_20_test13;
                list message_248_set;
                list message_249_set;
                list message_250_set;
                list message_251_set;
                list message_252_set;
                list message_253_set;
                list message_254_set;
                list message_255_set;
                list message_256_set;
                list message_257_set;
                list message_258_set;
                list message_259_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_61_currentFormat;
                number numberobj_61_lastValue;
                number param_12_lastValue;
                number drunk_02_lastValue;
                UInt drunk_02_nz_state[4] = { };
                Int numberobj_62_currentFormat;
                number numberobj_62_lastValue;
                Int numberobj_63_currentFormat;
                number numberobj_63_lastValue;
                Int numberobj_64_currentFormat;
                number numberobj_64_lastValue;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_169 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_178;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_169()
            {
            }
            
            ~RNBOSubpatcher_169()
            {
            }
            
            virtual RNBOSubpatcher_178* getPatcher() const {
                return static_cast<RNBOSubpatcher_178 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -871642103, false);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -871642103:
                    {
                    this->loadbang_11_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Melodies/NextDuration/number_obj-81") == objectId)
                        this->numberobj_65_valin_set(payload);
            
                    if (TAG("Melodies/NextDuration/number_obj-32") == objectId)
                        this->numberobj_66_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Melodies/NextDuration/number_obj-81") == objectId)
                        this->numberobj_65_format_set(payload);
            
                    if (TAG("Melodies/NextDuration/number_obj-32") == objectId)
                        this->numberobj_66_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextDuration/message_obj-8") == objectId)
                        this->message_260_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-15") == objectId)
                        this->message_261_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-16") == objectId)
                        this->message_262_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-19") == objectId)
                        this->message_263_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-18") == objectId)
                        this->message_264_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-170") == objectId)
                        this->message_265_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-17") == objectId)
                        this->message_266_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-30") == objectId)
                        this->message_267_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextDuration/message_obj-8") == objectId)
                        this->message_260_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-15") == objectId)
                        this->message_261_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-16") == objectId)
                        this->message_262_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-19") == objectId)
                        this->message_263_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-18") == objectId)
                        this->message_264_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-170") == objectId)
                        this->message_265_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-17") == objectId)
                        this->message_266_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDuration/message_obj-30") == objectId)
                        this->message_267_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("startupbang"):
                    {
                    if (TAG("Melodies/NextDuration/loadbang_obj-197") == objectId)
                        this->loadbang_11_startupbang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("Melodies/NextDuration/button_obj-186") == objectId)
                        this->button_37_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextDuration/message_obj-8") == objectId)
                        this->message_260_listin_bang_bang();
            
                    if (TAG("Melodies/NextDuration/message_obj-15") == objectId)
                        this->message_261_listin_bang_bang();
            
                    if (TAG("Melodies/NextDuration/message_obj-16") == objectId)
                        this->message_262_listin_bang_bang();
            
                    if (TAG("Melodies/NextDuration/message_obj-19") == objectId)
                        this->message_263_listin_bang_bang();
            
                    if (TAG("Melodies/NextDuration/message_obj-18") == objectId)
                        this->message_264_listin_bang_bang();
            
                    if (TAG("Melodies/NextDuration/message_obj-170") == objectId)
                        this->message_265_listin_bang_bang();
            
                    if (TAG("Melodies/NextDuration/message_obj-17") == objectId)
                        this->message_266_listin_bang_bang();
            
                    if (TAG("Melodies/NextDuration/message_obj-30") == objectId)
                        this->message_267_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Melodies/NextDuration/number_obj-81"):
                    {
                    return "Melodies/NextDuration/number_obj-81";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Melodies/NextDuration/button_obj-186"):
                    {
                    return "Melodies/NextDuration/button_obj-186";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Melodies/NextDuration/message_obj-8"):
                    {
                    return "Melodies/NextDuration/message_obj-8";
                    }
                case TAG("Melodies/NextDuration/message_obj-15"):
                    {
                    return "Melodies/NextDuration/message_obj-15";
                    }
                case TAG("Melodies/NextDuration/message_obj-16"):
                    {
                    return "Melodies/NextDuration/message_obj-16";
                    }
                case TAG("Melodies/NextDuration/message_obj-19"):
                    {
                    return "Melodies/NextDuration/message_obj-19";
                    }
                case TAG("Melodies/NextDuration/message_obj-18"):
                    {
                    return "Melodies/NextDuration/message_obj-18";
                    }
                case TAG("Melodies/NextDuration/message_obj-170"):
                    {
                    return "Melodies/NextDuration/message_obj-170";
                    }
                case TAG("Melodies/NextDuration/message_obj-17"):
                    {
                    return "Melodies/NextDuration/message_obj-17";
                    }
                case TAG("Melodies/NextDuration/number_obj-32"):
                    {
                    return "Melodies/NextDuration/number_obj-32";
                    }
                case TAG("Melodies/NextDuration/message_obj-30"):
                    {
                    return "Melodies/NextDuration/message_obj-30";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("Melodies/NextDuration/loadbang_obj-197"):
                    {
                    return "Melodies/NextDuration/loadbang_obj-197";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->liststore_12_storage_storageobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 1;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->liststore_12_storage_storage = new Float64Buffer(this->liststore_12_storage_storageobj);
                }
            }
            
            void initialize() {
                this->liststore_12_storage_storageobj = initDataRef("liststore_12_storage_storageobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->liststore_12_storage_storageobj->setIndex(4);
                this->liststore_12_storage_storage = new Float64Buffer(this->liststore_12_storage_storageobj);
            }
            
            protected:
            
            void numberobj_65_valin_set(number v) {
                this->numberobj_65_value_set(v);
            }
            
            void numberobj_65_format_set(number v) {
                this->numberobj_65_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_32_out1_bang_bang() {
                this->numberobj_65_value_bang();
            }
            
            void eventinlet_32_out1_number_set(number v) {
                this->numberobj_65_value_set(v);
            }
            
            void eventinlet_32_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_65_value_set(converted);
                }
            }
            
            void loadbang_11_startupbang_bang() {
                this->loadbang_11_output_bang();
            }
            
            void button_37_bangin_bang() {
                this->button_37_bangval_bang();
            }
            
            void message_260_listin_list_set(const list& v) {
                this->message_260_set_set(v);
            }
            
            void message_260_listin_number_set(number v) {
                this->message_260_set_set(v);
            }
            
            void message_260_listin_bang_bang() {
                this->message_260_trigger_bang();
            }
            
            void message_261_listin_list_set(const list& v) {
                this->message_261_set_set(v);
            }
            
            void message_261_listin_number_set(number v) {
                this->message_261_set_set(v);
            }
            
            void message_261_listin_bang_bang() {
                this->message_261_trigger_bang();
            }
            
            void message_262_listin_list_set(const list& v) {
                this->message_262_set_set(v);
            }
            
            void message_262_listin_number_set(number v) {
                this->message_262_set_set(v);
            }
            
            void message_262_listin_bang_bang() {
                this->message_262_trigger_bang();
            }
            
            void message_263_listin_list_set(const list& v) {
                this->message_263_set_set(v);
            }
            
            void message_263_listin_number_set(number v) {
                this->message_263_set_set(v);
            }
            
            void message_263_listin_bang_bang() {
                this->message_263_trigger_bang();
            }
            
            void message_264_listin_list_set(const list& v) {
                this->message_264_set_set(v);
            }
            
            void message_264_listin_number_set(number v) {
                this->message_264_set_set(v);
            }
            
            void message_264_listin_bang_bang() {
                this->message_264_trigger_bang();
            }
            
            void message_265_listin_list_set(const list& v) {
                this->message_265_set_set(v);
            }
            
            void message_265_listin_number_set(number v) {
                this->message_265_set_set(v);
            }
            
            void message_265_listin_bang_bang() {
                this->message_265_trigger_bang();
            }
            
            void message_266_listin_list_set(const list& v) {
                this->message_266_set_set(v);
            }
            
            void message_266_listin_number_set(number v) {
                this->message_266_set_set(v);
            }
            
            void message_266_listin_bang_bang() {
                this->message_266_trigger_bang();
            }
            
            void numberobj_66_valin_set(number v) {
                this->numberobj_66_value_set(v);
            }
            
            void numberobj_66_format_set(number v) {
                this->numberobj_66_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_267_listin_list_set(const list& v) {
                this->message_267_set_set(v);
            }
            
            void message_267_listin_number_set(number v) {
                this->message_267_set_set(v);
            }
            
            void message_267_listin_bang_bang() {
                this->message_267_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->liststore_12_storage_init();
                this->numberobj_65_init();
                this->message_260_init();
                this->message_261_init();
                this->message_262_init();
                this->message_263_init();
                this->message_264_init();
                this->message_265_init();
                this->message_266_init();
                this->numberobj_66_init();
                this->message_267_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->liststore_12_storage_storage = this->liststore_12_storage_storage->allocateIfNeeded();
            
                if (this->liststore_12_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_12_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_12_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            }
            
            void receive_06_output_number_set(number v) {
                this->receive_06_output_number = v;
            }
            
            void liststore_12_out3_set(number ) {}
            
            void eventoutlet_35_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_29_out1_list_set((list)v);
            }
            
            void liststore_12_out1_set(const list& v) {
                this->eventoutlet_35_in1_list_set(v);
            }
            
            void liststore_12_out2_bang() {}
            
            void liststore_12_lookupidx_set(number v) {
                this->liststore_12_lookupidx = v;
                list val = this->liststore_12_storage_lookup(v);
                this->liststore_12_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_12_out1_set(this->liststore_12_storage_lookup(v));
                } else {
                    this->liststore_12_out2_bang();
                }
            }
            
            void numberobj_65_output_set(number v) {
                this->liststore_12_lookupidx_set(v);
            }
            
            void numberobj_65_value_set(number v) {
                this->numberobj_65_value_setter(v);
                v = this->numberobj_65_value;
                number localvalue = v;
            
                if (this->numberobj_65_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/NextDuration/number_obj-81"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_65_output_set(localvalue);
            }
            
            void numberobj_65_value_bang() {
                number v = this->numberobj_65_value;
                number localvalue = v;
            
                if (this->numberobj_65_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/NextDuration/number_obj-81"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_65_output_set(localvalue);
            }
            
            void liststore_12_storeidx_set(number v) {
                this->liststore_12_storeidx = v;
            }
            
            void numberobj_66_output_set(number v) {
                this->liststore_12_storeidx_set(v);
            }
            
            void numberobj_66_value_set(number v) {
                this->numberobj_66_value_setter(v);
                v = this->numberobj_66_value;
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 6) {
                    localvalue = 6;
                }
            
                if (this->numberobj_66_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/NextDuration/number_obj-32"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_66_output_set(localvalue);
            }
            
            void liststore_12_storelist_set(const list& v) {
                this->liststore_12_storelist = jsCreateListCopy(v);
                this->liststore_12_storage_store(this->liststore_12_storeidx, v);
            }
            
            void message_260_out_set(const list& v) {
                this->liststore_12_storelist_set(v);
            }
            
            void message_260_trigger_bang() {
                this->message_260_out_set(this->message_260_set);
            }
            
            void select_21_match1_bang() {
                this->message_260_trigger_bang();
            }
            
            void message_261_out_set(const list& v) {
                this->liststore_12_storelist_set(v);
            }
            
            void message_261_trigger_bang() {
                this->message_261_out_set(this->message_261_set);
            }
            
            void select_21_match2_bang() {
                this->message_261_trigger_bang();
            }
            
            void message_262_out_set(const list& v) {
                this->liststore_12_storelist_set(v);
            }
            
            void message_262_trigger_bang() {
                this->message_262_out_set(this->message_262_set);
            }
            
            void select_21_match3_bang() {
                this->message_262_trigger_bang();
            }
            
            void message_263_out_set(const list& v) {
                this->liststore_12_storelist_set(v);
            }
            
            void message_263_trigger_bang() {
                this->message_263_out_set(this->message_263_set);
            }
            
            void select_21_match4_bang() {
                this->message_263_trigger_bang();
            }
            
            void message_264_out_set(const list& v) {
                this->liststore_12_storelist_set(v);
            }
            
            void message_264_trigger_bang() {
                this->message_264_out_set(this->message_264_set);
            }
            
            void select_21_match5_bang() {
                this->message_264_trigger_bang();
            }
            
            void message_266_out_set(const list& v) {
                this->liststore_12_storelist_set(v);
            }
            
            void message_266_trigger_bang() {
                this->message_266_out_set(this->message_266_set);
            }
            
            void select_21_match6_bang() {
                this->message_266_trigger_bang();
            }
            
            void message_267_out_set(const list& v) {
                this->liststore_12_storelist_set(v);
            }
            
            void message_267_trigger_bang() {
                this->message_267_out_set(this->message_267_set);
            }
            
            void select_21_match7_bang() {
                this->message_267_trigger_bang();
            }
            
            void select_21_nomatch_number_set(number ) {}
            
            void select_21_input_number_set(number v) {
                if (v == this->select_21_test1)
                    this->select_21_match1_bang();
                else if (v == this->select_21_test2)
                    this->select_21_match2_bang();
                else if (v == this->select_21_test3)
                    this->select_21_match3_bang();
                else if (v == this->select_21_test4)
                    this->select_21_match4_bang();
                else if (v == this->select_21_test5)
                    this->select_21_match5_bang();
                else if (v == this->select_21_test6)
                    this->select_21_match6_bang();
                else if (v == this->select_21_test7)
                    this->select_21_match7_bang();
                else
                    this->select_21_nomatch_number_set(v);
            }
            
            void uzi_16_index_set(number v) {
                this->numberobj_66_value_set(v);
                this->select_21_input_number_set(v);
            }
            
            void uzi_16_out_bang() {}
            
            void uzi_16_carry_bang() {}
            
            void uzi_16_start_bang_bang() {
                this->uzi_16_gobang(0);
            }
            
            void loadbang_11_output_bang() {
                this->uzi_16_start_bang_bang();
            }
            
            void loadbang_11_input_bang() {
                this->loadbang_11_output_bang();
            }
            
            void button_37_output_bang() {
                this->loadbang_11_input_bang();
            }
            
            void button_37_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextDuration/button_obj-186"),
                    this->_currentTime
                );;
            
                this->button_37_output_bang();
            }
            
            void message_260_set_set(const list& v) {
                this->message_260_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDuration/message_obj-8"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_261_set_set(const list& v) {
                this->message_261_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDuration/message_obj-15"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_262_set_set(const list& v) {
                this->message_262_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDuration/message_obj-16"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_263_set_set(const list& v) {
                this->message_263_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDuration/message_obj-19"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_264_set_set(const list& v) {
                this->message_264_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDuration/message_obj-18"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_265_set_set(const list& v) {
                this->message_265_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDuration/message_obj-170"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_265_out_set(const list& ) {}
            
            void message_265_trigger_bang() {
                this->message_265_out_set(this->message_265_set);
            }
            
            void message_266_set_set(const list& v) {
                this->message_266_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDuration/message_obj-17"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_267_set_set(const list& v) {
                this->message_267_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDuration/message_obj-30"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_65_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_65_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_65_value = localvalue;
            }
            
            void numberobj_66_value_setter(number v) {
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 6) {
                    localvalue = 6;
                }
            
                if (this->numberobj_66_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_66_value = localvalue;
            }
            
            list liststore_12_storage_next(number index) {
                return this->liststore_12_storage_lookup(index);
            }
            
            list liststore_12_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_12_storage__slotcount) {
                    number entrylength = this->liststore_12_storage_storage[(Index)(idx * this->liststore_12_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_12_storage_storage[(Index)(idx * this->liststore_12_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_12_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_12_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_12_storage_storage[(Index)(idx * this->liststore_12_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_12_storage_storage[(Index)(idx * this->liststore_12_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_12_storage_init() {
                this->liststore_12_storage__entrysize = 20 + 1;
                this->liststore_12_storage__slotcount = 13;
                int64_t storagesize = (int64_t)(13 * this->liststore_12_storage__entrysize);
                this->liststore_12_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_12_storage_clear() {
                this->liststore_12_storage_storage->setZero();
            }
            
            void liststore_12_storage_reset() {
                this->liststore_12_storage_init();
                this->liststore_12_storage_clear();
            }
            
            void numberobj_65_init() {
                this->numberobj_65_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/NextDuration/number_obj-81"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_65_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_65_value;
            }
            
            void numberobj_65_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_65_value_set(preset["value"]);
            }
            
            void uzi_16_gobang(number start) {
                this->uzi_16_doPause = 0;
                this->uzi_16_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_16_count; i++) {
                    if ((bool)(this->uzi_16_doPause)) {
                        this->uzi_16_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_16_index_set(i + this->uzi_16_base);
                        this->uzi_16_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_16_carry_bang();
            }
            
            void message_260_init() {
                this->message_260_set_set({0, 1, 2, 3, 4, 5, 6});
            }
            
            void message_261_init() {
                this->message_261_set_set({0, 1, 2, 3, 4, 5, 6});
            }
            
            void message_262_init() {
                this->message_262_set_set({0, 1, 2, 3, 4, 5, 6});
            }
            
            void message_263_init() {
                this->message_263_set_set({0, 1, 2, 3, 4, 5, 6});
            }
            
            void message_264_init() {
                this->message_264_set_set({0, 1, 2, 3, 4, 5, 6});
            }
            
            void message_265_init() {
                this->message_265_set_set({});
            }
            
            void message_266_init() {
                this->message_266_set_set({0, 1, 2, 3, 4, 5, 6});
            }
            
            void numberobj_66_init() {
                this->numberobj_66_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/NextDuration/number_obj-32"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_66_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_66_value;
            }
            
            void numberobj_66_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_66_value_set(preset["value"]);
            }
            
            void message_267_init() {
                this->message_267_set_set({0, 1, 2, 3, 4, 5, 6});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                receive_06_output_number = 0;
                liststore_12_lookupidx = 0;
                liststore_12_storeidx = 0;
                numberobj_65_value = 0;
                numberobj_65_value_setter(numberobj_65_value);
                uzi_16_start_number = 0;
                uzi_16_count = 7;
                uzi_16_base = 0;
                select_21_test1 = 0;
                select_21_test2 = 1;
                select_21_test3 = 2;
                select_21_test4 = 3;
                select_21_test5 = 4;
                select_21_test6 = 5;
                select_21_test7 = 6;
                numberobj_66_value = 0;
                numberobj_66_value_setter(numberobj_66_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                liststore_12_storage__slotcount = 1024;
                liststore_12_storage__entrysize = 65;
                numberobj_65_currentFormat = 6;
                numberobj_65_lastValue = 0;
                uzi_16_doPause = 0;
                uzi_16_pausecount = 0;
                numberobj_66_currentFormat = 6;
                numberobj_66_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number receive_06_output_number;
                list receive_06_output_list;
                number liststore_12_lookupidx;
                list liststore_12_storelist;
                number liststore_12_storeidx;
                number numberobj_65_value;
                number uzi_16_start_number;
                number uzi_16_count;
                number uzi_16_base;
                list message_260_set;
                number select_21_test1;
                number select_21_test2;
                number select_21_test3;
                number select_21_test4;
                number select_21_test5;
                number select_21_test6;
                number select_21_test7;
                list message_261_set;
                list message_262_set;
                list message_263_set;
                list message_264_set;
                list message_265_set;
                list message_266_set;
                number numberobj_66_value;
                list message_267_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef liststore_12_storage_storage;
                number liststore_12_storage__slotcount;
                number liststore_12_storage__entrysize;
                Int numberobj_65_currentFormat;
                number numberobj_65_lastValue;
                number uzi_16_doPause;
                long uzi_16_pausecount;
                Int numberobj_66_currentFormat;
                number numberobj_66_lastValue;
                number stackprotect_count;
                DataRef liststore_12_storage_storageobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_170 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_178;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_170()
            {
            }
            
            ~RNBOSubpatcher_170()
            {
            }
            
            virtual RNBOSubpatcher_178* getPatcher() const {
                return static_cast<RNBOSubpatcher_178 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -871642103, false);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -871642103:
                    {
                    this->loadbang_12_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Melodies/NextDurationBig/number_obj-81") == objectId)
                        this->numberobj_67_valin_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/number_obj-32") == objectId)
                        this->numberobj_68_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Melodies/NextDurationBig/number_obj-81") == objectId)
                        this->numberobj_67_format_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/number_obj-32") == objectId)
                        this->numberobj_68_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextDurationBig/message_obj-8") == objectId)
                        this->message_268_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-15") == objectId)
                        this->message_269_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-16") == objectId)
                        this->message_270_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-19") == objectId)
                        this->message_271_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-18") == objectId)
                        this->message_272_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-170") == objectId)
                        this->message_273_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-17") == objectId)
                        this->message_274_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-30") == objectId)
                        this->message_275_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-29") == objectId)
                        this->message_276_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-28") == objectId)
                        this->message_277_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-27") == objectId)
                        this->message_278_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-26") == objectId)
                        this->message_279_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-25") == objectId)
                        this->message_280_listin_number_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-31") == objectId)
                        this->message_281_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextDurationBig/message_obj-8") == objectId)
                        this->message_268_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-15") == objectId)
                        this->message_269_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-16") == objectId)
                        this->message_270_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-19") == objectId)
                        this->message_271_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-18") == objectId)
                        this->message_272_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-170") == objectId)
                        this->message_273_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-17") == objectId)
                        this->message_274_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-30") == objectId)
                        this->message_275_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-29") == objectId)
                        this->message_276_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-28") == objectId)
                        this->message_277_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-27") == objectId)
                        this->message_278_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-26") == objectId)
                        this->message_279_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-25") == objectId)
                        this->message_280_listin_list_set(payload);
            
                    if (TAG("Melodies/NextDurationBig/message_obj-31") == objectId)
                        this->message_281_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("startupbang"):
                    {
                    if (TAG("Melodies/NextDurationBig/loadbang_obj-197") == objectId)
                        this->loadbang_12_startupbang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("Melodies/NextDurationBig/button_obj-186") == objectId)
                        this->button_38_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Melodies/NextDurationBig/message_obj-8") == objectId)
                        this->message_268_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-15") == objectId)
                        this->message_269_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-16") == objectId)
                        this->message_270_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-19") == objectId)
                        this->message_271_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-18") == objectId)
                        this->message_272_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-170") == objectId)
                        this->message_273_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-17") == objectId)
                        this->message_274_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-30") == objectId)
                        this->message_275_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-29") == objectId)
                        this->message_276_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-28") == objectId)
                        this->message_277_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-27") == objectId)
                        this->message_278_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-26") == objectId)
                        this->message_279_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-25") == objectId)
                        this->message_280_listin_bang_bang();
            
                    if (TAG("Melodies/NextDurationBig/message_obj-31") == objectId)
                        this->message_281_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Melodies/NextDurationBig/number_obj-81"):
                    {
                    return "Melodies/NextDurationBig/number_obj-81";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Melodies/NextDurationBig/button_obj-186"):
                    {
                    return "Melodies/NextDurationBig/button_obj-186";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-8"):
                    {
                    return "Melodies/NextDurationBig/message_obj-8";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-15"):
                    {
                    return "Melodies/NextDurationBig/message_obj-15";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-16"):
                    {
                    return "Melodies/NextDurationBig/message_obj-16";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-19"):
                    {
                    return "Melodies/NextDurationBig/message_obj-19";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-18"):
                    {
                    return "Melodies/NextDurationBig/message_obj-18";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-170"):
                    {
                    return "Melodies/NextDurationBig/message_obj-170";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-17"):
                    {
                    return "Melodies/NextDurationBig/message_obj-17";
                    }
                case TAG("Melodies/NextDurationBig/number_obj-32"):
                    {
                    return "Melodies/NextDurationBig/number_obj-32";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-30"):
                    {
                    return "Melodies/NextDurationBig/message_obj-30";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-29"):
                    {
                    return "Melodies/NextDurationBig/message_obj-29";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-28"):
                    {
                    return "Melodies/NextDurationBig/message_obj-28";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-27"):
                    {
                    return "Melodies/NextDurationBig/message_obj-27";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-26"):
                    {
                    return "Melodies/NextDurationBig/message_obj-26";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-25"):
                    {
                    return "Melodies/NextDurationBig/message_obj-25";
                    }
                case TAG("Melodies/NextDurationBig/message_obj-31"):
                    {
                    return "Melodies/NextDurationBig/message_obj-31";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("Melodies/NextDurationBig/loadbang_obj-197"):
                    {
                    return "Melodies/NextDurationBig/loadbang_obj-197";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->liststore_13_storage_storageobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 1;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->liststore_13_storage_storage = new Float64Buffer(this->liststore_13_storage_storageobj);
                }
            }
            
            void initialize() {
                this->liststore_13_storage_storageobj = initDataRef("liststore_13_storage_storageobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->liststore_13_storage_storageobj->setIndex(4);
                this->liststore_13_storage_storage = new Float64Buffer(this->liststore_13_storage_storageobj);
            }
            
            protected:
            
            void numberobj_67_valin_set(number v) {
                this->numberobj_67_value_set(v);
            }
            
            void numberobj_67_format_set(number v) {
                this->numberobj_67_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_33_out1_bang_bang() {
                this->numberobj_67_value_bang();
            }
            
            void eventinlet_33_out1_number_set(number v) {
                this->numberobj_67_value_set(v);
            }
            
            void eventinlet_33_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_67_value_set(converted);
                }
            }
            
            void loadbang_12_startupbang_bang() {
                this->loadbang_12_output_bang();
            }
            
            void button_38_bangin_bang() {
                this->button_38_bangval_bang();
            }
            
            void message_268_listin_list_set(const list& v) {
                this->message_268_set_set(v);
            }
            
            void message_268_listin_number_set(number v) {
                this->message_268_set_set(v);
            }
            
            void message_268_listin_bang_bang() {
                this->message_268_trigger_bang();
            }
            
            void message_269_listin_list_set(const list& v) {
                this->message_269_set_set(v);
            }
            
            void message_269_listin_number_set(number v) {
                this->message_269_set_set(v);
            }
            
            void message_269_listin_bang_bang() {
                this->message_269_trigger_bang();
            }
            
            void message_270_listin_list_set(const list& v) {
                this->message_270_set_set(v);
            }
            
            void message_270_listin_number_set(number v) {
                this->message_270_set_set(v);
            }
            
            void message_270_listin_bang_bang() {
                this->message_270_trigger_bang();
            }
            
            void message_271_listin_list_set(const list& v) {
                this->message_271_set_set(v);
            }
            
            void message_271_listin_number_set(number v) {
                this->message_271_set_set(v);
            }
            
            void message_271_listin_bang_bang() {
                this->message_271_trigger_bang();
            }
            
            void message_272_listin_list_set(const list& v) {
                this->message_272_set_set(v);
            }
            
            void message_272_listin_number_set(number v) {
                this->message_272_set_set(v);
            }
            
            void message_272_listin_bang_bang() {
                this->message_272_trigger_bang();
            }
            
            void message_273_listin_list_set(const list& v) {
                this->message_273_set_set(v);
            }
            
            void message_273_listin_number_set(number v) {
                this->message_273_set_set(v);
            }
            
            void message_273_listin_bang_bang() {
                this->message_273_trigger_bang();
            }
            
            void message_274_listin_list_set(const list& v) {
                this->message_274_set_set(v);
            }
            
            void message_274_listin_number_set(number v) {
                this->message_274_set_set(v);
            }
            
            void message_274_listin_bang_bang() {
                this->message_274_trigger_bang();
            }
            
            void numberobj_68_valin_set(number v) {
                this->numberobj_68_value_set(v);
            }
            
            void numberobj_68_format_set(number v) {
                this->numberobj_68_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_275_listin_list_set(const list& v) {
                this->message_275_set_set(v);
            }
            
            void message_275_listin_number_set(number v) {
                this->message_275_set_set(v);
            }
            
            void message_275_listin_bang_bang() {
                this->message_275_trigger_bang();
            }
            
            void message_276_listin_list_set(const list& v) {
                this->message_276_set_set(v);
            }
            
            void message_276_listin_number_set(number v) {
                this->message_276_set_set(v);
            }
            
            void message_276_listin_bang_bang() {
                this->message_276_trigger_bang();
            }
            
            void message_277_listin_list_set(const list& v) {
                this->message_277_set_set(v);
            }
            
            void message_277_listin_number_set(number v) {
                this->message_277_set_set(v);
            }
            
            void message_277_listin_bang_bang() {
                this->message_277_trigger_bang();
            }
            
            void message_278_listin_list_set(const list& v) {
                this->message_278_set_set(v);
            }
            
            void message_278_listin_number_set(number v) {
                this->message_278_set_set(v);
            }
            
            void message_278_listin_bang_bang() {
                this->message_278_trigger_bang();
            }
            
            void message_279_listin_list_set(const list& v) {
                this->message_279_set_set(v);
            }
            
            void message_279_listin_number_set(number v) {
                this->message_279_set_set(v);
            }
            
            void message_279_listin_bang_bang() {
                this->message_279_trigger_bang();
            }
            
            void message_280_listin_list_set(const list& v) {
                this->message_280_set_set(v);
            }
            
            void message_280_listin_number_set(number v) {
                this->message_280_set_set(v);
            }
            
            void message_280_listin_bang_bang() {
                this->message_280_trigger_bang();
            }
            
            void message_281_listin_list_set(const list& v) {
                this->message_281_set_set(v);
            }
            
            void message_281_listin_number_set(number v) {
                this->message_281_set_set(v);
            }
            
            void message_281_listin_bang_bang() {
                this->message_281_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->liststore_13_storage_init();
                this->numberobj_67_init();
                this->message_268_init();
                this->message_269_init();
                this->message_270_init();
                this->message_271_init();
                this->message_272_init();
                this->message_273_init();
                this->message_274_init();
                this->numberobj_68_init();
                this->message_275_init();
                this->message_276_init();
                this->message_277_init();
                this->message_278_init();
                this->message_279_init();
                this->message_280_init();
                this->message_281_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->liststore_13_storage_storage = this->liststore_13_storage_storage->allocateIfNeeded();
            
                if (this->liststore_13_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_13_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_13_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            }
            
            void receive_07_output_number_set(number v) {
                this->receive_07_output_number = v;
            }
            
            void liststore_13_out3_set(number ) {}
            
            void eventoutlet_36_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_30_out1_list_set((list)v);
            }
            
            void liststore_13_out1_set(const list& v) {
                this->eventoutlet_36_in1_list_set(v);
            }
            
            void liststore_13_out2_bang() {}
            
            void liststore_13_lookupidx_set(number v) {
                this->liststore_13_lookupidx = v;
                list val = this->liststore_13_storage_lookup(v);
                this->liststore_13_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_13_out1_set(this->liststore_13_storage_lookup(v));
                } else {
                    this->liststore_13_out2_bang();
                }
            }
            
            void numberobj_67_output_set(number v) {
                this->liststore_13_lookupidx_set(v);
            }
            
            void numberobj_67_value_set(number v) {
                this->numberobj_67_value_setter(v);
                v = this->numberobj_67_value;
                number localvalue = v;
            
                if (this->numberobj_67_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/NextDurationBig/number_obj-81"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_67_output_set(localvalue);
            }
            
            void numberobj_67_value_bang() {
                number v = this->numberobj_67_value;
                number localvalue = v;
            
                if (this->numberobj_67_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/NextDurationBig/number_obj-81"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_67_output_set(localvalue);
            }
            
            void liststore_13_storeidx_set(number v) {
                this->liststore_13_storeidx = v;
            }
            
            void numberobj_68_output_set(number v) {
                this->liststore_13_storeidx_set(v);
            }
            
            void numberobj_68_value_set(number v) {
                this->numberobj_68_value_setter(v);
                v = this->numberobj_68_value;
                number localvalue = v;
            
                if (this->numberobj_68_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Melodies/NextDurationBig/number_obj-32"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_68_output_set(localvalue);
            }
            
            void liststore_13_storelist_set(const list& v) {
                this->liststore_13_storelist = jsCreateListCopy(v);
                this->liststore_13_storage_store(this->liststore_13_storeidx, v);
            }
            
            void message_268_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_268_trigger_bang() {
                this->message_268_out_set(this->message_268_set);
            }
            
            void select_22_match1_bang() {
                this->message_268_trigger_bang();
            }
            
            void message_269_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_269_trigger_bang() {
                this->message_269_out_set(this->message_269_set);
            }
            
            void select_22_match2_bang() {
                this->message_269_trigger_bang();
            }
            
            void message_270_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_270_trigger_bang() {
                this->message_270_out_set(this->message_270_set);
            }
            
            void select_22_match3_bang() {
                this->message_270_trigger_bang();
            }
            
            void message_271_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_271_trigger_bang() {
                this->message_271_out_set(this->message_271_set);
            }
            
            void select_22_match4_bang() {
                this->message_271_trigger_bang();
            }
            
            void message_272_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_272_trigger_bang() {
                this->message_272_out_set(this->message_272_set);
            }
            
            void select_22_match5_bang() {
                this->message_272_trigger_bang();
            }
            
            void message_274_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_274_trigger_bang() {
                this->message_274_out_set(this->message_274_set);
            }
            
            void select_22_match6_bang() {
                this->message_274_trigger_bang();
            }
            
            void message_275_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_275_trigger_bang() {
                this->message_275_out_set(this->message_275_set);
            }
            
            void select_22_match7_bang() {
                this->message_275_trigger_bang();
            }
            
            void message_276_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_276_trigger_bang() {
                this->message_276_out_set(this->message_276_set);
            }
            
            void select_22_match8_bang() {
                this->message_276_trigger_bang();
            }
            
            void message_277_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_277_trigger_bang() {
                this->message_277_out_set(this->message_277_set);
            }
            
            void select_22_match9_bang() {
                this->message_277_trigger_bang();
            }
            
            void message_278_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_278_trigger_bang() {
                this->message_278_out_set(this->message_278_set);
            }
            
            void select_22_match10_bang() {
                this->message_278_trigger_bang();
            }
            
            void message_279_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_279_trigger_bang() {
                this->message_279_out_set(this->message_279_set);
            }
            
            void select_22_match11_bang() {
                this->message_279_trigger_bang();
            }
            
            void message_280_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_280_trigger_bang() {
                this->message_280_out_set(this->message_280_set);
            }
            
            void select_22_match12_bang() {
                this->message_280_trigger_bang();
            }
            
            void message_281_out_set(const list& v) {
                this->liststore_13_storelist_set(v);
            }
            
            void message_281_trigger_bang() {
                this->message_281_out_set(this->message_281_set);
            }
            
            void select_22_match13_bang() {
                this->message_281_trigger_bang();
            }
            
            void select_22_nomatch_number_set(number ) {}
            
            void select_22_input_number_set(number v) {
                if (v == this->select_22_test1)
                    this->select_22_match1_bang();
                else if (v == this->select_22_test2)
                    this->select_22_match2_bang();
                else if (v == this->select_22_test3)
                    this->select_22_match3_bang();
                else if (v == this->select_22_test4)
                    this->select_22_match4_bang();
                else if (v == this->select_22_test5)
                    this->select_22_match5_bang();
                else if (v == this->select_22_test6)
                    this->select_22_match6_bang();
                else if (v == this->select_22_test7)
                    this->select_22_match7_bang();
                else if (v == this->select_22_test8)
                    this->select_22_match8_bang();
                else if (v == this->select_22_test9)
                    this->select_22_match9_bang();
                else if (v == this->select_22_test10)
                    this->select_22_match10_bang();
                else if (v == this->select_22_test11)
                    this->select_22_match11_bang();
                else if (v == this->select_22_test12)
                    this->select_22_match12_bang();
                else if (v == this->select_22_test13)
                    this->select_22_match13_bang();
                else
                    this->select_22_nomatch_number_set(v);
            }
            
            void uzi_17_index_set(number v) {
                this->numberobj_68_value_set(v);
                this->select_22_input_number_set(v);
            }
            
            void uzi_17_out_bang() {}
            
            void uzi_17_carry_bang() {}
            
            void uzi_17_start_bang_bang() {
                this->uzi_17_gobang(0);
            }
            
            void loadbang_12_output_bang() {
                this->uzi_17_start_bang_bang();
            }
            
            void loadbang_12_input_bang() {
                this->loadbang_12_output_bang();
            }
            
            void button_38_output_bang() {
                this->loadbang_12_input_bang();
            }
            
            void button_38_bangval_bang() {
                this->getEngine()->sendBangMessage(
                    TAG("bangout"),
                    TAG("Melodies/NextDurationBig/button_obj-186"),
                    this->_currentTime
                );;
            
                this->button_38_output_bang();
            }
            
            void message_268_set_set(const list& v) {
                this->message_268_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-8"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_269_set_set(const list& v) {
                this->message_269_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-15"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_270_set_set(const list& v) {
                this->message_270_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-16"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_271_set_set(const list& v) {
                this->message_271_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-19"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_272_set_set(const list& v) {
                this->message_272_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-18"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_273_set_set(const list& v) {
                this->message_273_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-170"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_273_out_set(const list& ) {}
            
            void message_273_trigger_bang() {
                this->message_273_out_set(this->message_273_set);
            }
            
            void message_274_set_set(const list& v) {
                this->message_274_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-17"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_275_set_set(const list& v) {
                this->message_275_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-30"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_276_set_set(const list& v) {
                this->message_276_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-29"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_277_set_set(const list& v) {
                this->message_277_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-28"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_278_set_set(const list& v) {
                this->message_278_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-27"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_279_set_set(const list& v) {
                this->message_279_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-26"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_280_set_set(const list& v) {
                this->message_280_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-25"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_281_set_set(const list& v) {
                this->message_281_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Melodies/NextDurationBig/message_obj-31"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_67_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_67_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_67_value = localvalue;
            }
            
            void numberobj_68_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_68_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_68_value = localvalue;
            }
            
            list liststore_13_storage_next(number index) {
                return this->liststore_13_storage_lookup(index);
            }
            
            list liststore_13_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_13_storage__slotcount) {
                    number entrylength = this->liststore_13_storage_storage[(Index)(idx * this->liststore_13_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_13_storage_storage[(Index)(idx * this->liststore_13_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_13_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_13_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_13_storage_storage[(Index)(idx * this->liststore_13_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_13_storage_storage[(Index)(idx * this->liststore_13_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_13_storage_init() {
                this->liststore_13_storage__entrysize = 20 + 1;
                this->liststore_13_storage__slotcount = 13;
                int64_t storagesize = (int64_t)(13 * this->liststore_13_storage__entrysize);
                this->liststore_13_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_13_storage_clear() {
                this->liststore_13_storage_storage->setZero();
            }
            
            void liststore_13_storage_reset() {
                this->liststore_13_storage_init();
                this->liststore_13_storage_clear();
            }
            
            void numberobj_67_init() {
                this->numberobj_67_currentFormat = 0;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/NextDurationBig/number_obj-81"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_67_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_67_value;
            }
            
            void numberobj_67_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_67_value_set(preset["value"]);
            }
            
            void uzi_17_gobang(number start) {
                this->uzi_17_doPause = 0;
                this->uzi_17_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_17_count; i++) {
                    if ((bool)(this->uzi_17_doPause)) {
                        this->uzi_17_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_17_index_set(i + this->uzi_17_base);
                        this->uzi_17_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_17_carry_bang();
            }
            
            void message_268_init() {
                this->message_268_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_269_init() {
                this->message_269_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_270_init() {
                this->message_270_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_271_init() {
                this->message_271_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_272_init() {
                this->message_272_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_273_init() {
                this->message_273_set_set({});
            }
            
            void message_274_init() {
                this->message_274_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void numberobj_68_init() {
                this->numberobj_68_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Melodies/NextDurationBig/number_obj-32"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_68_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_68_value;
            }
            
            void numberobj_68_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_68_value_set(preset["value"]);
            }
            
            void message_275_init() {
                this->message_275_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_276_init() {
                this->message_276_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_277_init() {
                this->message_277_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_278_init() {
                this->message_278_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_279_init() {
                this->message_279_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_280_init() {
                this->message_280_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            void message_281_init() {
                this->message_281_set_set({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                receive_07_output_number = 0;
                liststore_13_lookupidx = 0;
                liststore_13_storeidx = 0;
                numberobj_67_value = 0;
                numberobj_67_value_setter(numberobj_67_value);
                uzi_17_start_number = 0;
                uzi_17_count = 13;
                uzi_17_base = 0;
                select_22_test1 = 0;
                select_22_test2 = 1;
                select_22_test3 = 2;
                select_22_test4 = 3;
                select_22_test5 = 4;
                select_22_test6 = 5;
                select_22_test7 = 6;
                select_22_test8 = 7;
                select_22_test9 = 8;
                select_22_test10 = 9;
                select_22_test11 = 10;
                select_22_test12 = 11;
                select_22_test13 = 12;
                numberobj_68_value = 0;
                numberobj_68_value_setter(numberobj_68_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                liststore_13_storage__slotcount = 1024;
                liststore_13_storage__entrysize = 65;
                numberobj_67_currentFormat = 6;
                numberobj_67_lastValue = 0;
                uzi_17_doPause = 0;
                uzi_17_pausecount = 0;
                numberobj_68_currentFormat = 6;
                numberobj_68_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number receive_07_output_number;
                list receive_07_output_list;
                number liststore_13_lookupidx;
                list liststore_13_storelist;
                number liststore_13_storeidx;
                number numberobj_67_value;
                number uzi_17_start_number;
                number uzi_17_count;
                number uzi_17_base;
                list message_268_set;
                number select_22_test1;
                number select_22_test2;
                number select_22_test3;
                number select_22_test4;
                number select_22_test5;
                number select_22_test6;
                number select_22_test7;
                number select_22_test8;
                number select_22_test9;
                number select_22_test10;
                number select_22_test11;
                number select_22_test12;
                number select_22_test13;
                list message_269_set;
                list message_270_set;
                list message_271_set;
                list message_272_set;
                list message_273_set;
                list message_274_set;
                number numberobj_68_value;
                list message_275_set;
                list message_276_set;
                list message_277_set;
                list message_278_set;
                list message_279_set;
                list message_280_set;
                list message_281_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef liststore_13_storage_storage;
                number liststore_13_storage__slotcount;
                number liststore_13_storage__entrysize;
                Int numberobj_67_currentFormat;
                number numberobj_67_lastValue;
                number uzi_17_doPause;
                long uzi_17_pausecount;
                Int numberobj_68_currentFormat;
                number numberobj_68_lastValue;
                number stackprotect_count;
                DataRef liststore_13_storage_storageobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_178()
    {
    }
    
    ~RNBOSubpatcher_178()
    {
        delete this->p_26;
        delete this->p_27;
        delete this->p_28;
        delete this->p_29;
        delete this->p_30;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 1935387534, false);
        getEngine()->flushClockEvents(this, 29237386, false);
        getEngine()->flushClockEvents(this, 892732297, false);
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_26_perform(n);
        this->p_27_perform(n);
        this->p_28_perform(n);
        this->p_29_perform(n);
        this->p_30_perform(n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_26->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_27->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_28->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_29->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_30->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_26->processTempoEvent(time, tempo);
        this->p_27->processTempoEvent(time, tempo);
        this->p_28->processTempoEvent(time, tempo);
        this->p_29->processTempoEvent(time, tempo);
        this->p_30->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_26->processTransportEvent(time, state);
        this->p_27->processTransportEvent(time, state);
        this->p_28->processTransportEvent(time, state);
        this->p_29->processTransportEvent(time, state);
        this->p_30->processTransportEvent(time, state);
        this->metro_02_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_26->processBeatTimeEvent(time, beattime);
        this->p_27->processBeatTimeEvent(time, beattime);
        this->p_28->processBeatTimeEvent(time, beattime);
        this->p_29->processBeatTimeEvent(time, beattime);
        this->p_30->processBeatTimeEvent(time, beattime);
        this->metro_02_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_26->processTimeSignatureEvent(time, numerator, denominator);
        this->p_27->processTimeSignatureEvent(time, numerator, denominator);
        this->p_28->processTimeSignatureEvent(time, numerator, denominator);
        this->p_29->processTimeSignatureEvent(time, numerator, denominator);
        this->p_30->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
        this->updateTime(time);
        this->p_26->processBBUEvent(time, bars, beats, units);
        this->p_27->processBBUEvent(time, bars, beats, units);
        this->p_28->processBBUEvent(time, bars, beats, units);
        this->p_29->processBBUEvent(time, bars, beats, units);
        this->p_30->processBBUEvent(time, bars, beats, units);
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_26 = new RNBOSubpatcher_166();
        this->p_26->setEngineAndPatcher(this->getEngine(), this);
        this->p_26->initialize();
        this->p_26->setParameterOffset(this->getParameterOffset(this->p_26));
        this->p_27 = new RNBOSubpatcher_167();
        this->p_27->setEngineAndPatcher(this->getEngine(), this);
        this->p_27->initialize();
        this->p_27->setParameterOffset(this->getParameterOffset(this->p_27));
        this->p_28 = new RNBOSubpatcher_168();
        this->p_28->setEngineAndPatcher(this->getEngine(), this);
        this->p_28->initialize();
        this->p_28->setParameterOffset(this->getParameterOffset(this->p_28));
        this->p_29 = new RNBOSubpatcher_169();
        this->p_29->setEngineAndPatcher(this->getEngine(), this);
        this->p_29->initialize();
        this->p_29->setParameterOffset(this->getParameterOffset(this->p_29));
        this->p_30 = new RNBOSubpatcher_170();
        this->p_30->setEngineAndPatcher(this->getEngine(), this);
        this->p_30->initialize();
        this->p_30->setParameterOffset(this->getParameterOffset(this->p_30));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_13_getPresetValue(getSubState(preset, "Accents"));
        this->p_26->getPreset(getSubState(getSubState(preset, "__sps"), "MelodiesColl"));
        this->p_27->getPreset(getSubState(getSubState(preset, "__sps"), "NextNote"));
        this->p_28->getPreset(getSubState(getSubState(preset, "__sps"), "MelNote"));
        this->p_29->getPreset(getSubState(getSubState(preset, "__sps"), "NextDuration"));
        this->p_30->getPreset(getSubState(getSubState(preset, "__sps"), "NextDurationBig"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_13_value_set(v);
            break;
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_26->getNumParameters())
                this->p_26->setParameterValue(index, v, time);
    
            index -= this->p_26->getNumParameters();
    
            if (index < this->p_27->getNumParameters())
                this->p_27->setParameterValue(index, v, time);
    
            index -= this->p_27->getNumParameters();
    
            if (index < this->p_28->getNumParameters())
                this->p_28->setParameterValue(index, v, time);
    
            index -= this->p_28->getNumParameters();
    
            if (index < this->p_29->getNumParameters())
                this->p_29->setParameterValue(index, v, time);
    
            index -= this->p_29->getNumParameters();
    
            if (index < this->p_30->getNumParameters())
                this->p_30->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_13_value;
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterValue(index);
    
            index -= this->p_26->getNumParameters();
    
            if (index < this->p_27->getNumParameters())
                return this->p_27->getParameterValue(index);
    
            index -= this->p_27->getNumParameters();
    
            if (index < this->p_28->getNumParameters())
                return this->p_28->getParameterValue(index);
    
            index -= this->p_28->getNumParameters();
    
            if (index < this->p_29->getNumParameters())
                return this->p_29->getParameterValue(index);
    
            index -= this->p_29->getNumParameters();
    
            if (index < this->p_30->getNumParameters())
                return this->p_30->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 1 + this->p_26->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters() + this->p_30->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "Accents";
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterName(index);
    
            index -= this->p_26->getNumParameters();
    
            if (index < this->p_27->getNumParameters())
                return this->p_27->getParameterName(index);
    
            index -= this->p_27->getNumParameters();
    
            if (index < this->p_28->getNumParameters())
                return this->p_28->getParameterName(index);
    
            index -= this->p_28->getNumParameters();
    
            if (index < this->p_29->getNumParameters())
                return this->p_29->getParameterName(index);
    
            index -= this->p_29->getNumParameters();
    
            if (index < this->p_30->getNumParameters())
                return this->p_30->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "Melodies/Accents";
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->getParameterId(index);
    
            index -= this->p_26->getNumParameters();
    
            if (index < this->p_27->getNumParameters())
                return this->p_27->getParameterId(index);
    
            index -= this->p_27->getNumParameters();
    
            if (index < this->p_28->getNumParameters())
                return this->p_28->getParameterId(index);
    
            index -= this->p_28->getNumParameters();
    
            if (index < this->p_29->getNumParameters())
                return this->p_29->getParameterId(index);
    
            index -= this->p_29->getNumParameters();
    
            if (index < this->p_30->getNumParameters())
                return this->p_30->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 0.05;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 1;
    
                if (index < this->p_26->getNumParameters())
                    this->p_26->getParameterInfo(index, info);
    
                index -= this->p_26->getNumParameters();
    
                if (index < this->p_27->getNumParameters())
                    this->p_27->getParameterInfo(index, info);
    
                index -= this->p_27->getNumParameters();
    
                if (index < this->p_28->getNumParameters())
                    this->p_28->getParameterInfo(index, info);
    
                index -= this->p_28->getNumParameters();
    
                if (index < this->p_29->getNumParameters())
                    this->p_29->getParameterInfo(index, info);
    
                index -= this->p_29->getNumParameters();
    
                if (index < this->p_30->getNumParameters())
                    this->p_30->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_26)
            return 1;
    
        if (subpatcher == this->p_27)
            return 1 + this->p_26->getNumParameters();
    
        if (subpatcher == this->p_28)
            return 1 + this->p_26->getNumParameters() + this->p_27->getNumParameters();
    
        if (subpatcher == this->p_29)
            return 1 + this->p_26->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters();
    
        if (subpatcher == this->p_30)
            return 1 + this->p_26->getNumParameters() + this->p_27->getNumParameters() + this->p_28->getNumParameters() + this->p_29->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            {
                value = (value < 0.05 ? 0.05 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0.05) / (1 - 0.05);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_26->getNumParameters();
    
            if (index < this->p_27->getNumParameters())
                return this->p_27->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_27->getNumParameters();
    
            if (index < this->p_28->getNumParameters())
                return this->p_28->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_28->getNumParameters();
    
            if (index < this->p_29->getNumParameters())
                return this->p_29->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_29->getNumParameters();
    
            if (index < this->p_30->getNumParameters())
                return this->p_30->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
            {
            {
                {
                    return 0.05 + value * (1 - 0.05);
                }
            }
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_26->getNumParameters();
    
            if (index < this->p_27->getNumParameters())
                return this->p_27->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_27->getNumParameters();
    
            if (index < this->p_28->getNumParameters())
                return this->p_28->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_28->getNumParameters();
    
            if (index < this->p_29->getNumParameters())
                return this->p_29->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_29->getNumParameters();
    
            if (index < this->p_30->getNumParameters())
                return this->p_30->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_13_value_constrain(value);
            }
        default:
            {
            index -= 1;
    
            if (index < this->p_26->getNumParameters())
                return this->p_26->constrainParameterValue(index, value);
    
            index -= this->p_26->getNumParameters();
    
            if (index < this->p_27->getNumParameters())
                return this->p_27->constrainParameterValue(index, value);
    
            index -= this->p_27->getNumParameters();
    
            if (index < this->p_28->getNumParameters())
                return this->p_28->constrainParameterValue(index, value);
    
            index -= this->p_28->getNumParameters();
    
            if (index < this->p_29->getNumParameters())
                return this->p_29->constrainParameterValue(index, value);
    
            index -= this->p_29->getNumParameters();
    
            if (index < this->p_30->getNumParameters())
                return this->p_30->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(value);
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 1935387534:
            {
            this->metro_02_tick_bang();
            break;
            }
        case 29237386:
            {
            this->loadmess_03_startupbang_bang();
            break;
            }
        case 892732297:
            {
            this->loadmess_04_startupbang_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Melodies/message_obj-29") == objectId)
                this->message_282_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-135") == objectId)
                this->message_283_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-3") == objectId)
                this->message_284_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-8") == objectId)
                this->message_285_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-137") == objectId)
                this->message_286_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-60") == objectId)
                this->message_287_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-18") == objectId)
                this->message_288_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-27") == objectId)
                this->message_289_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-87") == objectId)
                this->message_290_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-102") == objectId)
                this->message_291_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-142") == objectId)
                this->message_292_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-89") == objectId)
                this->message_293_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-91") == objectId)
                this->message_294_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-25") == objectId)
                this->message_295_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-93") == objectId)
                this->message_296_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-36") == objectId)
                this->message_297_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-51") == objectId)
                this->message_298_listin_number_set(payload);
    
            if (TAG("Melodies/message_obj-59") == objectId)
                this->message_299_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("Melodies/number_obj-39") == objectId)
                this->numberobj_69_valin_set(payload);
    
            if (TAG("Melodies/toggle_obj-103") == objectId)
                this->toggle_02_valin_set(payload);
    
            if (TAG("Melodies/number_obj-14") == objectId)
                this->numberobj_70_valin_set(payload);
    
            if (TAG("Melodies/number_obj-33") == objectId)
                this->numberobj_71_valin_set(payload);
    
            if (TAG("Melodies/number_obj-128") == objectId)
                this->numberobj_72_valin_set(payload);
    
            if (TAG("Melodies/number_obj-23") == objectId)
                this->numberobj_73_valin_set(payload);
    
            if (TAG("Melodies/number_obj-49") == objectId)
                this->numberobj_74_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Melodies/number_obj-39") == objectId)
                this->numberobj_69_format_set(payload);
    
            if (TAG("Melodies/number_obj-14") == objectId)
                this->numberobj_70_format_set(payload);
    
            if (TAG("Melodies/number_obj-33") == objectId)
                this->numberobj_71_format_set(payload);
    
            if (TAG("Melodies/number_obj-128") == objectId)
                this->numberobj_72_format_set(payload);
    
            if (TAG("Melodies/number_obj-23") == objectId)
                this->numberobj_73_format_set(payload);
    
            if (TAG("Melodies/number_obj-49") == objectId)
                this->numberobj_74_format_set(payload);
    
            break;
            }
        }
    
        this->p_26->processNumMessage(tag, objectId, time, payload);
        this->p_27->processNumMessage(tag, objectId, time, payload);
        this->p_28->processNumMessage(tag, objectId, time, payload);
        this->p_29->processNumMessage(tag, objectId, time, payload);
        this->p_30->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Melodies/message_obj-29") == objectId)
                this->message_282_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-135") == objectId)
                this->message_283_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-3") == objectId)
                this->message_284_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-8") == objectId)
                this->message_285_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-137") == objectId)
                this->message_286_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-60") == objectId)
                this->message_287_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-18") == objectId)
                this->message_288_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-27") == objectId)
                this->message_289_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-87") == objectId)
                this->message_290_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-102") == objectId)
                this->message_291_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-142") == objectId)
                this->message_292_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-89") == objectId)
                this->message_293_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-91") == objectId)
                this->message_294_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-25") == objectId)
                this->message_295_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-93") == objectId)
                this->message_296_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-36") == objectId)
                this->message_297_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-51") == objectId)
                this->message_298_listin_list_set(payload);
    
            if (TAG("Melodies/message_obj-59") == objectId)
                this->message_299_listin_list_set(payload);
    
            break;
            }
        }
    
        this->p_26->processListMessage(tag, objectId, time, payload);
        this->p_27->processListMessage(tag, objectId, time, payload);
        this->p_28->processListMessage(tag, objectId, time, payload);
        this->p_29->processListMessage(tag, objectId, time, payload);
        this->p_30->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Melodies/message_obj-29") == objectId)
                this->message_282_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-135") == objectId)
                this->message_283_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-3") == objectId)
                this->message_284_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-8") == objectId)
                this->message_285_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-137") == objectId)
                this->message_286_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-60") == objectId)
                this->message_287_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-18") == objectId)
                this->message_288_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-27") == objectId)
                this->message_289_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-87") == objectId)
                this->message_290_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-102") == objectId)
                this->message_291_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-142") == objectId)
                this->message_292_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-89") == objectId)
                this->message_293_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-91") == objectId)
                this->message_294_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-25") == objectId)
                this->message_295_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-93") == objectId)
                this->message_296_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-36") == objectId)
                this->message_297_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-51") == objectId)
                this->message_298_listin_bang_bang();
    
            if (TAG("Melodies/message_obj-59") == objectId)
                this->message_299_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("Melodies/button_obj-42") == objectId)
                this->button_39_bangin_bang();
    
            if (TAG("Melodies/button_obj-6") == objectId)
                this->button_40_bangin_bang();
    
            if (TAG("Melodies/button_obj-28") == objectId)
                this->button_41_bangin_bang();
    
            if (TAG("Melodies/button_obj-76") == objectId)
                this->button_42_bangin_bang();
    
            if (TAG("Melodies/button_obj-94") == objectId)
                this->button_43_bangin_bang();
    
            break;
            }
        case TAG("startupbang"):
            {
            if (TAG("Melodies/loadmess_obj-4") == objectId)
                this->loadmess_03_startupbang_bang();
    
            if (TAG("Melodies/loadmess_obj-5") == objectId)
                this->loadmess_04_startupbang_bang();
    
            break;
            }
        }
    
        this->p_26->processBangMessage(tag, objectId, time);
        this->p_27->processBangMessage(tag, objectId, time);
        this->p_28->processBangMessage(tag, objectId, time);
        this->p_29->processBangMessage(tag, objectId, time);
        this->p_30->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("Melodies/message_obj-29"):
            {
            return "Melodies/message_obj-29";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("Melodies/button_obj-42"):
            {
            return "Melodies/button_obj-42";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Melodies/number_obj-39"):
            {
            return "Melodies/number_obj-39";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("Melodies/button_obj-6"):
            {
            return "Melodies/button_obj-6";
            }
        case TAG("Melodies/toggle_obj-103"):
            {
            return "Melodies/toggle_obj-103";
            }
        case TAG("Melodies/message_obj-135"):
            {
            return "Melodies/message_obj-135";
            }
        case TAG("Melodies/number_obj-14"):
            {
            return "Melodies/number_obj-14";
            }
        case TAG("Melodies/number_obj-33"):
            {
            return "Melodies/number_obj-33";
            }
        case TAG("Melodies/button_obj-28"):
            {
            return "Melodies/button_obj-28";
            }
        case TAG("Melodies/message_obj-3"):
            {
            return "Melodies/message_obj-3";
            }
        case TAG("Melodies/message_obj-8"):
            {
            return "Melodies/message_obj-8";
            }
        case TAG("Melodies/message_obj-137"):
            {
            return "Melodies/message_obj-137";
            }
        case TAG("Melodies/number_obj-128"):
            {
            return "Melodies/number_obj-128";
            }
        case TAG("Melodies/message_obj-60"):
            {
            return "Melodies/message_obj-60";
            }
        case TAG("Melodies/message_obj-18"):
            {
            return "Melodies/message_obj-18";
            }
        case TAG("Melodies/message_obj-27"):
            {
            return "Melodies/message_obj-27";
            }
        case TAG("Melodies/message_obj-87"):
            {
            return "Melodies/message_obj-87";
            }
        case TAG("Melodies/message_obj-102"):
            {
            return "Melodies/message_obj-102";
            }
        case TAG("Melodies/message_obj-142"):
            {
            return "Melodies/message_obj-142";
            }
        case TAG("Melodies/message_obj-89"):
            {
            return "Melodies/message_obj-89";
            }
        case TAG("Melodies/number_obj-23"):
            {
            return "Melodies/number_obj-23";
            }
        case TAG("Melodies/button_obj-76"):
            {
            return "Melodies/button_obj-76";
            }
        case TAG("Melodies/message_obj-91"):
            {
            return "Melodies/message_obj-91";
            }
        case TAG("Melodies/button_obj-94"):
            {
            return "Melodies/button_obj-94";
            }
        case TAG("Melodies/message_obj-25"):
            {
            return "Melodies/message_obj-25";
            }
        case TAG("Melodies/message_obj-93"):
            {
            return "Melodies/message_obj-93";
            }
        case TAG("Melodies/number_obj-49"):
            {
            return "Melodies/number_obj-49";
            }
        case TAG("Melodies/message_obj-36"):
            {
            return "Melodies/message_obj-36";
            }
        case TAG("Melodies/message_obj-51"):
            {
            return "Melodies/message_obj-51";
            }
        case TAG("Melodies/message_obj-59"):
            {
            return "Melodies/message_obj-59";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("Melodies/loadmess_obj-4"):
            {
            return "Melodies/loadmess_obj-4";
            }
        case TAG("Melodies/loadmess_obj-5"):
            {
            return "Melodies/loadmess_obj-5";
            }
        }
    
        auto subpatchResult_0 = this->p_26->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_27->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_28->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_29->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_30->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        case 3:
            {
            return addressOf(this->liststore_14_storage_storageobj);
            break;
            }
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 1;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void zeroDataRef(DataRef& ref) {
        ref->setZero();
    }
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 2) {
            this->mtof_06_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        if (index == 3) {
            this->liststore_14_storage_storage = new Float64Buffer(this->liststore_14_storage_storageobj);
        }
    
        this->p_26->processDataViewUpdate(index, time);
        this->p_27->processDataViewUpdate(index, time);
        this->p_28->processDataViewUpdate(index, time);
        this->p_29->processDataViewUpdate(index, time);
        this->p_30->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->liststore_14_storage_storageobj = initDataRef("liststore_14_storage_storageobj", true, nullptr, "buffer~");
        this->assign_defaults();
        this->setState();
        this->mtof_06_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->liststore_14_storage_storageobj->setIndex(3);
        this->liststore_14_storage_storage = new Float64Buffer(this->liststore_14_storage_storageobj);
    }
    
    protected:
    
    void param_13_value_set(number v) {
        v = this->param_13_value_constrain(v);
        this->param_13_value = v;
        this->sendParameter(0, false);
    
        if (this->param_13_value != this->param_13_lastValue) {
            this->getEngine()->presetTouched();
            this->param_13_lastValue = this->param_13_value;
        }
    
        this->expr_33_in2_set(v);
        this->button_41_bangval_bang();
    }
    
    void message_282_listin_list_set(const list& v) {
        this->message_282_set_set(v);
    }
    
    void message_282_listin_number_set(number v) {
        this->message_282_set_set(v);
    }
    
    void message_282_listin_bang_bang() {
        this->message_282_trigger_bang();
    }
    
    void button_39_bangin_bang() {
        this->button_39_bangval_bang();
    }
    
    void numberobj_69_valin_set(number v) {
        this->numberobj_69_value_set(v);
    }
    
    void numberobj_69_format_set(number v) {
        this->numberobj_69_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_40_bangin_bang() {
        this->button_40_bangval_bang();
    }
    
    void eventinlet_34_out1_bang_bang() {
        this->numberobj_69_value_bang();
    }
    
    void eventinlet_34_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_69_value_set(converted);
        }
    }
    
    void toggle_02_valin_set(number v) {
        this->toggle_02_value_number_set(v);
    }
    
    void metro_02_tick_bang() {
        this->metro_02_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_02_on)) {
            this->metro_02_last = this->currenttime();
    
            {
                this->metro_02_next = this->metro_02_last + this->metro_02_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_02_interval + this->_currentTime);;
            }
        }
    }
    
    void message_283_listin_list_set(const list& v) {
        this->message_283_set_set(v);
    }
    
    void message_283_listin_number_set(number v) {
        this->message_283_set_set(v);
    }
    
    void message_283_listin_bang_bang() {
        this->message_283_trigger_bang();
    }
    
    void numberobj_70_valin_set(number v) {
        this->numberobj_70_value_set(v);
    }
    
    void numberobj_70_format_set(number v) {
        this->numberobj_70_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_71_valin_set(number v) {
        this->numberobj_71_value_set(v);
    }
    
    void numberobj_71_format_set(number v) {
        this->numberobj_71_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_41_bangin_bang() {
        this->button_41_bangval_bang();
    }
    
    void message_284_listin_list_set(const list& v) {
        this->message_284_set_set(v);
    }
    
    void message_284_listin_number_set(number v) {
        this->message_284_set_set(v);
    }
    
    void message_284_listin_bang_bang() {
        this->message_284_trigger_bang();
    }
    
    void message_285_listin_list_set(const list& v) {
        this->message_285_set_set(v);
    }
    
    void message_285_listin_number_set(number v) {
        this->message_285_set_set(v);
    }
    
    void message_285_listin_bang_bang() {
        this->message_285_trigger_bang();
    }
    
    void message_286_listin_list_set(const list& v) {
        this->message_286_set_set(v);
    }
    
    void message_286_listin_number_set(number v) {
        this->message_286_set_set(v);
    }
    
    void message_286_listin_bang_bang() {
        this->message_286_trigger_bang();
    }
    
    void numberobj_72_valin_set(number v) {
        this->numberobj_72_value_set(v);
    }
    
    void numberobj_72_format_set(number v) {
        this->numberobj_72_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_287_listin_list_set(const list& v) {
        this->message_287_set_set(v);
    }
    
    void message_287_listin_number_set(number v) {
        this->message_287_set_set(v);
    }
    
    void message_287_listin_bang_bang() {
        this->message_287_trigger_bang();
    }
    
    void loadmess_03_startupbang_bang() {
        this->loadmess_03_message_bang();
    }
    
    void message_288_listin_list_set(const list& v) {
        this->message_288_set_set(v);
    }
    
    void message_288_listin_number_set(number v) {
        this->message_288_set_set(v);
    }
    
    void message_288_listin_bang_bang() {
        this->message_288_trigger_bang();
    }
    
    void message_289_listin_list_set(const list& v) {
        this->message_289_set_set(v);
    }
    
    void message_289_listin_number_set(number v) {
        this->message_289_set_set(v);
    }
    
    void message_289_listin_bang_bang() {
        this->message_289_trigger_bang();
    }
    
    void message_290_listin_list_set(const list& v) {
        this->message_290_set_set(v);
    }
    
    void message_290_listin_number_set(number v) {
        this->message_290_set_set(v);
    }
    
    void message_290_listin_bang_bang() {
        this->message_290_trigger_bang();
    }
    
    void message_291_listin_list_set(const list& v) {
        this->message_291_set_set(v);
    }
    
    void message_291_listin_number_set(number v) {
        this->message_291_set_set(v);
    }
    
    void message_291_listin_bang_bang() {
        this->message_291_trigger_bang();
    }
    
    void message_292_listin_list_set(const list& v) {
        this->message_292_set_set(v);
    }
    
    void message_292_listin_number_set(number v) {
        this->message_292_set_set(v);
    }
    
    void message_292_listin_bang_bang() {
        this->message_292_trigger_bang();
    }
    
    void message_293_listin_list_set(const list& v) {
        this->message_293_set_set(v);
    }
    
    void message_293_listin_number_set(number v) {
        this->message_293_set_set(v);
    }
    
    void message_293_listin_bang_bang() {
        this->message_293_trigger_bang();
    }
    
    void loadmess_04_startupbang_bang() {
        this->loadmess_04_message_bang();
    }
    
    void numberobj_73_valin_set(number v) {
        this->numberobj_73_value_set(v);
    }
    
    void numberobj_73_format_set(number v) {
        this->numberobj_73_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_42_bangin_bang() {
        this->button_42_bangval_bang();
    }
    
    void message_294_listin_list_set(const list& v) {
        this->message_294_set_set(v);
    }
    
    void message_294_listin_number_set(number v) {
        this->message_294_set_set(v);
    }
    
    void message_294_listin_bang_bang() {
        this->message_294_trigger_bang();
    }
    
    void button_43_bangin_bang() {
        this->button_43_bangval_bang();
    }
    
    void message_295_listin_list_set(const list& v) {
        this->message_295_set_set(v);
    }
    
    void message_295_listin_number_set(number v) {
        this->message_295_set_set(v);
    }
    
    void message_295_listin_bang_bang() {
        this->message_295_trigger_bang();
    }
    
    void message_296_listin_list_set(const list& v) {
        this->message_296_set_set(v);
    }
    
    void message_296_listin_number_set(number v) {
        this->message_296_set_set(v);
    }
    
    void message_296_listin_bang_bang() {
        this->message_296_trigger_bang();
    }
    
    void numberobj_74_valin_set(number v) {
        this->numberobj_74_value_set(v);
    }
    
    void numberobj_74_format_set(number v) {
        this->numberobj_74_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_297_listin_list_set(const list& v) {
        this->message_297_set_set(v);
    }
    
    void message_297_listin_number_set(number v) {
        this->message_297_set_set(v);
    }
    
    void message_297_listin_bang_bang() {
        this->message_297_trigger_bang();
    }
    
    void message_298_listin_list_set(const list& v) {
        this->message_298_set_set(v);
    }
    
    void message_298_listin_number_set(number v) {
        this->message_298_set_set(v);
    }
    
    void message_298_listin_bang_bang() {
        this->message_298_trigger_bang();
    }
    
    void message_299_listin_list_set(const list& v) {
        this->message_299_set_set(v);
    }
    
    void message_299_listin_number_set(number v) {
        this->message_299_set_set(v);
    }
    
    void message_299_listin_bang_bang() {
        this->message_299_trigger_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->message_282_init();
        this->numberobj_69_init();
        this->mtof_06_innerScala_init();
        this->mtof_06_init();
        this->random_05_nz_init();
        this->message_283_init();
        this->numberobj_70_init();
        this->random_06_nz_init();
        this->numberobj_71_init();
        this->message_284_init();
        this->message_285_init();
        this->message_286_init();
        this->numberobj_72_init();
        this->message_287_init();
        this->liststore_14_storage_init();
        this->message_288_init();
        this->message_289_init();
        this->message_290_init();
        this->message_291_init();
        this->message_292_init();
        this->message_293_init();
        this->numberobj_73_init();
        this->message_294_init();
        this->message_295_init();
        this->message_296_init();
        this->numberobj_74_init();
        this->message_297_init();
        this->message_298_init();
        this->message_299_init();
        this->p_26->initializeObjects();
        this->p_27->initializeObjects();
        this->p_28->initializeObjects();
        this->p_29->initializeObjects();
        this->p_30->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_26->startup();
        this->p_27->startup();
        this->p_28->startup();
        this->p_29->startup();
        this->p_30->startup();
    
        if ((bool)(this->metro_02_on))
            this->metro_02_on_set(1);
    
        this->getEngine()->scheduleClockEvent(this, 29237386, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_26->allocateDataRefs();
        this->p_27->allocateDataRefs();
        this->p_28->allocateDataRefs();
        this->p_29->allocateDataRefs();
        this->p_30->allocateDataRefs();
        this->mtof_06_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_06_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_06_innerMtoF_buffer = this->mtof_06_innerMtoF_buffer->allocateIfNeeded();
        this->liststore_14_storage_storage = this->liststore_14_storage_storage->allocateIfNeeded();
    
        if (this->liststore_14_storage_storageobj->hasRequestedSize()) {
            if (this->liststore_14_storage_storageobj->wantsFill())
                this->zeroDataRef(this->liststore_14_storage_storageobj);
    
            this->getEngine()->sendDataRefUpdated(3);
        }
    }
    
    void gate_03_onoff_set(number v) {
        this->gate_03_onoff = v;
    }
    
    void numberobj_69_output_set(number v) {
        this->gate_03_onoff_set(v);
    }
    
    void numberobj_69_value_set(number v) {
        this->numberobj_69_value_setter(v);
        v = this->numberobj_69_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_69_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Melodies/number_obj-39"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_69_output_set(localvalue);
    }
    
    void eventinlet_34_out1_number_set(number v) {
        this->numberobj_69_value_set(v);
    }
    
    void message_288_set_set(const list& v) {
        this->message_288_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-18"), v, this->_currentTime);
    }
    
    void p_27_in2_number_set(number v) {
        this->p_27->updateTime(this->_currentTime);
        this->p_27->eventinlet_30_out1_number_set(v);
    }
    
    void receive_10_output_number_set(number v) {
        this->receive_10_output_number = v;
    
        {
            list converted = {v};
            this->message_288_set_set(converted);
        }
    
        this->p_27_in2_number_set(v);
    }
    
    number param_13_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0.05 ? 0.05 : v));
        return v;
    }
    
    void expr_33_in2_set(number v) {
        this->expr_33_in2 = v;
    }
    
    void p_29_target_CurMelDur_number_set(number v) {
        this->p_29->updateTime(this->_currentTime);
        this->p_29->receive_06_output_number_set(v);
    }
    
    void p_30_target_CurMelDur_number_set(number v) {
        this->p_30->updateTime(this->_currentTime);
        this->p_30->receive_07_output_number_set(v);
    }
    
    void p_28_source_CurMelDur_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_38_source_CurMelDur_number_set(v);
        this->p_29_target_CurMelDur_number_set(v);
        this->p_30_target_CurMelDur_number_set(v);
    }
    
    void message_295_set_set(const list& v) {
        this->message_295_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-25"), v, this->_currentTime);
    }
    
    void expr_32_in2_set(number v) {
        this->expr_32_in2 = v;
    }
    
    void expr_34_out1_set(number v) {
        this->expr_34_out1 = v;
        this->expr_32_in2_set(this->expr_34_out1);
    }
    
    void expr_34_in1_set(number in1) {
        this->expr_34_in1 = in1;
    
        this->expr_34_out1_set(
            (this->expr_34_in2 == 0 ? 0 : (this->expr_34_in2 == 0. ? 0. : this->expr_34_in1 / this->expr_34_in2))
        );//#map:Melodies//_obj-55:1
    }
    
    void send_06_input_number_set(number v) {
        this->send_06_input_number = v;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_38_source_NoteDur_number_set(v);
    }
    
    void expr_32_out1_set(number v) {
        this->expr_32_out1 = v;
        this->send_06_input_number_set(this->expr_32_out1);
    }
    
    void expr_32_in1_set(number in1) {
        this->expr_32_in1 = in1;
        this->expr_32_out1_set(this->expr_32_in1 + this->expr_32_in2);//#map:Melodies/+_obj-54:1
    }
    
    void expr_33_out1_set(number v) {
        this->expr_33_out1 = v;
    
        {
            list converted = {this->expr_33_out1};
            this->message_295_set_set(converted);
        }
    
        this->expr_34_in1_set(this->expr_33_out1);
        this->expr_32_in1_set(this->expr_33_out1);
    }
    
    void expr_33_in1_set(number in1) {
        this->expr_33_in1 = in1;
        this->expr_33_out1_set(this->expr_33_in1 * this->expr_33_in2);//#map:Melodies/*_obj-21:1
    }
    
    void metro_02_interval_set(number v) {
        this->metro_02_interval_setter(v);
        v = this->metro_02_interval;
    }
    
    void p_28_out1_number_set(number v) {
        this->expr_33_in1_set(v);
        this->metro_02_interval_set(v);
    }
    
    void p_28_in1_number_set(number v) {
        this->p_28->updateTime(this->_currentTime);
        this->p_28->eventinlet_31_out1_number_set(v);
    }
    
    void numberobj_71_output_set(number v) {
        this->p_28_in1_number_set(v);
    }
    
    void numberobj_71_value_bang() {
        number v = this->numberobj_71_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 6) {
            localvalue = 6;
        }
    
        if (this->numberobj_71_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Melodies/number_obj-33"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_71_output_set(localvalue);
    }
    
    void button_41_output_bang() {
        this->numberobj_71_value_bang();
    }
    
    void button_41_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Melodies/button_obj-28"), this->_currentTime);;
        this->button_41_output_bang();
    }
    
    void message_282_set_set(const list& v) {
        this->message_282_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-29"), v, this->_currentTime);
    }
    
    void message_282_out_set(const list& ) {}
    
    void message_282_trigger_bang() {
        this->message_282_out_set(this->message_282_set);
    }
    
    void button_39_output_bang() {}
    
    void button_39_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Melodies/button_obj-42"), this->_currentTime);;
        this->button_39_output_bang();
    }
    
    void message_284_set_set(const list& v) {
        this->message_284_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-3"), v, this->_currentTime);
    }
    
    void message_289_set_set(const list& v) {
        this->message_289_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-27"), v, this->_currentTime);
    }
    
    void random_06_limit_set(number v) {
        this->random_06_limit_setter(v);
        v = this->random_06_limit;
    }
    
    void listlen_02_out1_set(number v) {
        this->random_06_limit_set(v);
    }
    
    void listlen_02_input_set(const list& input) {
        this->listlen_02_input = jsCreateListCopy(input);
    
        {
            this->listlen_02_out1_set(input->length);
            return;
        }
    }
    
    void trigger_09_out3_set(const list& v) {
        this->listlen_02_input_set(v);
    }
    
    void listindex_02_index_set(const list& v) {
        this->listindex_02_index = jsCreateListCopy(v);
    }
    
    void numberobj_70_output_set(number v) {
        {
            list converted = {v};
            this->listindex_02_index_set(converted);
        }
    }
    
    void numberobj_70_value_set(number v) {
        this->numberobj_70_value_setter(v);
        v = this->numberobj_70_value;
        number localvalue = v;
    
        if (this->numberobj_70_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Melodies/number_obj-14"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_70_output_set(localvalue);
    }
    
    void random_06_result_set(number v) {
        this->numberobj_70_value_set(v);
    }
    
    void random_06_trigger_bang() {
        this->random_06_result_set(rnbo_abs(this->random_06_nz_next()) * this->random_06_limit);
    }
    
    void trigger_09_out2_bang() {
        this->random_06_trigger_bang();
    }
    
    void listindex_02_out2_set(const list& ) {}
    
    void message_285_set_set(const list& v) {
        this->message_285_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-8"), v, this->_currentTime);
    }
    
    void intnum_02_value_set(number v) {
        this->intnum_02_value = v;
        this->intnum_02_stored = v;
    }
    
    void listindex_02_out1_set(number v) {
        {
            list converted = {v};
            this->message_285_set_set(converted);
        }
    
        this->intnum_02_value_set(v);
    }
    
    void listindex_02_input_set(const list& v) {
        this->listindex_02_input = jsCreateListCopy(v);
        list result = jsCreateListCopy(v);
    
        if (this->listindex_02_index->length > 0 && this->listindex_02_index[0] < v->length && this->listindex_02_index[0] >= 0) {
            number nth = v[(Index)this->listindex_02_index[0]];
    
            if (this->listindex_02_index->length == 1)
                result->splice(this->listindex_02_index[0], 1);
            else
                result->splice(this->listindex_02_index[0], 1, this->listindex_02_index[1]);
    
            this->listindex_02_out2_set(result);
            this->listindex_02_out1_set(nth);
        } else if ((bool)(this->listindex_02_input->length))
            this->listindex_02_out2_set(v);
    }
    
    void trigger_09_out1_set(const list& v) {
        this->listindex_02_input_set(v);
    }
    
    void trigger_09_input_list_set(const list& v) {
        this->trigger_09_out3_set(v);
        this->trigger_09_out2_bang();
        this->trigger_09_out1_set(v);
    }
    
    void p_27_out1_list_set(const list& v) {
        this->message_289_set_set(v);
        this->trigger_09_input_list_set(v);
    }
    
    void p_27_in1_number_set(number v) {
        this->p_27->updateTime(this->_currentTime);
        this->p_27->eventinlet_29_out1_number_set(v);
    }
    
    void receive_09_output_number_set(number v) {
        this->receive_09_output_number = v;
    
        {
            list converted = {v};
            this->message_284_set_set(converted);
        }
    
        this->p_27_in1_number_set(v);
    }
    
    void send_05_input_number_set(number v) {
        this->send_05_input_number = v;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_38_source_currentNote_number_set(v);
        this->receive_09_output_number_set(v);
    }
    
    void p_26_out2_number_set(number v) {
        this->send_05_input_number_set(v);
    }
    
    void eventoutlet_37_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_38_out1_number_set(v);
    }
    
    void expr_31_out1_set(number v) {
        this->expr_31_out1 = v;
        this->eventoutlet_37_in1_number_set(this->expr_31_out1);
    }
    
    void expr_31_in1_set(number in1) {
        this->expr_31_in1 = in1;
        this->expr_31_out1_set(this->expr_31_in1 + this->expr_31_in2);//#map:Melodies/+_obj-225:1
    }
    
    void expr_31_in2_set(number v) {
        this->expr_31_in2 = v;
    }
    
    void mtof_06_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_31_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_31_in1_set(converted);
        }
    }
    
    void mtof_06_midivalue_set(const list& v) {
        this->mtof_06_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_06_midivalue->length; i++) {
            tmp->push(
                this->mtof_06_innerMtoF_next(this->mtof_06_midivalue[(Index)i], this->mtof_06_base)
            );
        }
    
        this->mtof_06_out_set(tmp);
    }
    
    void p_26_out1_number_set(number v) {
        {
            list converted = {v};
            this->mtof_06_midivalue_set(converted);
        }
    }
    
    void p_26_in1_number_set(number v) {
        this->p_26->updateTime(this->_currentTime);
        this->p_26->eventinlet_21_out1_number_set(v);
    }
    
    void intnum_02_out_set(number v) {
        this->p_26_in1_number_set(v);
    
        {
            list converted = {v};
            this->message_282_set_set(converted);
        }
    }
    
    void intnum_02_input_bang_bang() {
        this->intnum_02_out_set(trunc(this->intnum_02_stored));
    }
    
    void button_40_output_bang() {
        this->intnum_02_input_bang_bang();
    }
    
    void button_40_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Melodies/button_obj-6"), this->_currentTime);;
        this->button_40_output_bang();
    }
    
    void numberobj_69_value_bang() {
        number v = this->numberobj_69_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_69_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Melodies/number_obj-39"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_69_output_set(localvalue);
    }
    
    void metro_02_on_set(number v) {
        this->metro_02_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_02_output_set(number v) {
        this->metro_02_on_set(v);
    }
    
    void toggle_02_value_number_set(number v) {
        this->toggle_02_value_number_setter(v);
        v = this->toggle_02_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Melodies/toggle_obj-103"), v, this->_currentTime);
        this->toggle_02_output_set(v);
    }
    
    void numberobj_71_value_set(number v) {
        this->numberobj_71_value_setter(v);
        v = this->numberobj_71_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 6) {
            localvalue = 6;
        }
    
        if (this->numberobj_71_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Melodies/number_obj-33"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_71_output_set(localvalue);
    }
    
    void random_05_result_set(number v) {
        this->numberobj_71_value_set(v);
    }
    
    void random_05_trigger_bang() {
        this->random_05_result_set(rnbo_abs(this->random_05_nz_next()) * this->random_05_limit);
    }
    
    void gate_03_out1_bang_bang() {
        this->button_40_bangval_bang();
    }
    
    void gate_03_input_bang_bang() {
        if (this->gate_03_onoff == 1)
            this->gate_03_out1_bang_bang();
    }
    
    void metro_02_tickout_bang() {
        this->random_05_trigger_bang();
        this->gate_03_input_bang_bang();
        this->button_39_bangval_bang();
    }
    
    void message_283_set_set(const list& v) {
        this->message_283_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-135"), v, this->_currentTime);
    }
    
    void message_283_out_set(const list& ) {}
    
    void message_283_trigger_bang() {
        this->message_283_out_set(this->message_283_set);
    }
    
    void message_284_out_set(const list& ) {}
    
    void message_284_trigger_bang() {
        this->message_284_out_set(this->message_284_set);
    }
    
    void message_285_out_set(const list& ) {}
    
    void message_285_trigger_bang() {
        this->message_285_out_set(this->message_285_set);
    }
    
    void message_286_set_set(const list& v) {
        this->message_286_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-137"), v, this->_currentTime);
    }
    
    void message_286_out_set(const list& ) {}
    
    void message_286_trigger_bang() {
        this->message_286_out_set(this->message_286_set);
    }
    
    void numberobj_72_output_set(number v) {
        {
            list converted = {v};
            this->message_286_set_set(converted);
        }
    }
    
    void numberobj_72_value_set(number v) {
        this->numberobj_72_value_setter(v);
        v = this->numberobj_72_value;
        number localvalue = v;
    
        if (this->numberobj_72_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Melodies/number_obj-128"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_72_output_set(localvalue);
    }
    
    void message_287_set_set(const list& v) {
        this->message_287_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-60"), v, this->_currentTime);
    }
    
    void message_292_set_set(const list& v) {
        this->message_292_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-142"), v, this->_currentTime);
    }
    
    void liststore_14_out3_set(number v) {
        {
            list converted = {v};
            this->message_292_set_set(converted);
        }
    }
    
    void liststore_14_out1_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_72_value_set(converted);
        }
    
        this->message_283_set_set(v);
    }
    
    void liststore_14_out2_bang() {}
    
    void liststore_14_lookupidx_set(number v) {
        this->liststore_14_lookupidx = v;
        list val = this->liststore_14_storage_lookup(v);
        this->liststore_14_out3_set(v);
    
        if ((bool)(val->length)) {
            this->liststore_14_out1_set(this->liststore_14_storage_lookup(v));
        } else {
            this->liststore_14_out2_bang();
        }
    }
    
    void liststore_14_storeidx_set(number v) {
        this->liststore_14_storeidx = v;
    }
    
    void message_287_out_set(const list& v) {
        {
            if (v->length > 2)
                this->liststore_14_storeidx_set(v[2]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->liststore_14_lookupidx_set(converted);
        }
    }
    
    void message_287_trigger_bang() {
        this->message_287_out_set(this->message_287_set);
    }
    
    void loadmess_03_message_bang() {
        list v = this->loadmess_03_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_71_value_set(converted);
        }
    }
    
    void message_288_out_set(const list& ) {}
    
    void message_288_trigger_bang() {
        this->message_288_out_set(this->message_288_set);
    }
    
    void message_289_out_set(const list& ) {}
    
    void message_289_trigger_bang() {
        this->message_289_out_set(this->message_289_set);
    }
    
    void message_290_set_set(const list& v) {
        this->message_290_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-87"), v, this->_currentTime);
    }
    
    void liststore_14_storelist_set(const list& v) {
        this->liststore_14_storelist = jsCreateListCopy(v);
        this->liststore_14_storage_store(this->liststore_14_storeidx, v);
    }
    
    void trigger_10_out3_set(const list& v) {
        this->liststore_14_storelist_set(v);
    }
    
    void counter_04_output_set(number v) {
        this->counter_04_output = v;
        this->liststore_14_storeidx_set(v);
    
        {
            list converted = {v};
            this->message_287_set_set(converted);
        }
    }
    
    void counter_04_overflow_bang_bang() {}
    
    number counter_04_overflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_04_overflow_number_set(number v) {
        v = this->counter_04_overflow_number_constrain(v);
        this->counter_04_overflow_number = v;
    }
    
    void counter_04_carry_set(number v) {
        this->counter_04_carry = v;
    }
    
    void counter_04_underflow_bang_bang() {}
    
    number counter_04_underflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_04_underflow_number_set(number v) {
        v = this->counter_04_underflow_number_constrain(v);
        this->counter_04_underflow_number = v;
    }
    
    void counter_04_input_bang() {
        this->counter_04_output_set(this->counter_04_count);
        this->counter_04_inc();
    
        if (this->counter_04_count > this->counter_04_maximum) {
            if (this->counter_04_direction == 2) {
                this->counter_04_phase = !(bool)(this->counter_04_phase);
                this->counter_04_count = this->counter_04_maximum;
                this->counter_04_inc();
            } else
                this->counter_04_count = this->counter_04_minimum;
    
            if ((bool)(!(bool)(this->counter_04_overflow_number))) {
                if (this->counter_04_carryflag == 1)
                    this->counter_04_overflow_bang_bang();
                else
                    this->counter_04_overflow_number_set(1);
            }
    
            this->counter_04_carry_set(this->counter_04_carry + 1);
        } else if ((bool)(this->counter_04_overflow_number) && this->counter_04_carryflag == 0)
            this->counter_04_overflow_number_set(0);
    
        if (this->counter_04_count < this->counter_04_minimum) {
            if (this->counter_04_direction == 2) {
                this->counter_04_phase = !(bool)(this->counter_04_phase);
                this->counter_04_count = this->counter_04_minimum;
                this->counter_04_inc();
            } else
                this->counter_04_count = this->counter_04_maximum;
    
            if ((bool)(!(bool)(this->counter_04_underflow_number))) {
                if (this->counter_04_carryflag == 1)
                    this->counter_04_underflow_bang_bang();
                else
                    this->counter_04_underflow_number_set(1);
            }
    
            this->counter_04_carry_set(this->counter_04_carry + 1);
        } else if ((bool)(this->counter_04_underflow_number) && this->counter_04_carryflag == 0)
            this->counter_04_underflow_number_set(0);
    }
    
    void trigger_10_out2_bang() {
        this->counter_04_input_bang();
    }
    
    void trigger_10_out1_bang() {
        this->message_287_trigger_bang();
    }
    
    void trigger_10_input_list_set(const list& v) {
        this->trigger_10_out3_set(v);
        this->trigger_10_out2_bang();
        this->trigger_10_out1_bang();
    }
    
    void message_290_out_set(const list& v) {
        this->trigger_10_input_list_set(v);
    }
    
    void message_290_trigger_bang() {
        this->message_290_out_set(this->message_290_set);
    }
    
    void message_291_set_set(const list& v) {
        this->message_291_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-102"), v, this->_currentTime);
    }
    
    void counter_04_resetnow_number_set(number v) {
        this->counter_04_resetnow_number = v;
        this->counter_04_count = v;
        this->counter_04_input();
    }
    
    void message_291_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->counter_04_resetnow_number_set(converted);
        }
    }
    
    void message_291_trigger_bang() {
        this->message_291_out_set(this->message_291_set);
    }
    
    void message_292_out_set(const list& ) {}
    
    void message_292_trigger_bang() {
        this->message_292_out_set(this->message_292_set);
    }
    
    void message_293_set_set(const list& v) {
        this->message_293_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-89"), v, this->_currentTime);
    }
    
    void message_293_out_set(const list& v) {
        this->trigger_10_input_list_set(v);
    }
    
    void message_293_trigger_bang() {
        this->message_293_out_set(this->message_293_set);
    }
    
    void numberobj_73_output_set(number v) {
        this->param_13_value_set(v);
    }
    
    void numberobj_73_value_set(number v) {
        this->numberobj_73_value_setter(v);
        v = this->numberobj_73_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0.05) {
            localvalue = 0.05;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_73_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Melodies/number_obj-23"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_73_output_set(localvalue);
    }
    
    void loadmess_04_message_bang() {
        list v = this->loadmess_04_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_73_value_set(converted);
        }
    }
    
    void liststore_14_dump_bang() {
        for (number i = 0; i < 4; i++) {
            list val = this->liststore_14_storage_lookup(i);
    
            if (val->length > 0) {
                this->liststore_14_out3_set(i);
                this->liststore_14_out1_set(val);
            }
        }
    }
    
    void button_42_output_bang() {
        this->liststore_14_dump_bang();
    }
    
    void button_42_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Melodies/button_obj-76"), this->_currentTime);;
        this->button_42_output_bang();
    }
    
    void message_294_set_set(const list& v) {
        this->message_294_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-91"), v, this->_currentTime);
    }
    
    void message_294_out_set(const list& v) {
        this->trigger_10_input_list_set(v);
    }
    
    void message_294_trigger_bang() {
        this->message_294_out_set(this->message_294_set);
    }
    
    void liststore_14_reset_bang() {
        this->liststore_14_storage_reset();
    }
    
    void button_43_output_bang() {
        this->liststore_14_reset_bang();
        this->message_291_trigger_bang();
    }
    
    void button_43_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Melodies/button_obj-94"), this->_currentTime);;
        this->button_43_output_bang();
    }
    
    void message_295_out_set(const list& ) {}
    
    void message_295_trigger_bang() {
        this->message_295_out_set(this->message_295_set);
    }
    
    void message_296_set_set(const list& v) {
        this->message_296_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-93"), v, this->_currentTime);
    }
    
    void message_296_out_set(const list& v) {
        this->trigger_10_input_list_set(v);
    }
    
    void message_296_trigger_bang() {
        this->message_296_out_set(this->message_296_set);
    }
    
    void message_299_set_set(const list& v) {
        this->message_299_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-59"), v, this->_currentTime);
    }
    
    void append_02_b_set(const list& v) {
        this->append_02_b = jsCreateListCopy(v);
    }
    
    void trigger_11_out3_set(const list& v) {
        this->append_02_b_set(v);
    }
    
    void message_297_set_set(const list& v) {
        this->message_297_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-36"), v, this->_currentTime);
    }
    
    void counter_05_output_set(number v) {
        this->counter_05_output = v;
    
        {
            list converted = {v};
            this->message_297_set_set(converted);
        }
    }
    
    void counter_05_overflow_bang_bang() {}
    
    number counter_05_overflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_05_overflow_number_set(number v) {
        v = this->counter_05_overflow_number_constrain(v);
        this->counter_05_overflow_number = v;
    }
    
    void counter_05_carry_set(number v) {
        this->counter_05_carry = v;
    }
    
    void counter_05_underflow_bang_bang() {}
    
    number counter_05_underflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_05_underflow_number_set(number v) {
        v = this->counter_05_underflow_number_constrain(v);
        this->counter_05_underflow_number = v;
    }
    
    void counter_05_input_bang() {
        this->counter_05_output_set(this->counter_05_count);
        this->counter_05_inc();
    
        if (this->counter_05_count > this->counter_05_maximum) {
            if (this->counter_05_direction == 2) {
                this->counter_05_phase = !(bool)(this->counter_05_phase);
                this->counter_05_count = this->counter_05_maximum;
                this->counter_05_inc();
            } else
                this->counter_05_count = this->counter_05_minimum;
    
            if ((bool)(!(bool)(this->counter_05_overflow_number))) {
                if (this->counter_05_carryflag == 1)
                    this->counter_05_overflow_bang_bang();
                else
                    this->counter_05_overflow_number_set(1);
            }
    
            this->counter_05_carry_set(this->counter_05_carry + 1);
        } else if ((bool)(this->counter_05_overflow_number) && this->counter_05_carryflag == 0)
            this->counter_05_overflow_number_set(0);
    
        if (this->counter_05_count < this->counter_05_minimum) {
            if (this->counter_05_direction == 2) {
                this->counter_05_phase = !(bool)(this->counter_05_phase);
                this->counter_05_count = this->counter_05_minimum;
                this->counter_05_inc();
            } else
                this->counter_05_count = this->counter_05_maximum;
    
            if ((bool)(!(bool)(this->counter_05_underflow_number))) {
                if (this->counter_05_carryflag == 1)
                    this->counter_05_underflow_bang_bang();
                else
                    this->counter_05_underflow_number_set(1);
            }
    
            this->counter_05_carry_set(this->counter_05_carry + 1);
        } else if ((bool)(this->counter_05_underflow_number) && this->counter_05_carryflag == 0)
            this->counter_05_underflow_number_set(0);
    }
    
    void trigger_11_out2_bang() {
        this->counter_05_input_bang();
    }
    
    void message_298_set_set(const list& v) {
        this->message_298_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Melodies/message_obj-51"), v, this->_currentTime);
    }
    
    void route_02_nomatch_bang_bang() {}
    
    void route_05_nomatch_bang_bang() {}
    
    void route_05_input_bang_bang() {
        this->route_05_nomatch_bang_bang();
    }
    
    void route_02_match4_bang_bang() {
        this->route_05_input_bang_bang();
    }
    
    void route_05_match2_bang_bang() {}
    
    void route_05_match2_number_set(number ) {}
    
    void route_05_match2_list_set(const list& ) {}
    
    void route_05_match1_bang_bang() {}
    
    void route_05_match1_number_set(number ) {}
    
    void route_05_match1_list_set(const list& ) {}
    
    void route_05_nomatch_number_set(number ) {}
    
    void route_05_nomatch_list_set(const list& ) {}
    
    void route_05_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_05_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_05_selector2) {
                if (input->length == 0)
                    this->route_05_match2_bang_bang();
                else if (input->length == 1)
                    this->route_05_match2_number_set(input[0]);
                else
                    this->route_05_match2_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_05_selector1) {
                if (input->length == 0)
                    this->route_05_match1_bang_bang();
                else if (input->length == 1)
                    this->route_05_match1_number_set(input[0]);
                else
                    this->route_05_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_05_nomatch_number_set(v[0]);
                } else {
                    this->route_05_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_05_input_number_set(number v) {
        this->route_05_input_list_set({v});
    }
    
    void route_02_match4_number_set(number v) {
        this->route_05_input_number_set(v);
    }
    
    void route_02_match4_list_set(const list& v) {
        this->route_05_input_list_set(v);
    }
    
    void route_04_nomatch_bang_bang() {}
    
    void route_04_input_bang_bang() {
        this->route_04_nomatch_bang_bang();
    }
    
    void route_02_match3_bang_bang() {
        this->route_04_input_bang_bang();
    }
    
    void route_04_match2_bang_bang() {}
    
    void route_04_match2_number_set(number ) {}
    
    void route_04_match2_list_set(const list& ) {}
    
    void route_04_match1_bang_bang() {}
    
    void route_04_match1_number_set(number ) {}
    
    void route_04_match1_list_set(const list& ) {}
    
    void route_04_nomatch_number_set(number ) {}
    
    void route_04_nomatch_list_set(const list& ) {}
    
    void route_04_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_04_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_04_selector2) {
                if (input->length == 0)
                    this->route_04_match2_bang_bang();
                else if (input->length == 1)
                    this->route_04_match2_number_set(input[0]);
                else
                    this->route_04_match2_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_04_selector1) {
                if (input->length == 0)
                    this->route_04_match1_bang_bang();
                else if (input->length == 1)
                    this->route_04_match1_number_set(input[0]);
                else
                    this->route_04_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_04_nomatch_number_set(v[0]);
                } else {
                    this->route_04_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_04_input_number_set(number v) {
        this->route_04_input_list_set({v});
    }
    
    void route_02_match3_number_set(number v) {
        this->route_04_input_number_set(v);
    }
    
    void route_02_match3_list_set(const list& v) {
        this->route_04_input_list_set(v);
    }
    
    void route_03_nomatch_bang_bang() {}
    
    void route_03_input_bang_bang() {
        this->route_03_nomatch_bang_bang();
    }
    
    void route_02_match2_bang_bang() {
        this->route_03_input_bang_bang();
    }
    
    void route_03_match2_bang_bang() {}
    
    void route_03_match2_number_set(number ) {}
    
    void route_03_match2_list_set(const list& ) {}
    
    void route_03_match1_bang_bang() {}
    
    void route_03_match1_number_set(number ) {}
    
    void route_03_match1_list_set(const list& ) {}
    
    void route_03_nomatch_number_set(number ) {}
    
    void route_03_nomatch_list_set(const list& ) {}
    
    void route_03_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_03_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_03_selector2) {
                if (input->length == 0)
                    this->route_03_match2_bang_bang();
                else if (input->length == 1)
                    this->route_03_match2_number_set(input[0]);
                else
                    this->route_03_match2_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_03_selector1) {
                if (input->length == 0)
                    this->route_03_match1_bang_bang();
                else if (input->length == 1)
                    this->route_03_match1_number_set(input[0]);
                else
                    this->route_03_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_03_nomatch_number_set(v[0]);
                } else {
                    this->route_03_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_03_input_number_set(number v) {
        this->route_03_input_list_set({v});
    }
    
    void route_02_match2_number_set(number v) {
        this->route_03_input_number_set(v);
    }
    
    void route_02_match2_list_set(const list& v) {
        this->route_03_input_list_set(v);
    }
    
    void route_01_nomatch_bang_bang() {}
    
    void route_01_input_bang_bang() {
        this->route_01_nomatch_bang_bang();
    }
    
    void route_02_match1_bang_bang() {
        this->route_01_input_bang_bang();
    }
    
    void route_01_match2_bang_bang() {}
    
    void route_01_match2_number_set(number ) {}
    
    void route_01_match2_list_set(const list& ) {}
    
    void route_01_match1_bang_bang() {}
    
    void route_01_match1_number_set(number ) {}
    
    void route_01_match1_list_set(const list& ) {}
    
    void route_01_nomatch_number_set(number ) {}
    
    void route_01_nomatch_list_set(const list& ) {}
    
    void route_01_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_01_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_01_selector2) {
                if (input->length == 0)
                    this->route_01_match2_bang_bang();
                else if (input->length == 1)
                    this->route_01_match2_number_set(input[0]);
                else
                    this->route_01_match2_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_01_selector1) {
                if (input->length == 0)
                    this->route_01_match1_bang_bang();
                else if (input->length == 1)
                    this->route_01_match1_number_set(input[0]);
                else
                    this->route_01_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_01_nomatch_number_set(v[0]);
                } else {
                    this->route_01_nomatch_list_set(v);
                }
            }
        }
    }
    
    void route_01_input_number_set(number v) {
        this->route_01_input_list_set({v});
    }
    
    void route_02_match1_number_set(number v) {
        this->route_01_input_number_set(v);
    }
    
    void route_02_match1_list_set(const list& v) {
        this->route_01_input_list_set(v);
    }
    
    void route_02_nomatch_number_set(number ) {}
    
    void route_02_nomatch_list_set(const list& ) {}
    
    void route_02_input_list_set(const list& v) {
        if ((bool)(!(bool)(v->length)))
            this->route_02_nomatch_bang_bang();
        else {
            number check = v[0];
            list input = jsCreateListCopy(v);
            input->shift();
            bool nomatch = true;
    
            if (check == this->route_02_selector4) {
                if (input->length == 0)
                    this->route_02_match4_bang_bang();
                else if (input->length == 1)
                    this->route_02_match4_number_set(input[0]);
                else
                    this->route_02_match4_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector3) {
                if (input->length == 0)
                    this->route_02_match3_bang_bang();
                else if (input->length == 1)
                    this->route_02_match3_number_set(input[0]);
                else
                    this->route_02_match3_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector2) {
                if (input->length == 0)
                    this->route_02_match2_bang_bang();
                else if (input->length == 1)
                    this->route_02_match2_number_set(input[0]);
                else
                    this->route_02_match2_list_set(input);
    
                nomatch = false;
            }
    
            if (check == this->route_02_selector1) {
                if (input->length == 0)
                    this->route_02_match1_bang_bang();
                else if (input->length == 1)
                    this->route_02_match1_number_set(input[0]);
                else
                    this->route_02_match1_list_set(input);
    
                nomatch = false;
            }
    
            if ((bool)(nomatch)) {
                if (v->length == 1) {
                    this->route_02_nomatch_number_set(v[0]);
                } else {
                    this->route_02_nomatch_list_set(v);
                }
            }
        }
    }
    
    void append_02_out1_set(const list& v) {
        this->message_298_set_set(v);
        this->route_02_input_list_set(v);
    }
    
    void append_02_a_set(const list& _a) {
        RNBO_UNUSED(_a);
        list a = createListCopy(_a);
        this->append_02_a = jsCreateListCopy(a);
        auto b = this->append_02_b;
    
        {
            this->append_02_out1_set(a->concat(b));
            return;
        }
    }
    
    void message_297_out_set(const list& v) {
        this->append_02_a_set(v);
    }
    
    void message_297_trigger_bang() {
        this->message_297_out_set(this->message_297_set);
    }
    
    void trigger_11_out1_bang() {
        this->message_297_trigger_bang();
    }
    
    void trigger_11_input_number_set(number v) {
        list l_3 = list(0);
        l_3[0] = v;
        this->trigger_11_out3_set(l_3);
        this->trigger_11_out2_bang();
        this->trigger_11_out1_bang();
    }
    
    void expr_35_out1_set(number v) {
        this->expr_35_out1 = v;
    
        {
            list converted = {this->expr_35_out1};
            this->message_299_set_set(converted);
        }
    
        this->trigger_11_input_number_set(this->expr_35_out1);
    }
    
    void expr_35_in1_set(number in1) {
        this->expr_35_in1 = in1;
        this->expr_35_out1_set(this->expr_35_in1 > this->expr_35_in2);//#map:Melodies/>_obj-46:1
    }
    
    void numberobj_74_output_set(number v) {
        this->expr_35_in1_set(v);
    }
    
    void numberobj_74_value_set(number v) {
        this->numberobj_74_value_setter(v);
        v = this->numberobj_74_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 6) {
            localvalue = 6;
        }
    
        if (this->numberobj_74_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("Melodies/number_obj-49"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_74_output_set(localvalue);
    }
    
    void message_298_out_set(const list& ) {}
    
    void message_298_trigger_bang() {
        this->message_298_out_set(this->message_298_set);
    }
    
    void message_299_out_set(const list& ) {}
    
    void message_299_trigger_bang() {
        this->message_299_out_set(this->message_299_set);
    }
    
    void p_29_out1_list_set(const list& ) {}
    
    void p_30_out1_list_set(const list& ) {}
    
    void p_26_perform(Index n) {
        // subpatcher: MelodiesColl
        this->p_26->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_27_perform(Index n) {
        // subpatcher: NextNote
        this->p_27->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_28_perform(Index n) {
        // subpatcher: MelNote
        this->p_28->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_29_perform(Index n) {
        // subpatcher: NextDuration
        this->p_29->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_30_perform(Index n) {
        // subpatcher: NextDurationBig
        this->p_30->process(nullptr, 0, nullptr, 0, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_69_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_69_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_69_value = localvalue;
    }
    
    void toggle_02_value_number_setter(number v) {
        this->toggle_02_value_number = (v != 0 ? 1 : 0);
    }
    
    void metro_02_interval_setter(number v) {
        this->metro_02_interval = (v > 0 ? v : 0);
    }
    
    void random_05_limit_setter(number v) {
        if (v >= 0)
            this->random_05_limit = v;
    }
    
    void numberobj_70_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_70_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_70_value = localvalue;
    }
    
    void random_06_limit_setter(number v) {
        if (v >= 0)
            this->random_06_limit = v;
    }
    
    void numberobj_71_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 6) {
            localvalue = 6;
        }
    
        if (this->numberobj_71_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_71_value = localvalue;
    }
    
    void numberobj_72_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_72_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_72_value = localvalue;
    }
    
    void numberobj_73_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0.05) {
            localvalue = 0.05;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_73_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_73_value = localvalue;
    }
    
    void iter_01_size_setter(number v) {
        this->iter_01_size = rnbo_floor(v);
    }
    
    void numberobj_74_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 6) {
            localvalue = 6;
        }
    
        if (this->numberobj_74_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_74_value = localvalue;
    }
    
    void message_282_init() {
        this->message_282_set_set({5});
    }
    
    void numberobj_69_init() {
        this->numberobj_69_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/number_obj-39"), 1, this->_currentTime);
    }
    
    void numberobj_69_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_69_value;
    }
    
    void numberobj_69_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_69_value_set(preset["value"]);
    }
    
    number mtof_06_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_06_innerMtoF_lastInValue && tuning == this->mtof_06_innerMtoF_lastTuning)
            return this->mtof_06_innerMtoF_lastOutValue;
    
        this->mtof_06_innerMtoF_lastInValue = midivalue;
        this->mtof_06_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_06_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_06_innerMtoF_lastOutValue;
    }
    
    void mtof_06_innerMtoF_reset() {
        this->mtof_06_innerMtoF_lastInValue = 0;
        this->mtof_06_innerMtoF_lastOutValue = 0;
        this->mtof_06_innerMtoF_lastTuning = 0;
    }
    
    void mtof_06_innerScala_mid(int v) {
        this->mtof_06_innerScala_kbmMid = v;
        this->mtof_06_innerScala_updateRefFreq();
    }
    
    void mtof_06_innerScala_ref(int v) {
        this->mtof_06_innerScala_kbmRefNum = v;
        this->mtof_06_innerScala_updateRefFreq();
    }
    
    void mtof_06_innerScala_base(number v) {
        this->mtof_06_innerScala_kbmRefFreq = v;
        this->mtof_06_innerScala_updateRefFreq();
    }
    
    void mtof_06_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_06_innerScala_updateScale(sclValid);
    }
    
    void mtof_06_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_06_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_06_innerScala_updateMap(map);
        }
    }
    
    number mtof_06_innerScala_mtof(number note) {
        if ((bool)(this->mtof_06_innerScala_lastValid) && this->mtof_06_innerScala_lastNote == note) {
            return this->mtof_06_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_06_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_06_innerScala_applySCL(degoct[0], fract(note), this->mtof_06_innerScala_refFreq);
        }
    
        this->mtof_06_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_06_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_06_innerScala_lastValid) && this->mtof_06_innerScala_lastFreq == hz) {
            return this->mtof_06_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_06_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_06_innerScala_kbmSize == 0) {
            out = this->mtof_06_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_06_innerScala_octdegree(degree, this->mtof_06_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_06_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_06_innerScala_kbmValid[(Index)(i + this->mtof_06_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_06_innerScala_kbmSize + entry + this->mtof_06_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_06_innerScala_updateLast(out, hz);
        return this->mtof_06_innerScala_lastNote;
    }
    
    int mtof_06_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_06_innerScala_lastValid = false;
            this->mtof_06_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_06_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_06_innerScala_sclOctaveMul = last;
            this->mtof_06_innerScala_sclEntryCount = (int)(this->mtof_06_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_06_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_06_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_06_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_06_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_06_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_06_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_06_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_06_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_06_innerScala_kbmSize = (int)(size);
            this->mtof_06_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_06_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_06_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_06_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_06_innerScala_kbmRefFreq = kbm[5];
            this->mtof_06_innerScala_kbmOctaveDegree = octave;
            this->mtof_06_innerScala_kbmValid = kbm;
            this->mtof_06_innerScala_kbmMapSize = (kbm->length - this->mtof_06_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_06_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_06_innerScala_KBM_MAP_OFFSET));
            this->mtof_06_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_06_innerScala_updateLast(number note, number freq) {
        this->mtof_06_innerScala_lastValid = true;
        this->mtof_06_innerScala_lastNote = note;
        this->mtof_06_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_06_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_06_innerScala_refFreq) / this->mtof_06_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_06_innerScala_sclEntryCount; i++) {
            number c = this->mtof_06_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_06_innerScala_refFreq);
            n = this->mtof_06_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_06_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_06_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_06_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_06_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_06_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_06_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_06_innerScala_applyKBM(number note) {
        if ((this->mtof_06_innerScala_kbmMin == this->mtof_06_innerScala_kbmMax && this->mtof_06_innerScala_kbmMax == 0) || (note >= this->mtof_06_innerScala_kbmMin && note <= this->mtof_06_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_06_innerScala_kbmMid));
    
            if (this->mtof_06_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_06_innerScala_octdegree(degree, this->mtof_06_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_06_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_06_innerScala_kbmValid[(Index)(this->mtof_06_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_06_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_06_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_06_innerScala_octdegree(degree, this->mtof_06_innerScala_sclEntryCount);
        return this->mtof_06_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_06_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_06_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_06_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_06_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_06_innerScala_sclOctaveMul);
    }
    
    void mtof_06_innerScala_updateRefFreq() {
        this->mtof_06_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_06_innerScala_kbmRefNum - this->mtof_06_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_06_innerScala_refFreq = this->mtof_06_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_06_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_06_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_06_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_06_innerScala_kbmSize) {
                if (index < this->mtof_06_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_06_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_06_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_06_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_06_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_06_innerScala_refFreq = this->mtof_06_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_06_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_06_innerScala_reset() {
        this->mtof_06_innerScala_lastValid = false;
        this->mtof_06_innerScala_lastNote = 0;
        this->mtof_06_innerScala_lastFreq = 0;
        this->mtof_06_innerScala_sclEntryCount = 0;
        this->mtof_06_innerScala_sclOctaveMul = 1;
        this->mtof_06_innerScala_sclExpMul = {};
        this->mtof_06_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_06_innerScala_kbmMid = 60;
        this->mtof_06_innerScala_kbmRefNum = 69;
        this->mtof_06_innerScala_kbmRefFreq = 440;
        this->mtof_06_innerScala_kbmSize = 0;
        this->mtof_06_innerScala_kbmMin = 0;
        this->mtof_06_innerScala_kbmMax = 0;
        this->mtof_06_innerScala_kbmOctaveDegree = 12;
        this->mtof_06_innerScala_kbmMapSize = 0;
        this->mtof_06_innerScala_refFreq = 261.63;
    }
    
    void mtof_06_init() {
        this->mtof_06_innerScala_update(this->mtof_06_scale, this->mtof_06_map);
    }
    
    void toggle_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_02_value_number;
    }
    
    void toggle_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_02_value_number_set(preset["value"]);
    }
    
    void metro_02_onTransportChanged(number ) {}
    
    void metro_02_onBeatTimeChanged(number ) {}
    
    void random_05_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_05_nz_state
        );
    }
    
    void random_05_nz_init() {
        this->random_05_nz_reset();
    }
    
    void random_05_nz_seed(number v) {
        xoshiro_reset(v, this->random_05_nz_state);
    }
    
    number random_05_nz_next() {
        return xoshiro_next(this->random_05_nz_state);
    }
    
    void message_283_init() {
        this->message_283_set_set({1});
    }
    
    void numberobj_70_init() {
        this->numberobj_70_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/number_obj-14"), 1, this->_currentTime);
    }
    
    void numberobj_70_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_70_value;
    }
    
    void numberobj_70_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_70_value_set(preset["value"]);
    }
    
    void random_06_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_06_nz_state
        );
    }
    
    void random_06_nz_init() {
        this->random_06_nz_reset();
    }
    
    void random_06_nz_seed(number v) {
        xoshiro_reset(v, this->random_06_nz_state);
    }
    
    number random_06_nz_next() {
        return xoshiro_next(this->random_06_nz_state);
    }
    
    void numberobj_71_init() {
        this->numberobj_71_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/number_obj-33"), 1, this->_currentTime);
    }
    
    void numberobj_71_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_71_value;
    }
    
    void numberobj_71_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_71_value_set(preset["value"]);
    }
    
    void message_284_init() {
        this->message_284_set_set({5});
    }
    
    void message_285_init() {
        this->message_285_set_set({4});
    }
    
    void message_286_init() {
        this->message_286_set_set({1});
    }
    
    void numberobj_72_init() {
        this->numberobj_72_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/number_obj-128"), 1, this->_currentTime);
    }
    
    void numberobj_72_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_72_value;
    }
    
    void numberobj_72_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_72_value_set(preset["value"]);
    }
    
    void message_287_init() {
        this->message_287_set_set({3});
    }
    
    list liststore_14_storage_next(number index) {
        return this->liststore_14_storage_lookup(index);
    }
    
    list liststore_14_storage_lookup(number index) {
        list tmp1 = {};
        int64_t idx = (int64_t)(index);
    
        if (index >= 0 && index < this->liststore_14_storage__slotcount) {
            number entrylength = this->liststore_14_storage_storage[(Index)(idx * this->liststore_14_storage__entrysize)];
    
            if (entrylength > 0) {
                for (number i = 0; i < entrylength; i++) {
                    tmp1->push(
                        this->liststore_14_storage_storage[(Index)(idx * this->liststore_14_storage__entrysize + i + 1)]
                    );
                }
            }
        }
    
        return tmp1;
    }
    
    void liststore_14_storage_store(number index, list value) {
        int64_t idx = (int64_t)(index);
    
        if (index >= 0 && index < this->liststore_14_storage__slotcount) {
            number entrylength = value->length;
            this->liststore_14_storage_storage[(Index)(idx * this->liststore_14_storage__entrysize)] = entrylength;
    
            if (entrylength > 0) {
                for (number i = 0; i < entrylength; i++) {
                    this->liststore_14_storage_storage[(Index)(idx * this->liststore_14_storage__entrysize + i + 1)] = value[(Index)i];
                }
            }
        }
    }
    
    void liststore_14_storage_init() {
        this->liststore_14_storage__entrysize = 1 + 1;
        this->liststore_14_storage__slotcount = 4;
        int64_t storagesize = (int64_t)(4 * this->liststore_14_storage__entrysize);
        this->liststore_14_storage_storage->requestSize((Index)(storagesize), 1);
    }
    
    void liststore_14_storage_clear() {
        this->liststore_14_storage_storage->setZero();
    }
    
    void liststore_14_storage_reset() {
        this->liststore_14_storage_init();
        this->liststore_14_storage_clear();
    }
    
    void message_288_init() {
        this->message_288_set_set({1});
    }
    
    void counter_04_inc() {
        this->counter_04_count = ((bool)(this->counter_04_phase) ? this->counter_04_count + 1 : this->counter_04_count - 1);
    }
    
    void counter_04_input() {
        this->counter_04_output_set(this->counter_04_count);
        this->counter_04_inc();
    
        if (this->counter_04_count > this->counter_04_maximum) {
            if (this->counter_04_direction == 2) {
                this->counter_04_phase = !(bool)(this->counter_04_phase);
                this->counter_04_count = this->counter_04_maximum;
                this->counter_04_inc();
            } else
                this->counter_04_count = this->counter_04_minimum;
    
            if ((bool)(!(bool)(this->counter_04_overflow_number))) {
                if (this->counter_04_carryflag == 1)
                    this->counter_04_overflow_bang_bang();
                else
                    this->counter_04_overflow_number_set(1);
            }
    
            this->counter_04_carry_set(this->counter_04_carry + 1);
        } else if ((bool)(this->counter_04_overflow_number) && this->counter_04_carryflag == 0)
            this->counter_04_overflow_number_set(0);
    
        if (this->counter_04_count < this->counter_04_minimum) {
            if (this->counter_04_direction == 2) {
                this->counter_04_phase = !(bool)(this->counter_04_phase);
                this->counter_04_count = this->counter_04_minimum;
                this->counter_04_inc();
            } else
                this->counter_04_count = this->counter_04_maximum;
    
            if ((bool)(!(bool)(this->counter_04_underflow_number))) {
                if (this->counter_04_carryflag == 1)
                    this->counter_04_underflow_bang_bang();
                else
                    this->counter_04_underflow_number_set(1);
            }
    
            this->counter_04_carry_set(this->counter_04_carry + 1);
        } else if ((bool)(this->counter_04_underflow_number) && this->counter_04_carryflag == 0)
            this->counter_04_underflow_number_set(0);
    }
    
    void message_289_init() {
        this->message_289_set_set({1, 2, 4, 4, 4, 5, 6, 8, 9});
    }
    
    void message_290_init() {
        this->message_290_set_set({1});
    }
    
    void message_291_init() {
        this->message_291_set_set({0});
    }
    
    void message_292_init() {
        this->message_292_set_set({3});
    }
    
    void message_293_init() {
        this->message_293_set_set({2});
    }
    
    void numberobj_73_init() {
        this->numberobj_73_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_73_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_73_value;
    }
    
    void numberobj_73_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_73_value_set(preset["value"]);
    }
    
    void param_13_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_13_value;
    }
    
    void param_13_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_13_value_set(preset["value"]);
    }
    
    void message_294_init() {
        this->message_294_set_set({3});
    }
    
    void message_295_init() {
        this->message_295_set_set({1500});
    }
    
    void message_296_init() {
        this->message_296_set_set({4});
    }
    
    void numberobj_74_init() {
        this->numberobj_74_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Melodies/number_obj-49"), 1, this->_currentTime);
    }
    
    void numberobj_74_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_74_value;
    }
    
    void numberobj_74_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_74_value_set(preset["value"]);
    }
    
    void message_297_init() {
        this->message_297_set_set({3});
    }
    
    void counter_05_inc() {
        this->counter_05_count = ((bool)(this->counter_05_phase) ? this->counter_05_count + 1 : this->counter_05_count - 1);
    }
    
    void message_298_init() {
        this->message_298_set_set({3, 0});
    }
    
    void message_299_init() {
        this->message_299_set_set({0});
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        numberobj_69_value = 0;
        numberobj_69_value_setter(numberobj_69_value);
        gate_03_onoff = 0;
        gate_03_out1_number = 0;
        mtof_06_base = 440;
        expr_31_in1 = 0;
        expr_31_in2 = 0;
        expr_31_out1 = 0;
        p_26_target = 0;
        intnum_02_input_number = 0;
        intnum_02_value = 0;
        receive_08_output_number = 0;
        toggle_02_value_number = 0;
        toggle_02_value_number_setter(toggle_02_value_number);
        metro_02_on = 1;
        metro_02_interval = 500;
        metro_02_interval_setter(metro_02_interval);
        p_27_target = 0;
        receive_09_output_number = 0;
        random_05_limit = 7;
        random_05_limit_setter(random_05_limit);
        random_05_seed = 0;
        send_05_input_number = 0;
        numberobj_70_value = 0;
        numberobj_70_value_setter(numberobj_70_value);
        random_06_limit = 1;
        random_06_limit_setter(random_06_limit);
        random_06_seed = 0;
        numberobj_71_value = 0;
        numberobj_71_value_setter(numberobj_71_value);
        p_28_target = 0;
        receive_10_output_number = 0;
        numberobj_72_value = 0;
        numberobj_72_value_setter(numberobj_72_value);
        liststore_14_lookupidx = 0;
        liststore_14_storeidx = 0;
        loadmess_03_message = { 3 };
        counter_04_carryflag = 0;
        counter_04_direction = 0;
        counter_04_resetnext_number = 0;
        counter_04_resetnow_number = 0;
        counter_04_maximum = 3;
        counter_04_output = 0;
        counter_04_underflow_number = 0;
        counter_04_overflow_number = 0;
        counter_04_carry = 0;
        counter_04_minimum = 0;
        listgroup_01_size = 4;
        expr_32_in1 = 0;
        expr_32_in2 = 0;
        expr_32_out1 = 0;
        expr_33_in1 = 0;
        expr_33_in2 = 0;
        expr_33_out1 = 0;
        send_06_input_number = 0;
        expr_34_in1 = 0;
        expr_34_in2 = 5;
        expr_34_out1 = 0;
        loadmess_04_message = { 1 };
        numberobj_73_value = 0;
        numberobj_73_value_setter(numberobj_73_value);
        param_13_value = 1;
        iter_01_input = { 0 };
        iter_01_size = 1;
        iter_01_size_setter(iter_01_size);
        p_29_target = 0;
        route_01_selector1 = 0;
        route_01_selector2 = 1;
        route_02_selector1 = 0;
        route_02_selector2 = 1;
        route_02_selector3 = 2;
        route_02_selector4 = 3;
        numberobj_74_value = 0;
        numberobj_74_value_setter(numberobj_74_value);
        expr_35_in1 = 0;
        expr_35_in2 = 2;
        expr_35_out1 = 0;
        p_30_target = 0;
        counter_05_carryflag = 0;
        counter_05_direction = 0;
        counter_05_resetnext_number = 0;
        counter_05_resetnow_number = 0;
        counter_05_maximum = 3;
        counter_05_output = 0;
        counter_05_underflow_number = 0;
        counter_05_overflow_number = 0;
        counter_05_carry = 0;
        counter_05_minimum = 0;
        route_03_selector1 = 0;
        route_03_selector2 = 1;
        route_04_selector1 = 0;
        route_04_selector2 = 1;
        route_05_selector1 = 0;
        route_05_selector2 = 1;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_69_currentFormat = 6;
        numberobj_69_lastValue = 0;
        mtof_06_innerMtoF_lastInValue = 0;
        mtof_06_innerMtoF_lastOutValue = 0;
        mtof_06_innerMtoF_lastTuning = 0;
        mtof_06_innerScala_lastValid = false;
        mtof_06_innerScala_lastNote = 0;
        mtof_06_innerScala_lastFreq = 0;
        mtof_06_innerScala_sclEntryCount = 0;
        mtof_06_innerScala_sclOctaveMul = 1;
        mtof_06_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_06_innerScala_kbmMid = 60;
        mtof_06_innerScala_kbmRefNum = 69;
        mtof_06_innerScala_kbmRefFreq = 440;
        mtof_06_innerScala_kbmSize = 0;
        mtof_06_innerScala_kbmMin = 0;
        mtof_06_innerScala_kbmMax = 0;
        mtof_06_innerScala_kbmOctaveDegree = 12;
        mtof_06_innerScala_kbmMapSize = 0;
        mtof_06_innerScala_refFreq = 261.63;
        intnum_02_stored = 6;
        toggle_02_lastValue = 0;
        metro_02_last = -1;
        metro_02_next = -1;
        numberobj_70_currentFormat = 6;
        numberobj_70_lastValue = 0;
        numberobj_71_currentFormat = 6;
        numberobj_71_lastValue = 0;
        numberobj_72_currentFormat = 6;
        numberobj_72_lastValue = 0;
        liststore_14_storage__slotcount = 1024;
        liststore_14_storage__entrysize = 65;
        counter_04_count = 0;
        counter_04_phase = true;
        numberobj_73_currentFormat = 6;
        numberobj_73_lastValue = 0;
        param_13_lastValue = 0;
        numberobj_74_currentFormat = 6;
        numberobj_74_lastValue = 0;
        counter_05_count = 0;
        counter_05_phase = true;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        list message_282_set;
        number numberobj_69_value;
        number gate_03_onoff;
        number gate_03_out1_number;
        list gate_03_out1_list;
        list mtof_06_midivalue;
        list mtof_06_scale;
        list mtof_06_map;
        number mtof_06_base;
        number expr_31_in1;
        number expr_31_in2;
        number expr_31_out1;
        number p_26_target;
        number intnum_02_input_number;
        number intnum_02_value;
        number receive_08_output_number;
        list receive_08_output_list;
        number toggle_02_value_number;
        number metro_02_on;
        number metro_02_interval;
        number p_27_target;
        number receive_09_output_number;
        list receive_09_output_list;
        list listindex_02_input;
        list listindex_02_index;
        number random_05_limit;
        number random_05_seed;
        number send_05_input_number;
        list send_05_input_list;
        list message_283_set;
        number numberobj_70_value;
        number random_06_limit;
        number random_06_seed;
        number numberobj_71_value;
        number p_28_target;
        list message_284_set;
        number receive_10_output_number;
        list receive_10_output_list;
        list listlen_02_input;
        list message_285_set;
        list message_286_set;
        number numberobj_72_value;
        list message_287_set;
        number liststore_14_lookupidx;
        list liststore_14_storelist;
        number liststore_14_storeidx;
        list loadmess_03_message;
        list message_288_set;
        Int counter_04_carryflag;
        number counter_04_direction;
        number counter_04_resetnext_number;
        number counter_04_resetnow_number;
        number counter_04_maximum;
        number counter_04_output;
        number counter_04_underflow_number;
        number counter_04_overflow_number;
        number counter_04_carry;
        number counter_04_minimum;
        list message_289_set;
        list message_290_set;
        list message_291_set;
        list message_292_set;
        list message_293_set;
        number listgroup_01_size;
        number expr_32_in1;
        number expr_32_in2;
        number expr_32_out1;
        number expr_33_in1;
        number expr_33_in2;
        number expr_33_out1;
        number send_06_input_number;
        list send_06_input_list;
        number expr_34_in1;
        number expr_34_in2;
        number expr_34_out1;
        list loadmess_04_message;
        number numberobj_73_value;
        number param_13_value;
        list message_294_set;
        list message_295_set;
        list message_296_set;
        list iter_01_input;
        number iter_01_size;
        number p_29_target;
        number route_01_selector1;
        number route_01_selector2;
        number route_02_selector1;
        number route_02_selector2;
        number route_02_selector3;
        number route_02_selector4;
        number numberobj_74_value;
        number expr_35_in1;
        number expr_35_in2;
        number expr_35_out1;
        list message_297_set;
        list append_02_a;
        list append_02_b;
        number p_30_target;
        Int counter_05_carryflag;
        number counter_05_direction;
        number counter_05_resetnext_number;
        number counter_05_resetnow_number;
        number counter_05_maximum;
        number counter_05_output;
        number counter_05_underflow_number;
        number counter_05_overflow_number;
        number counter_05_carry;
        number counter_05_minimum;
        number route_03_selector1;
        number route_03_selector2;
        list message_298_set;
        number route_04_selector1;
        number route_04_selector2;
        list message_299_set;
        number route_05_selector1;
        number route_05_selector2;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_69_currentFormat;
        number numberobj_69_lastValue;
        number mtof_06_innerMtoF_lastInValue;
        number mtof_06_innerMtoF_lastOutValue;
        number mtof_06_innerMtoF_lastTuning;
        Float64BufferRef mtof_06_innerMtoF_buffer;
        const Index mtof_06_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_06_innerScala_lastValid;
        number mtof_06_innerScala_lastNote;
        number mtof_06_innerScala_lastFreq;
        int mtof_06_innerScala_sclEntryCount;
        number mtof_06_innerScala_sclOctaveMul;
        list mtof_06_innerScala_sclExpMul;
        list mtof_06_innerScala_kbmValid;
        int mtof_06_innerScala_kbmMid;
        int mtof_06_innerScala_kbmRefNum;
        number mtof_06_innerScala_kbmRefFreq;
        int mtof_06_innerScala_kbmSize;
        int mtof_06_innerScala_kbmMin;
        int mtof_06_innerScala_kbmMax;
        int mtof_06_innerScala_kbmOctaveDegree;
        Index mtof_06_innerScala_kbmMapSize;
        number mtof_06_innerScala_refFreq;
        number intnum_02_stored;
        number toggle_02_lastValue;
        MillisecondTime metro_02_last;
        MillisecondTime metro_02_next;
        UInt random_05_nz_state[4] = { };
        Int numberobj_70_currentFormat;
        number numberobj_70_lastValue;
        UInt random_06_nz_state[4] = { };
        Int numberobj_71_currentFormat;
        number numberobj_71_lastValue;
        Int numberobj_72_currentFormat;
        number numberobj_72_lastValue;
        Float64BufferRef liststore_14_storage_storage;
        number liststore_14_storage__slotcount;
        number liststore_14_storage__entrysize;
        number counter_04_count;
        bool counter_04_phase;
        list listgroup_01_grouped;
        Int numberobj_73_currentFormat;
        number numberobj_73_lastValue;
        number param_13_lastValue;
        Int numberobj_74_currentFormat;
        number numberobj_74_lastValue;
        number counter_05_count;
        bool counter_05_phase;
        number stackprotect_count;
        DataRef liststore_14_storage_storageobj;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_166* p_26;
        RNBOSubpatcher_167* p_27;
        RNBOSubpatcher_168* p_28;
        RNBOSubpatcher_169* p_29;
        RNBOSubpatcher_170* p_30;
    
};

class RNBOSubpatcher_179 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_171 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_179;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_171()
            {
            }
            
            ~RNBOSubpatcher_171()
            {
            }
            
            virtual RNBOSubpatcher_179* getPatcher() const {
                return static_cast<RNBOSubpatcher_179 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_06_perform(
                    in2,
                    this->rampsmooth_tilde_06_up,
                    this->rampsmooth_tilde_06_down,
                    this->signals[0],
                    n
                );
            
                this->gen_06_perform(in1, this->signals[0], this->gen_06_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_06_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_06_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_06_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_35_out1_bang_bang() {}
            
            void eventinlet_35_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_06_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_06_phase_init();
                this->gen_06_h1_init();
                this->gen_06_h2_init();
                this->gen_06_oldsr_init();
                this->gen_06_freq_init();
                this->gen_06_os_init();
                this->gen_06_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_06_osc_wavetable_buf = this->gen_06_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_06_framesize_set(number v) {
                this->gen_06_framesize = v;
            }
            
            void eventinlet_35_out1_number_set(number v) {
                this->gen_06_framesize_set(v);
            }
            
            void rampsmooth_tilde_06_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_06_increment = this->rampsmooth_tilde_06_increment;
                auto __rampsmooth_tilde_06_index = this->rampsmooth_tilde_06_index;
                auto __rampsmooth_tilde_06_prev = this->rampsmooth_tilde_06_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_06_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_06_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_06_index = _up;
                            __rampsmooth_tilde_06_increment = (x[(Index)i] - __rampsmooth_tilde_06_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_06_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_06_index = _down;
                            __rampsmooth_tilde_06_increment = (x[(Index)i] - __rampsmooth_tilde_06_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_06_index > 0) {
                        __rampsmooth_tilde_06_prev += __rampsmooth_tilde_06_increment;
                        __rampsmooth_tilde_06_index -= 1;
                    } else {
                        __rampsmooth_tilde_06_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_06_prev;
                }
            
                this->rampsmooth_tilde_06_prev = __rampsmooth_tilde_06_prev;
                this->rampsmooth_tilde_06_index = __rampsmooth_tilde_06_index;
                this->rampsmooth_tilde_06_increment = __rampsmooth_tilde_06_increment;
            }
            
            void gen_06_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_06_h1_value = this->gen_06_h1_value;
                auto __gen_06_h2_value = this->gen_06_h2_value;
                auto __gen_06_phase_value = this->gen_06_phase_value;
                auto __gen_06_realsr_value = this->gen_06_realsr_value;
                auto __gen_06_os_value = this->gen_06_os_value;
                auto __gen_06_freq_value = this->gen_06_freq_value;
                auto __gen_06_oldsr_value = this->gen_06_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_06_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_06_osc_wavetable_buf));
            
                    if (__gen_06_oldsr_value != this->samplerate() || __gen_06_freq_value != in1[(Index)i0]) {
                        __gen_06_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_06_os_value == 0) {
                            __gen_06_os_value = 1;
                        }
            
                        __gen_06_realsr_value = this->samplerate() * __gen_06_os_value;
                        __gen_06_oldsr_value = this->samplerate();
                        __gen_06_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_06_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_06_phase_value, 0, 1);
            
                        __gen_06_phase_value = fixdenorm(
                            t_1 + ((__gen_06_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_06_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_06_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_06_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_06_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_06_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_06_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_06_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_06_h2_value * a1_26 + __gen_06_h1_value * a2_25 - (__gen_06_h1_value * b2_28 + __gen_06_h2_value * b1_27);
                        __gen_06_h1_value = fixdenorm(__gen_06_h2_value);
                        __gen_06_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_06_oldsr_value = __gen_06_oldsr_value;
                this->gen_06_freq_value = __gen_06_freq_value;
                this->gen_06_os_value = __gen_06_os_value;
                this->gen_06_realsr_value = __gen_06_realsr_value;
                this->gen_06_phase_value = __gen_06_phase_value;
                this->gen_06_h2_value = __gen_06_h2_value;
                this->gen_06_h1_value = __gen_06_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_06_phase_getvalue() {
                return this->gen_06_phase_value;
            }
            
            void gen_06_phase_setvalue(number val) {
                this->gen_06_phase_value = val;
            }
            
            void gen_06_phase_reset() {
                this->gen_06_phase_value = 0;
            }
            
            void gen_06_phase_init() {
                this->gen_06_phase_value = 0;
            }
            
            number gen_06_h1_getvalue() {
                return this->gen_06_h1_value;
            }
            
            void gen_06_h1_setvalue(number val) {
                this->gen_06_h1_value = val;
            }
            
            void gen_06_h1_reset() {
                this->gen_06_h1_value = 0;
            }
            
            void gen_06_h1_init() {
                this->gen_06_h1_value = 0;
            }
            
            number gen_06_h2_getvalue() {
                return this->gen_06_h2_value;
            }
            
            void gen_06_h2_setvalue(number val) {
                this->gen_06_h2_value = val;
            }
            
            void gen_06_h2_reset() {
                this->gen_06_h2_value = 0;
            }
            
            void gen_06_h2_init() {
                this->gen_06_h2_value = 0;
            }
            
            number gen_06_oldsr_getvalue() {
                return this->gen_06_oldsr_value;
            }
            
            void gen_06_oldsr_setvalue(number val) {
                this->gen_06_oldsr_value = val;
            }
            
            void gen_06_oldsr_reset() {
                this->gen_06_oldsr_value = 0;
            }
            
            void gen_06_oldsr_init() {
                this->gen_06_oldsr_value = 0;
            }
            
            number gen_06_freq_getvalue() {
                return this->gen_06_freq_value;
            }
            
            void gen_06_freq_setvalue(number val) {
                this->gen_06_freq_value = val;
            }
            
            void gen_06_freq_reset() {
                this->gen_06_freq_value = 0;
            }
            
            void gen_06_freq_init() {
                this->gen_06_freq_value = 0;
            }
            
            number gen_06_os_getvalue() {
                return this->gen_06_os_value;
            }
            
            void gen_06_os_setvalue(number val) {
                this->gen_06_os_value = val;
            }
            
            void gen_06_os_reset() {
                this->gen_06_os_value = 0;
            }
            
            void gen_06_os_init() {
                this->gen_06_os_value = 4;
            }
            
            number gen_06_realsr_getvalue() {
                return this->gen_06_realsr_value;
            }
            
            void gen_06_realsr_setvalue(number val) {
                this->gen_06_realsr_value = val;
            }
            
            void gen_06_realsr_reset() {
                this->gen_06_realsr_value = 0;
            }
            
            void gen_06_realsr_init() {
                this->gen_06_realsr_value = 0;
            }
            
            number rampsmooth_tilde_06_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_06_d_prev);
                this->rampsmooth_tilde_06_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_06_d_dspsetup() {
                this->rampsmooth_tilde_06_d_reset();
            }
            
            void rampsmooth_tilde_06_d_reset() {
                this->rampsmooth_tilde_06_d_prev = 0;
            }
            
            void rampsmooth_tilde_06_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_06_setupDone = true;
                this->rampsmooth_tilde_06_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_06_in1 = 0;
                gen_06_in2 = 0;
                gen_06_framesize = 256;
                rampsmooth_tilde_06_x = 0;
                rampsmooth_tilde_06_up = 1000;
                rampsmooth_tilde_06_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_06_phase_value = 0;
                gen_06_h1_value = 0;
                gen_06_h2_value = 0;
                gen_06_oldsr_value = 0;
                gen_06_freq_value = 0;
                gen_06_os_value = 0;
                gen_06_realsr_value = 0;
                rampsmooth_tilde_06_prev = 0;
                rampsmooth_tilde_06_index = 0;
                rampsmooth_tilde_06_increment = 0;
                rampsmooth_tilde_06_d_prev = 0;
                rampsmooth_tilde_06_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_06_in1;
                number gen_06_in2;
                number gen_06_framesize;
                number rampsmooth_tilde_06_x;
                number rampsmooth_tilde_06_up;
                number rampsmooth_tilde_06_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_06_phase_value;
                number gen_06_h1_value;
                number gen_06_h2_value;
                number gen_06_oldsr_value;
                number gen_06_freq_value;
                number gen_06_os_value;
                number gen_06_realsr_value;
                Float32BufferRef gen_06_osc_wavetable_buf;
                number rampsmooth_tilde_06_prev;
                number rampsmooth_tilde_06_index;
                number rampsmooth_tilde_06_increment;
                number rampsmooth_tilde_06_d_prev;
                bool rampsmooth_tilde_06_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_172 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_179;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_172()
            {
            }
            
            ~RNBOSubpatcher_172()
            {
            }
            
            virtual RNBOSubpatcher_179* getPatcher() const {
                return static_cast<RNBOSubpatcher_179 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("MeloInst/crossfade/message_obj-27") == objectId)
                        this->message_300_listin_number_set(payload);
            
                    if (TAG("MeloInst/crossfade/message_obj-30") == objectId)
                        this->message_301_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("MeloInst/crossfade/message_obj-27") == objectId)
                        this->message_300_listin_list_set(payload);
            
                    if (TAG("MeloInst/crossfade/message_obj-30") == objectId)
                        this->message_301_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("MeloInst/crossfade/message_obj-27") == objectId)
                        this->message_300_listin_bang_bang();
            
                    if (TAG("MeloInst/crossfade/message_obj-30") == objectId)
                        this->message_301_listin_bang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("MeloInst/crossfade/message_obj-27"):
                    {
                    return "MeloInst/crossfade/message_obj-27";
                    }
                case TAG("MeloInst/crossfade/message_obj-30"):
                    {
                    return "MeloInst/crossfade/message_obj-30";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            void message_300_listin_list_set(const list& v) {
                this->message_300_set_set(v);
            }
            
            void message_300_listin_number_set(number v) {
                this->message_300_set_set(v);
            }
            
            void message_300_listin_bang_bang() {
                this->message_300_trigger_bang();
            }
            
            void eventinlet_36_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->message_300_trigger_bang();
            }
            
            void eventinlet_36_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->message_300_trigger_bang();
            }
            
            void eventinlet_37_out1_number_set(number v) {
                RNBO_UNUSED(v);
                this->message_301_trigger_bang();
            }
            
            void eventinlet_37_out1_list_set(const list& v) {
                RNBO_UNUSED(v);
                this->message_301_trigger_bang();
            }
            
            void message_301_listin_list_set(const list& v) {
                this->message_301_set_set(v);
            }
            
            void message_301_listin_number_set(number v) {
                this->message_301_set_set(v);
            }
            
            void message_301_listin_bang_bang() {
                this->message_301_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_300_init();
                this->message_301_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void eventoutlet_38_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_32_out1_list_set((list)v);
            }
            
            void listgroup_02_out_set(const list& v) {
                this->eventoutlet_38_in1_list_set(v);
            }
            
            void listgroup_02_input_list_set(const list& v) {
                this->listgroup_02_grouped = this->listgroup_02_grouped->concat(v);
                this->listgroup_02_checkOutput();
            }
            
            void message_300_out_set(const list& v) {
                this->listgroup_02_input_list_set(v);
            }
            
            void message_300_trigger_bang() {
                this->message_300_out_set(this->message_300_set);
            }
            
            void eventinlet_36_out1_bang_bang() {
                this->message_300_trigger_bang();
            }
            
            void message_301_out_set(const list& v) {
                this->listgroup_02_input_list_set(v);
            }
            
            void message_301_trigger_bang() {
                this->message_301_out_set(this->message_301_set);
            }
            
            void eventinlet_37_out1_bang_bang() {
                this->message_301_trigger_bang();
            }
            
            void message_300_set_set(const list& v) {
                this->message_300_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("MeloInst/crossfade/message_obj-27"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_301_set_set(const list& v) {
                this->message_301_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("MeloInst/crossfade/message_obj-30"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void message_300_init() {
                this->message_300_set_set({0, 0, 1, 1, 0, 0});
            }
            
            void listgroup_02_checkOutput() {
                const Index isize = (const Index)(this->listgroup_02_size);
            
                while (this->listgroup_02_grouped->length >= isize && this->listgroup_02_size > 0) {
                    list tmp = list();
            
                    for (Index i = 0; i < isize; i++) {
                        tmp->push(this->listgroup_02_grouped[(Index)i]);
                    }
            
                    this->listgroup_02_out_set(tmp);
                    this->listgroup_02_grouped->splice(0, isize);
                }
            }
            
            void message_301_init() {
                this->message_301_set_set({0, 0, 0, 1, 0, 1});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                listgroup_02_size = 3;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list message_300_set;
                number listgroup_02_size;
                list message_301_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                list listgroup_02_grouped;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_179()
    {
    }
    
    ~RNBOSubpatcher_179()
    {
        delete this->p_31;
        delete this->p_32;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 892732297, false);
        getEngine()->flushClockEvents(this, -1841075377, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, 1396722025, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, -281953904, false);
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->linetilde_08_perform(this->signals[0], n);
        this->numbertilde_08_perform(this->zeroBuffer, this->signals[1], n);
        this->p_32_perform(n);
        this->numbertilde_09_perform(this->zeroBuffer, this->signals[2], n);
        this->p_31_perform(this->signals[1], this->signals[2], this->signals[3], n);
        this->dspexpr_36_perform(this->signals[3], this->signals[0], out1, n);
    
        this->cycle_tilde_07_perform(
            this->cycle_tilde_07_frequency,
            this->cycle_tilde_07_phase_offset,
            this->signals[0],
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_10_perform(this->zeroBuffer, this->signals[3], n);
        this->matrixtilde_01_perform(this->signals[3], this->signals[0], this->signals[2], n);
        this->linetilde_09_perform(this->signals[0], n);
        this->dspexpr_38_perform(this->signals[2], this->signals[0], this->signals[3], n);
        this->dspexpr_37_perform(out1, this->signals[3], this->dummyBuffer, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 4; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->numbertilde_08_dspsetup(forceDSPSetup);
        this->numbertilde_09_dspsetup(forceDSPSetup);
        this->cycle_tilde_07_dspsetup(forceDSPSetup);
        this->numbertilde_10_dspsetup(forceDSPSetup);
        this->p_31->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_32->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_31 = new RNBOSubpatcher_171();
        this->p_31->setEngineAndPatcher(this->getEngine(), this);
        this->p_31->initialize();
        this->p_31->setParameterOffset(this->getParameterOffset(this->p_31));
        this->p_32 = new RNBOSubpatcher_172();
        this->p_32->setEngineAndPatcher(this->getEngine(), this);
        this->p_32->initialize();
        this->p_32->setParameterOffset(this->getParameterOffset(this->p_32));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_14_getPresetValue(getSubState(preset, "tablePos"));
        this->param_15_getPresetValue(getSubState(preset, "TremFreq"));
        this->param_16_getPresetValue(getSubState(preset, "sSize"));
        this->param_17_getPresetValue(getSubState(preset, "TremAmp"));
        this->p_31->getPreset(getSubState(getSubState(preset, "__sps"), "Osc"));
        this->p_32->getPreset(getSubState(getSubState(preset, "__sps"), "crossfade"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_14_value_set(v);
            break;
            }
        case 1:
            {
            this->param_15_value_set(v);
            break;
            }
        case 2:
            {
            this->param_16_value_set(v);
            break;
            }
        case 3:
            {
            this->param_17_value_set(v);
            break;
            }
        default:
            {
            index -= 4;
    
            if (index < this->p_31->getNumParameters())
                this->p_31->setParameterValue(index, v, time);
    
            index -= this->p_31->getNumParameters();
    
            if (index < this->p_32->getNumParameters())
                this->p_32->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_14_value;
            }
        case 1:
            {
            return this->param_15_value;
            }
        case 2:
            {
            return this->param_16_value;
            }
        case 3:
            {
            return this->param_17_value;
            }
        default:
            {
            index -= 4;
    
            if (index < this->p_31->getNumParameters())
                return this->p_31->getParameterValue(index);
    
            index -= this->p_31->getNumParameters();
    
            if (index < this->p_32->getNumParameters())
                return this->p_32->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 4 + this->p_31->getNumParameters() + this->p_32->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "tablePos";
            }
        case 1:
            {
            return "TremFreq";
            }
        case 2:
            {
            return "sSize";
            }
        case 3:
            {
            return "TremAmp";
            }
        default:
            {
            index -= 4;
    
            if (index < this->p_31->getNumParameters())
                return this->p_31->getParameterName(index);
    
            index -= this->p_31->getNumParameters();
    
            if (index < this->p_32->getNumParameters())
                return this->p_32->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "MeloInst/tablePos";
            }
        case 1:
            {
            return "MeloInst/TremFreq";
            }
        case 2:
            {
            return "MeloInst/sSize";
            }
        case 3:
            {
            return "MeloInst/TremAmp";
            }
        default:
            {
            index -= 4;
    
            if (index < this->p_31->getNumParameters())
                return this->p_31->getParameterId(index);
    
            index -= this->p_31->getNumParameters();
    
            if (index < this->p_32->getNumParameters())
                return this->p_32->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0.5;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 5;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 256;
                info->min = 1;
                info->max = 8196;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 3:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 0.05;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 4;
    
                if (index < this->p_31->getNumParameters())
                    this->p_31->getParameterInfo(index, info);
    
                index -= this->p_31->getNumParameters();
    
                if (index < this->p_32->getNumParameters())
                    this->p_32->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_31)
            return 4;
    
        if (subpatcher == this->p_32)
            return 4 + this->p_31->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
            }
        case 1:
            {
            {
                value = (value < 0 ? 0 : (value > 5 ? 5 : value));
                ParameterValue normalizedValue = (value - 0) / (5 - 0);
                return normalizedValue;
            }
            }
        case 2:
            {
            {
                value = (value < 1 ? 1 : (value > 8196 ? 8196 : value));
                ParameterValue normalizedValue = (value - 1) / (8196 - 1);
                return normalizedValue;
            }
            }
        case 3:
            {
            {
                value = (value < 0.05 ? 0.05 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0.05) / (1 - 0.05);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 4;
    
            if (index < this->p_31->getNumParameters())
                return this->p_31->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_31->getNumParameters();
    
            if (index < this->p_32->getNumParameters())
                return this->p_32->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 0:
            {
            {
                {
                    return 0 + value * (1 - 0);
                }
            }
            }
        case 1:
            {
            {
                {
                    return 0 + value * (5 - 0);
                }
            }
            }
        case 2:
            {
            {
                {
                    return 1 + value * (8196 - 1);
                }
            }
            }
        case 3:
            {
            {
                {
                    return 0.05 + value * (1 - 0.05);
                }
            }
            }
        default:
            {
            index -= 4;
    
            if (index < this->p_31->getNumParameters())
                return this->p_31->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_31->getNumParameters();
    
            if (index < this->p_32->getNumParameters())
                return this->p_32->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_14_value_constrain(value);
            }
        case 1:
            {
            return this->param_15_value_constrain(value);
            }
        case 2:
            {
            return this->param_16_value_constrain(value);
            }
        case 3:
            {
            return this->param_17_value_constrain(value);
            }
        default:
            {
            index -= 4;
    
            if (index < this->p_31->getNumParameters())
                return this->p_31->constrainParameterValue(index, value);
    
            index -= this->p_31->getNumParameters();
    
            if (index < this->p_32->getNumParameters())
                return this->p_32->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 892732297:
            {
            this->loadmess_05_startupbang_bang();
            break;
            }
        case -1841075377:
            {
            this->linetilde_08_target_bang();
            break;
            }
        case 2098551528:
            {
            this->numbertilde_08_value_set(value);
            break;
            }
        case 1396722025:
            {
            this->numbertilde_09_value_set(value);
            break;
            }
        case -1494586265:
            {
            this->numbertilde_10_value_set(value);
            break;
            }
        case -281953904:
            {
            this->linetilde_09_target_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("MeloInst/message_obj-32") == objectId)
                this->message_302_listin_number_set(payload);
    
            if (TAG("MeloInst/message_obj-73") == objectId)
                this->message_303_listin_number_set(payload);
    
            if (TAG("MeloInst/message_obj-69") == objectId)
                this->message_304_listin_number_set(payload);
    
            if (TAG("MeloInst/message_obj-93") == objectId)
                this->message_305_listin_number_set(payload);
    
            if (TAG("MeloInst/message_obj-22") == objectId)
                this->message_306_listin_number_set(payload);
    
            if (TAG("MeloInst/message_obj-25") == objectId)
                this->message_307_listin_number_set(payload);
    
            if (TAG("MeloInst/message_obj-26") == objectId)
                this->message_308_listin_number_set(payload);
    
            if (TAG("MeloInst/message_obj-39") == objectId)
                this->message_309_listin_number_set(payload);
    
            if (TAG("MeloInst/message_obj-15") == objectId)
                this->message_310_listin_number_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("MeloInst/number~_obj-34") == objectId)
                this->numbertilde_08_sig_number_set(payload);
    
            if (TAG("MeloInst/number~_obj-19") == objectId)
                this->numbertilde_09_sig_number_set(payload);
    
            if (TAG("MeloInst/number~_obj-68") == objectId)
                this->numbertilde_10_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("MeloInst/number~_obj-34") == objectId)
                this->numbertilde_08_mode_set(payload);
    
            if (TAG("MeloInst/number~_obj-19") == objectId)
                this->numbertilde_09_mode_set(payload);
    
            if (TAG("MeloInst/number~_obj-68") == objectId)
                this->numbertilde_10_mode_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("MeloInst/number_obj-24") == objectId)
                this->numberobj_75_valin_set(payload);
    
            if (TAG("MeloInst/number_obj-21") == objectId)
                this->numberobj_76_valin_set(payload);
    
            if (TAG("MeloInst/number_obj-9") == objectId)
                this->numberobj_77_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("MeloInst/number_obj-24") == objectId)
                this->numberobj_75_format_set(payload);
    
            if (TAG("MeloInst/number_obj-21") == objectId)
                this->numberobj_76_format_set(payload);
    
            if (TAG("MeloInst/number_obj-9") == objectId)
                this->numberobj_77_format_set(payload);
    
            break;
            }
        }
    
        this->p_31->processNumMessage(tag, objectId, time, payload);
        this->p_32->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("MeloInst/message_obj-32") == objectId)
                this->message_302_listin_list_set(payload);
    
            if (TAG("MeloInst/message_obj-73") == objectId)
                this->message_303_listin_list_set(payload);
    
            if (TAG("MeloInst/message_obj-69") == objectId)
                this->message_304_listin_list_set(payload);
    
            if (TAG("MeloInst/message_obj-93") == objectId)
                this->message_305_listin_list_set(payload);
    
            if (TAG("MeloInst/message_obj-22") == objectId)
                this->message_306_listin_list_set(payload);
    
            if (TAG("MeloInst/message_obj-25") == objectId)
                this->message_307_listin_list_set(payload);
    
            if (TAG("MeloInst/message_obj-26") == objectId)
                this->message_308_listin_list_set(payload);
    
            if (TAG("MeloInst/message_obj-39") == objectId)
                this->message_309_listin_list_set(payload);
    
            if (TAG("MeloInst/message_obj-15") == objectId)
                this->message_310_listin_list_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("MeloInst/number~_obj-34") == objectId)
                this->numbertilde_08_sig_list_set(payload);
    
            if (TAG("MeloInst/number~_obj-19") == objectId)
                this->numbertilde_09_sig_list_set(payload);
    
            if (TAG("MeloInst/number~_obj-68") == objectId)
                this->numbertilde_10_sig_list_set(payload);
    
            break;
            }
        }
    
        this->p_31->processListMessage(tag, objectId, time, payload);
        this->p_32->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("MeloInst/message_obj-32") == objectId)
                this->message_302_listin_bang_bang();
    
            if (TAG("MeloInst/message_obj-73") == objectId)
                this->message_303_listin_bang_bang();
    
            if (TAG("MeloInst/message_obj-69") == objectId)
                this->message_304_listin_bang_bang();
    
            if (TAG("MeloInst/message_obj-93") == objectId)
                this->message_305_listin_bang_bang();
    
            if (TAG("MeloInst/message_obj-22") == objectId)
                this->message_306_listin_bang_bang();
    
            if (TAG("MeloInst/message_obj-25") == objectId)
                this->message_307_listin_bang_bang();
    
            if (TAG("MeloInst/message_obj-26") == objectId)
                this->message_308_listin_bang_bang();
    
            if (TAG("MeloInst/message_obj-39") == objectId)
                this->message_309_listin_bang_bang();
    
            if (TAG("MeloInst/message_obj-15") == objectId)
                this->message_310_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("MeloInst/button_obj-13") == objectId)
                this->button_44_bangin_bang();
    
            if (TAG("MeloInst/button_obj-74") == objectId)
                this->button_45_bangin_bang();
    
            if (TAG("MeloInst/button_obj-71") == objectId)
                this->button_46_bangin_bang();
    
            break;
            }
        case TAG("startupbang"):
            {
            if (TAG("MeloInst/loadmess_obj-20") == objectId)
                this->loadmess_05_startupbang_bang();
    
            break;
            }
        }
    
        this->p_31->processBangMessage(tag, objectId, time);
        this->p_32->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("MeloInst/message_obj-32"):
            {
            return "MeloInst/message_obj-32";
            }
        case TAG("MeloInst/message_obj-73"):
            {
            return "MeloInst/message_obj-73";
            }
        case TAG("MeloInst/message_obj-69"):
            {
            return "MeloInst/message_obj-69";
            }
        case TAG("MeloInst/message_obj-93"):
            {
            return "MeloInst/message_obj-93";
            }
        case TAG("MeloInst/message_obj-22"):
            {
            return "MeloInst/message_obj-22";
            }
        case TAG("MeloInst/message_obj-25"):
            {
            return "MeloInst/message_obj-25";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("MeloInst/button_obj-13"):
            {
            return "MeloInst/button_obj-13";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("MeloInst/number~_obj-34"):
            {
            return "MeloInst/number~_obj-34";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("MeloInst/button_obj-74"):
            {
            return "MeloInst/button_obj-74";
            }
        case TAG("MeloInst/number~_obj-19"):
            {
            return "MeloInst/number~_obj-19";
            }
        case TAG("MeloInst/button_obj-71"):
            {
            return "MeloInst/button_obj-71";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("MeloInst/number_obj-24"):
            {
            return "MeloInst/number_obj-24";
            }
        case TAG("MeloInst/number~_obj-68"):
            {
            return "MeloInst/number~_obj-68";
            }
        case TAG("MeloInst/message_obj-26"):
            {
            return "MeloInst/message_obj-26";
            }
        case TAG("MeloInst/number_obj-21"):
            {
            return "MeloInst/number_obj-21";
            }
        case TAG("MeloInst/message_obj-39"):
            {
            return "MeloInst/message_obj-39";
            }
        case TAG("MeloInst/number_obj-9"):
            {
            return "MeloInst/number_obj-9";
            }
        case TAG("MeloInst/message_obj-15"):
            {
            return "MeloInst/message_obj-15";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("MeloInst/loadmess_obj-20"):
            {
            return "MeloInst/loadmess_obj-20";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        auto subpatchResult_0 = this->p_31->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_32->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->cycle_tilde_07_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_07_bufferUpdated();
        }
    
        this->p_31->processDataViewUpdate(index, time);
        this->p_32->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->cycle_tilde_07_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void param_14_value_set(number v) {
        v = this->param_14_value_constrain(v);
        this->param_14_value = v;
        this->sendParameter(0, false);
    
        if (this->param_14_value != this->param_14_lastValue) {
            this->getEngine()->presetTouched();
            this->param_14_lastValue = this->param_14_value;
        }
    
        this->numbertilde_09_input_number_set(v);
    }
    
    void param_15_value_set(number v) {
        v = this->param_15_value_constrain(v);
        this->param_15_value = v;
        this->sendParameter(1, false);
    
        if (this->param_15_value != this->param_15_lastValue) {
            this->getEngine()->presetTouched();
            this->param_15_lastValue = this->param_15_value;
        }
    
        this->cycle_tilde_07_frequency_set(v);
        this->expr_38_in1_set(v);
    }
    
    void param_16_value_set(number v) {
        v = this->param_16_value_constrain(v);
        this->param_16_value = v;
        this->sendParameter(2, false);
    
        if (this->param_16_value != this->param_16_lastValue) {
            this->getEngine()->presetTouched();
            this->param_16_lastValue = this->param_16_value;
        }
    
        this->numberobj_76_value_set(v);
    }
    
    void param_17_value_set(number v) {
        v = this->param_17_value_constrain(v);
        this->param_17_value = v;
        this->sendParameter(3, false);
    
        if (this->param_17_value != this->param_17_lastValue) {
            this->getEngine()->presetTouched();
            this->param_17_lastValue = this->param_17_value;
        }
    
        this->send_07_input_number_set(v);
    
        {
            list converted = {v};
            this->prepend_02_b_set(converted);
        }
    }
    
    void message_302_listin_list_set(const list& v) {
        this->message_302_set_set(v);
    }
    
    void message_302_listin_number_set(number v) {
        this->message_302_set_set(v);
    }
    
    void message_302_listin_bang_bang() {
        this->message_302_trigger_bang();
    }
    
    void message_303_listin_list_set(const list& v) {
        this->message_303_set_set(v);
    }
    
    void message_303_listin_number_set(number v) {
        this->message_303_set_set(v);
    }
    
    void message_303_listin_bang_bang() {
        this->message_303_trigger_bang();
    }
    
    void message_304_listin_list_set(const list& v) {
        this->message_304_set_set(v);
    }
    
    void message_304_listin_number_set(number v) {
        this->message_304_set_set(v);
    }
    
    void message_304_listin_bang_bang() {
        this->message_304_trigger_bang();
    }
    
    void message_305_listin_list_set(const list& v) {
        this->message_305_set_set(v);
    }
    
    void message_305_listin_number_set(number v) {
        this->message_305_set_set(v);
    }
    
    void message_305_listin_bang_bang() {
        this->message_305_trigger_bang();
    }
    
    void message_306_listin_list_set(const list& v) {
        this->message_306_set_set(v);
    }
    
    void message_306_listin_number_set(number v) {
        this->message_306_set_set(v);
    }
    
    void message_306_listin_bang_bang() {
        this->message_306_trigger_bang();
    }
    
    void message_307_listin_list_set(const list& v) {
        this->message_307_set_set(v);
    }
    
    void message_307_listin_number_set(number v) {
        this->message_307_set_set(v);
    }
    
    void message_307_listin_bang_bang() {
        this->message_307_trigger_bang();
    }
    
    void button_44_bangin_bang() {
        this->button_44_bangval_bang();
    }
    
    void eventinlet_38_out1_bang_bang() {
        this->trigger_13_input_bang_bang();
    }
    
    void eventinlet_38_out1_list_set(const list& v) {
        this->trigger_13_input_list_set(v);
    }
    
    void numbertilde_08_sig_number_set(number v) {
        this->numbertilde_08_outValue = v;
    }
    
    void numbertilde_08_sig_list_set(const list& v) {
        this->numbertilde_08_outValue = v[0];
    }
    
    void numbertilde_08_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_08_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_08_currentMode = 1;
        }
    }
    
    void button_45_bangin_bang() {
        this->button_45_bangval_bang();
    }
    
    void loadmess_05_startupbang_bang() {
        this->loadmess_05_message_bang();
    }
    
    void numbertilde_09_sig_number_set(number v) {
        this->numbertilde_09_outValue = v;
    }
    
    void numbertilde_09_sig_list_set(const list& v) {
        this->numbertilde_09_outValue = v[0];
    }
    
    void numbertilde_09_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_09_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_09_currentMode = 1;
        }
    }
    
    void button_46_bangin_bang() {
        this->button_46_bangval_bang();
    }
    
    void numberobj_75_valin_set(number v) {
        this->numberobj_75_value_set(v);
    }
    
    void numberobj_75_format_set(number v) {
        this->numberobj_75_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_10_sig_number_set(number v) {
        this->numbertilde_10_outValue = v;
    }
    
    void numbertilde_10_sig_list_set(const list& v) {
        this->numbertilde_10_outValue = v[0];
    }
    
    void numbertilde_10_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_10_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_10_currentMode = 1;
        }
    }
    
    void message_308_listin_list_set(const list& v) {
        this->message_308_set_set(v);
    }
    
    void message_308_listin_number_set(number v) {
        this->message_308_set_set(v);
    }
    
    void message_308_listin_bang_bang() {
        this->message_308_trigger_bang();
    }
    
    void numberobj_76_valin_set(number v) {
        this->numberobj_76_value_set(v);
    }
    
    void numberobj_76_format_set(number v) {
        this->numberobj_76_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_309_listin_list_set(const list& v) {
        this->message_309_set_set(v);
    }
    
    void message_309_listin_number_set(number v) {
        this->message_309_set_set(v);
    }
    
    void message_309_listin_bang_bang() {
        this->message_309_trigger_bang();
    }
    
    void numberobj_77_valin_set(number v) {
        this->numberobj_77_value_set(v);
    }
    
    void numberobj_77_format_set(number v) {
        this->numberobj_77_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_310_listin_list_set(const list& v) {
        this->message_310_set_set(v);
    }
    
    void message_310_listin_number_set(number v) {
        this->message_310_set_set(v);
    }
    
    void message_310_listin_bang_bang() {
        this->message_310_trigger_bang();
    }
    
    void linetilde_08_target_bang() {}
    
    void numbertilde_08_value_set(number ) {}
    
    void numbertilde_09_value_set(number ) {}
    
    void numbertilde_10_value_set(number ) {}
    
    void linetilde_09_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->message_302_init();
        this->message_303_init();
        this->message_304_init();
        this->message_305_init();
        this->message_306_init();
        this->message_307_init();
        this->numbertilde_08_init();
        this->change_04_init();
        this->matrixtilde_01_init();
        this->numbertilde_09_init();
        this->numberobj_75_init();
        this->numbertilde_10_init();
        this->message_308_init();
        this->numberobj_76_init();
        this->message_309_init();
        this->numberobj_77_init();
        this->message_310_init();
        this->p_31->initializeObjects();
        this->p_32->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_31->startup();
        this->p_32->startup();
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 0);
        }
    
        {
            this->scheduleParamInit(3, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_31->allocateDataRefs();
        this->p_32->allocateDataRefs();
        this->cycle_tilde_07_buffer->requestSize(16384, 1);
        this->cycle_tilde_07_buffer->setSampleRate(this->sr);
        this->cycle_tilde_07_buffer = this->cycle_tilde_07_buffer->allocateIfNeeded();
    }
    
    void append_03_b_set(const list& v) {
        this->append_03_b = jsCreateListCopy(v);
    }
    
    void receive_11_output_number_set(number v) {
        this->receive_11_output_number = v;
    
        {
            list converted = {v};
            this->append_03_b_set(converted);
        }
    }
    
    void append_04_b_set(const list& v) {
        this->append_04_b = jsCreateListCopy(v);
    }
    
    void receive_13_output_number_set(number v) {
        this->receive_13_output_number = v;
    
        {
            list converted = {v};
            this->append_04_b_set(converted);
        }
    }
    
    void numbertilde_08_input_number_set(number v) {
        this->numbertilde_08_input_number = v;
        this->numbertilde_08_outValue = v;
    
        if (this->numbertilde_08_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("MeloInst/number~_obj-34"),
                {this->numbertilde_08_outValue},
                this->_currentTime
            );
        }
    }
    
    void trigger_13_out2_set(number v) {
        this->numbertilde_08_input_number_set(v);
    }
    
    void message_310_set_set(const list& v) {
        this->message_310_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-15"), v, this->_currentTime);
    }
    
    void linetilde_09_time_set(number v) {
        this->linetilde_09_time = v;
    }
    
    void linetilde_09_segments_set(const list& v) {
        this->linetilde_09_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_09_time == 0) {
                this->linetilde_09_activeRamps->length = 0;
                this->linetilde_09_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_09_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_09_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_09_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_09_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_09_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_09_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_09_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_09_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_09_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_09_activeRamps->push(lastRampValue);
                    this->linetilde_09_activeRamps->push(0);
                    this->linetilde_09_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_09_keepramp)) {
                            this->linetilde_09_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_09_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_09_activeRamps->push(destinationValue);
                    this->linetilde_09_activeRamps->push(inc);
                    this->linetilde_09_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void append_04_out1_set(const list& v) {
        this->message_310_set_set(v);
        this->linetilde_09_segments_set(v);
    }
    
    void append_04_a_set(const list& _a) {
        RNBO_UNUSED(_a);
        list a = createListCopy(_a);
        this->append_04_a = jsCreateListCopy(a);
        auto b = this->append_04_b;
    
        {
            this->append_04_out1_set(a->concat(b));
            return;
        }
    }
    
    void prepend_02_out1_set(const list& v) {
        this->append_04_a_set(v);
    }
    
    void prepend_02_a_set(const list& a) {
        this->prepend_02_a = jsCreateListCopy(a);
        auto b = this->prepend_02_b;
    
        {
            this->prepend_02_out1_set(b->concat(a));
            return;
        }
    }
    
    void message_309_out_set(const list& v) {
        this->prepend_02_a_set(v);
    }
    
    void message_309_trigger_bang() {
        this->message_309_out_set(this->message_309_set);
    }
    
    void cycle_tilde_07_phase_offset_set(number v) {
        this->cycle_tilde_07_phase_offset = v;
    }
    
    void message_308_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_07_phase_offset_set(converted);
        }
    }
    
    void message_308_trigger_bang() {
        this->message_308_out_set(this->message_308_set);
    }
    
    void prepend_01_out1_set(const list& ) {}
    
    void prepend_01_a_set(const list& a) {
        this->prepend_01_a = jsCreateListCopy(a);
        auto b = this->prepend_01_b;
    
        {
            this->prepend_01_out1_set(b->concat(a));
            return;
        }
    }
    
    void message_303_out_set(const list& v) {
        this->prepend_01_a_set(v);
    }
    
    void message_303_trigger_bang() {
        this->message_303_out_set(this->message_303_set);
    }
    
    void message_305_set_set(const list& v) {
        this->message_305_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-93"), v, this->_currentTime);
    }
    
    void linetilde_08_time_set(number v) {
        this->linetilde_08_time = v;
    }
    
    void linetilde_08_segments_set(const list& v) {
        this->linetilde_08_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_08_time == 0) {
                this->linetilde_08_activeRamps->length = 0;
                this->linetilde_08_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_08_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_08_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_08_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_08_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_08_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_08_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_08_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_08_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_08_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_08_activeRamps->push(lastRampValue);
                    this->linetilde_08_activeRamps->push(0);
                    this->linetilde_08_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_08_keepramp)) {
                            this->linetilde_08_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_08_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_08_activeRamps->push(destinationValue);
                    this->linetilde_08_activeRamps->push(inc);
                    this->linetilde_08_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void append_03_out1_set(const list& v) {
        this->message_305_set_set(v);
        this->linetilde_08_segments_set(v);
    }
    
    void append_03_a_set(const list& _a) {
        RNBO_UNUSED(_a);
        list a = createListCopy(_a);
        this->append_03_a = jsCreateListCopy(a);
        auto b = this->append_03_b;
    
        {
            this->append_03_out1_set(a->concat(b));
            return;
        }
    }
    
    void message_302_out_set(const list& v) {
        this->append_03_a_set(v);
    }
    
    void message_302_trigger_bang() {
        this->message_302_out_set(this->message_302_set);
    }
    
    void button_44_output_bang() {
        this->message_309_trigger_bang();
        this->message_308_trigger_bang();
        this->message_303_trigger_bang();
        this->message_302_trigger_bang();
    }
    
    void button_44_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("MeloInst/button_obj-13"), this->_currentTime);;
        this->button_44_output_bang();
    }
    
    void trigger_13_out1_bang() {
        this->button_44_bangval_bang();
    }
    
    void trigger_13_input_number_set(number v) {
        this->trigger_13_out2_set(v);
        this->trigger_13_out1_bang();
    }
    
    void eventinlet_38_out1_number_set(number v) {
        this->trigger_13_input_number_set(v);
    }
    
    number param_14_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0 ? 0 : v));
        return v;
    }
    
    void numbertilde_09_input_number_set(number v) {
        this->numbertilde_09_input_number = v;
        this->numbertilde_09_outValue = v;
    
        if (this->numbertilde_09_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("MeloInst/number~_obj-19"),
                {this->numbertilde_09_outValue},
                this->_currentTime
            );
        }
    }
    
    number param_15_value_constrain(number v) const {
        v = (v > 5 ? 5 : (v < 0 ? 0 : v));
        return v;
    }
    
    void cycle_tilde_07_frequency_set(number v) {
        this->cycle_tilde_07_frequency = v;
    }
    
    void change_04_zero_set(number ) {}
    
    void change_04_nonzero_set(number ) {}
    
    void matrixtilde_01_connect_list_set(const list& v) {
        this->matrixtilde_01_connect_list = jsCreateListCopy(v);
        number src = (v->length > 0 ? v[0] : -1);
        number dst = (v->length > 1 ? v[1] : -1);
        number connect = (v->length > 2 ? v[2] : 0);
    
        if (src >= 0 && dst >= 0) {
            src = (src > 2 - 1 ? 2 - 1 : (src < 0 ? 0 : src));
            dst = (dst > 1 - 1 ? 1 - 1 : (dst < 0 ? 0 : dst));
    
            if (connect < 0)
                connect = 0;
    
            this->matrixtilde_01_gainMtx[(Index)src][(Index)dst] = connect;
    
            this->matrixtilde_01_fadeMtx[(Index)src][(Index)dst] = this->safediv(
                this->matrixtilde_01_mtx[(Index)src][(Index)dst] - connect,
                this->matrixtilde_01_rampInSamps
            ) * -1;
        }
    }
    
    void p_32_out1_list_set(const list& v) {
        this->matrixtilde_01_connect_list_set(v);
    }
    
    void p_32_in1_bang_bang() {
        this->p_32->updateTime(this->_currentTime);
        this->p_32->eventinlet_36_out1_bang_bang();
    }
    
    void button_45_output_bang() {
        this->p_32_in1_bang_bang();
    }
    
    void button_45_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("MeloInst/button_obj-74"), this->_currentTime);;
        this->button_45_output_bang();
    }
    
    void select_23_match1_bang() {
        this->button_45_bangval_bang();
    }
    
    void p_32_in2_bang_bang() {
        this->p_32->updateTime(this->_currentTime);
        this->p_32->eventinlet_37_out1_bang_bang();
    }
    
    void button_46_output_bang() {
        this->p_32_in2_bang_bang();
    }
    
    void button_46_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("MeloInst/button_obj-71"), this->_currentTime);;
        this->button_46_output_bang();
    }
    
    void select_23_match2_bang() {
        this->button_46_bangval_bang();
    }
    
    void select_23_nomatch_number_set(number ) {}
    
    void select_23_input_number_set(number v) {
        if (v == this->select_23_test1)
            this->select_23_match1_bang();
        else if (v == this->select_23_test2)
            this->select_23_match2_bang();
        else
            this->select_23_nomatch_number_set(v);
    }
    
    void change_04_out_set(number v) {
        this->change_04_out = v;
        this->select_23_input_number_set(v);
    }
    
    void change_04_input_set(number v) {
        this->change_04_input = v;
    
        if (v != this->change_04_prev) {
            number prev = this->change_04_prev;
            this->change_04_prev = v;
    
            if (v == 0) {
                this->change_04_zero_set(1);
            } else if (this->change_04_out == 0) {
                this->change_04_nonzero_set(1);
            }
    
            {
                this->change_04_out_set(v);
            }
        } else {
            this->change_04_prev = v;
        }
    }
    
    void expr_38_out1_set(number v) {
        this->expr_38_out1 = v;
        this->change_04_input_set(this->expr_38_out1);
    }
    
    void expr_38_in1_set(number in1) {
        this->expr_38_in1 = in1;
        this->expr_38_out1_set(this->expr_38_in1 > this->expr_38_in2);//#map:MeloInst/>_obj-57:1
    }
    
    number param_16_value_constrain(number v) const {
        v = (v > 8196 ? 8196 : (v < 1 ? 1 : v));
        return v;
    }
    
    void p_31_in3_number_set(number v) {
        this->p_31->updateTime(this->_currentTime);
        this->p_31->eventinlet_35_out1_number_set(v);
    }
    
    void numberobj_76_output_set(number v) {
        this->p_31_in3_number_set(v);
    }
    
    void numberobj_76_value_set(number v) {
        this->numberobj_76_value_setter(v);
        v = this->numberobj_76_value;
        number localvalue = v;
    
        if (this->numberobj_76_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("MeloInst/number_obj-21"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_76_output_set(localvalue);
    }
    
    number param_17_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0.05 ? 0.05 : v));
        return v;
    }
    
    void expr_37_in2_set(number v) {
        this->expr_37_in2 = v;
    }
    
    void trigger_12_out2_set(number v) {
        this->expr_37_in2_set(v);
    }
    
    void message_306_set_set(const list& v) {
        this->message_306_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-22"), v, this->_currentTime);
    }
    
    void message_307_set_set(const list& v) {
        this->message_307_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-25"), v, this->_currentTime);
    }
    
    void prepend_01_b_set(const list& v) {
        this->prepend_01_b = jsCreateListCopy(v);
    }
    
    void expr_36_out1_set(number v) {
        this->expr_36_out1 = v;
    
        {
            list converted = {this->expr_36_out1};
            this->message_307_set_set(converted);
        }
    
        {
            list converted = {this->expr_36_out1};
            this->prepend_01_b_set(converted);
        }
    }
    
    void expr_36_in1_set(number in1) {
        this->expr_36_in1 = in1;
        this->expr_36_out1_set(this->expr_36_in1 * this->expr_36_in2);//#map:MeloInst/*_obj-78:1
    }
    
    void expr_37_out1_set(number v) {
        this->expr_37_out1 = v;
    
        {
            list converted = {this->expr_37_out1};
            this->message_306_set_set(converted);
        }
    
        this->expr_36_in1_set(this->expr_37_out1);
    }
    
    void expr_37_in1_set(number in1) {
        this->expr_37_in1 = in1;
    
        this->expr_37_out1_set(
            (this->expr_37_in2 == 0 ? 0 : (this->expr_37_in2 == 0. ? 0. : this->expr_37_in1 / this->expr_37_in2))
        );//#map:MeloInst//_obj-65:1
    }
    
    void message_304_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_37_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_37_in1_set(converted);
        }
    }
    
    void message_304_trigger_bang() {
        this->message_304_out_set(this->message_304_set);
    }
    
    void trigger_12_out1_bang() {
        this->message_304_trigger_bang();
    }
    
    void trigger_12_input_number_set(number v) {
        this->trigger_12_out2_set(v);
        this->trigger_12_out1_bang();
    }
    
    void receive_12_output_number_set(number v) {
        this->receive_12_output_number = v;
        this->trigger_12_input_number_set(v);
    }
    
    void send_07_input_number_set(number v) {
        this->send_07_input_number = v;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_39_source_TremAmp_number_set(v);
        this->receive_12_output_number_set(v);
    }
    
    void prepend_02_b_set(const list& v) {
        this->prepend_02_b = jsCreateListCopy(v);
    }
    
    void message_302_set_set(const list& v) {
        this->message_302_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-32"), v, this->_currentTime);
    }
    
    void message_303_set_set(const list& v) {
        this->message_303_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-73"), v, this->_currentTime);
    }
    
    void message_304_set_set(const list& v) {
        this->message_304_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-69"), v, this->_currentTime);
    }
    
    void message_305_out_set(const list& ) {}
    
    void message_305_trigger_bang() {
        this->message_305_out_set(this->message_305_set);
    }
    
    void message_306_out_set(const list& ) {}
    
    void message_306_trigger_bang() {
        this->message_306_out_set(this->message_306_set);
    }
    
    void message_307_out_set(const list& ) {}
    
    void message_307_trigger_bang() {
        this->message_307_out_set(this->message_307_set);
    }
    
    void trigger_13_input_bang_bang() {
        this->trigger_13_out2_set(0);
        this->trigger_13_out1_bang();
    }
    
    void trigger_13_input_list_set(const list& v) {
        this->trigger_13_out2_set((v->length > 0 ? v[0] : 0));
        this->trigger_13_out1_bang();
    }
    
    void loadmess_05_message_bang() {
        list v = this->loadmess_05_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_76_value_set(converted);
        }
    }
    
    void numberobj_75_output_set(number v) {
        this->param_15_value_set(v);
    }
    
    void numberobj_75_value_set(number v) {
        this->numberobj_75_value_setter(v);
        v = this->numberobj_75_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 5) {
            localvalue = 5;
        }
    
        if (this->numberobj_75_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("MeloInst/number_obj-24"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_75_output_set(localvalue);
    }
    
    void message_308_set_set(const list& v) {
        this->message_308_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-26"), v, this->_currentTime);
    }
    
    void message_309_set_set(const list& v) {
        this->message_309_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("MeloInst/message_obj-39"), v, this->_currentTime);
    }
    
    void numberobj_77_output_set(number v) {
        this->param_17_value_set(v);
    }
    
    void numberobj_77_value_set(number v) {
        this->numberobj_77_value_setter(v);
        v = this->numberobj_77_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0.05) {
            localvalue = 0.05;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_77_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(
            TAG("valout"),
            TAG("MeloInst/number_obj-9"),
            localvalue,
            this->_currentTime
        );
    
        this->numberobj_77_output_set(localvalue);
    }
    
    void message_310_out_set(const list& ) {}
    
    void message_310_trigger_bang() {
        this->message_310_out_set(this->message_310_set);
    }
    
    void linetilde_08_perform(SampleValue * out, Index n) {
        auto __linetilde_08_time = this->linetilde_08_time;
        auto __linetilde_08_keepramp = this->linetilde_08_keepramp;
        auto __linetilde_08_currentValue = this->linetilde_08_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_08_activeRamps->length)) {
            while ((bool)(this->linetilde_08_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_08_activeRamps[0];
                number inc = this->linetilde_08_activeRamps[1];
                number rampTimeInSamples = this->linetilde_08_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_08_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_08_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_08_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1841075377,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_08_keepramp))) {
                            __linetilde_08_time = 0;
                        }
                    }
                }
    
                __linetilde_08_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_08_currentValue;
            i++;
        }
    
        this->linetilde_08_currentValue = __linetilde_08_currentValue;
        this->linetilde_08_time = __linetilde_08_time;
    }
    
    void numbertilde_08_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_08_currentIntervalInSamples = this->numbertilde_08_currentIntervalInSamples;
        auto __numbertilde_08_lastValue = this->numbertilde_08_lastValue;
        auto __numbertilde_08_currentInterval = this->numbertilde_08_currentInterval;
        auto __numbertilde_08_rampInSamples = this->numbertilde_08_rampInSamples;
        auto __numbertilde_08_outValue = this->numbertilde_08_outValue;
        auto __numbertilde_08_currentMode = this->numbertilde_08_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_08_currentMode == 0) {
                output[(Index)i] = this->numbertilde_08_smooth_next(
                    __numbertilde_08_outValue,
                    __numbertilde_08_rampInSamples,
                    __numbertilde_08_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_08_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_08_lastValue && __numbertilde_08_currentInterval <= 0) {
            __numbertilde_08_currentInterval = __numbertilde_08_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_08_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("MeloInst/number~_obj-34"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_08_currentInterval = __numbertilde_08_currentInterval;
        this->numbertilde_08_lastValue = __numbertilde_08_lastValue;
    }
    
    void p_32_perform(Index n) {
        // subpatcher: crossfade
        this->p_32->process(nullptr, 0, nullptr, 0, n);
    }
    
    void numbertilde_09_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_09_currentIntervalInSamples = this->numbertilde_09_currentIntervalInSamples;
        auto __numbertilde_09_lastValue = this->numbertilde_09_lastValue;
        auto __numbertilde_09_currentInterval = this->numbertilde_09_currentInterval;
        auto __numbertilde_09_rampInSamples = this->numbertilde_09_rampInSamples;
        auto __numbertilde_09_outValue = this->numbertilde_09_outValue;
        auto __numbertilde_09_currentMode = this->numbertilde_09_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_09_currentMode == 0) {
                output[(Index)i] = this->numbertilde_09_smooth_next(
                    __numbertilde_09_outValue,
                    __numbertilde_09_rampInSamples,
                    __numbertilde_09_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_09_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_09_lastValue && __numbertilde_09_currentInterval <= 0) {
            __numbertilde_09_currentInterval = __numbertilde_09_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                1396722025,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_09_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("MeloInst/number~_obj-19"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_09_currentInterval = __numbertilde_09_currentInterval;
        this->numbertilde_09_lastValue = __numbertilde_09_lastValue;
    }
    
    void p_31_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_31->process(ins, 2, outs, 1, n);
    }
    
    void dspexpr_36_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void cycle_tilde_07_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        auto __cycle_tilde_07_f2i = this->cycle_tilde_07_f2i;
        auto __cycle_tilde_07_buffer = this->cycle_tilde_07_buffer;
        auto __cycle_tilde_07_phasei = this->cycle_tilde_07_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                if (phase_offset != 0 || 0 == 2) {
                    uint_phase = uint32_add(uint32_trunc(phase_offset * 4294967296.0), __cycle_tilde_07_phasei);
                } else {
                    uint_phase = __cycle_tilde_07_phasei;
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_07_buffer[(Index)idx];
                number y1 = __cycle_tilde_07_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_07_f2i));
                    __cycle_tilde_07_phasei = uint32_add(__cycle_tilde_07_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_07_phasei = __cycle_tilde_07_phasei;
    }
    
    void numbertilde_10_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_10_currentIntervalInSamples = this->numbertilde_10_currentIntervalInSamples;
        auto __numbertilde_10_lastValue = this->numbertilde_10_lastValue;
        auto __numbertilde_10_currentInterval = this->numbertilde_10_currentInterval;
        auto __numbertilde_10_rampInSamples = this->numbertilde_10_rampInSamples;
        auto __numbertilde_10_outValue = this->numbertilde_10_outValue;
        auto __numbertilde_10_currentMode = this->numbertilde_10_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_10_currentMode == 0) {
                output[(Index)i] = this->numbertilde_10_smooth_next(
                    __numbertilde_10_outValue,
                    __numbertilde_10_rampInSamples,
                    __numbertilde_10_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_10_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_10_lastValue && __numbertilde_10_currentInterval <= 0) {
            __numbertilde_10_currentInterval = __numbertilde_10_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_10_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("MeloInst/number~_obj-68"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_10_currentInterval = __numbertilde_10_currentInterval;
        this->numbertilde_10_lastValue = __numbertilde_10_lastValue;
    }
    
    void matrixtilde_01_perform(
        const SampleValue * connect_signal,
        const SampleValue * inlet1,
        SampleValue * out1,
        Index n
    ) {
        RNBO_UNUSED(out1);
        RNBO_UNUSED(inlet1);
        ConstSampleArray<1> inlet = {inlet1};
        SampleArray<1> out = {out1};
    
        for (Index i = 0; i < n; i++) {
            for (Index j = 0; j < 1; j++) {
                out[(Index)j][(Index)i] = 0;
    
                for (Index k = 0; k < 2; k++) {
                    this->matrixtilde_01_mtx[(Index)k][(Index)j] += this->matrixtilde_01_fadeMtx[(Index)k][(Index)j];
    
                    if ((this->matrixtilde_01_fadeMtx[(Index)k][(Index)j] > 0 && this->matrixtilde_01_mtx[(Index)k][(Index)j] >= this->matrixtilde_01_gainMtx[(Index)k][(Index)j]) || ((this->matrixtilde_01_fadeMtx[(Index)k][(Index)j] < 0 && this->matrixtilde_01_mtx[(Index)k][(Index)j] <= this->matrixtilde_01_gainMtx[(Index)k][(Index)j]) || this->matrixtilde_01_fadeMtx[(Index)k][(Index)j] == 0)) {
                        this->matrixtilde_01_mtx[(Index)k][(Index)j] = this->matrixtilde_01_gainMtx[(Index)k][(Index)j];
                        this->matrixtilde_01_fadeMtx[(Index)k][(Index)j] = 0;
                    }
    
                    if (k > 0)
                        out[(Index)j][(Index)i] += inlet[(Index)(k - 1)][(Index)i] * this->matrixtilde_01_mtx[(Index)k][(Index)j];
                    else
                        out[(Index)j][(Index)i] += connect_signal[(Index)i] * this->matrixtilde_01_mtx[(Index)k][(Index)j];
                }
            }
        }
    }
    
    void linetilde_09_perform(SampleValue * out, Index n) {
        auto __linetilde_09_time = this->linetilde_09_time;
        auto __linetilde_09_keepramp = this->linetilde_09_keepramp;
        auto __linetilde_09_currentValue = this->linetilde_09_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_09_activeRamps->length)) {
            while ((bool)(this->linetilde_09_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_09_activeRamps[0];
                number inc = this->linetilde_09_activeRamps[1];
                number rampTimeInSamples = this->linetilde_09_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_09_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_09_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_09_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -281953904,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_09_keepramp))) {
                            __linetilde_09_time = 0;
                        }
                    }
                }
    
                __linetilde_09_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_09_currentValue;
            i++;
        }
    
        this->linetilde_09_currentValue = __linetilde_09_currentValue;
        this->linetilde_09_time = __linetilde_09_time;
    }
    
    void dspexpr_38_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void dspexpr_37_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_75_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 5) {
            localvalue = 5;
        }
    
        if (this->numberobj_75_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_75_value = localvalue;
    }
    
    void numberobj_76_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_76_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_76_value = localvalue;
    }
    
    void numberobj_77_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0.05) {
            localvalue = 0.05;
        }
    
        if ((bool)(true) && localvalue > 1) {
            localvalue = 1;
        }
    
        if (this->numberobj_77_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_77_value = localvalue;
    }
    
    void message_302_init() {
        this->message_302_set_set({0.1, 50, 0});
    }
    
    void message_303_init() {
        this->message_303_set_set({50, 0});
    }
    
    void message_304_init() {
        this->message_304_set_set({1});
    }
    
    void message_305_init() {
        this->message_305_set_set({0.1, 50, 0, 1800});
    }
    
    void message_306_init() {
        this->message_306_set_set({1});
    }
    
    void message_307_init() {
        this->message_307_set_set({0.1});
    }
    
    number numbertilde_08_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_08_smooth_d_prev);
        this->numbertilde_08_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_08_smooth_d_dspsetup() {
        this->numbertilde_08_smooth_d_reset();
    }
    
    void numbertilde_08_smooth_d_reset() {
        this->numbertilde_08_smooth_d_prev = 0;
    }
    
    number numbertilde_08_smooth_next(number x, number up, number down) {
        if (this->numbertilde_08_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_08_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_08_smooth_index = _up;
                this->numbertilde_08_smooth_increment = (x - this->numbertilde_08_smooth_prev) / _up;
            } else if (x < this->numbertilde_08_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_08_smooth_index = _down;
                this->numbertilde_08_smooth_increment = (x - this->numbertilde_08_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_08_smooth_index > 0) {
            this->numbertilde_08_smooth_prev += this->numbertilde_08_smooth_increment;
            this->numbertilde_08_smooth_index -= 1;
        } else {
            this->numbertilde_08_smooth_prev = x;
        }
    
        return this->numbertilde_08_smooth_prev;
    }
    
    void numbertilde_08_smooth_reset() {
        this->numbertilde_08_smooth_prev = 0;
        this->numbertilde_08_smooth_index = 0;
        this->numbertilde_08_smooth_increment = 0;
        this->numbertilde_08_smooth_d_reset();
    }
    
    void numbertilde_08_init() {
        this->numbertilde_08_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("MeloInst/number~_obj-34"), 1, this->_currentTime);
    }
    
    void numbertilde_08_dspsetup(bool force) {
        if ((bool)(this->numbertilde_08_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_08_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_08_currentInterval = this->numbertilde_08_currentIntervalInSamples;
        this->numbertilde_08_rampInSamples = this->mstosamps(this->numbertilde_08_ramp);
        this->numbertilde_08_setupDone = true;
        this->numbertilde_08_smooth_d_dspsetup();
    }
    
    void change_04_init() {
        this->change_04_prev = this->change_04_input;
    }
    
    void matrixtilde_01_init() {
        this->matrixtilde_01_rampInSamps = this->mstosamps(this->matrixtilde_01_ramp);
    }
    
    void param_14_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_14_value;
    }
    
    void param_14_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_14_value_set(preset["value"]);
    }
    
    number numbertilde_09_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_09_smooth_d_prev);
        this->numbertilde_09_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_09_smooth_d_dspsetup() {
        this->numbertilde_09_smooth_d_reset();
    }
    
    void numbertilde_09_smooth_d_reset() {
        this->numbertilde_09_smooth_d_prev = 0;
    }
    
    number numbertilde_09_smooth_next(number x, number up, number down) {
        if (this->numbertilde_09_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_09_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_09_smooth_index = _up;
                this->numbertilde_09_smooth_increment = (x - this->numbertilde_09_smooth_prev) / _up;
            } else if (x < this->numbertilde_09_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_09_smooth_index = _down;
                this->numbertilde_09_smooth_increment = (x - this->numbertilde_09_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_09_smooth_index > 0) {
            this->numbertilde_09_smooth_prev += this->numbertilde_09_smooth_increment;
            this->numbertilde_09_smooth_index -= 1;
        } else {
            this->numbertilde_09_smooth_prev = x;
        }
    
        return this->numbertilde_09_smooth_prev;
    }
    
    void numbertilde_09_smooth_reset() {
        this->numbertilde_09_smooth_prev = 0;
        this->numbertilde_09_smooth_index = 0;
        this->numbertilde_09_smooth_increment = 0;
        this->numbertilde_09_smooth_d_reset();
    }
    
    void numbertilde_09_init() {
        this->numbertilde_09_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("MeloInst/number~_obj-19"), 1, this->_currentTime);
    }
    
    void numbertilde_09_dspsetup(bool force) {
        if ((bool)(this->numbertilde_09_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_09_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_09_currentInterval = this->numbertilde_09_currentIntervalInSamples;
        this->numbertilde_09_rampInSamples = this->mstosamps(this->numbertilde_09_ramp);
        this->numbertilde_09_setupDone = true;
        this->numbertilde_09_smooth_d_dspsetup();
    }
    
    void numberobj_75_init() {
        this->numberobj_75_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("MeloInst/number_obj-24"), 1, this->_currentTime);
    }
    
    void numberobj_75_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_75_value;
    }
    
    void numberobj_75_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_75_value_set(preset["value"]);
    }
    
    void param_15_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_15_value;
    }
    
    void param_15_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_15_value_set(preset["value"]);
    }
    
    number cycle_tilde_07_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_07_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_07_ph_conv;
    
        if (this->cycle_tilde_07_ph_currentPhase < 0.)
            this->cycle_tilde_07_ph_currentPhase = 1. + this->cycle_tilde_07_ph_currentPhase;
    
        if (this->cycle_tilde_07_ph_currentPhase > 1.)
            this->cycle_tilde_07_ph_currentPhase = this->cycle_tilde_07_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_07_ph_currentPhase;
        this->cycle_tilde_07_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_07_ph_reset() {
        this->cycle_tilde_07_ph_currentPhase = 0;
    }
    
    void cycle_tilde_07_ph_dspsetup() {
        this->cycle_tilde_07_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_07_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_07_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_07_phasei = 0;
        this->cycle_tilde_07_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_07_wrap = (long)(this->cycle_tilde_07_buffer->getSize()) - 1;
        this->cycle_tilde_07_setupDone = true;
        this->cycle_tilde_07_ph_dspsetup();
    }
    
    void cycle_tilde_07_bufferUpdated() {
        this->cycle_tilde_07_wrap = (long)(this->cycle_tilde_07_buffer->getSize()) - 1;
    }
    
    number numbertilde_10_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_10_smooth_d_prev);
        this->numbertilde_10_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_10_smooth_d_dspsetup() {
        this->numbertilde_10_smooth_d_reset();
    }
    
    void numbertilde_10_smooth_d_reset() {
        this->numbertilde_10_smooth_d_prev = 0;
    }
    
    number numbertilde_10_smooth_next(number x, number up, number down) {
        if (this->numbertilde_10_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_10_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_10_smooth_index = _up;
                this->numbertilde_10_smooth_increment = (x - this->numbertilde_10_smooth_prev) / _up;
            } else if (x < this->numbertilde_10_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_10_smooth_index = _down;
                this->numbertilde_10_smooth_increment = (x - this->numbertilde_10_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_10_smooth_index > 0) {
            this->numbertilde_10_smooth_prev += this->numbertilde_10_smooth_increment;
            this->numbertilde_10_smooth_index -= 1;
        } else {
            this->numbertilde_10_smooth_prev = x;
        }
    
        return this->numbertilde_10_smooth_prev;
    }
    
    void numbertilde_10_smooth_reset() {
        this->numbertilde_10_smooth_prev = 0;
        this->numbertilde_10_smooth_index = 0;
        this->numbertilde_10_smooth_increment = 0;
        this->numbertilde_10_smooth_d_reset();
    }
    
    void numbertilde_10_init() {
        this->numbertilde_10_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("MeloInst/number~_obj-68"), 1, this->_currentTime);
    }
    
    void numbertilde_10_dspsetup(bool force) {
        if ((bool)(this->numbertilde_10_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_10_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_10_currentInterval = this->numbertilde_10_currentIntervalInSamples;
        this->numbertilde_10_rampInSamples = this->mstosamps(this->numbertilde_10_ramp);
        this->numbertilde_10_setupDone = true;
        this->numbertilde_10_smooth_d_dspsetup();
    }
    
    void message_308_init() {
        this->message_308_set_set({1});
    }
    
    void param_16_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_16_value;
    }
    
    void param_16_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_16_value_set(preset["value"]);
    }
    
    void numberobj_76_init() {
        this->numberobj_76_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("MeloInst/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_76_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_76_value;
    }
    
    void numberobj_76_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_76_value_set(preset["value"]);
    }
    
    void message_309_init() {
        this->message_309_set_set({50, 0});
    }
    
    void numberobj_77_init() {
        this->numberobj_77_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("MeloInst/number_obj-9"), 1, this->_currentTime);
    }
    
    void numberobj_77_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_77_value;
    }
    
    void numberobj_77_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_77_value_set(preset["value"]);
    }
    
    void param_17_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_17_value;
    }
    
    void param_17_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_17_value_set(preset["value"]);
    }
    
    void message_310_init() {
        this->message_310_set_set({1, 50, 0, 1800});
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        linetilde_08_time = 0;
        linetilde_08_keepramp = 0;
        receive_11_output_number = 0;
        expr_36_in1 = 0;
        expr_36_in2 = 0.1;
        expr_36_out1 = 0;
        receive_12_output_number = 0;
        expr_37_in1 = 0;
        expr_37_in2 = 0;
        expr_37_out1 = 0;
        p_31_target = 0;
        numbertilde_08_input_number = 0;
        numbertilde_08_ramp = 0;
        dspexpr_36_in1 = 0;
        dspexpr_36_in2 = 0.1;
        dspexpr_37_in1 = 0;
        dspexpr_37_in2 = 0;
        change_04_input = 0;
        change_04_out = 0;
        select_23_test1 = 0;
        select_23_test2 = 1;
        p_32_target = 0;
        matrixtilde_01_ramp = 250;
        expr_38_in1 = 0;
        expr_38_in2 = 0;
        expr_38_out1 = 0;
        loadmess_05_message = { 256 };
        param_14_value = 0.5;
        numbertilde_09_input_number = 0;
        numbertilde_09_ramp = 0;
        numberobj_75_value = 0;
        numberobj_75_value_setter(numberobj_75_value);
        param_15_value = 0;
        dspexpr_38_in1 = 0;
        dspexpr_38_in2 = 0;
        cycle_tilde_07_frequency = 0;
        cycle_tilde_07_phase_offset = 0;
        numbertilde_10_input_number = 0;
        numbertilde_10_ramp = 0;
        param_16_value = 256;
        numberobj_76_value = 0;
        numberobj_76_value_setter(numberobj_76_value);
        linetilde_09_time = 0;
        linetilde_09_keepramp = 0;
        numberobj_77_value = 0;
        numberobj_77_value_setter(numberobj_77_value);
        param_17_value = 1;
        receive_13_output_number = 0;
        send_07_input_number = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        linetilde_08_currentValue = 0;
        numbertilde_08_currentInterval = 0;
        numbertilde_08_currentIntervalInSamples = 0;
        numbertilde_08_lastValue = 0;
        numbertilde_08_outValue = 0;
        numbertilde_08_rampInSamples = 0;
        numbertilde_08_currentMode = 0;
        numbertilde_08_smooth_d_prev = 0;
        numbertilde_08_smooth_prev = 0;
        numbertilde_08_smooth_index = 0;
        numbertilde_08_smooth_increment = 0;
        numbertilde_08_setupDone = false;
        matrixtilde_01_rampInSamps = 0;
        param_14_lastValue = 0;
        numbertilde_09_currentInterval = 0;
        numbertilde_09_currentIntervalInSamples = 0;
        numbertilde_09_lastValue = 0;
        numbertilde_09_outValue = 0;
        numbertilde_09_rampInSamples = 0;
        numbertilde_09_currentMode = 0;
        numbertilde_09_smooth_d_prev = 0;
        numbertilde_09_smooth_prev = 0;
        numbertilde_09_smooth_index = 0;
        numbertilde_09_smooth_increment = 0;
        numbertilde_09_setupDone = false;
        numberobj_75_currentFormat = 6;
        numberobj_75_lastValue = 0;
        param_15_lastValue = 0;
        cycle_tilde_07_wrap = 0;
        cycle_tilde_07_ph_currentPhase = 0;
        cycle_tilde_07_ph_conv = 0;
        cycle_tilde_07_setupDone = false;
        numbertilde_10_currentInterval = 0;
        numbertilde_10_currentIntervalInSamples = 0;
        numbertilde_10_lastValue = 0;
        numbertilde_10_outValue = 0;
        numbertilde_10_rampInSamples = 0;
        numbertilde_10_currentMode = 0;
        numbertilde_10_smooth_d_prev = 0;
        numbertilde_10_smooth_prev = 0;
        numbertilde_10_smooth_index = 0;
        numbertilde_10_smooth_increment = 0;
        numbertilde_10_setupDone = false;
        param_16_lastValue = 0;
        numberobj_76_currentFormat = 6;
        numberobj_76_lastValue = 0;
        linetilde_09_currentValue = 0;
        numberobj_77_currentFormat = 6;
        numberobj_77_lastValue = 0;
        param_17_lastValue = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        list message_302_set;
        list message_303_set;
        list prepend_01_a;
        list prepend_01_b;
        list append_03_a;
        list append_03_b;
        list linetilde_08_segments;
        number linetilde_08_time;
        number linetilde_08_keepramp;
        number receive_11_output_number;
        list receive_11_output_list;
        number expr_36_in1;
        number expr_36_in2;
        number expr_36_out1;
        number receive_12_output_number;
        list receive_12_output_list;
        list message_304_set;
        number expr_37_in1;
        number expr_37_in2;
        number expr_37_out1;
        list message_305_set;
        list message_306_set;
        list message_307_set;
        number p_31_target;
        number numbertilde_08_input_number;
        number numbertilde_08_ramp;
        number dspexpr_36_in1;
        number dspexpr_36_in2;
        number dspexpr_37_in1;
        number dspexpr_37_in2;
        number change_04_input;
        number change_04_out;
        number select_23_test1;
        number select_23_test2;
        number p_32_target;
        list matrixtilde_01_connect_list;
        number matrixtilde_01_ramp;
        number expr_38_in1;
        number expr_38_in2;
        number expr_38_out1;
        list loadmess_05_message;
        number param_14_value;
        number numbertilde_09_input_number;
        number numbertilde_09_ramp;
        number numberobj_75_value;
        number param_15_value;
        number dspexpr_38_in1;
        number dspexpr_38_in2;
        number cycle_tilde_07_frequency;
        number cycle_tilde_07_phase_offset;
        number numbertilde_10_input_number;
        number numbertilde_10_ramp;
        list message_308_set;
        number param_16_value;
        number numberobj_76_value;
        list message_309_set;
        list prepend_02_a;
        list prepend_02_b;
        list append_04_a;
        list append_04_b;
        list linetilde_09_segments;
        number linetilde_09_time;
        number linetilde_09_keepramp;
        number numberobj_77_value;
        number param_17_value;
        number receive_13_output_number;
        list receive_13_output_list;
        list message_310_set;
        number send_07_input_number;
        list send_07_input_list;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[4];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list linetilde_08_activeRamps;
        number linetilde_08_currentValue;
        SampleIndex numbertilde_08_currentInterval;
        SampleIndex numbertilde_08_currentIntervalInSamples;
        number numbertilde_08_lastValue;
        number numbertilde_08_outValue;
        number numbertilde_08_rampInSamples;
        Int numbertilde_08_currentMode;
        number numbertilde_08_smooth_d_prev;
        number numbertilde_08_smooth_prev;
        number numbertilde_08_smooth_index;
        number numbertilde_08_smooth_increment;
        bool numbertilde_08_setupDone;
        number change_04_prev;
        SampleValue matrixtilde_01_mtx[2][1] = { };
        SampleValue matrixtilde_01_fadeMtx[2][1] = { };
        SampleValue matrixtilde_01_gainMtx[2][1] = { };
        number matrixtilde_01_rampInSamps;
        number param_14_lastValue;
        SampleIndex numbertilde_09_currentInterval;
        SampleIndex numbertilde_09_currentIntervalInSamples;
        number numbertilde_09_lastValue;
        number numbertilde_09_outValue;
        number numbertilde_09_rampInSamples;
        Int numbertilde_09_currentMode;
        number numbertilde_09_smooth_d_prev;
        number numbertilde_09_smooth_prev;
        number numbertilde_09_smooth_index;
        number numbertilde_09_smooth_increment;
        bool numbertilde_09_setupDone;
        Int numberobj_75_currentFormat;
        number numberobj_75_lastValue;
        number param_15_lastValue;
        Float64BufferRef cycle_tilde_07_buffer;
        long cycle_tilde_07_wrap;
        uint32_t cycle_tilde_07_phasei;
        SampleValue cycle_tilde_07_f2i;
        number cycle_tilde_07_ph_currentPhase;
        number cycle_tilde_07_ph_conv;
        bool cycle_tilde_07_setupDone;
        SampleIndex numbertilde_10_currentInterval;
        SampleIndex numbertilde_10_currentIntervalInSamples;
        number numbertilde_10_lastValue;
        number numbertilde_10_outValue;
        number numbertilde_10_rampInSamples;
        Int numbertilde_10_currentMode;
        number numbertilde_10_smooth_d_prev;
        number numbertilde_10_smooth_prev;
        number numbertilde_10_smooth_index;
        number numbertilde_10_smooth_increment;
        bool numbertilde_10_setupDone;
        number param_16_lastValue;
        Int numberobj_76_currentFormat;
        number numberobj_76_lastValue;
        list linetilde_09_activeRamps;
        number linetilde_09_currentValue;
        Int numberobj_77_currentFormat;
        number numberobj_77_lastValue;
        number param_17_lastValue;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_171* p_31;
        RNBOSubpatcher_172* p_32;
    
};

rnbomatic()
{
}

~rnbomatic()
{
    delete this->p_33;
    delete this->p_34;
    delete this->p_35;
    delete this->p_36;
    delete this->p_37;
    delete this->p_38;
    delete this->p_39;
}

rnbomatic* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
    getEngine()->flushClockEvents(this, 1935387534, false);
    getEngine()->flushClockEvents(this, -871642103, false);
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

inline number safediv(number num, number denom) {
    return (denom == 0.0 ? 0.0 : num / denom);
}

MillisecondTime currenttime() {
    return this->_currentTime;
}

number tempo() {
    return this->getTopLevelPatcher()->globaltransport_getTempo(this->currenttime());
}

number tickstoms(number ticks) {
    return ticks / (number)480 * this->safediv(60, this->tempo()) * 1000;
}

Index voice() {
    return this->_voiceIndex;
}

number random(number low, number high) {
    number range = high - low;
    return globalrandom() * range + low;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 1;
}

void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
    this->updateTime(time);
    this->p_36_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    RNBO_UNUSED(numInputs);
    RNBO_UNUSED(inputs);
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    this->p_33_perform(n);
    this->p_34_perform(this->signals[0], n);
    this->dspexpr_39_perform(this->signals[0], this->dspexpr_39_in2, this->signals[1], n);
    this->p_35_perform(n);
    this->p_37_perform(n);
    this->p_38_perform(n);
    this->p_39_perform(this->signals[0], n);

    this->lores_03_perform(
        this->lores_03_cutoff,
        this->lores_03_resonance,
        this->signals[0],
        this->signals[2],
        n
    );

    this->dspexpr_40_perform(this->signals[2], this->dspexpr_40_in2, this->signals[0], n);
    this->signaladder_01_perform(this->signals[0], this->signals[1], this->signals[1], n);
    this->signaladder_02_perform(this->signals[0], this->signals[1], this->signals[1], n);

    this->p_36_perform(
        this->zeroBuffer,
        this->zeroBuffer,
        this->zeroBuffer,
        this->zeroBuffer,
        this->zeroBuffer,
        this->signals[1],
        this->signals[1],
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        out1,
        out2,
        n
    );

    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 3; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->lores_03_dspsetup(forceDSPSetup);
    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_33->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_34->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_35->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_36->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_37->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_38->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_39->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->osc_wavetable_buf);
        break;
        }
    case 1:
        {
        return addressOf(this->RNBODefaultSinus);
        break;
        }
    case 2:
        {
        return addressOf(this->RNBODefaultMtofLookupTable256);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 3;
}

void fillRNBODefaultSinus(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        buffer[i] = rnbo_cos(i * 3.14159265358979323846 * 2. / bufsize);
    }
}

void fillRNBODefaultMtofLookupTable256(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        number midivalue = -256. + (number)512. / (bufsize - 1) * i;
        buffer[i] = rnbo_exp(.057762265 * (midivalue - 69.0));
    }
}

void fillDataRef(DataRefIndex index, DataRef& ref) {
    switch (index) {
    case 1:
        {
        this->fillRNBODefaultSinus(ref);
        break;
        }
    case 2:
        {
        this->fillRNBODefaultMtofLookupTable256(ref);
        break;
        }
    }
}

void zeroDataRef(DataRef& ref) {
    ref->setZero();
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->p_33->processDataViewUpdate(index, time);
    this->p_34->processDataViewUpdate(index, time);
    this->p_35->processDataViewUpdate(index, time);
    this->p_36->processDataViewUpdate(index, time);
    this->p_37->processDataViewUpdate(index, time);
    this->p_38->processDataViewUpdate(index, time);
    this->p_39->processDataViewUpdate(index, time);
}

void initialize() {
    this->osc_wavetable_buf = initDataRef("osc_wavetable_buf", false, "wavetable1.wav", "buffer~");
    this->RNBODefaultSinus = initDataRef("RNBODefaultSinus", true, nullptr, "buffer~");
    this->RNBODefaultMtofLookupTable256 = initDataRef("RNBODefaultMtofLookupTable256", true, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->osc_wavetable_buf->setIndex(0);
    this->RNBODefaultSinus->setIndex(1);
    this->RNBODefaultMtofLookupTable256->setIndex(2);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

void onSampleRateChanged(double samplerate) {
    this->translate_04_onSampleRateChanged(samplerate);
}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_33->processTempoEvent(time, tempo);
        this->p_34->processTempoEvent(time, tempo);
        this->p_35->processTempoEvent(time, tempo);
        this->p_36->processTempoEvent(time, tempo);
        this->p_37->processTempoEvent(time, tempo);
        this->p_38->processTempoEvent(time, tempo);
        this->p_39->processTempoEvent(time, tempo);
        this->translate_04_onTempoChanged(tempo);
        this->transport_01_onTempoChanged(tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_33->processTransportEvent(time, state);
        this->p_34->processTransportEvent(time, state);
        this->p_35->processTransportEvent(time, state);
        this->p_36->processTransportEvent(time, state);
        this->p_37->processTransportEvent(time, state);
        this->p_38->processTransportEvent(time, state);
        this->p_39->processTransportEvent(time, state);
        this->metro_03_onTransportChanged(state);
        this->transport_01_onTransportChanged(state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_33->processBeatTimeEvent(time, beattime);
        this->p_34->processBeatTimeEvent(time, beattime);
        this->p_35->processBeatTimeEvent(time, beattime);
        this->p_36->processBeatTimeEvent(time, beattime);
        this->p_37->processBeatTimeEvent(time, beattime);
        this->p_38->processBeatTimeEvent(time, beattime);
        this->p_39->processBeatTimeEvent(time, beattime);
        this->metro_03_onBeatTimeChanged(beattime);
    }
}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_33->processTimeSignatureEvent(time, numerator, denominator);
        this->p_34->processTimeSignatureEvent(time, numerator, denominator);
        this->p_35->processTimeSignatureEvent(time, numerator, denominator);
        this->p_36->processTimeSignatureEvent(time, numerator, denominator);
        this->p_37->processTimeSignatureEvent(time, numerator, denominator);
        this->p_38->processTimeSignatureEvent(time, numerator, denominator);
        this->p_39->processTimeSignatureEvent(time, numerator, denominator);
        this->transport_01_onTimeSignatureChanged(numerator, denominator);
    }
}

void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
    this->updateTime(time);

    if (this->globaltransport_setBBU(this->_currentTime, bars, beats, units, false)) {
        this->p_33->processBBUEvent(time, bars, beats, units);
        this->p_34->processBBUEvent(time, bars, beats, units);
        this->p_35->processBBUEvent(time, bars, beats, units);
        this->p_36->processBBUEvent(time, bars, beats, units);
        this->p_37->processBBUEvent(time, bars, beats, units);
        this->p_38->processBBUEvent(time, bars, beats, units);
        this->p_39->processBBUEvent(time, bars, beats, units);
    }
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_33 = new RNBOSubpatcher_173();
    this->p_33->setEngineAndPatcher(this->getEngine(), this);
    this->p_33->initialize();
    this->p_33->setParameterOffset(this->getParameterOffset(this->p_33));
    this->p_34 = new RNBOSubpatcher_174();
    this->p_34->setEngineAndPatcher(this->getEngine(), this);
    this->p_34->initialize();
    this->p_34->setParameterOffset(this->getParameterOffset(this->p_34));
    this->p_35 = new RNBOSubpatcher_175();
    this->p_35->setEngineAndPatcher(this->getEngine(), this);
    this->p_35->initialize();
    this->p_35->setParameterOffset(this->getParameterOffset(this->p_35));
    this->p_36 = new RNBOSubpatcher_176();
    this->p_36->setEngineAndPatcher(this->getEngine(), this);
    this->p_36->initialize();
    this->p_36->setParameterOffset(this->getParameterOffset(this->p_36));
    this->p_37 = new RNBOSubpatcher_177();
    this->p_37->setEngineAndPatcher(this->getEngine(), this);
    this->p_37->initialize();
    this->p_37->setParameterOffset(this->getParameterOffset(this->p_37));
    this->p_38 = new RNBOSubpatcher_178();
    this->p_38->setEngineAndPatcher(this->getEngine(), this);
    this->p_38->initialize();
    this->p_38->setParameterOffset(this->getParameterOffset(this->p_38));
    this->p_39 = new RNBOSubpatcher_179();
    this->p_39->setEngineAndPatcher(this->getEngine(), this);
    this->p_39->initialize();
    this->p_39->setParameterOffset(this->getParameterOffset(this->p_39));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_18_getPresetValue(getSubState(preset, "OffOnC"));
    this->param_19_getPresetValue(getSubState(preset, "OffOnAll"));
    this->param_20_getPresetValue(getSubState(preset, "OffOnM"));
    this->param_21_getPresetValue(getSubState(preset, "MelVol"));
    this->param_22_getPresetValue(getSubState(preset, "FilFreq"));
    this->param_23_getPresetValue(getSubState(preset, "tempo"));
    this->p_33->getPreset(getSubState(getSubState(preset, "__sps"), "ChNoteOld"));
    this->p_34->getPreset(getSubState(getSubState(preset, "__sps"), "ChInst"));
    this->p_35->getPreset(getSubState(getSubState(preset, "__sps"), "Chords"));
    this->p_36->getPreset(getSubState(getSubState(preset, "__sps"), "Verb"));
    this->p_37->getPreset(getSubState(getSubState(preset, "__sps"), "ChNote"));
    this->p_38->getPreset(getSubState(getSubState(preset, "__sps"), "Melodies"));
    this->p_39->getPreset(getSubState(getSubState(preset, "__sps"), "MeloInst"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_18_setPresetValue(getSubState(preset, "OffOnC"));
    this->param_19_setPresetValue(getSubState(preset, "OffOnAll"));
    this->param_20_setPresetValue(getSubState(preset, "OffOnM"));
    this->param_21_setPresetValue(getSubState(preset, "MelVol"));
    this->param_22_setPresetValue(getSubState(preset, "FilFreq"));
    this->param_23_setPresetValue(getSubState(preset, "tempo"));
    this->p_34->param_01_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "ChInst"), "sSize"));

    this->p_34->param_02_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "ChInst"), "tablePos")
    );

    this->p_36->param_04_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "DecayLFO"));

    this->p_36->param_10_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "SizeRandom")
    );

    this->p_37->param_11_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "ChNote"), "ChVal"));

    this->p_38->param_13_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "Melodies"), "Accents")
    );

    this->p_38->p_28->param_12_setPresetValue(
        getSubState(getSubState(getSubState(getSubState(getSubState(preset, "__sps"), "Melodies"), "__sps"), "MelNote"), "MelDur")
    );

    this->p_39->param_14_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "MeloInst"), "tablePos")
    );

    this->p_39->param_15_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "MeloInst"), "TremFreq")
    );

    this->p_39->param_16_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "MeloInst"), "sSize")
    );

    this->p_39->param_17_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "MeloInst"), "TremAmp")
    );

    this->p_36->param_07_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "damp"));
    this->p_36->param_09_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "diff"));
    this->p_36->param_08_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "size"));
    this->p_36->param_03_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "decay"));
    this->p_36->param_06_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "jitter"));
    this->p_36->param_05_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "mix"));
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_18_value_set(v);
        break;
        }
    case 1:
        {
        this->param_19_value_set(v);
        break;
        }
    case 2:
        {
        this->param_20_value_set(v);
        break;
        }
    case 3:
        {
        this->param_21_value_set(v);
        break;
        }
    case 4:
        {
        this->param_22_value_set(v);
        break;
        }
    case 5:
        {
        this->param_23_value_set(v);
        break;
        }
    default:
        {
        index -= 6;

        if (index < this->p_33->getNumParameters())
            this->p_33->setParameterValue(index, v, time);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            this->p_34->setParameterValue(index, v, time);

        index -= this->p_34->getNumParameters();

        if (index < this->p_35->getNumParameters())
            this->p_35->setParameterValue(index, v, time);

        index -= this->p_35->getNumParameters();

        if (index < this->p_36->getNumParameters())
            this->p_36->setParameterValue(index, v, time);

        index -= this->p_36->getNumParameters();

        if (index < this->p_37->getNumParameters())
            this->p_37->setParameterValue(index, v, time);

        index -= this->p_37->getNumParameters();

        if (index < this->p_38->getNumParameters())
            this->p_38->setParameterValue(index, v, time);

        index -= this->p_38->getNumParameters();

        if (index < this->p_39->getNumParameters())
            this->p_39->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_18_value;
        }
    case 1:
        {
        return this->param_19_value;
        }
    case 2:
        {
        return this->param_20_value;
        }
    case 3:
        {
        return this->param_21_value;
        }
    case 4:
        {
        return this->param_22_value;
        }
    case 5:
        {
        return this->param_23_value;
        }
    default:
        {
        index -= 6;

        if (index < this->p_33->getNumParameters())
            return this->p_33->getParameterValue(index);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->getParameterValue(index);

        index -= this->p_34->getNumParameters();

        if (index < this->p_35->getNumParameters())
            return this->p_35->getParameterValue(index);

        index -= this->p_35->getNumParameters();

        if (index < this->p_36->getNumParameters())
            return this->p_36->getParameterValue(index);

        index -= this->p_36->getNumParameters();

        if (index < this->p_37->getNumParameters())
            return this->p_37->getParameterValue(index);

        index -= this->p_37->getNumParameters();

        if (index < this->p_38->getNumParameters())
            return this->p_38->getParameterValue(index);

        index -= this->p_38->getNumParameters();

        if (index < this->p_39->getNumParameters())
            return this->p_39->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 6 + this->p_33->getNumParameters() + this->p_34->getNumParameters() + this->p_35->getNumParameters() + this->p_36->getNumParameters() + this->p_37->getNumParameters() + this->p_38->getNumParameters() + this->p_39->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "OffOnC";
        }
    case 1:
        {
        return "OffOnAll";
        }
    case 2:
        {
        return "OffOnM";
        }
    case 3:
        {
        return "MelVol";
        }
    case 4:
        {
        return "FilFreq";
        }
    case 5:
        {
        return "tempo";
        }
    default:
        {
        index -= 6;

        if (index < this->p_33->getNumParameters())
            return this->p_33->getParameterName(index);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->getParameterName(index);

        index -= this->p_34->getNumParameters();

        if (index < this->p_35->getNumParameters())
            return this->p_35->getParameterName(index);

        index -= this->p_35->getNumParameters();

        if (index < this->p_36->getNumParameters())
            return this->p_36->getParameterName(index);

        index -= this->p_36->getNumParameters();

        if (index < this->p_37->getNumParameters())
            return this->p_37->getParameterName(index);

        index -= this->p_37->getNumParameters();

        if (index < this->p_38->getNumParameters())
            return this->p_38->getParameterName(index);

        index -= this->p_38->getNumParameters();

        if (index < this->p_39->getNumParameters())
            return this->p_39->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "OffOnC";
        }
    case 1:
        {
        return "OffOnAll";
        }
    case 2:
        {
        return "OffOnM";
        }
    case 3:
        {
        return "MelVol";
        }
    case 4:
        {
        return "FilFreq";
        }
    case 5:
        {
        return "tempo";
        }
    default:
        {
        index -= 6;

        if (index < this->p_33->getNumParameters())
            return this->p_33->getParameterId(index);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->getParameterId(index);

        index -= this->p_34->getNumParameters();

        if (index < this->p_35->getNumParameters())
            return this->p_35->getParameterId(index);

        index -= this->p_35->getNumParameters();

        if (index < this->p_36->getNumParameters())
            return this->p_36->getParameterId(index);

        index -= this->p_36->getNumParameters();

        if (index < this->p_37->getNumParameters())
            return this->p_37->getParameterId(index);

        index -= this->p_37->getNumParameters();

        if (index < this->p_38->getNumParameters())
            return this->p_38->getParameterId(index);

        index -= this->p_38->getNumParameters();

        if (index < this->p_39->getNumParameters())
            return this->p_39->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 1:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 2:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 3:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 1;
            info->min = 0.125;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 4:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 4000;
            info->min = 100;
            info->max = 20000;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        case 5:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 50;
            info->min = 30;
            info->max = 200;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 6;

            if (index < this->p_33->getNumParameters())
                this->p_33->getParameterInfo(index, info);

            index -= this->p_33->getNumParameters();

            if (index < this->p_34->getNumParameters())
                this->p_34->getParameterInfo(index, info);

            index -= this->p_34->getNumParameters();

            if (index < this->p_35->getNumParameters())
                this->p_35->getParameterInfo(index, info);

            index -= this->p_35->getNumParameters();

            if (index < this->p_36->getNumParameters())
                this->p_36->getParameterInfo(index, info);

            index -= this->p_36->getNumParameters();

            if (index < this->p_37->getNumParameters())
                this->p_37->getParameterInfo(index, info);

            index -= this->p_37->getNumParameters();

            if (index < this->p_38->getNumParameters())
                this->p_38->getParameterInfo(index, info);

            index -= this->p_38->getNumParameters();

            if (index < this->p_39->getNumParameters())
                this->p_39->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_33)
        return 6;

    if (subpatcher == this->p_34)
        return 6 + this->p_33->getNumParameters();

    if (subpatcher == this->p_35)
        return 6 + this->p_33->getNumParameters() + this->p_34->getNumParameters();

    if (subpatcher == this->p_36)
        return 6 + this->p_33->getNumParameters() + this->p_34->getNumParameters() + this->p_35->getNumParameters();

    if (subpatcher == this->p_37)
        return 6 + this->p_33->getNumParameters() + this->p_34->getNumParameters() + this->p_35->getNumParameters() + this->p_36->getNumParameters();

    if (subpatcher == this->p_38)
        return 6 + this->p_33->getNumParameters() + this->p_34->getNumParameters() + this->p_35->getNumParameters() + this->p_36->getNumParameters() + this->p_37->getNumParameters();

    if (subpatcher == this->p_39)
        return 6 + this->p_33->getNumParameters() + this->p_34->getNumParameters() + this->p_35->getNumParameters() + this->p_36->getNumParameters() + this->p_37->getNumParameters() + this->p_38->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
    case 1:
    case 2:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);
            return normalizedValue;
        }
        }
    case 5:
        {
        {
            value = (value < 30 ? 30 : (value > 200 ? 200 : value));
            ParameterValue normalizedValue = (value - 30) / (200 - 30);
            return normalizedValue;
        }
        }
    case 4:
        {
        {
            value = (value < 100 ? 100 : (value > 20000 ? 20000 : value));
            ParameterValue normalizedValue = (value - 100) / (20000 - 100);
            return normalizedValue;
        }
        }
    case 3:
        {
        {
            value = (value < 0.125 ? 0.125 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0.125) / (1 - 0.125);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 6;

        if (index < this->p_33->getNumParameters())
            return this->p_33->convertToNormalizedParameterValue(index, value);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->convertToNormalizedParameterValue(index, value);

        index -= this->p_34->getNumParameters();

        if (index < this->p_35->getNumParameters())
            return this->p_35->convertToNormalizedParameterValue(index, value);

        index -= this->p_35->getNumParameters();

        if (index < this->p_36->getNumParameters())
            return this->p_36->convertToNormalizedParameterValue(index, value);

        index -= this->p_36->getNumParameters();

        if (index < this->p_37->getNumParameters())
            return this->p_37->convertToNormalizedParameterValue(index, value);

        index -= this->p_37->getNumParameters();

        if (index < this->p_38->getNumParameters())
            return this->p_38->convertToNormalizedParameterValue(index, value);

        index -= this->p_38->getNumParameters();

        if (index < this->p_39->getNumParameters())
            return this->p_39->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 0:
    case 1:
    case 2:
        {
        {
            {
                return 0 + value * (1 - 0);
            }
        }
        }
    case 5:
        {
        {
            {
                return 30 + value * (200 - 30);
            }
        }
        }
    case 4:
        {
        {
            {
                return 100 + value * (20000 - 100);
            }
        }
        }
    case 3:
        {
        {
            {
                return 0.125 + value * (1 - 0.125);
            }
        }
        }
    default:
        {
        index -= 6;

        if (index < this->p_33->getNumParameters())
            return this->p_33->convertFromNormalizedParameterValue(index, value);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->convertFromNormalizedParameterValue(index, value);

        index -= this->p_34->getNumParameters();

        if (index < this->p_35->getNumParameters())
            return this->p_35->convertFromNormalizedParameterValue(index, value);

        index -= this->p_35->getNumParameters();

        if (index < this->p_36->getNumParameters())
            return this->p_36->convertFromNormalizedParameterValue(index, value);

        index -= this->p_36->getNumParameters();

        if (index < this->p_37->getNumParameters())
            return this->p_37->convertFromNormalizedParameterValue(index, value);

        index -= this->p_37->getNumParameters();

        if (index < this->p_38->getNumParameters())
            return this->p_38->convertFromNormalizedParameterValue(index, value);

        index -= this->p_38->getNumParameters();

        if (index < this->p_39->getNumParameters())
            return this->p_39->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_18_value_constrain(value);
        }
    case 1:
        {
        return this->param_19_value_constrain(value);
        }
    case 2:
        {
        return this->param_20_value_constrain(value);
        }
    case 3:
        {
        return this->param_21_value_constrain(value);
        }
    case 4:
        {
        return this->param_22_value_constrain(value);
        }
    case 5:
        {
        return this->param_23_value_constrain(value);
        }
    default:
        {
        index -= 6;

        if (index < this->p_33->getNumParameters())
            return this->p_33->constrainParameterValue(index, value);

        index -= this->p_33->getNumParameters();

        if (index < this->p_34->getNumParameters())
            return this->p_34->constrainParameterValue(index, value);

        index -= this->p_34->getNumParameters();

        if (index < this->p_35->getNumParameters())
            return this->p_35->constrainParameterValue(index, value);

        index -= this->p_35->getNumParameters();

        if (index < this->p_36->getNumParameters())
            return this->p_36->constrainParameterValue(index, value);

        index -= this->p_36->getNumParameters();

        if (index < this->p_37->getNumParameters())
            return this->p_37->constrainParameterValue(index, value);

        index -= this->p_37->getNumParameters();

        if (index < this->p_38->getNumParameters())
            return this->p_38->constrainParameterValue(index, value);

        index -= this->p_38->getNumParameters();

        if (index < this->p_39->getNumParameters())
            return this->p_39->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
    RNBO_UNUSED(value);
    RNBO_UNUSED(hasValue);
    this->updateTime(time);

    switch (index) {
    case 1935387534:
        {
        this->metro_03_tick_bang();
        break;
        }
    case -871642103:
        {
        this->loadbang_13_startupbang_bang();
        break;
        }
    }
}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-118") == objectId)
            this->message_311_listin_number_set(payload);

        if (TAG("message_obj-3") == objectId)
            this->message_312_listin_number_set(payload);

        break;
        }
    case TAG("valin"):
        {
        if (TAG("number_obj-13") == objectId)
            this->numberobj_78_valin_set(payload);

        if (TAG("number_obj-106") == objectId)
            this->numberobj_79_valin_set(payload);

        if (TAG("number_obj-107") == objectId)
            this->numberobj_80_valin_set(payload);

        if (TAG("number_obj-20") == objectId)
            this->numberobj_81_valin_set(payload);

        if (TAG("toggle_obj-31") == objectId)
            this->toggle_03_valin_set(payload);

        if (TAG("toggle_obj-81") == objectId)
            this->toggle_04_valin_set(payload);

        if (TAG("number_obj-18") == objectId)
            this->numberobj_82_valin_set(payload);

        if (TAG("toggle_obj-26") == objectId)
            this->toggle_05_valin_set(payload);

        if (TAG("number_obj-108") == objectId)
            this->numberobj_83_valin_set(payload);

        if (TAG("toggle_obj-35") == objectId)
            this->toggle_06_valin_set(payload);

        if (TAG("number_obj-12") == objectId)
            this->numberobj_84_valin_set(payload);

        if (TAG("toggle_obj-9") == objectId)
            this->toggle_07_valin_set(payload);

        if (TAG("number_obj-87") == objectId)
            this->numberobj_85_valin_set(payload);

        if (TAG("number_obj-17") == objectId)
            this->numberobj_86_valin_set(payload);

        if (TAG("number_obj-70") == objectId)
            this->numberobj_87_valin_set(payload);

        break;
        }
    case TAG("format"):
        {
        if (TAG("number_obj-13") == objectId)
            this->numberobj_78_format_set(payload);

        if (TAG("number_obj-106") == objectId)
            this->numberobj_79_format_set(payload);

        if (TAG("number_obj-107") == objectId)
            this->numberobj_80_format_set(payload);

        if (TAG("number_obj-20") == objectId)
            this->numberobj_81_format_set(payload);

        if (TAG("number_obj-18") == objectId)
            this->numberobj_82_format_set(payload);

        if (TAG("number_obj-108") == objectId)
            this->numberobj_83_format_set(payload);

        if (TAG("number_obj-12") == objectId)
            this->numberobj_84_format_set(payload);

        if (TAG("number_obj-87") == objectId)
            this->numberobj_85_format_set(payload);

        if (TAG("number_obj-17") == objectId)
            this->numberobj_86_format_set(payload);

        if (TAG("number_obj-70") == objectId)
            this->numberobj_87_format_set(payload);

        break;
        }
    }

    this->p_33->processNumMessage(tag, objectId, time, payload);
    this->p_34->processNumMessage(tag, objectId, time, payload);
    this->p_35->processNumMessage(tag, objectId, time, payload);
    this->p_36->processNumMessage(tag, objectId, time, payload);
    this->p_37->processNumMessage(tag, objectId, time, payload);
    this->p_38->processNumMessage(tag, objectId, time, payload);
    this->p_39->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-118") == objectId)
            this->message_311_listin_list_set(payload);

        if (TAG("message_obj-3") == objectId)
            this->message_312_listin_list_set(payload);

        break;
        }
    }

    this->p_33->processListMessage(tag, objectId, time, payload);
    this->p_34->processListMessage(tag, objectId, time, payload);
    this->p_35->processListMessage(tag, objectId, time, payload);
    this->p_36->processListMessage(tag, objectId, time, payload);
    this->p_37->processListMessage(tag, objectId, time, payload);
    this->p_38->processListMessage(tag, objectId, time, payload);
    this->p_39->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-118") == objectId)
            this->message_311_listin_bang_bang();

        if (TAG("message_obj-3") == objectId)
            this->message_312_listin_bang_bang();

        break;
        }
    case TAG("bangin"):
        {
        if (TAG("button_obj-83") == objectId)
            this->button_47_bangin_bang();

        break;
        }
    case TAG("startupbang"):
        {
        if (TAG("loadbang_obj-33") == objectId)
            this->loadbang_13_startupbang_bang();

        break;
        }
    }

    this->p_33->processBangMessage(tag, objectId, time);
    this->p_34->processBangMessage(tag, objectId, time);
    this->p_35->processBangMessage(tag, objectId, time);
    this->p_36->processBangMessage(tag, objectId, time);
    this->p_37->processBangMessage(tag, objectId, time);
    this->p_38->processBangMessage(tag, objectId, time);
    this->p_39->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("listout"):
        {
        return "listout";
        }
    case TAG("message_obj-118"):
        {
        return "message_obj-118";
        }
    case TAG("valout"):
        {
        return "valout";
        }
    case TAG("number_obj-13"):
        {
        return "number_obj-13";
        }
    case TAG("setup"):
        {
        return "setup";
        }
    case TAG("number_obj-106"):
        {
        return "number_obj-106";
        }
    case TAG("number_obj-107"):
        {
        return "number_obj-107";
        }
    case TAG("number_obj-20"):
        {
        return "number_obj-20";
        }
    case TAG("toggle_obj-31"):
        {
        return "toggle_obj-31";
        }
    case TAG("toggle_obj-81"):
        {
        return "toggle_obj-81";
        }
    case TAG("bangout"):
        {
        return "bangout";
        }
    case TAG("button_obj-83"):
        {
        return "button_obj-83";
        }
    case TAG("number_obj-18"):
        {
        return "number_obj-18";
        }
    case TAG("toggle_obj-26"):
        {
        return "toggle_obj-26";
        }
    case TAG("number_obj-108"):
        {
        return "number_obj-108";
        }
    case TAG("message_obj-3"):
        {
        return "message_obj-3";
        }
    case TAG("toggle_obj-35"):
        {
        return "toggle_obj-35";
        }
    case TAG("number_obj-12"):
        {
        return "number_obj-12";
        }
    case TAG("toggle_obj-9"):
        {
        return "toggle_obj-9";
        }
    case TAG("number_obj-87"):
        {
        return "number_obj-87";
        }
    case TAG("number_obj-17"):
        {
        return "number_obj-17";
        }
    case TAG("number_obj-70"):
        {
        return "number_obj-70";
        }
    case TAG("listin"):
        {
        return "listin";
        }
    case TAG("valin"):
        {
        return "valin";
        }
    case TAG("format"):
        {
        return "format";
        }
    case TAG("bangin"):
        {
        return "bangin";
        }
    case TAG("startupbang"):
        {
        return "startupbang";
        }
    case TAG("loadbang_obj-33"):
        {
        return "loadbang_obj-33";
        }
    }

    auto subpatchResult_0 = this->p_33->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_34->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_35->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    auto subpatchResult_3 = this->p_36->resolveTag(tag);

    if (subpatchResult_3)
        return subpatchResult_3;

    auto subpatchResult_4 = this->p_37->resolveTag(tag);

    if (subpatchResult_4)
        return subpatchResult_4;

    auto subpatchResult_5 = this->p_38->resolveTag(tag);

    if (subpatchResult_5)
        return subpatchResult_5;

    auto subpatchResult_6 = this->p_39->resolveTag(tag);

    if (subpatchResult_6)
        return subpatchResult_6;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_18_value_set(number v) {
    v = this->param_18_value_constrain(v);
    this->param_18_value = v;
    this->sendParameter(0, false);

    if (this->param_18_value != this->param_18_lastValue) {
        this->getEngine()->presetTouched();
        this->param_18_lastValue = this->param_18_value;
    }

    this->numberobj_81_value_set(v);
}

void param_19_value_set(number v) {
    v = this->param_19_value_constrain(v);
    this->param_19_value = v;
    this->sendParameter(1, false);

    if (this->param_19_value != this->param_19_lastValue) {
        this->getEngine()->presetTouched();
        this->param_19_lastValue = this->param_19_value;
    }

    this->numberobj_82_value_set(v);
}

void param_20_value_set(number v) {
    v = this->param_20_value_constrain(v);
    this->param_20_value = v;
    this->sendParameter(2, false);

    if (this->param_20_value != this->param_20_lastValue) {
        this->getEngine()->presetTouched();
        this->param_20_lastValue = this->param_20_value;
    }

    this->numberobj_84_value_set(v);
}

void param_21_value_set(number v) {
    v = this->param_21_value_constrain(v);
    this->param_21_value = v;
    this->sendParameter(3, false);

    if (this->param_21_value != this->param_21_lastValue) {
        this->getEngine()->presetTouched();
        this->param_21_lastValue = this->param_21_value;
    }

    this->dspexpr_40_in2_set(v);
}

void param_22_value_set(number v) {
    v = this->param_22_value_constrain(v);
    this->param_22_value = v;
    this->sendParameter(4, false);

    if (this->param_22_value != this->param_22_lastValue) {
        this->getEngine()->presetTouched();
        this->param_22_lastValue = this->param_22_value;
    }

    this->lores_03_cutoff_set(v);
}

void param_23_value_set(number v) {
    v = this->param_23_value_constrain(v);
    this->param_23_value = v;
    this->sendParameter(5, false);

    if (this->param_23_value != this->param_23_lastValue) {
        this->getEngine()->presetTouched();
        this->param_23_lastValue = this->param_23_value;
    }

    this->transport_01_tempo_set(v);
}

void message_311_listin_list_set(const list& v) {
    this->message_311_set_set(v);
}

void message_311_listin_number_set(number v) {
    this->message_311_set_set(v);
}

void message_311_listin_bang_bang() {
    this->message_311_trigger_bang();
}

void numberobj_78_valin_set(number v) {
    this->numberobj_78_value_set(v);
}

void numberobj_78_format_set(number v) {
    this->numberobj_78_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_79_valin_set(number v) {
    this->numberobj_79_value_set(v);
}

void numberobj_79_format_set(number v) {
    this->numberobj_79_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_80_valin_set(number v) {
    this->numberobj_80_value_set(v);
}

void numberobj_80_format_set(number v) {
    this->numberobj_80_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_81_valin_set(number v) {
    this->numberobj_81_value_set(v);
}

void numberobj_81_format_set(number v) {
    this->numberobj_81_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void toggle_03_valin_set(number v) {
    this->toggle_03_value_number_set(v);
}

void toggle_04_valin_set(number v) {
    this->toggle_04_value_number_set(v);
}

void metro_03_tick_bang() {
    this->metro_03_tickout_bang();
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(this->metro_03_on)) {
        this->metro_03_last = this->currenttime();

        {
            this->metro_03_next = this->metro_03_last + this->metro_03_interval;
            this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_03_interval + this->_currentTime);;
        }
    }
}

void button_47_bangin_bang() {
    this->button_47_bangval_bang();
}

void numberobj_82_valin_set(number v) {
    this->numberobj_82_value_set(v);
}

void numberobj_82_format_set(number v) {
    this->numberobj_82_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void toggle_05_valin_set(number v) {
    this->toggle_05_value_number_set(v);
}

void numberobj_83_valin_set(number v) {
    this->numberobj_83_value_set(v);
}

void numberobj_83_format_set(number v) {
    this->numberobj_83_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void message_312_listin_list_set(const list& v) {
    this->message_312_set_set(v);
}

void message_312_listin_number_set(number v) {
    this->message_312_set_set(v);
}

void message_312_listin_bang_bang() {
    this->message_312_trigger_bang();
}

void toggle_06_valin_set(number v) {
    this->toggle_06_value_number_set(v);
}

void loadbang_13_startupbang_bang() {
    this->loadbang_13_output_bang();
}

void numberobj_84_valin_set(number v) {
    this->numberobj_84_value_set(v);
}

void numberobj_84_format_set(number v) {
    this->numberobj_84_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void toggle_07_valin_set(number v) {
    this->toggle_07_value_number_set(v);
}

void numberobj_85_valin_set(number v) {
    this->numberobj_85_value_set(v);
}

void numberobj_85_format_set(number v) {
    this->numberobj_85_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_86_valin_set(number v) {
    this->numberobj_86_value_set(v);
}

void numberobj_86_format_set(number v) {
    this->numberobj_86_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void numberobj_87_valin_set(number v) {
    this->numberobj_87_value_set(v);
}

void numberobj_87_format_set(number v) {
    this->numberobj_87_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 0;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_33->allocateDataRefs();
    this->p_34->allocateDataRefs();
    this->p_35->allocateDataRefs();
    this->p_36->allocateDataRefs();
    this->p_37->allocateDataRefs();
    this->p_38->allocateDataRefs();
    this->p_39->allocateDataRefs();

    if (this->osc_wavetable_buf->hasRequestedSize()) {
        if (this->osc_wavetable_buf->wantsFill())
            this->zeroDataRef(this->osc_wavetable_buf);

        this->getEngine()->sendDataRefUpdated(0);
    }

    if (this->RNBODefaultSinus->hasRequestedSize()) {
        if (this->RNBODefaultSinus->wantsFill())
            this->fillRNBODefaultSinus(this->RNBODefaultSinus);

        this->getEngine()->sendDataRefUpdated(1);
    }

    if (this->RNBODefaultMtofLookupTable256->hasRequestedSize()) {
        if (this->RNBODefaultMtofLookupTable256->wantsFill())
            this->fillRNBODefaultMtofLookupTable256(this->RNBODefaultMtofLookupTable256);

        this->getEngine()->sendDataRefUpdated(2);
    }
}

void initializeObjects() {
    this->message_311_init();
    this->numberobj_78_init();
    this->numberobj_79_init();
    this->numberobj_80_init();
    this->numberobj_81_init();
    this->numberobj_82_init();
    this->numberobj_83_init();
    this->random_07_nz_init();
    this->message_312_init();
    this->numberobj_84_init();
    this->numberobj_85_init();
    this->numberobj_86_init();
    this->numberobj_87_init();
    this->p_33->initializeObjects();
    this->p_34->initializeObjects();
    this->p_35->initializeObjects();
    this->p_36->initializeObjects();
    this->p_37->initializeObjects();
    this->p_38->initializeObjects();
    this->p_39->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_33->startup();
    this->p_34->startup();
    this->p_35->startup();
    this->p_36->startup();
    this->p_37->startup();
    this->p_38->startup();
    this->p_39->startup();

    if ((bool)(this->metro_03_on))
        this->metro_03_on_set(1);

    this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;

    {
        this->scheduleParamInit(0, 0);
    }

    {
        this->scheduleParamInit(1, 0);
    }

    {
        this->scheduleParamInit(2, 0);
    }

    {
        this->scheduleParamInit(3, 0);
    }

    {
        this->scheduleParamInit(4, 0);
    }

    {
        this->scheduleParamInit(5, 0);
    }

    this->processParamInitEvents();
}

number param_18_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void gate_04_onoff_set(number v) {
    this->gate_04_onoff = v;
}

void toggle_03_output_set(number v) {
    this->gate_04_onoff_set(v);
}

void toggle_03_value_number_set(number v) {
    this->toggle_03_value_number_setter(v);
    v = this->toggle_03_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-31"), v, this->_currentTime);
    this->toggle_03_output_set(v);
}

void numberobj_81_output_set(number v) {
    this->toggle_03_value_number_set(v);
}

void numberobj_81_value_set(number v) {
    this->numberobj_81_value_setter(v);
    v = this->numberobj_81_value;
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_81_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-20"), localvalue, this->_currentTime);
    this->numberobj_81_output_set(localvalue);
}

number param_19_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void p_38_in1_number_set(number v) {
    this->p_38->updateTime(this->_currentTime);
    this->p_38->eventinlet_34_out1_number_set(v);
}

void toggle_07_output_set(number v) {
    this->p_38_in1_number_set(v);
}

void toggle_07_value_number_set(number v) {
    this->toggle_07_value_number_setter(v);
    v = this->toggle_07_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-9"), v, this->_currentTime);
    this->toggle_07_output_set(v);
}

void toggle_05_output_set(number v) {
    this->toggle_07_value_number_set(v);
    this->toggle_03_value_number_set(v);
}

void toggle_05_value_number_set(number v) {
    this->toggle_05_value_number_setter(v);
    v = this->toggle_05_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-26"), v, this->_currentTime);
    this->toggle_05_output_set(v);
}

void numberobj_82_output_set(number v) {
    this->toggle_05_value_number_set(v);
}

void numberobj_82_value_set(number v) {
    this->numberobj_82_value_setter(v);
    v = this->numberobj_82_value;
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_82_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-18"), localvalue, this->_currentTime);
    this->numberobj_82_output_set(localvalue);
}

number param_20_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void numberobj_84_output_set(number v) {
    this->toggle_07_value_number_set(v);
}

void numberobj_84_value_set(number v) {
    this->numberobj_84_value_setter(v);
    v = this->numberobj_84_value;
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_84_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-12"), localvalue, this->_currentTime);
    this->numberobj_84_output_set(localvalue);
}

number param_21_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0.125 ? 0.125 : v));
    return v;
}

void dspexpr_40_in2_set(number v) {
    this->dspexpr_40_in2 = v;
}

number param_22_value_constrain(number v) const {
    v = (v > 20000 ? 20000 : (v < 100 ? 100 : v));
    return v;
}

void lores_03_cutoff_set(number v) {
    this->lores_03_cutoff = v;
}

number param_23_value_constrain(number v) const {
    v = (v > 200 ? 200 : (v < 30 ? 30 : v));
    return v;
}

void transport_01_tempo_set(number v) {
    this->transport_01_tempo = v;

    if (v >= 0) {
        this->getTopLevelPatcher()->globaltransport_setTempo(this->currenttime(), v, true);
    }
}

void message_311_set_set(const list& v) {
    this->message_311_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-118"), v, this->_currentTime);
}

void message_311_out_set(const list& ) {}

void message_311_trigger_bang() {
    this->message_311_out_set(this->message_311_set);
}

void translate_04_out_set(number v) {
    {
        list converted = {v};
        this->message_311_set_set(converted);
    }
}

void translate_04_value_set(number v) {
    this->translate_04_value = v;

    {
        {
            {
                this->translate_04_out_set(this->tickstoms(v));
            }
        }
    }
}

void expr_44_out1_set(number v) {
    this->expr_44_out1 = v;
    this->translate_04_value_set(this->expr_44_out1);
}

void expr_44_in1_set(number in1) {
    this->expr_44_in1 = in1;
    this->expr_44_out1_set((this->expr_44_in1 == 0. ? 0. : this->expr_44_in2 / this->expr_44_in1));//#map:!/_obj-155:1
}

void numberobj_80_output_set(number ) {}

void numberobj_80_value_set(number v) {
    this->numberobj_80_value_setter(v);
    v = this->numberobj_80_value;
    number localvalue = v;

    if (this->numberobj_80_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-107"), localvalue, this->_currentTime);
    this->numberobj_80_output_set(localvalue);
}

void expr_45_out1_set(number v) {
    this->expr_45_out1 = v;
    this->expr_44_in1_set(this->expr_45_out1);
    this->numberobj_80_value_set(this->expr_45_out1);
}

void expr_45_in1_set(number in1) {
    this->expr_45_in1 = in1;
    this->expr_45_out1_set(fixnan(rnbo_pow(2, this->expr_45_in1)));//#map:expr_obj-154:1
}

void expr_46_out1_set(number v) {
    this->expr_46_out1 = v;
    this->expr_45_in1_set(this->expr_46_out1);
}

void expr_46_in1_bang() {
    this->expr_46_out1_set(this->expr_46_in1 - this->expr_46_in2);//#map:-_obj-143:1
}

void routepass_01_nomatch_bang_bang() {
    this->expr_46_in1_bang();
}

void expr_42_out1_set(number v) {
    this->expr_42_out1 = v;
    this->translate_04_value_set(this->expr_42_out1);
}

void expr_42_in1_set(number in1) {
    this->expr_42_in1 = in1;
    this->expr_42_out1_set((this->expr_42_in1 == 0. ? 0. : this->expr_42_in2 / this->expr_42_in1));//#map:!/_obj-152:1
}

void expr_41_out1_set(number v) {
    this->expr_41_out1 = v;
    this->numberobj_80_value_set(this->expr_41_out1);
    this->expr_42_in1_set(this->expr_41_out1);
}

void expr_41_in1_set(number in1) {
    this->expr_41_in1 = in1;
    this->expr_41_out1_set(fixnan(rnbo_pow(2, this->expr_41_in1)));//#map:expr_obj-153:1
}

void expr_43_out1_set(number v) {
    this->expr_43_out1 = v;
    this->expr_41_in1_set(this->expr_43_out1);
}

void expr_43_in1_bang() {
    this->expr_43_out1_set(this->expr_43_in1 - this->expr_43_in2);//#map:-_obj-138:1
}

void routepass_01_match11_bang_bang() {
    this->expr_43_in1_bang();
}

void expr_43_in1_set(number in1) {
    this->expr_43_in1 = in1;
    this->expr_43_out1_set(this->expr_43_in1 - this->expr_43_in2);//#map:-_obj-138:1
}

void routepass_01_match11_number_set(number v) {
    this->expr_43_in1_set(v);
}

void expr_43_in2_set(number v) {
    this->expr_43_in2 = v;
}

void routepass_01_match11_list_set(const list& v) {
    {
        if (v->length > 1)
            this->expr_43_in2_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_43_in1_set(converted);
    }
}

void routepass_01_match10_bang_bang() {
    this->expr_43_in1_bang();
}

void routepass_01_match10_number_set(number v) {
    this->expr_43_in1_set(v);
}

void routepass_01_match10_list_set(const list& v) {
    {
        if (v->length > 1)
            this->expr_43_in2_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_43_in1_set(converted);
    }
}

void routepass_01_match9_bang_bang() {
    this->expr_43_in1_bang();
}

void routepass_01_match9_number_set(number v) {
    this->expr_43_in1_set(v);
}

void routepass_01_match9_list_set(const list& v) {
    {
        if (v->length > 1)
            this->expr_43_in2_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_43_in1_set(converted);
    }
}

void routepass_01_match8_bang_bang() {
    this->expr_43_in1_bang();
}

void routepass_01_match8_number_set(number v) {
    this->expr_43_in1_set(v);
}

void routepass_01_match8_list_set(const list& v) {
    {
        if (v->length > 1)
            this->expr_43_in2_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_43_in1_set(converted);
    }
}

void routepass_01_match7_bang_bang() {
    this->expr_43_in1_bang();
}

void routepass_01_match7_number_set(number v) {
    this->expr_43_in1_set(v);
}

void routepass_01_match7_list_set(const list& v) {
    {
        if (v->length > 1)
            this->expr_43_in2_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_43_in1_set(converted);
    }
}

void expr_39_out1_set(number v) {
    this->expr_39_out1 = v;
    this->translate_04_value_set(this->expr_39_out1);
}

void expr_39_in1_set(number in1) {
    this->expr_39_in1 = in1;
    this->expr_39_out1_set((this->expr_39_in1 == 0. ? 0. : this->expr_39_in2 / this->expr_39_in1));//#map:!/_obj-111:1
}

void expr_40_out1_set(number v) {
    this->expr_40_out1 = v;
    this->numberobj_80_value_set(this->expr_40_out1);
    this->expr_39_in1_set(this->expr_40_out1);
}

void expr_40_in1_bang() {
    this->expr_40_out1_set(fixnan(rnbo_pow(2, this->expr_40_in1)));//#map:expr_obj-114:1
}

void routepass_01_match6_bang_bang() {
    this->expr_40_in1_bang();
}

void expr_40_in1_set(number in1) {
    this->expr_40_in1 = in1;
    this->expr_40_out1_set(fixnan(rnbo_pow(2, this->expr_40_in1)));//#map:expr_obj-114:1
}

void routepass_01_match6_number_set(number v) {
    this->expr_40_in1_set(v);
}

void routepass_01_match6_list_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_40_in1_set(converted);
    }
}

void routepass_01_match5_bang_bang() {
    this->expr_40_in1_bang();
}

void routepass_01_match5_number_set(number v) {
    this->expr_40_in1_set(v);
}

void routepass_01_match5_list_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_40_in1_set(converted);
    }
}

void routepass_01_match4_bang_bang() {
    this->expr_40_in1_bang();
}

void routepass_01_match4_number_set(number v) {
    this->expr_40_in1_set(v);
}

void routepass_01_match4_list_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_40_in1_set(converted);
    }
}

void routepass_01_match3_bang_bang() {
    this->expr_40_in1_bang();
}

void routepass_01_match3_number_set(number v) {
    this->expr_40_in1_set(v);
}

void routepass_01_match3_list_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_40_in1_set(converted);
    }
}

void routepass_01_match2_bang_bang() {
    this->expr_40_in1_bang();
}

void routepass_01_match2_number_set(number v) {
    this->expr_40_in1_set(v);
}

void routepass_01_match2_list_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_40_in1_set(converted);
    }
}

void routepass_01_match1_bang_bang() {
    this->expr_40_in1_bang();
}

void routepass_01_match1_number_set(number v) {
    this->expr_40_in1_set(v);
}

void routepass_01_match1_list_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_40_in1_set(converted);
    }
}

void expr_46_in1_set(number in1) {
    this->expr_46_in1 = in1;
    this->expr_46_out1_set(this->expr_46_in1 - this->expr_46_in2);//#map:-_obj-143:1
}

void routepass_01_nomatch_number_set(number v) {
    this->expr_46_in1_set(v);
}

void expr_46_in2_set(number v) {
    this->expr_46_in2 = v;
}

void routepass_01_nomatch_list_set(const list& v) {
    {
        if (v->length > 1)
            this->expr_46_in2_set(v[1]);

        number converted = (v->length > 0 ? v[0] : 0);
        this->expr_46_in1_set(converted);
    }
}

void routepass_01_input_list_set(const list& v) {
    if ((bool)(!(bool)(v->length)))
        this->routepass_01_nomatch_bang_bang();
    else {
        number check = v[0];
        list input = jsCreateListCopy(v);
        bool nomatch = true;

        if (check == this->routepass_01_selector11) {
            if (input->length == 0)
                this->routepass_01_match11_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match11_number_set(input[0]);
            else
                this->routepass_01_match11_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector10) {
            if (input->length == 0)
                this->routepass_01_match10_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match10_number_set(input[0]);
            else
                this->routepass_01_match10_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector9) {
            if (input->length == 0)
                this->routepass_01_match9_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match9_number_set(input[0]);
            else
                this->routepass_01_match9_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector8) {
            if (input->length == 0)
                this->routepass_01_match8_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match8_number_set(input[0]);
            else
                this->routepass_01_match8_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector7) {
            if (input->length == 0)
                this->routepass_01_match7_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match7_number_set(input[0]);
            else
                this->routepass_01_match7_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector6) {
            if (input->length == 0)
                this->routepass_01_match6_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match6_number_set(input[0]);
            else
                this->routepass_01_match6_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector5) {
            if (input->length == 0)
                this->routepass_01_match5_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match5_number_set(input[0]);
            else
                this->routepass_01_match5_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector4) {
            if (input->length == 0)
                this->routepass_01_match4_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match4_number_set(input[0]);
            else
                this->routepass_01_match4_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector3) {
            if (input->length == 0)
                this->routepass_01_match3_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match3_number_set(input[0]);
            else
                this->routepass_01_match3_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector2) {
            if (input->length == 0)
                this->routepass_01_match2_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match2_number_set(input[0]);
            else
                this->routepass_01_match2_list_set(input);

            nomatch = false;
        }

        if (check == this->routepass_01_selector1) {
            if (input->length == 0)
                this->routepass_01_match1_bang_bang();
            else if (input->length == 1)
                this->routepass_01_match1_number_set(input[0]);
            else
                this->routepass_01_match1_list_set(input);

            nomatch = false;
        }

        if ((bool)(nomatch)) {
            if (v->length == 1) {
                this->routepass_01_nomatch_number_set(v[0]);
            } else {
                this->routepass_01_nomatch_list_set(v);
            }
        }
    }
}

void routepass_01_input_number_set(number v) {
    this->routepass_01_input_list_set({v});
}

void numberobj_78_output_set(number v) {
    this->routepass_01_input_number_set(v);
}

void numberobj_78_value_set(number v) {
    this->numberobj_78_value_setter(v);
    v = this->numberobj_78_value;
    number localvalue = v;

    if (this->numberobj_78_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-13"), localvalue, this->_currentTime);
    this->numberobj_78_output_set(localvalue);
}

void numberobj_79_output_set(number ) {}

void numberobj_79_value_set(number v) {
    this->numberobj_79_value_setter(v);
    v = this->numberobj_79_value;
    number localvalue = v;

    if (this->numberobj_79_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-106"), localvalue, this->_currentTime);
    this->numberobj_79_output_set(localvalue);
}

void metro_03_on_set(number v) {
    this->metro_03_on = v;
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(v)) {
        {
            this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
        }
    }
}

void toggle_04_output_set(number v) {
    this->metro_03_on_set(v);
}

void toggle_04_value_number_set(number v) {
    this->toggle_04_value_number_setter(v);
    v = this->toggle_04_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-81"), v, this->_currentTime);
    this->toggle_04_output_set(v);
}

void button_47_output_bang() {}

void button_47_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-83"), this->_currentTime);;
    this->button_47_output_bang();
}

void message_312_set_set(const list& v) {
    this->message_312_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-3"), v, this->_currentTime);
}

void p_34_target_ChDur_number_set(number v) {
    this->p_34->updateTime(this->_currentTime);
    this->p_34->receive_02_output_number_set(v);
}

void send_08_input_number_set(number v) {
    this->send_08_input_number = v;
    this->p_34_target_ChDur_number_set(v);
}

void metro_03_interval_set(number v) {
    this->metro_03_interval_setter(v);
    v = this->metro_03_interval;
}

void p_37_out1_number_set(number v) {
    {
        list converted = {v};
        this->message_312_set_set(converted);
    }

    this->send_08_input_number_set(v);
    this->metro_03_interval_set(v);
}

void p_37_in1_number_set(number v) {
    this->p_37->updateTime(this->_currentTime);
    this->p_37->eventinlet_19_out1_number_set(v);
}

void numberobj_83_output_set(number v) {
    this->p_37_in1_number_set(v);
}

void numberobj_83_value_set(number v) {
    this->numberobj_83_value_setter(v);
    v = this->numberobj_83_value;
    number localvalue = v;

    if (this->numberobj_83_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-108"), localvalue, this->_currentTime);
    this->numberobj_83_output_set(localvalue);
}

void random_07_result_set(number v) {
    this->numberobj_83_value_set(v);
}

void random_07_trigger_bang() {
    this->random_07_result_set(rnbo_abs(this->random_07_nz_next()) * this->random_07_limit);
}

void trigger_14_out2_bang() {
    this->random_07_trigger_bang();
}

void p_38_target_currentChord_Index_number_set(number v) {
    this->p_38->updateTime(this->_currentTime);
    this->p_38->receive_10_output_number_set(v);
}

void p_35_source_currentChord_Index_number_set(number v) {
    this->p_38_target_currentChord_Index_number_set(v);
}

void p_34_target_BassBang_bang_bang() {
    this->p_34->updateTime(this->_currentTime);
    this->p_34->receive_01_output_bang_bang();
}

void p_35_source_BassBang_bang_bang() {
    this->p_34_target_BassBang_bang_bang();
}

void p_34_in4_number_set(number v) {
    this->p_34->updateTime(this->_currentTime);
    this->p_34->eventinlet_10_out1_number_set(v);
}

void p_35_out4_number_set(number v) {
    this->p_34_in4_number_set(v);
}

void p_34_target_Bass_list_set(const list& v) {
    this->p_34->updateTime(this->_currentTime);
    this->p_34->receive_03_output_list_set(v);
}

void p_35_source_Bass_list_set(const list& v) {
    this->p_34_target_Bass_list_set(v);
}

void p_34_in3_number_set(number v) {
    this->p_34->updateTime(this->_currentTime);
    this->p_34->eventinlet_09_out1_number_set(v);
}

void p_35_out3_number_set(number v) {
    this->p_34_in3_number_set(v);
}

void p_34_in2_number_set(number v) {
    this->p_34->updateTime(this->_currentTime);
    this->p_34->eventinlet_08_out1_number_set(v);
}

void p_35_out2_number_set(number v) {
    this->p_34_in2_number_set(v);
}

void p_34_in1_number_set(number v) {
    this->p_34->updateTime(this->_currentTime);
    this->p_34->eventinlet_07_out1_number_set(v);
}

void p_35_out1_number_set(number v) {
    this->p_34_in1_number_set(v);
}

void p_35_in1_bang_bang() {
    this->p_35->updateTime(this->_currentTime);
    this->p_35->eventinlet_14_out1_bang_bang();
}

void trigger_14_out1_bang() {
    this->p_35_in1_bang_bang();
}

void trigger_14_input_bang_bang() {
    this->trigger_14_out2_bang();
    this->trigger_14_out1_bang();
}

void gate_04_out1_bang_bang() {
    this->trigger_14_input_bang_bang();
}

void gate_04_input_bang_bang() {
    if (this->gate_04_onoff == 1)
        this->gate_04_out1_bang_bang();
}

void metro_03_tickout_bang() {
    this->button_47_bangval_bang();
    this->gate_04_input_bang_bang();
}

void message_312_out_set(const list& ) {}

void message_312_trigger_bang() {
    this->message_312_out_set(this->message_312_set);
}

void transport_01_input_number_set(number v) {
    this->transport_01_input_number = v;
    this->getTopLevelPatcher()->globaltransport_setState(this->currenttime(), (v == 0 ? 0 : 1), true);
}

void toggle_06_output_set(number v) {
    this->transport_01_input_number_set(v);
}

void toggle_06_value_number_set(number v) {
    this->toggle_06_value_number_setter(v);
    v = this->toggle_06_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-35"), v, this->_currentTime);
    this->toggle_06_output_set(v);
}

void toggle_06_value_bang_bang() {
    number val = (this->toggle_06_value_number == 1 ? 0 : 1);
    this->toggle_06_value_number_set(val);
}

void loadbang_13_output_bang() {
    this->toggle_06_value_bang_bang();
}

void numberobj_85_output_set(number v) {
    this->param_21_value_set(v);
}

void numberobj_85_value_set(number v) {
    this->numberobj_85_value_setter(v);
    v = this->numberobj_85_value;
    number localvalue = v;

    if (this->numberobj_85_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-87"), localvalue, this->_currentTime);
    this->numberobj_85_output_set(localvalue);
}

void numberobj_86_output_set(number v) {
    this->param_22_value_set(v);
}

void numberobj_86_value_set(number v) {
    this->numberobj_86_value_setter(v);
    v = this->numberobj_86_value;
    number localvalue = v;

    if (this->numberobj_86_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-17"), localvalue, this->_currentTime);
    this->numberobj_86_output_set(localvalue);
}

void numberobj_87_output_set(number v) {
    this->param_23_value_set(v);
}

void numberobj_87_value_set(number v) {
    this->numberobj_87_value_setter(v);
    v = this->numberobj_87_value;
    number localvalue = v;

    if (this->numberobj_87_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-70"), localvalue, this->_currentTime);
    this->numberobj_87_output_set(localvalue);
}

void p_36_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(port);
    RNBO_UNUSED(channel);
    RNBO_UNUSED(status);
    this->p_36->processMidiEvent(_currentTime, 0, data, length);
}

void transport_01_outtempo_set(number ) {}

void transport_01_state_set(number ) {}

void transport_01_outtimesig_set(const list& ) {}

void p_33_out1_number_set(number ) {}

void p_36_out3_number_set(number ) {}

void p_38_source_CurMelDur_number_set(number ) {}

void p_39_target_NoteDur_number_set(number v) {
    this->p_39->updateTime(this->_currentTime);
    this->p_39->receive_11_output_number_set(v);
    this->p_39->updateTime(this->_currentTime);
    this->p_39->receive_13_output_number_set(v);
}

void p_38_source_NoteDur_number_set(number v) {
    this->p_39_target_NoteDur_number_set(v);
}

void p_38_source_currentNote_number_set(number ) {}

void p_39_in1_number_set(number v) {
    this->p_39->updateTime(this->_currentTime);
    this->p_39->eventinlet_38_out1_number_set(v);
}

void p_38_out1_number_set(number v) {
    this->p_39_in1_number_set(v);
}

void p_39_source_TremAmp_number_set(number ) {}

void p_33_perform(Index n) {
    // subpatcher: ChNoteOld
    this->p_33->process(nullptr, 0, nullptr, 0, n);
}

void p_34_perform(SampleValue * out1, Index n) {
    // subpatcher: ChInst
    SampleArray<1> outs = {out1};

    this->p_34->process(nullptr, 0, outs, 1, n);
}

void dspexpr_39_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * 0.125;//#map:_###_obj_###_:1
    }
}

void p_35_perform(Index n) {
    // subpatcher: Chords
    this->p_35->process(nullptr, 0, nullptr, 0, n);
}

void p_37_perform(Index n) {
    // subpatcher: ChNote
    this->p_37->process(nullptr, 0, nullptr, 0, n);
}

void p_38_perform(Index n) {
    // subpatcher: Melodies
    this->p_38->process(nullptr, 0, nullptr, 0, n);
}

void p_39_perform(SampleValue * out1, Index n) {
    // subpatcher: MeloInst
    SampleArray<1> outs = {out1};

    this->p_39->process(nullptr, 0, outs, 1, n);
}

void lores_03_perform(
    number cutoff,
    number resonance,
    const SampleValue * input,
    SampleValue * out,
    Index n
) {
    RNBO_UNUSED(resonance);
    auto __lores_03_y_2 = this->lores_03_y_2;
    auto __lores_03_y_1 = this->lores_03_y_1;
    auto __lores_03_x_0 = this->lores_03_x_0;
    auto __lores_03_b_0 = this->lores_03_b_0;
    auto __lores_03_a_1 = this->lores_03_a_1;
    auto __lores_03_a_2 = this->lores_03_a_2;
    auto __lores_03_last_freq_calc = this->lores_03_last_freq_calc;
    auto __lores_03_last_res_calc = this->lores_03_last_res_calc;
    auto __lores_03_last_frequency = this->lores_03_last_frequency;
    auto __lores_03_last_resonance = this->lores_03_last_resonance;

    for (Index i = 0; i < n; i++) {
        if (0.4 != __lores_03_last_resonance || cutoff != __lores_03_last_frequency) {
            __lores_03_last_res_calc = rnbo_exp(0.4 * 0.125) * 0.882497;
            __lores_03_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * cutoff);
            __lores_03_last_resonance = 0.4;
            __lores_03_last_frequency = cutoff;
        }

        number res_temp = __lores_03_last_res_calc;
        number freq_temp = __lores_03_last_freq_calc;
        __lores_03_a_2 = res_temp * res_temp;
        __lores_03_a_1 = -2.0 * res_temp * freq_temp;
        __lores_03_b_0 = 1.0 + __lores_03_a_1 + __lores_03_a_2;
        __lores_03_x_0 = input[(Index)i];
        number y_0 = __lores_03_x_0 * __lores_03_b_0 - __lores_03_y_1 * __lores_03_a_1 - __lores_03_y_2 * __lores_03_a_2;
        __lores_03_y_2 = __lores_03_y_1;
        __lores_03_y_1 = y_0;
        out[(Index)i] = y_0;
    }

    this->lores_03_last_resonance = __lores_03_last_resonance;
    this->lores_03_last_frequency = __lores_03_last_frequency;
    this->lores_03_last_res_calc = __lores_03_last_res_calc;
    this->lores_03_last_freq_calc = __lores_03_last_freq_calc;
    this->lores_03_a_2 = __lores_03_a_2;
    this->lores_03_a_1 = __lores_03_a_1;
    this->lores_03_b_0 = __lores_03_b_0;
    this->lores_03_x_0 = __lores_03_x_0;
    this->lores_03_y_1 = __lores_03_y_1;
    this->lores_03_y_2 = __lores_03_y_2;
}

void dspexpr_40_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * in2;//#map:_###_obj_###_:1
    }
}

void signaladder_01_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void signaladder_02_perform(
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * out,
    Index n
) {
    Index i;

    for (i = 0; i < n; i++) {
        out[(Index)i] = in1[(Index)i] + in2[(Index)i];
    }
}

void p_36_perform(
    const SampleValue * target_Size,
    const SampleValue * target_Diff,
    const SampleValue * target_Decay,
    const SampleValue * target_Jitter,
    const SampleValue * target_Damp,
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * source_Decay,
    SampleValue * source_Jitter,
    SampleValue * source_Damp,
    SampleValue * source_Diff,
    SampleValue * source_Size,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: Verb
    ConstSampleArray<7> ins = {
        in1,
        in2,
        target_Size,
        target_Diff,
        target_Decay,
        target_Jitter,
        target_Damp
    };

    SampleArray<7> outs = {
        out1,
        out2,
        source_Decay,
        source_Jitter,
        source_Damp,
        source_Diff,
        source_Size
    };

    this->p_36->process(ins, 7, outs, 7, n);
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void numberobj_78_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_78_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_78_value = localvalue;
}

void numberobj_79_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_79_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_79_value = localvalue;
}

void numberobj_80_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_80_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_80_value = localvalue;
}

void numberobj_81_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_81_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_81_value = localvalue;
}

void toggle_03_value_number_setter(number v) {
    this->toggle_03_value_number = (v != 0 ? 1 : 0);
}

void toggle_04_value_number_setter(number v) {
    this->toggle_04_value_number = (v != 0 ? 1 : 0);
}

void metro_03_interval_setter(number v) {
    this->metro_03_interval = (v > 0 ? v : 0);
}

void numberobj_82_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_82_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_82_value = localvalue;
}

void toggle_05_value_number_setter(number v) {
    this->toggle_05_value_number = (v != 0 ? 1 : 0);
}

void numberobj_83_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_83_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_83_value = localvalue;
}

void random_07_limit_setter(number v) {
    if (v >= 0)
        this->random_07_limit = v;
}

void toggle_06_value_number_setter(number v) {
    this->toggle_06_value_number = (v != 0 ? 1 : 0);
}

void numberobj_84_value_setter(number v) {
    number localvalue = v;

    if ((bool)(true) && localvalue < 0) {
        localvalue = 0;
    }

    if ((bool)(true) && localvalue > 1) {
        localvalue = 1;
    }

    if (this->numberobj_84_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_84_value = localvalue;
}

void toggle_07_value_number_setter(number v) {
    this->toggle_07_value_number = (v != 0 ? 1 : 0);
}

void lores_03_resonance_setter(number v) {
    if (v < 0.0) {
        v = 0.0;
    } else if (v >= 1.0) {
        v = 1.0 - 1E-20;
    }

    this->lores_03_resonance = v;
}

void numberobj_85_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_85_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_85_value = localvalue;
}

void numberobj_86_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_86_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_86_value = localvalue;
}

void numberobj_87_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_87_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_87_value = localvalue;
}

void message_311_init() {
    this->message_311_set_set({0});
}

void translate_04_onTempoChanged(number tempo) {
    RNBO_UNUSED(tempo);

    {
        this->translate_04_value_set(this->translate_04_value);
    }
}

void translate_04_onSampleRateChanged(number ) {}

void numberobj_78_init() {
    this->numberobj_78_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-13"), 1, this->_currentTime);
}

void numberobj_78_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_78_value;
}

void numberobj_78_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_78_value_set(preset["value"]);
}

void numberobj_79_init() {
    this->numberobj_79_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-106"), 1, this->_currentTime);
}

void numberobj_79_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_79_value;
}

void numberobj_79_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_79_value_set(preset["value"]);
}

void numberobj_80_init() {
    this->numberobj_80_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-107"), 1, this->_currentTime);
}

void numberobj_80_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_80_value;
}

void numberobj_80_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_80_value_set(preset["value"]);
}

void numberobj_81_init() {
    this->numberobj_81_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-20"), 1, this->_currentTime);
}

void numberobj_81_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_81_value;
}

void numberobj_81_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_81_value_set(preset["value"]);
}

void param_18_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_18_value;
}

void param_18_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_18_value_set(preset["value"]);
}

void toggle_03_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_03_value_number;
}

void toggle_03_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_03_value_number_set(preset["value"]);
}

void toggle_04_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_04_value_number;
}

void toggle_04_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_04_value_number_set(preset["value"]);
}

void metro_03_onTransportChanged(number ) {}

void metro_03_onBeatTimeChanged(number ) {}

void numberobj_82_init() {
    this->numberobj_82_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-18"), 1, this->_currentTime);
}

void numberobj_82_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_82_value;
}

void numberobj_82_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_82_value_set(preset["value"]);
}

void param_19_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_19_value;
}

void param_19_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_19_value_set(preset["value"]);
}

void toggle_05_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_05_value_number;
}

void toggle_05_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_05_value_number_set(preset["value"]);
}

void numberobj_83_init() {
    this->numberobj_83_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-108"), 1, this->_currentTime);
}

void numberobj_83_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_83_value;
}

void numberobj_83_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_83_value_set(preset["value"]);
}

void random_07_nz_reset() {
    xoshiro_reset(
        systemticks() + this->voice() + this->random(0, 10000),
        this->random_07_nz_state
    );
}

void random_07_nz_init() {
    this->random_07_nz_reset();
}

void random_07_nz_seed(number v) {
    xoshiro_reset(v, this->random_07_nz_state);
}

number random_07_nz_next() {
    return xoshiro_next(this->random_07_nz_state);
}

void message_312_init() {
    this->message_312_set_set({3000});
}

void toggle_06_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_06_value_number;
}

void toggle_06_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_06_value_number_set(preset["value"]);
}

void transport_01_onTempoChanged(number state) {
    this->transport_01_outtempo_set(state);
}

void transport_01_onTransportChanged(number state) {
    this->transport_01_state_set(state);
}

void transport_01_onTimeSignatureChanged(number numerator, number denominator) {
    this->transport_01_outtimesig_set({numerator, denominator});
}

void numberobj_84_init() {
    this->numberobj_84_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-12"), 1, this->_currentTime);
}

void numberobj_84_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_84_value;
}

void numberobj_84_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_84_value_set(preset["value"]);
}

void toggle_07_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_07_value_number;
}

void toggle_07_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_07_value_number_set(preset["value"]);
}

void param_20_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_20_value;
}

void param_20_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_20_value_set(preset["value"]);
}

void lores_03_reset() {
    this->lores_03_y_1 = 0;
    this->lores_03_y_2 = 0;
    this->lores_03_last_resonance = 0;
    this->lores_03_last_frequency = 0;
    this->lores_03_last_res_calc = 0;
    this->lores_03_last_freq_calc = 0;
}

void lores_03_dspsetup(bool force) {
    if ((bool)(this->lores_03_setupDone) && (bool)(!(bool)(force)))
        return;

    this->lores_03_reset();
    this->lores_03_setupDone = true;
}

void numberobj_85_init() {
    this->numberobj_85_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-87"), 1, this->_currentTime);
}

void numberobj_85_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_85_value;
}

void numberobj_85_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_85_value_set(preset["value"]);
}

void param_21_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_21_value;
}

void param_21_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_21_value_set(preset["value"]);
}

void numberobj_86_init() {
    this->numberobj_86_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-17"), 1, this->_currentTime);
}

void numberobj_86_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_86_value;
}

void numberobj_86_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_86_value_set(preset["value"]);
}

void param_22_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_22_value;
}

void param_22_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_22_value_set(preset["value"]);
}

void numberobj_87_init() {
    this->numberobj_87_currentFormat = 6;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-70"), 1, this->_currentTime);
}

void numberobj_87_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_87_value;
}

void numberobj_87_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_87_value_set(preset["value"]);
}

void param_23_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_23_value;
}

void param_23_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_23_value_set(preset["value"]);
}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    number diffInBeats = diff * this->globaltransport_getTempo(time) * 0.008 / (number)480;
    return beatTimeBase + diffInBeats;
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample((SampleIndex)(offset)) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = (MillisecondTime)(this->sampstoms(sampleOffset));
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

void globaltransport_setBBUBase(
    MillisecondTime time,
    number numerator,
    number denominator,
    number bars,
    number beats,
    number units
) {
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    bars--;
    beats--;
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;

    while (units > beatLengthInUnits) {
        units -= beatLengthInUnits;
        beats++;
    }

    number targetBeatTime = bars * numerator + beats + units / beatLengthInUnits;
    this->globaltransport_bbuBase = targetBeatTime - beatsIncCurrenttDenom;
}

array<number, 3> globaltransport_getBBU(MillisecondTime time) {
    array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);
    number numerator = currentSig[0];
    number denominator = currentSig[1];
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;
    number targetBeatTime = beatsIncCurrenttDenom + this->globaltransport_bbuBase;
    number currentBars = 0;
    number currentBeats = 0;
    number currentUnits = 0;

    if (targetBeatTime >= 0) {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;
        currentBeats = trunc(targetBeatTime);
        targetBeatTime -= currentBeats;
        currentUnits = targetBeatTime * beatLengthInUnits;
    } else {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;

        if (targetBeatTime != 0) {
            currentBars -= 1;
            currentBeats = trunc(targetBeatTime);
            targetBeatTime -= currentBeats;
            currentBeats = numerator + currentBeats;
            currentUnits = targetBeatTime * beatLengthInUnits;

            if (currentUnits != 0) {
                currentUnits = beatLengthInUnits + currentUnits;
                currentBeats -= 1;
            }
        }
    }

    return {currentBars + 1, currentBeats + 1, currentUnits};
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            array<number, 3> bbu = this->globaltransport_getBBU(time);
            this->globaltransport_setBBUBase(time, numerator, denominator, bbu[0], bbu[1], bbu[2]);
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

array<number, 3> globaltransport_getBBUAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBBU(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setBBU(MillisecondTime time, number bars, number beats, number units, bool notify) {
    RNBO_UNUSED(notify);
    array<number, 2> sig = this->globaltransport_getTimeSignature(time);
    number numerator = sig[0];
    number denominator = sig[1];
    this->globaltransport_setBBUBase(time, numerator, denominator, bars, beats, units);
    return true;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    expr_39_in1 = 0;
    expr_39_in2 = 1920;
    expr_39_out1 = 0;
    expr_40_in1 = 0;
    expr_40_out1 = 0;
    translate_04_value = 0;
    numberobj_78_value = 0;
    numberobj_78_value_setter(numberobj_78_value);
    routepass_01_selector1 = 0;
    routepass_01_selector2 = 1;
    routepass_01_selector3 = 2;
    routepass_01_selector4 = 3;
    routepass_01_selector5 = 4;
    routepass_01_selector6 = 5;
    routepass_01_selector7 = 6;
    routepass_01_selector8 = 7;
    routepass_01_selector9 = 8;
    routepass_01_selector10 = 9;
    routepass_01_selector11 = 10;
    numberobj_79_value = 0;
    numberobj_79_value_setter(numberobj_79_value);
    expr_41_in1 = 0;
    expr_41_out1 = 0;
    expr_42_in1 = 0;
    expr_42_in2 = 2880;
    expr_42_out1 = 0;
    expr_43_in1 = 0;
    expr_43_in2 = 6;
    expr_43_out1 = 0;
    p_33_target = 0;
    numberobj_80_value = 0;
    numberobj_80_value_setter(numberobj_80_value);
    expr_44_in1 = 0;
    expr_44_in2 = 1280;
    expr_44_out1 = 0;
    expr_45_in1 = 0;
    expr_45_out1 = 0;
    expr_46_in1 = 0;
    expr_46_in2 = 11;
    expr_46_out1 = 0;
    gate_04_onoff = 0;
    gate_04_out1_number = 0;
    numberobj_81_value = 0;
    numberobj_81_value_setter(numberobj_81_value);
    param_18_value = 0;
    toggle_03_value_number = 0;
    toggle_03_value_number_setter(toggle_03_value_number);
    dspexpr_39_in1 = 0;
    dspexpr_39_in2 = 0.125;
    p_34_target = 0;
    p_35_target = 0;
    p_36_target = 0;
    toggle_04_value_number = 0;
    toggle_04_value_number_setter(toggle_04_value_number);
    metro_03_on = 1;
    metro_03_interval = 4000;
    metro_03_interval_setter(metro_03_interval);
    numberobj_82_value = 0;
    numberobj_82_value_setter(numberobj_82_value);
    param_19_value = 1;
    toggle_05_value_number = 0;
    toggle_05_value_number_setter(toggle_05_value_number);
    p_37_target = 0;
    numberobj_83_value = 0;
    numberobj_83_value_setter(numberobj_83_value);
    random_07_limit = 4;
    random_07_limit_setter(random_07_limit);
    random_07_seed = 0;
    send_08_input_number = 0;
    toggle_06_value_number = 0;
    toggle_06_value_number_setter(toggle_06_value_number);
    transport_01_input_number = 0;
    transport_01_position = 0;
    transport_01_tempo = 50;
    transport_01_ticks = 0;
    dspexpr_40_in1 = 0;
    dspexpr_40_in2 = 0;
    numberobj_84_value = 0;
    numberobj_84_value_setter(numberobj_84_value);
    toggle_07_value_number = 0;
    toggle_07_value_number_setter(toggle_07_value_number);
    param_20_value = 0;
    lores_03_cutoff = 4000;
    lores_03_resonance = 0.4;
    lores_03_resonance_setter(lores_03_resonance);
    p_38_target = 0;
    p_39_target = 0;
    numberobj_85_value = 0;
    numberobj_85_value_setter(numberobj_85_value);
    param_21_value = 1;
    numberobj_86_value = 0;
    numberobj_86_value_setter(numberobj_86_value);
    param_22_value = 4000;
    numberobj_87_value = 0;
    numberobj_87_value_setter(numberobj_87_value);
    param_23_value = 50;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    signals[2] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    numberobj_78_currentFormat = 6;
    numberobj_78_lastValue = 0;
    numberobj_79_currentFormat = 6;
    numberobj_79_lastValue = 0;
    numberobj_80_currentFormat = 6;
    numberobj_80_lastValue = 0;
    numberobj_81_currentFormat = 6;
    numberobj_81_lastValue = 0;
    param_18_lastValue = 0;
    toggle_03_lastValue = 0;
    toggle_04_lastValue = 0;
    metro_03_last = -1;
    metro_03_next = -1;
    numberobj_82_currentFormat = 6;
    numberobj_82_lastValue = 0;
    param_19_lastValue = 0;
    toggle_05_lastValue = 0;
    numberobj_83_currentFormat = 6;
    numberobj_83_lastValue = 0;
    toggle_06_lastValue = 0;
    numberobj_84_currentFormat = 6;
    numberobj_84_lastValue = 0;
    toggle_07_lastValue = 0;
    param_20_lastValue = 0;
    lores_03_setupDone = false;
    numberobj_85_currentFormat = 6;
    numberobj_85_lastValue = 0;
    param_21_lastValue = 0;
    numberobj_86_currentFormat = 6;
    numberobj_86_lastValue = 0;
    param_22_lastValue = 0;
    numberobj_87_currentFormat = 6;
    numberobj_87_lastValue = 0;
    param_23_lastValue = 0;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_bbuBase = 0;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    list message_311_set;
    number expr_39_in1;
    number expr_39_in2;
    number expr_39_out1;
    number expr_40_in1;
    number expr_40_out1;
    number translate_04_value;
    number numberobj_78_value;
    number routepass_01_selector1;
    number routepass_01_selector2;
    number routepass_01_selector3;
    number routepass_01_selector4;
    number routepass_01_selector5;
    number routepass_01_selector6;
    number routepass_01_selector7;
    number routepass_01_selector8;
    number routepass_01_selector9;
    number routepass_01_selector10;
    number routepass_01_selector11;
    number numberobj_79_value;
    number expr_41_in1;
    number expr_41_out1;
    number expr_42_in1;
    number expr_42_in2;
    number expr_42_out1;
    number expr_43_in1;
    number expr_43_in2;
    number expr_43_out1;
    number p_33_target;
    number numberobj_80_value;
    number expr_44_in1;
    number expr_44_in2;
    number expr_44_out1;
    number expr_45_in1;
    number expr_45_out1;
    number expr_46_in1;
    number expr_46_in2;
    number expr_46_out1;
    number gate_04_onoff;
    number gate_04_out1_number;
    list gate_04_out1_list;
    number numberobj_81_value;
    number param_18_value;
    number toggle_03_value_number;
    number dspexpr_39_in1;
    number dspexpr_39_in2;
    number p_34_target;
    number p_35_target;
    number p_36_target;
    number toggle_04_value_number;
    number metro_03_on;
    number metro_03_interval;
    number numberobj_82_value;
    number param_19_value;
    number toggle_05_value_number;
    number p_37_target;
    number numberobj_83_value;
    number random_07_limit;
    number random_07_seed;
    number send_08_input_number;
    list send_08_input_list;
    list message_312_set;
    number toggle_06_value_number;
    number transport_01_input_number;
    number transport_01_position;
    number transport_01_tempo;
    list transport_01_timesig;
    number transport_01_ticks;
    number dspexpr_40_in1;
    number dspexpr_40_in2;
    number numberobj_84_value;
    number toggle_07_value_number;
    number param_20_value;
    number lores_03_cutoff;
    number lores_03_resonance;
    number p_38_target;
    number p_39_target;
    number numberobj_85_value;
    number param_21_value;
    number numberobj_86_value;
    number param_22_value;
    number numberobj_87_value;
    number param_23_value;
    MillisecondTime _currentTime;
    UInt64 audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[3];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    Int numberobj_78_currentFormat;
    number numberobj_78_lastValue;
    Int numberobj_79_currentFormat;
    number numberobj_79_lastValue;
    Int numberobj_80_currentFormat;
    number numberobj_80_lastValue;
    Int numberobj_81_currentFormat;
    number numberobj_81_lastValue;
    number param_18_lastValue;
    number toggle_03_lastValue;
    number toggle_04_lastValue;
    MillisecondTime metro_03_last;
    MillisecondTime metro_03_next;
    Int numberobj_82_currentFormat;
    number numberobj_82_lastValue;
    number param_19_lastValue;
    number toggle_05_lastValue;
    Int numberobj_83_currentFormat;
    number numberobj_83_lastValue;
    UInt random_07_nz_state[4] = { };
    number toggle_06_lastValue;
    Int numberobj_84_currentFormat;
    number numberobj_84_lastValue;
    number toggle_07_lastValue;
    number param_20_lastValue;
    number lores_03_b_0;
    number lores_03_a_1;
    number lores_03_a_2;
    number lores_03_x_0;
    number lores_03_y_1;
    number lores_03_y_2;
    number lores_03_last_resonance;
    number lores_03_last_frequency;
    number lores_03_last_res_calc;
    number lores_03_last_freq_calc;
    bool lores_03_setupDone;
    Int numberobj_85_currentFormat;
    number numberobj_85_lastValue;
    number param_21_lastValue;
    Int numberobj_86_currentFormat;
    number numberobj_86_lastValue;
    number param_22_lastValue;
    Int numberobj_87_currentFormat;
    number numberobj_87_lastValue;
    number param_23_lastValue;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    number globaltransport_bbuBase;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef osc_wavetable_buf;
    DataRef RNBODefaultSinus;
    DataRef RNBODefaultMtofLookupTable256;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_173* p_33;
    RNBOSubpatcher_174* p_34;
    RNBOSubpatcher_175* p_35;
    RNBOSubpatcher_176* p_36;
    RNBOSubpatcher_177* p_37;
    RNBOSubpatcher_178* p_38;
    RNBOSubpatcher_179* p_39;

};

PatcherInterface* creaternbomatic()
{
    return new rnbomatic();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr rnbomaticFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return creaternbomatic;
}

} // end RNBO namespace

