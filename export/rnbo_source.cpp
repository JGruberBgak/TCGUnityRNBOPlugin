/*******************************************************************************************************************
Copyright (c) 2023 Cycling '74

The code that Max generates automatically and that end users are capable of
exporting and using, and any associated documentation files (the “Software”)
is a work of authorship for which Cycling '74 is the author and owner for
copyright purposes.

This Software is dual-licensed either under the terms of the Cycling '74
License for Max-Generated Code for Export, or alternatively under the terms
of the General Public License (GPL) Version 3. You may use the Software
according to either of these licenses as it is most appropriate for your
project on a case-by-case basis (proprietary or not).

A) Cycling '74 License for Max-Generated Code for Export

A license is hereby granted, free of charge, to any person obtaining a copy
of the Software (“Licensee”) to use, copy, modify, merge, publish, and
distribute copies of the Software, and to permit persons to whom the Software
is furnished to do so, subject to the following conditions:

The Software is licensed to Licensee for all uses that do not include the sale,
sublicensing, or commercial distribution of software that incorporates this
source code. This means that the Licensee is free to use this software for
educational, research, and prototyping purposes, to create musical or other
creative works with software that incorporates this source code, or any other
use that does not constitute selling software that makes use of this source
code. Commercial distribution also includes the packaging of free software with
other paid software, hardware, or software-provided commercial services.

For entities with UNDER $200k in annual revenue or funding, a license is hereby
granted, free of charge, for the sale, sublicensing, or commercial distribution
of software that incorporates this source code, for as long as the entity's
annual revenue remains below $200k annual revenue or funding.

For entities with OVER $200k in annual revenue or funding interested in the
sale, sublicensing, or commercial distribution of software that incorporates
this source code, please send inquiries to licensing@cycling74.com.

The above copyright notice and this license shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Please see
https://support.cycling74.com/hc/en-us/articles/10730637742483-RNBO-Export-Licensing-FAQ
for additional information

B) General Public License Version 3 (GPLv3)
Details of the GPLv3 license can be found at: https://www.gnu.org/licenses/gpl-3.0.html
*******************************************************************************************************************/

#include "RNBO_Common.h"
#include "RNBO_AudioSignal.h"

namespace RNBO {


#define trunc(x) ((Int)(x))

#if defined(__GNUC__) || defined(__clang__)
    #define RNBO_RESTRICT __restrict__
#elif defined(_MSC_VER)
    #define RNBO_RESTRICT __restrict
#endif

#define FIXEDSIZEARRAYINIT(...) { }

class rnbomatic : public PatcherInterfaceImpl {
public:

class RNBOSubpatcher_98 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_82 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_98;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_82()
            {
            }
            
            ~RNBOSubpatcher_82()
            {
            }
            
            virtual RNBOSubpatcher_98* getPatcher() const {
                return static_cast<RNBOSubpatcher_98 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_01_perform(
                    in2,
                    this->rampsmooth_tilde_01_up,
                    this->rampsmooth_tilde_01_down,
                    this->signals[0],
                    n
                );
            
                this->gen_01_perform(in1, this->signals[0], this->gen_01_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_01_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_01_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_01_out1_bang_bang() {}
            
            void eventinlet_01_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_01_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_01_phase_init();
                this->gen_01_h1_init();
                this->gen_01_h2_init();
                this->gen_01_oldsr_init();
                this->gen_01_freq_init();
                this->gen_01_os_init();
                this->gen_01_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_01_osc_wavetable_buf = this->gen_01_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_01_framesize_set(number v) {
                this->gen_01_framesize = v;
            }
            
            void eventinlet_01_out1_number_set(number v) {
                this->gen_01_framesize_set(v);
            }
            
            void rampsmooth_tilde_01_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_01_increment = this->rampsmooth_tilde_01_increment;
                auto __rampsmooth_tilde_01_index = this->rampsmooth_tilde_01_index;
                auto __rampsmooth_tilde_01_prev = this->rampsmooth_tilde_01_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_01_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_01_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_01_index = _up;
                            __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_01_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_01_index = _down;
                            __rampsmooth_tilde_01_increment = (x[(Index)i] - __rampsmooth_tilde_01_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_01_index > 0) {
                        __rampsmooth_tilde_01_prev += __rampsmooth_tilde_01_increment;
                        __rampsmooth_tilde_01_index -= 1;
                    } else {
                        __rampsmooth_tilde_01_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_01_prev;
                }
            
                this->rampsmooth_tilde_01_prev = __rampsmooth_tilde_01_prev;
                this->rampsmooth_tilde_01_index = __rampsmooth_tilde_01_index;
                this->rampsmooth_tilde_01_increment = __rampsmooth_tilde_01_increment;
            }
            
            void gen_01_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_01_h1_value = this->gen_01_h1_value;
                auto __gen_01_h2_value = this->gen_01_h2_value;
                auto __gen_01_phase_value = this->gen_01_phase_value;
                auto __gen_01_realsr_value = this->gen_01_realsr_value;
                auto __gen_01_os_value = this->gen_01_os_value;
                auto __gen_01_freq_value = this->gen_01_freq_value;
                auto __gen_01_oldsr_value = this->gen_01_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_01_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_01_osc_wavetable_buf));
            
                    if (__gen_01_oldsr_value != this->samplerate() || __gen_01_freq_value != in1[(Index)i0]) {
                        __gen_01_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_01_os_value == 0) {
                            __gen_01_os_value = 1;
                        }
            
                        __gen_01_realsr_value = this->samplerate() * __gen_01_os_value;
                        __gen_01_oldsr_value = this->samplerate();
                        __gen_01_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_01_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_01_phase_value, 0, 1);
            
                        __gen_01_phase_value = fixdenorm(
                            t_1 + ((__gen_01_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_01_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_01_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_01_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_01_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_01_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_01_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_01_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_01_h2_value * a1_26 + __gen_01_h1_value * a2_25 - (__gen_01_h1_value * b2_28 + __gen_01_h2_value * b1_27);
                        __gen_01_h1_value = fixdenorm(__gen_01_h2_value);
                        __gen_01_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_01_oldsr_value = __gen_01_oldsr_value;
                this->gen_01_freq_value = __gen_01_freq_value;
                this->gen_01_os_value = __gen_01_os_value;
                this->gen_01_realsr_value = __gen_01_realsr_value;
                this->gen_01_phase_value = __gen_01_phase_value;
                this->gen_01_h2_value = __gen_01_h2_value;
                this->gen_01_h1_value = __gen_01_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_01_phase_getvalue() {
                return this->gen_01_phase_value;
            }
            
            void gen_01_phase_setvalue(number val) {
                this->gen_01_phase_value = val;
            }
            
            void gen_01_phase_reset() {
                this->gen_01_phase_value = 0;
            }
            
            void gen_01_phase_init() {
                this->gen_01_phase_value = 0;
            }
            
            number gen_01_h1_getvalue() {
                return this->gen_01_h1_value;
            }
            
            void gen_01_h1_setvalue(number val) {
                this->gen_01_h1_value = val;
            }
            
            void gen_01_h1_reset() {
                this->gen_01_h1_value = 0;
            }
            
            void gen_01_h1_init() {
                this->gen_01_h1_value = 0;
            }
            
            number gen_01_h2_getvalue() {
                return this->gen_01_h2_value;
            }
            
            void gen_01_h2_setvalue(number val) {
                this->gen_01_h2_value = val;
            }
            
            void gen_01_h2_reset() {
                this->gen_01_h2_value = 0;
            }
            
            void gen_01_h2_init() {
                this->gen_01_h2_value = 0;
            }
            
            number gen_01_oldsr_getvalue() {
                return this->gen_01_oldsr_value;
            }
            
            void gen_01_oldsr_setvalue(number val) {
                this->gen_01_oldsr_value = val;
            }
            
            void gen_01_oldsr_reset() {
                this->gen_01_oldsr_value = 0;
            }
            
            void gen_01_oldsr_init() {
                this->gen_01_oldsr_value = 0;
            }
            
            number gen_01_freq_getvalue() {
                return this->gen_01_freq_value;
            }
            
            void gen_01_freq_setvalue(number val) {
                this->gen_01_freq_value = val;
            }
            
            void gen_01_freq_reset() {
                this->gen_01_freq_value = 0;
            }
            
            void gen_01_freq_init() {
                this->gen_01_freq_value = 0;
            }
            
            number gen_01_os_getvalue() {
                return this->gen_01_os_value;
            }
            
            void gen_01_os_setvalue(number val) {
                this->gen_01_os_value = val;
            }
            
            void gen_01_os_reset() {
                this->gen_01_os_value = 0;
            }
            
            void gen_01_os_init() {
                this->gen_01_os_value = 4;
            }
            
            number gen_01_realsr_getvalue() {
                return this->gen_01_realsr_value;
            }
            
            void gen_01_realsr_setvalue(number val) {
                this->gen_01_realsr_value = val;
            }
            
            void gen_01_realsr_reset() {
                this->gen_01_realsr_value = 0;
            }
            
            void gen_01_realsr_init() {
                this->gen_01_realsr_value = 0;
            }
            
            number rampsmooth_tilde_01_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_01_d_prev);
                this->rampsmooth_tilde_01_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_01_d_dspsetup() {
                this->rampsmooth_tilde_01_d_reset();
            }
            
            void rampsmooth_tilde_01_d_reset() {
                this->rampsmooth_tilde_01_d_prev = 0;
            }
            
            void rampsmooth_tilde_01_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_01_setupDone = true;
                this->rampsmooth_tilde_01_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_01_in1 = 0;
                gen_01_in2 = 0;
                gen_01_framesize = 256;
                rampsmooth_tilde_01_x = 0;
                rampsmooth_tilde_01_up = 1000;
                rampsmooth_tilde_01_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_01_phase_value = 0;
                gen_01_h1_value = 0;
                gen_01_h2_value = 0;
                gen_01_oldsr_value = 0;
                gen_01_freq_value = 0;
                gen_01_os_value = 0;
                gen_01_realsr_value = 0;
                rampsmooth_tilde_01_prev = 0;
                rampsmooth_tilde_01_index = 0;
                rampsmooth_tilde_01_increment = 0;
                rampsmooth_tilde_01_d_prev = 0;
                rampsmooth_tilde_01_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_01_in1;
                number gen_01_in2;
                number gen_01_framesize;
                number rampsmooth_tilde_01_x;
                number rampsmooth_tilde_01_up;
                number rampsmooth_tilde_01_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_01_phase_value;
                number gen_01_h1_value;
                number gen_01_h2_value;
                number gen_01_oldsr_value;
                number gen_01_freq_value;
                number gen_01_os_value;
                number gen_01_realsr_value;
                Float32BufferRef gen_01_osc_wavetable_buf;
                number rampsmooth_tilde_01_prev;
                number rampsmooth_tilde_01_index;
                number rampsmooth_tilde_01_increment;
                number rampsmooth_tilde_01_d_prev;
                bool rampsmooth_tilde_01_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_83 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_98;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_83()
            {
            }
            
            ~RNBOSubpatcher_83()
            {
            }
            
            virtual RNBOSubpatcher_98* getPatcher() const {
                return static_cast<RNBOSubpatcher_98 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_02_perform(
                    in2,
                    this->rampsmooth_tilde_02_up,
                    this->rampsmooth_tilde_02_down,
                    this->signals[0],
                    n
                );
            
                this->gen_02_perform(in1, this->signals[0], this->gen_02_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_02_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_02_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_02_out1_bang_bang() {}
            
            void eventinlet_02_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_02_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_02_phase_init();
                this->gen_02_h1_init();
                this->gen_02_h2_init();
                this->gen_02_oldsr_init();
                this->gen_02_freq_init();
                this->gen_02_os_init();
                this->gen_02_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_02_osc_wavetable_buf = this->gen_02_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_02_framesize_set(number v) {
                this->gen_02_framesize = v;
            }
            
            void eventinlet_02_out1_number_set(number v) {
                this->gen_02_framesize_set(v);
            }
            
            void rampsmooth_tilde_02_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_02_increment = this->rampsmooth_tilde_02_increment;
                auto __rampsmooth_tilde_02_index = this->rampsmooth_tilde_02_index;
                auto __rampsmooth_tilde_02_prev = this->rampsmooth_tilde_02_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_02_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_02_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_02_index = _up;
                            __rampsmooth_tilde_02_increment = (x[(Index)i] - __rampsmooth_tilde_02_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_02_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_02_index = _down;
                            __rampsmooth_tilde_02_increment = (x[(Index)i] - __rampsmooth_tilde_02_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_02_index > 0) {
                        __rampsmooth_tilde_02_prev += __rampsmooth_tilde_02_increment;
                        __rampsmooth_tilde_02_index -= 1;
                    } else {
                        __rampsmooth_tilde_02_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_02_prev;
                }
            
                this->rampsmooth_tilde_02_prev = __rampsmooth_tilde_02_prev;
                this->rampsmooth_tilde_02_index = __rampsmooth_tilde_02_index;
                this->rampsmooth_tilde_02_increment = __rampsmooth_tilde_02_increment;
            }
            
            void gen_02_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_02_h1_value = this->gen_02_h1_value;
                auto __gen_02_h2_value = this->gen_02_h2_value;
                auto __gen_02_phase_value = this->gen_02_phase_value;
                auto __gen_02_realsr_value = this->gen_02_realsr_value;
                auto __gen_02_os_value = this->gen_02_os_value;
                auto __gen_02_freq_value = this->gen_02_freq_value;
                auto __gen_02_oldsr_value = this->gen_02_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_02_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_02_osc_wavetable_buf));
            
                    if (__gen_02_oldsr_value != this->samplerate() || __gen_02_freq_value != in1[(Index)i0]) {
                        __gen_02_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_02_os_value == 0) {
                            __gen_02_os_value = 1;
                        }
            
                        __gen_02_realsr_value = this->samplerate() * __gen_02_os_value;
                        __gen_02_oldsr_value = this->samplerate();
                        __gen_02_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_02_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_02_phase_value, 0, 1);
            
                        __gen_02_phase_value = fixdenorm(
                            t_1 + ((__gen_02_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_02_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_02_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_02_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_02_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_02_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_02_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_02_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_02_h2_value * a1_26 + __gen_02_h1_value * a2_25 - (__gen_02_h1_value * b2_28 + __gen_02_h2_value * b1_27);
                        __gen_02_h1_value = fixdenorm(__gen_02_h2_value);
                        __gen_02_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_02_oldsr_value = __gen_02_oldsr_value;
                this->gen_02_freq_value = __gen_02_freq_value;
                this->gen_02_os_value = __gen_02_os_value;
                this->gen_02_realsr_value = __gen_02_realsr_value;
                this->gen_02_phase_value = __gen_02_phase_value;
                this->gen_02_h2_value = __gen_02_h2_value;
                this->gen_02_h1_value = __gen_02_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_02_phase_getvalue() {
                return this->gen_02_phase_value;
            }
            
            void gen_02_phase_setvalue(number val) {
                this->gen_02_phase_value = val;
            }
            
            void gen_02_phase_reset() {
                this->gen_02_phase_value = 0;
            }
            
            void gen_02_phase_init() {
                this->gen_02_phase_value = 0;
            }
            
            number gen_02_h1_getvalue() {
                return this->gen_02_h1_value;
            }
            
            void gen_02_h1_setvalue(number val) {
                this->gen_02_h1_value = val;
            }
            
            void gen_02_h1_reset() {
                this->gen_02_h1_value = 0;
            }
            
            void gen_02_h1_init() {
                this->gen_02_h1_value = 0;
            }
            
            number gen_02_h2_getvalue() {
                return this->gen_02_h2_value;
            }
            
            void gen_02_h2_setvalue(number val) {
                this->gen_02_h2_value = val;
            }
            
            void gen_02_h2_reset() {
                this->gen_02_h2_value = 0;
            }
            
            void gen_02_h2_init() {
                this->gen_02_h2_value = 0;
            }
            
            number gen_02_oldsr_getvalue() {
                return this->gen_02_oldsr_value;
            }
            
            void gen_02_oldsr_setvalue(number val) {
                this->gen_02_oldsr_value = val;
            }
            
            void gen_02_oldsr_reset() {
                this->gen_02_oldsr_value = 0;
            }
            
            void gen_02_oldsr_init() {
                this->gen_02_oldsr_value = 0;
            }
            
            number gen_02_freq_getvalue() {
                return this->gen_02_freq_value;
            }
            
            void gen_02_freq_setvalue(number val) {
                this->gen_02_freq_value = val;
            }
            
            void gen_02_freq_reset() {
                this->gen_02_freq_value = 0;
            }
            
            void gen_02_freq_init() {
                this->gen_02_freq_value = 0;
            }
            
            number gen_02_os_getvalue() {
                return this->gen_02_os_value;
            }
            
            void gen_02_os_setvalue(number val) {
                this->gen_02_os_value = val;
            }
            
            void gen_02_os_reset() {
                this->gen_02_os_value = 0;
            }
            
            void gen_02_os_init() {
                this->gen_02_os_value = 4;
            }
            
            number gen_02_realsr_getvalue() {
                return this->gen_02_realsr_value;
            }
            
            void gen_02_realsr_setvalue(number val) {
                this->gen_02_realsr_value = val;
            }
            
            void gen_02_realsr_reset() {
                this->gen_02_realsr_value = 0;
            }
            
            void gen_02_realsr_init() {
                this->gen_02_realsr_value = 0;
            }
            
            number rampsmooth_tilde_02_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_02_d_prev);
                this->rampsmooth_tilde_02_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_02_d_dspsetup() {
                this->rampsmooth_tilde_02_d_reset();
            }
            
            void rampsmooth_tilde_02_d_reset() {
                this->rampsmooth_tilde_02_d_prev = 0;
            }
            
            void rampsmooth_tilde_02_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_02_setupDone = true;
                this->rampsmooth_tilde_02_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_02_in1 = 0;
                gen_02_in2 = 0;
                gen_02_framesize = 256;
                rampsmooth_tilde_02_x = 0;
                rampsmooth_tilde_02_up = 1000;
                rampsmooth_tilde_02_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_02_phase_value = 0;
                gen_02_h1_value = 0;
                gen_02_h2_value = 0;
                gen_02_oldsr_value = 0;
                gen_02_freq_value = 0;
                gen_02_os_value = 0;
                gen_02_realsr_value = 0;
                rampsmooth_tilde_02_prev = 0;
                rampsmooth_tilde_02_index = 0;
                rampsmooth_tilde_02_increment = 0;
                rampsmooth_tilde_02_d_prev = 0;
                rampsmooth_tilde_02_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_02_in1;
                number gen_02_in2;
                number gen_02_framesize;
                number rampsmooth_tilde_02_x;
                number rampsmooth_tilde_02_up;
                number rampsmooth_tilde_02_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_02_phase_value;
                number gen_02_h1_value;
                number gen_02_h2_value;
                number gen_02_oldsr_value;
                number gen_02_freq_value;
                number gen_02_os_value;
                number gen_02_realsr_value;
                Float32BufferRef gen_02_osc_wavetable_buf;
                number rampsmooth_tilde_02_prev;
                number rampsmooth_tilde_02_index;
                number rampsmooth_tilde_02_increment;
                number rampsmooth_tilde_02_d_prev;
                bool rampsmooth_tilde_02_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_84 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_98;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_84()
            {
            }
            
            ~RNBOSubpatcher_84()
            {
            }
            
            virtual RNBOSubpatcher_98* getPatcher() const {
                return static_cast<RNBOSubpatcher_98 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_03_perform(
                    in2,
                    this->rampsmooth_tilde_03_up,
                    this->rampsmooth_tilde_03_down,
                    this->signals[0],
                    n
                );
            
                this->gen_03_perform(in1, this->signals[0], this->gen_03_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_03_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_03_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_03_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_03_out1_bang_bang() {}
            
            void eventinlet_03_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_03_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_03_phase_init();
                this->gen_03_h1_init();
                this->gen_03_h2_init();
                this->gen_03_oldsr_init();
                this->gen_03_freq_init();
                this->gen_03_os_init();
                this->gen_03_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_03_osc_wavetable_buf = this->gen_03_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_03_framesize_set(number v) {
                this->gen_03_framesize = v;
            }
            
            void eventinlet_03_out1_number_set(number v) {
                this->gen_03_framesize_set(v);
            }
            
            void rampsmooth_tilde_03_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_03_increment = this->rampsmooth_tilde_03_increment;
                auto __rampsmooth_tilde_03_index = this->rampsmooth_tilde_03_index;
                auto __rampsmooth_tilde_03_prev = this->rampsmooth_tilde_03_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_03_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_03_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_03_index = _up;
                            __rampsmooth_tilde_03_increment = (x[(Index)i] - __rampsmooth_tilde_03_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_03_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_03_index = _down;
                            __rampsmooth_tilde_03_increment = (x[(Index)i] - __rampsmooth_tilde_03_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_03_index > 0) {
                        __rampsmooth_tilde_03_prev += __rampsmooth_tilde_03_increment;
                        __rampsmooth_tilde_03_index -= 1;
                    } else {
                        __rampsmooth_tilde_03_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_03_prev;
                }
            
                this->rampsmooth_tilde_03_prev = __rampsmooth_tilde_03_prev;
                this->rampsmooth_tilde_03_index = __rampsmooth_tilde_03_index;
                this->rampsmooth_tilde_03_increment = __rampsmooth_tilde_03_increment;
            }
            
            void gen_03_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_03_h1_value = this->gen_03_h1_value;
                auto __gen_03_h2_value = this->gen_03_h2_value;
                auto __gen_03_phase_value = this->gen_03_phase_value;
                auto __gen_03_realsr_value = this->gen_03_realsr_value;
                auto __gen_03_os_value = this->gen_03_os_value;
                auto __gen_03_freq_value = this->gen_03_freq_value;
                auto __gen_03_oldsr_value = this->gen_03_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_03_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_03_osc_wavetable_buf));
            
                    if (__gen_03_oldsr_value != this->samplerate() || __gen_03_freq_value != in1[(Index)i0]) {
                        __gen_03_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_03_os_value == 0) {
                            __gen_03_os_value = 1;
                        }
            
                        __gen_03_realsr_value = this->samplerate() * __gen_03_os_value;
                        __gen_03_oldsr_value = this->samplerate();
                        __gen_03_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_03_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_03_phase_value, 0, 1);
            
                        __gen_03_phase_value = fixdenorm(
                            t_1 + ((__gen_03_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_03_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_03_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_03_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_03_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_03_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_03_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_03_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_03_h2_value * a1_26 + __gen_03_h1_value * a2_25 - (__gen_03_h1_value * b2_28 + __gen_03_h2_value * b1_27);
                        __gen_03_h1_value = fixdenorm(__gen_03_h2_value);
                        __gen_03_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_03_oldsr_value = __gen_03_oldsr_value;
                this->gen_03_freq_value = __gen_03_freq_value;
                this->gen_03_os_value = __gen_03_os_value;
                this->gen_03_realsr_value = __gen_03_realsr_value;
                this->gen_03_phase_value = __gen_03_phase_value;
                this->gen_03_h2_value = __gen_03_h2_value;
                this->gen_03_h1_value = __gen_03_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_03_phase_getvalue() {
                return this->gen_03_phase_value;
            }
            
            void gen_03_phase_setvalue(number val) {
                this->gen_03_phase_value = val;
            }
            
            void gen_03_phase_reset() {
                this->gen_03_phase_value = 0;
            }
            
            void gen_03_phase_init() {
                this->gen_03_phase_value = 0;
            }
            
            number gen_03_h1_getvalue() {
                return this->gen_03_h1_value;
            }
            
            void gen_03_h1_setvalue(number val) {
                this->gen_03_h1_value = val;
            }
            
            void gen_03_h1_reset() {
                this->gen_03_h1_value = 0;
            }
            
            void gen_03_h1_init() {
                this->gen_03_h1_value = 0;
            }
            
            number gen_03_h2_getvalue() {
                return this->gen_03_h2_value;
            }
            
            void gen_03_h2_setvalue(number val) {
                this->gen_03_h2_value = val;
            }
            
            void gen_03_h2_reset() {
                this->gen_03_h2_value = 0;
            }
            
            void gen_03_h2_init() {
                this->gen_03_h2_value = 0;
            }
            
            number gen_03_oldsr_getvalue() {
                return this->gen_03_oldsr_value;
            }
            
            void gen_03_oldsr_setvalue(number val) {
                this->gen_03_oldsr_value = val;
            }
            
            void gen_03_oldsr_reset() {
                this->gen_03_oldsr_value = 0;
            }
            
            void gen_03_oldsr_init() {
                this->gen_03_oldsr_value = 0;
            }
            
            number gen_03_freq_getvalue() {
                return this->gen_03_freq_value;
            }
            
            void gen_03_freq_setvalue(number val) {
                this->gen_03_freq_value = val;
            }
            
            void gen_03_freq_reset() {
                this->gen_03_freq_value = 0;
            }
            
            void gen_03_freq_init() {
                this->gen_03_freq_value = 0;
            }
            
            number gen_03_os_getvalue() {
                return this->gen_03_os_value;
            }
            
            void gen_03_os_setvalue(number val) {
                this->gen_03_os_value = val;
            }
            
            void gen_03_os_reset() {
                this->gen_03_os_value = 0;
            }
            
            void gen_03_os_init() {
                this->gen_03_os_value = 4;
            }
            
            number gen_03_realsr_getvalue() {
                return this->gen_03_realsr_value;
            }
            
            void gen_03_realsr_setvalue(number val) {
                this->gen_03_realsr_value = val;
            }
            
            void gen_03_realsr_reset() {
                this->gen_03_realsr_value = 0;
            }
            
            void gen_03_realsr_init() {
                this->gen_03_realsr_value = 0;
            }
            
            number rampsmooth_tilde_03_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_03_d_prev);
                this->rampsmooth_tilde_03_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_03_d_dspsetup() {
                this->rampsmooth_tilde_03_d_reset();
            }
            
            void rampsmooth_tilde_03_d_reset() {
                this->rampsmooth_tilde_03_d_prev = 0;
            }
            
            void rampsmooth_tilde_03_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_03_setupDone = true;
                this->rampsmooth_tilde_03_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_03_in1 = 0;
                gen_03_in2 = 0;
                gen_03_framesize = 256;
                rampsmooth_tilde_03_x = 0;
                rampsmooth_tilde_03_up = 1000;
                rampsmooth_tilde_03_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_03_phase_value = 0;
                gen_03_h1_value = 0;
                gen_03_h2_value = 0;
                gen_03_oldsr_value = 0;
                gen_03_freq_value = 0;
                gen_03_os_value = 0;
                gen_03_realsr_value = 0;
                rampsmooth_tilde_03_prev = 0;
                rampsmooth_tilde_03_index = 0;
                rampsmooth_tilde_03_increment = 0;
                rampsmooth_tilde_03_d_prev = 0;
                rampsmooth_tilde_03_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_03_in1;
                number gen_03_in2;
                number gen_03_framesize;
                number rampsmooth_tilde_03_x;
                number rampsmooth_tilde_03_up;
                number rampsmooth_tilde_03_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_03_phase_value;
                number gen_03_h1_value;
                number gen_03_h2_value;
                number gen_03_oldsr_value;
                number gen_03_freq_value;
                number gen_03_os_value;
                number gen_03_realsr_value;
                Float32BufferRef gen_03_osc_wavetable_buf;
                number rampsmooth_tilde_03_prev;
                number rampsmooth_tilde_03_index;
                number rampsmooth_tilde_03_increment;
                number rampsmooth_tilde_03_d_prev;
                bool rampsmooth_tilde_03_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_85 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_98;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_85()
            {
            }
            
            ~RNBOSubpatcher_85()
            {
            }
            
            virtual RNBOSubpatcher_98* getPatcher() const {
                return static_cast<RNBOSubpatcher_98 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_04_perform(
                    in2,
                    this->rampsmooth_tilde_04_up,
                    this->rampsmooth_tilde_04_down,
                    this->signals[0],
                    n
                );
            
                this->gen_04_perform(in1, this->signals[0], this->gen_04_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_04_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_04_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_04_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_04_out1_bang_bang() {}
            
            void eventinlet_04_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_04_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_04_phase_init();
                this->gen_04_h1_init();
                this->gen_04_h2_init();
                this->gen_04_oldsr_init();
                this->gen_04_freq_init();
                this->gen_04_os_init();
                this->gen_04_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_04_osc_wavetable_buf = this->gen_04_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_04_framesize_set(number v) {
                this->gen_04_framesize = v;
            }
            
            void eventinlet_04_out1_number_set(number v) {
                this->gen_04_framesize_set(v);
            }
            
            void rampsmooth_tilde_04_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_04_increment = this->rampsmooth_tilde_04_increment;
                auto __rampsmooth_tilde_04_index = this->rampsmooth_tilde_04_index;
                auto __rampsmooth_tilde_04_prev = this->rampsmooth_tilde_04_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_04_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_04_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_04_index = _up;
                            __rampsmooth_tilde_04_increment = (x[(Index)i] - __rampsmooth_tilde_04_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_04_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_04_index = _down;
                            __rampsmooth_tilde_04_increment = (x[(Index)i] - __rampsmooth_tilde_04_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_04_index > 0) {
                        __rampsmooth_tilde_04_prev += __rampsmooth_tilde_04_increment;
                        __rampsmooth_tilde_04_index -= 1;
                    } else {
                        __rampsmooth_tilde_04_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_04_prev;
                }
            
                this->rampsmooth_tilde_04_prev = __rampsmooth_tilde_04_prev;
                this->rampsmooth_tilde_04_index = __rampsmooth_tilde_04_index;
                this->rampsmooth_tilde_04_increment = __rampsmooth_tilde_04_increment;
            }
            
            void gen_04_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_04_h1_value = this->gen_04_h1_value;
                auto __gen_04_h2_value = this->gen_04_h2_value;
                auto __gen_04_phase_value = this->gen_04_phase_value;
                auto __gen_04_realsr_value = this->gen_04_realsr_value;
                auto __gen_04_os_value = this->gen_04_os_value;
                auto __gen_04_freq_value = this->gen_04_freq_value;
                auto __gen_04_oldsr_value = this->gen_04_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_04_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_04_osc_wavetable_buf));
            
                    if (__gen_04_oldsr_value != this->samplerate() || __gen_04_freq_value != in1[(Index)i0]) {
                        __gen_04_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_04_os_value == 0) {
                            __gen_04_os_value = 1;
                        }
            
                        __gen_04_realsr_value = this->samplerate() * __gen_04_os_value;
                        __gen_04_oldsr_value = this->samplerate();
                        __gen_04_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_04_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_04_phase_value, 0, 1);
            
                        __gen_04_phase_value = fixdenorm(
                            t_1 + ((__gen_04_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_04_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_04_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_04_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_04_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_04_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_04_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_04_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_04_h2_value * a1_26 + __gen_04_h1_value * a2_25 - (__gen_04_h1_value * b2_28 + __gen_04_h2_value * b1_27);
                        __gen_04_h1_value = fixdenorm(__gen_04_h2_value);
                        __gen_04_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_04_oldsr_value = __gen_04_oldsr_value;
                this->gen_04_freq_value = __gen_04_freq_value;
                this->gen_04_os_value = __gen_04_os_value;
                this->gen_04_realsr_value = __gen_04_realsr_value;
                this->gen_04_phase_value = __gen_04_phase_value;
                this->gen_04_h2_value = __gen_04_h2_value;
                this->gen_04_h1_value = __gen_04_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_04_phase_getvalue() {
                return this->gen_04_phase_value;
            }
            
            void gen_04_phase_setvalue(number val) {
                this->gen_04_phase_value = val;
            }
            
            void gen_04_phase_reset() {
                this->gen_04_phase_value = 0;
            }
            
            void gen_04_phase_init() {
                this->gen_04_phase_value = 0;
            }
            
            number gen_04_h1_getvalue() {
                return this->gen_04_h1_value;
            }
            
            void gen_04_h1_setvalue(number val) {
                this->gen_04_h1_value = val;
            }
            
            void gen_04_h1_reset() {
                this->gen_04_h1_value = 0;
            }
            
            void gen_04_h1_init() {
                this->gen_04_h1_value = 0;
            }
            
            number gen_04_h2_getvalue() {
                return this->gen_04_h2_value;
            }
            
            void gen_04_h2_setvalue(number val) {
                this->gen_04_h2_value = val;
            }
            
            void gen_04_h2_reset() {
                this->gen_04_h2_value = 0;
            }
            
            void gen_04_h2_init() {
                this->gen_04_h2_value = 0;
            }
            
            number gen_04_oldsr_getvalue() {
                return this->gen_04_oldsr_value;
            }
            
            void gen_04_oldsr_setvalue(number val) {
                this->gen_04_oldsr_value = val;
            }
            
            void gen_04_oldsr_reset() {
                this->gen_04_oldsr_value = 0;
            }
            
            void gen_04_oldsr_init() {
                this->gen_04_oldsr_value = 0;
            }
            
            number gen_04_freq_getvalue() {
                return this->gen_04_freq_value;
            }
            
            void gen_04_freq_setvalue(number val) {
                this->gen_04_freq_value = val;
            }
            
            void gen_04_freq_reset() {
                this->gen_04_freq_value = 0;
            }
            
            void gen_04_freq_init() {
                this->gen_04_freq_value = 0;
            }
            
            number gen_04_os_getvalue() {
                return this->gen_04_os_value;
            }
            
            void gen_04_os_setvalue(number val) {
                this->gen_04_os_value = val;
            }
            
            void gen_04_os_reset() {
                this->gen_04_os_value = 0;
            }
            
            void gen_04_os_init() {
                this->gen_04_os_value = 4;
            }
            
            number gen_04_realsr_getvalue() {
                return this->gen_04_realsr_value;
            }
            
            void gen_04_realsr_setvalue(number val) {
                this->gen_04_realsr_value = val;
            }
            
            void gen_04_realsr_reset() {
                this->gen_04_realsr_value = 0;
            }
            
            void gen_04_realsr_init() {
                this->gen_04_realsr_value = 0;
            }
            
            number rampsmooth_tilde_04_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_04_d_prev);
                this->rampsmooth_tilde_04_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_04_d_dspsetup() {
                this->rampsmooth_tilde_04_d_reset();
            }
            
            void rampsmooth_tilde_04_d_reset() {
                this->rampsmooth_tilde_04_d_prev = 0;
            }
            
            void rampsmooth_tilde_04_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_04_setupDone = true;
                this->rampsmooth_tilde_04_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_04_in1 = 0;
                gen_04_in2 = 0;
                gen_04_framesize = 256;
                rampsmooth_tilde_04_x = 0;
                rampsmooth_tilde_04_up = 1000;
                rampsmooth_tilde_04_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_04_phase_value = 0;
                gen_04_h1_value = 0;
                gen_04_h2_value = 0;
                gen_04_oldsr_value = 0;
                gen_04_freq_value = 0;
                gen_04_os_value = 0;
                gen_04_realsr_value = 0;
                rampsmooth_tilde_04_prev = 0;
                rampsmooth_tilde_04_index = 0;
                rampsmooth_tilde_04_increment = 0;
                rampsmooth_tilde_04_d_prev = 0;
                rampsmooth_tilde_04_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_04_in1;
                number gen_04_in2;
                number gen_04_framesize;
                number rampsmooth_tilde_04_x;
                number rampsmooth_tilde_04_up;
                number rampsmooth_tilde_04_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_04_phase_value;
                number gen_04_h1_value;
                number gen_04_h2_value;
                number gen_04_oldsr_value;
                number gen_04_freq_value;
                number gen_04_os_value;
                number gen_04_realsr_value;
                Float32BufferRef gen_04_osc_wavetable_buf;
                number rampsmooth_tilde_04_prev;
                number rampsmooth_tilde_04_index;
                number rampsmooth_tilde_04_increment;
                number rampsmooth_tilde_04_d_prev;
                bool rampsmooth_tilde_04_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_86 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_98;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_86()
            {
            }
            
            ~RNBOSubpatcher_86()
            {
            }
            
            virtual RNBOSubpatcher_98* getPatcher() const {
                return static_cast<RNBOSubpatcher_98 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            number __wrapped_op_clamp(number in1, number in2, number in3) {
                return (in1 > in3 ? in3 : (in1 < in2 ? in2 : in1));
            }
            
            template <typename T> inline number dim(T& buffer) {
                return buffer->getSize();
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            inline number intnum(const number value) {
                return trunc(value);
            }
            
            inline number safediv(number num, number denom) {
                return (denom == 0.0 ? 0.0 : num / denom);
            }
            
            number safepow(number base, number exponent) {
                return fixnan(rnbo_pow(base, exponent));
            }
            
            number scale(
                number x,
                number lowin,
                number hiin,
                number lowout,
                number highout,
                number pow
            ) {
                auto inscale = this->safediv(1., hiin - lowin);
                number outdiff = highout - lowout;
                number value = (x - lowin) * inscale;
            
                if (pow != 1) {
                    if (value > 0)
                        value = this->safepow(value, pow);
                    else
                        value = -this->safepow(-value, pow);
                }
            
                value = value * outdiff + lowout;
                return value;
            }
            
            number wrap(number x, number low, number high) {
                number lo;
                number hi;
            
                if (low == high)
                    return low;
            
                if (low > high) {
                    hi = low;
                    lo = high;
                } else {
                    lo = low;
                    hi = high;
                }
            
                number range = hi - lo;
            
                if (x >= lo && x < hi)
                    return x;
            
                if (range <= 0.000000001)
                    return lo;
            
                long numWraps = (long)(trunc((x - lo) / range));
                numWraps = numWraps - ((x < lo ? 1 : 0));
                number result = x - range * numWraps;
            
                if (result >= hi)
                    return result - range;
                else
                    return result;
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            template <typename T> inline array<SampleValue, 1 + 1> peek_default(T& buffer, SampleValue sampleIndex, Index channelOffset) {
                number bufferSize = buffer->getSize();
                const Index bufferChannels = (const Index)(buffer->getChannels());
                constexpr int ___N2 = 1 + 1;
                array<SampleValue, ___N2> out = FIXEDSIZEARRAYINIT(1 + 1);
            
                if (bufferSize == 0 || (5 == 5 && (sampleIndex < 0 || sampleIndex >= bufferSize))) {
                    return out;
                } else {
                    for (Index channel = 0; channel < 1; channel++) {
                        Index channelIndex = (Index)(channel + channelOffset);
            
                        {
                            if (channelIndex >= bufferChannels || channelIndex < 0) {
                                out[(Index)channel] = 0;
                                continue;
                            }
                        }
            
                        SampleValue bufferreadsample_result;
            
                        {
                            auto& __buffer = buffer;
            
                            if (sampleIndex < 0.0) {
                                bufferreadsample_result = 0.0;
                            }
            
                            SampleIndex truncIndex = (SampleIndex)(trunc(sampleIndex));
            
                            {
                                bufferreadsample_result = __buffer->getSample(channelIndex, truncIndex);
                            }
                        }
            
                        out[(Index)channel] = bufferreadsample_result;
                    }
            
                    out[1] = sampleIndex;
                    return out;
                }
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->rampsmooth_tilde_05_perform(
                    in2,
                    this->rampsmooth_tilde_05_up,
                    this->rampsmooth_tilde_05_down,
                    this->signals[0],
                    n
                );
            
                this->gen_05_perform(in1, this->signals[0], this->gen_05_framesize, out1, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->rampsmooth_tilde_05_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 0) {
                    this->gen_05_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
                }
            }
            
            void initialize() {
                this->assign_defaults();
                this->setState();
                this->gen_05_osc_wavetable_buf = new Float32Buffer(this->getPatcher()->getPatcher()->osc_wavetable_buf);
            }
            
            protected:
            
            void eventinlet_05_out1_bang_bang() {}
            
            void eventinlet_05_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->gen_05_framesize_set(converted);
                }
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->gen_05_phase_init();
                this->gen_05_h1_init();
                this->gen_05_h2_init();
                this->gen_05_oldsr_init();
                this->gen_05_freq_init();
                this->gen_05_os_init();
                this->gen_05_realsr_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->gen_05_osc_wavetable_buf = this->gen_05_osc_wavetable_buf->allocateIfNeeded();
            }
            
            void gen_05_framesize_set(number v) {
                this->gen_05_framesize = v;
            }
            
            void eventinlet_05_out1_number_set(number v) {
                this->gen_05_framesize_set(v);
            }
            
            void rampsmooth_tilde_05_perform(const Sample * x, number up, number down, SampleValue * out1, Index n) {
                RNBO_UNUSED(down);
                RNBO_UNUSED(up);
                auto __rampsmooth_tilde_05_increment = this->rampsmooth_tilde_05_increment;
                auto __rampsmooth_tilde_05_index = this->rampsmooth_tilde_05_index;
                auto __rampsmooth_tilde_05_prev = this->rampsmooth_tilde_05_prev;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (this->rampsmooth_tilde_05_d_next(x[(Index)i]) != 0.) {
                        if (x[(Index)i] > __rampsmooth_tilde_05_prev) {
                            number _up = 1000;
            
                            if (_up < 1)
                                _up = 1;
            
                            __rampsmooth_tilde_05_index = _up;
                            __rampsmooth_tilde_05_increment = (x[(Index)i] - __rampsmooth_tilde_05_prev) / _up;
                        } else if (x[(Index)i] < __rampsmooth_tilde_05_prev) {
                            number _down = 1000;
            
                            if (_down < 1)
                                _down = 1;
            
                            __rampsmooth_tilde_05_index = _down;
                            __rampsmooth_tilde_05_increment = (x[(Index)i] - __rampsmooth_tilde_05_prev) / _down;
                        }
                    }
            
                    if (__rampsmooth_tilde_05_index > 0) {
                        __rampsmooth_tilde_05_prev += __rampsmooth_tilde_05_increment;
                        __rampsmooth_tilde_05_index -= 1;
                    } else {
                        __rampsmooth_tilde_05_prev = x[(Index)i];
                    }
            
                    out1[(Index)i] = __rampsmooth_tilde_05_prev;
                }
            
                this->rampsmooth_tilde_05_prev = __rampsmooth_tilde_05_prev;
                this->rampsmooth_tilde_05_index = __rampsmooth_tilde_05_index;
                this->rampsmooth_tilde_05_increment = __rampsmooth_tilde_05_increment;
            }
            
            void gen_05_perform(
                const Sample * in1,
                const Sample * in2,
                number framesize,
                SampleValue * out1,
                Index n
            ) {
                auto __gen_05_h1_value = this->gen_05_h1_value;
                auto __gen_05_h2_value = this->gen_05_h2_value;
                auto __gen_05_phase_value = this->gen_05_phase_value;
                auto __gen_05_realsr_value = this->gen_05_realsr_value;
                auto __gen_05_os_value = this->gen_05_os_value;
                auto __gen_05_freq_value = this->gen_05_freq_value;
                auto __gen_05_oldsr_value = this->gen_05_oldsr_value;
                Index i0;
            
                for (i0 = 0; i0 < n; i0++) {
                    number numFrames_0 = this->__wrapped_op_clamp(rnbo_floor(
                        (framesize == 0. ? 0. : this->dim(this->gen_05_osc_wavetable_buf) / framesize)
                    ), 0, this->dim(this->gen_05_osc_wavetable_buf));
            
                    if (__gen_05_oldsr_value != this->samplerate() || __gen_05_freq_value != in1[(Index)i0]) {
                        __gen_05_os_value = this->intnum(
                            ((this->samplerate() == 0. ? 0. : (number)44100 / this->samplerate())) * (2 + 14 * this->scale(in1[(Index)i0], 50, 1200, 0, 1, 0.5))
                        );
            
                        if (__gen_05_os_value == 0) {
                            __gen_05_os_value = 1;
                        }
            
                        __gen_05_realsr_value = this->samplerate() * __gen_05_os_value;
                        __gen_05_oldsr_value = this->samplerate();
                        __gen_05_freq_value = in1[(Index)i0];
                    }
            
                    number t_1 = 0;
                    number omega_2 = 0;
                    number _sin_3 = 0;
                    number _cos_4 = 0;
                    number frame_pos_5 = 0;
                    number table_pos_6 = 0;
                    number terrain_pos_7 = 0;
                    number frame_pos_frac_8 = 0;
                    number table_pos_frac_9 = 0;
                    number bottom_left_10 = 0;
                    number bottom_right_11 = 0;
                    number top_left_12 = 0;
                    number top_right_13 = 0;
                    number above_14 = 0;
                    number below_15 = 0;
                    number frame_pos_left_16 = 0;
                    number frame_pos_right_17 = 0;
                    number table_pos_bottom_18 = 0;
                    number table_pos_top_19 = 0;
            
                    for (number i = 0; i < __gen_05_os_value; i = i + 1) {
                        t_1 = this->wrap(__gen_05_phase_value, 0, 1);
            
                        __gen_05_phase_value = fixdenorm(
                            t_1 + ((__gen_05_realsr_value == 0. ? 0. : in1[(Index)i0] / __gen_05_realsr_value))
                        );
            
                        frame_pos_5 = t_1 * framesize;
                        terrain_pos_7 = in2[(Index)i0];
                        frame_pos_left_16 = this->intnum(frame_pos_5);
                        frame_pos_right_17 = 0;
            
                        if (frame_pos_left_16 == framesize - 1) {
                            frame_pos_right_17 = 0;
                        } else {
                            frame_pos_right_17 = frame_pos_left_16 + 1;
                        }
            
                        frame_pos_frac_8 = frame_pos_5 - frame_pos_left_16;
                        table_pos_6 = terrain_pos_7 * (numFrames_0 - 1);
                        table_pos_bottom_18 = rnbo_floor(table_pos_6);
                        table_pos_top_19 = rnbo_ceil(table_pos_6);
                        table_pos_frac_9 = table_pos_6 - table_pos_bottom_18;
                        number bottom_left_10 = 0;
            
                        auto result_20 = this->peek_default(
                            this->gen_05_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_left_16,
                            0
                        );
            
                        bottom_left_10 = result_20[0];
                        number bottom_right_11 = 0;
            
                        auto result_21 = this->peek_default(
                            this->gen_05_osc_wavetable_buf,
                            framesize * table_pos_bottom_18 + frame_pos_right_17,
                            0
                        );
            
                        bottom_right_11 = result_21[0];
                        number top_left_12 = 0;
            
                        auto result_22 = this->peek_default(
                            this->gen_05_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_left_16,
                            0
                        );
            
                        top_left_12 = result_22[0];
                        number top_right_13 = 0;
            
                        auto result_23 = this->peek_default(
                            this->gen_05_osc_wavetable_buf,
                            framesize * table_pos_top_19 + frame_pos_right_17,
                            0
                        );
            
                        top_right_13 = result_23[0];
                        below_15 = bottom_left_10 + frame_pos_frac_8 * (bottom_right_11 - bottom_left_10);
                        above_14 = top_left_12 + frame_pos_frac_8 * (top_right_13 - top_left_12);
                        t_1 = below_15 + table_pos_frac_9 * (above_14 - below_15);
                        omega_2 = (__gen_05_realsr_value == 0. ? 0. : (number)125663.70614359 / __gen_05_realsr_value);
                        _sin_3 = rnbo_sin(omega_2);
                        _cos_4 = rnbo_cos(omega_2);
                        number b0_24 = (1 + _sin_3 == 0. ? 0. : (number)1 / (1 + _sin_3));
                        number a2_25 = (1 - _cos_4) * 0.5 * b0_24;
                        number a1_26 = (1 - _cos_4) * b0_24;
                        number b1_27 = -2 * _cos_4 * b0_24;
                        number b2_28 = (1 - _sin_3) * b0_24;
                        t_1 = t_1 * a2_25 + __gen_05_h2_value * a1_26 + __gen_05_h1_value * a2_25 - (__gen_05_h1_value * b2_28 + __gen_05_h2_value * b1_27);
                        __gen_05_h1_value = fixdenorm(__gen_05_h2_value);
                        __gen_05_h2_value = fixdenorm(t_1);
                    }
            
                    number expr_1_29 = t_1;
                    out1[(Index)i0] = expr_1_29;
                }
            
                this->gen_05_oldsr_value = __gen_05_oldsr_value;
                this->gen_05_freq_value = __gen_05_freq_value;
                this->gen_05_os_value = __gen_05_os_value;
                this->gen_05_realsr_value = __gen_05_realsr_value;
                this->gen_05_phase_value = __gen_05_phase_value;
                this->gen_05_h2_value = __gen_05_h2_value;
                this->gen_05_h1_value = __gen_05_h1_value;
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number gen_05_phase_getvalue() {
                return this->gen_05_phase_value;
            }
            
            void gen_05_phase_setvalue(number val) {
                this->gen_05_phase_value = val;
            }
            
            void gen_05_phase_reset() {
                this->gen_05_phase_value = 0;
            }
            
            void gen_05_phase_init() {
                this->gen_05_phase_value = 0;
            }
            
            number gen_05_h1_getvalue() {
                return this->gen_05_h1_value;
            }
            
            void gen_05_h1_setvalue(number val) {
                this->gen_05_h1_value = val;
            }
            
            void gen_05_h1_reset() {
                this->gen_05_h1_value = 0;
            }
            
            void gen_05_h1_init() {
                this->gen_05_h1_value = 0;
            }
            
            number gen_05_h2_getvalue() {
                return this->gen_05_h2_value;
            }
            
            void gen_05_h2_setvalue(number val) {
                this->gen_05_h2_value = val;
            }
            
            void gen_05_h2_reset() {
                this->gen_05_h2_value = 0;
            }
            
            void gen_05_h2_init() {
                this->gen_05_h2_value = 0;
            }
            
            number gen_05_oldsr_getvalue() {
                return this->gen_05_oldsr_value;
            }
            
            void gen_05_oldsr_setvalue(number val) {
                this->gen_05_oldsr_value = val;
            }
            
            void gen_05_oldsr_reset() {
                this->gen_05_oldsr_value = 0;
            }
            
            void gen_05_oldsr_init() {
                this->gen_05_oldsr_value = 0;
            }
            
            number gen_05_freq_getvalue() {
                return this->gen_05_freq_value;
            }
            
            void gen_05_freq_setvalue(number val) {
                this->gen_05_freq_value = val;
            }
            
            void gen_05_freq_reset() {
                this->gen_05_freq_value = 0;
            }
            
            void gen_05_freq_init() {
                this->gen_05_freq_value = 0;
            }
            
            number gen_05_os_getvalue() {
                return this->gen_05_os_value;
            }
            
            void gen_05_os_setvalue(number val) {
                this->gen_05_os_value = val;
            }
            
            void gen_05_os_reset() {
                this->gen_05_os_value = 0;
            }
            
            void gen_05_os_init() {
                this->gen_05_os_value = 4;
            }
            
            number gen_05_realsr_getvalue() {
                return this->gen_05_realsr_value;
            }
            
            void gen_05_realsr_setvalue(number val) {
                this->gen_05_realsr_value = val;
            }
            
            void gen_05_realsr_reset() {
                this->gen_05_realsr_value = 0;
            }
            
            void gen_05_realsr_init() {
                this->gen_05_realsr_value = 0;
            }
            
            number rampsmooth_tilde_05_d_next(number x) {
                number temp = (number)(x - this->rampsmooth_tilde_05_d_prev);
                this->rampsmooth_tilde_05_d_prev = x;
                return temp;
            }
            
            void rampsmooth_tilde_05_d_dspsetup() {
                this->rampsmooth_tilde_05_d_reset();
            }
            
            void rampsmooth_tilde_05_d_reset() {
                this->rampsmooth_tilde_05_d_prev = 0;
            }
            
            void rampsmooth_tilde_05_dspsetup(bool force) {
                if ((bool)(this->rampsmooth_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->rampsmooth_tilde_05_setupDone = true;
                this->rampsmooth_tilde_05_d_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                gen_05_in1 = 0;
                gen_05_in2 = 0;
                gen_05_framesize = 256;
                rampsmooth_tilde_05_x = 0;
                rampsmooth_tilde_05_up = 1000;
                rampsmooth_tilde_05_down = 1000;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                gen_05_phase_value = 0;
                gen_05_h1_value = 0;
                gen_05_h2_value = 0;
                gen_05_oldsr_value = 0;
                gen_05_freq_value = 0;
                gen_05_os_value = 0;
                gen_05_realsr_value = 0;
                rampsmooth_tilde_05_prev = 0;
                rampsmooth_tilde_05_index = 0;
                rampsmooth_tilde_05_increment = 0;
                rampsmooth_tilde_05_d_prev = 0;
                rampsmooth_tilde_05_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number gen_05_in1;
                number gen_05_in2;
                number gen_05_framesize;
                number rampsmooth_tilde_05_x;
                number rampsmooth_tilde_05_up;
                number rampsmooth_tilde_05_down;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number gen_05_phase_value;
                number gen_05_h1_value;
                number gen_05_h2_value;
                number gen_05_oldsr_value;
                number gen_05_freq_value;
                number gen_05_os_value;
                number gen_05_realsr_value;
                Float32BufferRef gen_05_osc_wavetable_buf;
                number rampsmooth_tilde_05_prev;
                number rampsmooth_tilde_05_index;
                number rampsmooth_tilde_05_increment;
                number rampsmooth_tilde_05_d_prev;
                bool rampsmooth_tilde_05_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_98()
    {
    }
    
    ~RNBOSubpatcher_98()
    {
        delete this->p_01;
        delete this->p_02;
        delete this->p_03;
        delete this->p_04;
        delete this->p_05;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, -1357044121, false);
        getEngine()->flushClockEvents(this, 892732297, false);
        getEngine()->flushClockEvents(this, -708766484, false);
        getEngine()->flushClockEvents(this, -281953904, false);
        getEngine()->flushClockEvents(this, 694892522, false);
        getEngine()->flushClockEvents(this, 1396722025, false);
        getEngine()->flushClockEvents(this, 2098551528, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, -6936981, false);
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    Index vectorsize() const {
        return this->vs;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        this->numbertilde_01_perform(this->zeroBuffer, this->signals[0], n);
    
        this->cycle_tilde_01_perform(
            this->cycle_tilde_01_frequency,
            this->cycle_tilde_01_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->linetilde_01_perform(this->signals[1], n);
        this->numbertilde_02_perform(this->zeroBuffer, this->signals[2], n);
    
        this->cycle_tilde_02_perform(
            this->cycle_tilde_02_frequency,
            this->cycle_tilde_02_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_03_perform(this->zeroBuffer, this->signals[3], n);
    
        this->cycle_tilde_03_perform(
            this->cycle_tilde_03_frequency,
            this->cycle_tilde_03_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_04_perform(this->zeroBuffer, this->signals[4], n);
    
        this->cycle_tilde_04_perform(
            this->cycle_tilde_04_frequency,
            this->cycle_tilde_04_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_05_perform(this->zeroBuffer, this->signals[5], n);
    
        this->cycle_tilde_05_perform(
            this->cycle_tilde_05_frequency,
            this->cycle_tilde_05_phase_offset,
            this->dummyBuffer,
            this->dummyBuffer,
            n
        );
    
        this->numbertilde_06_perform(this->zeroBuffer, this->signals[6], n);
        this->p_02_perform(this->signals[2], this->signals[6], this->signals[7], n);
        this->p_01_perform(this->signals[0], this->signals[6], this->signals[2], n);
        this->p_03_perform(this->signals[3], this->signals[6], this->signals[0], n);
        this->p_04_perform(this->signals[4], this->signals[6], this->signals[3], n);
        this->p_05_perform(this->signals[5], this->signals[6], this->signals[4], n);
    
        this->signaladder_01_perform(
            this->signals[7],
            this->signals[2],
            this->signals[0],
            this->signals[3],
            this->signals[4],
            this->signals[4],
            n
        );
    
        this->dspexpr_01_perform(this->signals[4], this->signals[1], out1, n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 8; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->numbertilde_01_dspsetup(forceDSPSetup);
        this->cycle_tilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_02_dspsetup(forceDSPSetup);
        this->cycle_tilde_02_dspsetup(forceDSPSetup);
        this->data_01_dspsetup(forceDSPSetup);
        this->numbertilde_03_dspsetup(forceDSPSetup);
        this->cycle_tilde_03_dspsetup(forceDSPSetup);
        this->numbertilde_04_dspsetup(forceDSPSetup);
        this->cycle_tilde_04_dspsetup(forceDSPSetup);
        this->numbertilde_05_dspsetup(forceDSPSetup);
        this->cycle_tilde_05_dspsetup(forceDSPSetup);
        this->numbertilde_06_dspsetup(forceDSPSetup);
        this->p_01->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_02->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_03->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_04->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_05->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_01 = new RNBOSubpatcher_82();
        this->p_01->setEngineAndPatcher(this->getEngine(), this);
        this->p_01->initialize();
        this->p_01->setParameterOffset(this->getParameterOffset(this->p_01));
        this->p_02 = new RNBOSubpatcher_83();
        this->p_02->setEngineAndPatcher(this->getEngine(), this);
        this->p_02->initialize();
        this->p_02->setParameterOffset(this->getParameterOffset(this->p_02));
        this->p_03 = new RNBOSubpatcher_84();
        this->p_03->setEngineAndPatcher(this->getEngine(), this);
        this->p_03->initialize();
        this->p_03->setParameterOffset(this->getParameterOffset(this->p_03));
        this->p_04 = new RNBOSubpatcher_85();
        this->p_04->setEngineAndPatcher(this->getEngine(), this);
        this->p_04->initialize();
        this->p_04->setParameterOffset(this->getParameterOffset(this->p_04));
        this->p_05 = new RNBOSubpatcher_86();
        this->p_05->setEngineAndPatcher(this->getEngine(), this);
        this->p_05->initialize();
        this->p_05->setParameterOffset(this->getParameterOffset(this->p_05));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_01_getPresetValue(getSubState(preset, "sSize"));
        this->param_02_getPresetValue(getSubState(preset, "tablePos"));
        this->p_01->getPreset(getSubState(getSubState(preset, "__sps"), "Osc[1]"));
        this->p_02->getPreset(getSubState(getSubState(preset, "__sps"), "Osc"));
        this->p_03->getPreset(getSubState(getSubState(preset, "__sps"), "Osc[2]"));
        this->p_04->getPreset(getSubState(getSubState(preset, "__sps"), "Osc[3]"));
        this->p_05->getPreset(getSubState(getSubState(preset, "__sps"), "Osc[4]"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_01_value_set(v);
            break;
            }
        case 1:
            {
            this->param_02_value_set(v);
            break;
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                this->p_01->setParameterValue(index, v, time);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                this->p_02->setParameterValue(index, v, time);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                this->p_03->setParameterValue(index, v, time);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                this->p_04->setParameterValue(index, v, time);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                this->p_05->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_01_value;
            }
        case 1:
            {
            return this->param_02_value;
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterValue(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterValue(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterValue(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterValue(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 2 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters() + this->p_05->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "sSize";
            }
        case 1:
            {
            return "tablePos";
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterName(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterName(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterName(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterName(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "ChInst/sSize";
            }
        case 1:
            {
            return "ChInst/tablePos";
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->getParameterId(index);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->getParameterId(index);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->getParameterId(index);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->getParameterId(index);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 256;
                info->min = 1;
                info->max = 8196;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 1;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 2;
    
                if (index < this->p_01->getNumParameters())
                    this->p_01->getParameterInfo(index, info);
    
                index -= this->p_01->getNumParameters();
    
                if (index < this->p_02->getNumParameters())
                    this->p_02->getParameterInfo(index, info);
    
                index -= this->p_02->getNumParameters();
    
                if (index < this->p_03->getNumParameters())
                    this->p_03->getParameterInfo(index, info);
    
                index -= this->p_03->getNumParameters();
    
                if (index < this->p_04->getNumParameters())
                    this->p_04->getParameterInfo(index, info);
    
                index -= this->p_04->getNumParameters();
    
                if (index < this->p_05->getNumParameters())
                    this->p_05->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_01)
            return 2;
    
        if (subpatcher == this->p_02)
            return 2 + this->p_01->getNumParameters();
    
        if (subpatcher == this->p_03)
            return 2 + this->p_01->getNumParameters() + this->p_02->getNumParameters();
    
        if (subpatcher == this->p_04)
            return 2 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters();
    
        if (subpatcher == this->p_05)
            return 2 + this->p_01->getNumParameters() + this->p_02->getNumParameters() + this->p_03->getNumParameters() + this->p_04->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
            {
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
            }
        case 0:
            {
            {
                value = (value < 1 ? 1 : (value > 8196 ? 8196 : value));
                ParameterValue normalizedValue = (value - 1) / (8196 - 1);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
            {
            {
                {
                    return 0 + value * (1 - 0);
                }
            }
            }
        case 0:
            {
            {
                {
                    return 1 + value * (8196 - 1);
                }
            }
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_01_value_constrain(value);
            }
        case 1:
            {
            return this->param_02_value_constrain(value);
            }
        default:
            {
            index -= 2;
    
            if (index < this->p_01->getNumParameters())
                return this->p_01->constrainParameterValue(index, value);
    
            index -= this->p_01->getNumParameters();
    
            if (index < this->p_02->getNumParameters())
                return this->p_02->constrainParameterValue(index, value);
    
            index -= this->p_02->getNumParameters();
    
            if (index < this->p_03->getNumParameters())
                return this->p_03->constrainParameterValue(index, value);
    
            index -= this->p_03->getNumParameters();
    
            if (index < this->p_04->getNumParameters())
                return this->p_04->constrainParameterValue(index, value);
    
            index -= this->p_04->getNumParameters();
    
            if (index < this->p_05->getNumParameters())
                return this->p_05->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case -1357044121:
            {
            this->delay_01_out_bang();
            break;
            }
        case 892732297:
            {
            this->loadmess_01_startupbang_bang();
            break;
            }
        case -708766484:
            {
            this->numbertilde_01_value_set(value);
            break;
            }
        case -281953904:
            {
            this->linetilde_01_target_bang();
            break;
            }
        case 694892522:
            {
            this->numbertilde_02_value_set(value);
            break;
            }
        case 1396722025:
            {
            this->numbertilde_03_value_set(value);
            break;
            }
        case 2098551528:
            {
            this->numbertilde_04_value_set(value);
            break;
            }
        case -1494586265:
            {
            this->numbertilde_05_value_set(value);
            break;
            }
        case -6936981:
            {
            this->numbertilde_06_value_set(value);
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("ChInst/number~_obj-25") == objectId)
                this->numbertilde_01_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-31") == objectId)
                this->numbertilde_02_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-32") == objectId)
                this->numbertilde_03_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-33") == objectId)
                this->numbertilde_04_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-34") == objectId)
                this->numbertilde_05_sig_number_set(payload);
    
            if (TAG("ChInst/number~_obj-19") == objectId)
                this->numbertilde_06_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("ChInst/number~_obj-25") == objectId)
                this->numbertilde_01_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-31") == objectId)
                this->numbertilde_02_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-32") == objectId)
                this->numbertilde_03_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-33") == objectId)
                this->numbertilde_04_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-34") == objectId)
                this->numbertilde_05_mode_set(payload);
    
            if (TAG("ChInst/number~_obj-19") == objectId)
                this->numbertilde_06_mode_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("ChInst/message_obj-141") == objectId)
                this->message_01_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("ChInst/number_obj-21") == objectId)
                this->numberobj_01_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("ChInst/number_obj-21") == objectId)
                this->numberobj_01_format_set(payload);
    
            break;
            }
        }
    
        this->p_01->processNumMessage(tag, objectId, time, payload);
        this->p_02->processNumMessage(tag, objectId, time, payload);
        this->p_03->processNumMessage(tag, objectId, time, payload);
        this->p_04->processNumMessage(tag, objectId, time, payload);
        this->p_05->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("ChInst/number~_obj-25") == objectId)
                this->numbertilde_01_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-31") == objectId)
                this->numbertilde_02_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-32") == objectId)
                this->numbertilde_03_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-33") == objectId)
                this->numbertilde_04_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-34") == objectId)
                this->numbertilde_05_sig_list_set(payload);
    
            if (TAG("ChInst/number~_obj-19") == objectId)
                this->numbertilde_06_sig_list_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("ChInst/message_obj-141") == objectId)
                this->message_01_listin_list_set(payload);
    
            break;
            }
        }
    
        this->p_01->processListMessage(tag, objectId, time, payload);
        this->p_02->processListMessage(tag, objectId, time, payload);
        this->p_03->processListMessage(tag, objectId, time, payload);
        this->p_04->processListMessage(tag, objectId, time, payload);
        this->p_05->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("bangin"):
            {
            if (TAG("ChInst/button_obj-13") == objectId)
                this->button_01_bangin_bang();
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("ChInst/message_obj-141") == objectId)
                this->message_01_listin_bang_bang();
    
            break;
            }
        case TAG("startupbang"):
            {
            if (TAG("ChInst/loadmess_obj-20") == objectId)
                this->loadmess_01_startupbang_bang();
    
            break;
            }
        }
    
        this->p_01->processBangMessage(tag, objectId, time);
        this->p_02->processBangMessage(tag, objectId, time);
        this->p_03->processBangMessage(tag, objectId, time);
        this->p_04->processBangMessage(tag, objectId, time);
        this->p_05->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("ChInst/number~_obj-25"):
            {
            return "ChInst/number~_obj-25";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("ChInst/button_obj-13"):
            {
            return "ChInst/button_obj-13";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("ChInst/message_obj-141"):
            {
            return "ChInst/message_obj-141";
            }
        case TAG("ChInst/number~_obj-31"):
            {
            return "ChInst/number~_obj-31";
            }
        case TAG("ChInst/number~_obj-32"):
            {
            return "ChInst/number~_obj-32";
            }
        case TAG("ChInst/number~_obj-33"):
            {
            return "ChInst/number~_obj-33";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("ChInst/number_obj-21"):
            {
            return "ChInst/number_obj-21";
            }
        case TAG("ChInst/number~_obj-34"):
            {
            return "ChInst/number~_obj-34";
            }
        case TAG("ChInst/number~_obj-19"):
            {
            return "ChInst/number~_obj-19";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("ChInst/loadmess_obj-20"):
            {
            return "ChInst/loadmess_obj-20";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        }
    
        auto subpatchResult_0 = this->p_01->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_02->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_03->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_04->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_05->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 0) {
            this->data_01_buffer = new Float32Buffer(this->getPatcher()->osc_wavetable_buf);
            this->data_01_bufferUpdated();
        }
    
        if (index == 1) {
            this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_01_bufferUpdated();
            this->cycle_tilde_02_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_02_bufferUpdated();
            this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_03_bufferUpdated();
            this->cycle_tilde_04_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_04_bufferUpdated();
            this->cycle_tilde_05_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_05_bufferUpdated();
        }
    
        this->p_01->processDataViewUpdate(index, time);
        this->p_02->processDataViewUpdate(index, time);
        this->p_03->processDataViewUpdate(index, time);
        this->p_04->processDataViewUpdate(index, time);
        this->p_05->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->data_01_buffer = new Float32Buffer(this->getPatcher()->osc_wavetable_buf);
        this->cycle_tilde_01_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_02_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_03_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_04_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->cycle_tilde_05_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
    }
    
    protected:
    
    void param_01_value_set(number v) {
        v = this->param_01_value_constrain(v);
        this->param_01_value = v;
        this->sendParameter(0, false);
    
        if (this->param_01_value != this->param_01_lastValue) {
            this->getEngine()->presetTouched();
            this->param_01_lastValue = this->param_01_value;
        }
    
        this->numberobj_01_value_set(v);
    }
    
    void param_02_value_set(number v) {
        v = this->param_02_value_constrain(v);
        this->param_02_value = v;
        this->sendParameter(1, false);
    
        if (this->param_02_value != this->param_02_lastValue) {
            this->getEngine()->presetTouched();
            this->param_02_lastValue = this->param_02_value;
        }
    
        this->numbertilde_06_input_number_set(v);
    }
    
    void numbertilde_01_sig_number_set(number v) {
        this->numbertilde_01_outValue = v;
    }
    
    void numbertilde_01_sig_list_set(const list& v) {
        this->numbertilde_01_outValue = v[0];
    }
    
    void numbertilde_01_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_01_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_01_currentMode = 1;
        }
    }
    
    void eventinlet_06_out1_bang_bang() {}
    
    void eventinlet_06_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_01_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_01_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_01_input_number_set(converted);
        }
    }
    
    void delay_01_out_bang() {
        this->button_01_bangval_bang();
    }
    
    void button_01_bangin_bang() {
        this->button_01_bangval_bang();
    }
    
    void message_01_listin_list_set(const list& v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_number_set(number v) {
        this->message_01_set_set(v);
    }
    
    void message_01_listin_bang_bang() {
        this->message_01_trigger_bang();
    }
    
    void numbertilde_02_sig_number_set(number v) {
        this->numbertilde_02_outValue = v;
    }
    
    void numbertilde_02_sig_list_set(const list& v) {
        this->numbertilde_02_outValue = v[0];
    }
    
    void numbertilde_02_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_02_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_02_currentMode = 1;
        }
    }
    
    void eventinlet_07_out1_bang_bang() {}
    
    void eventinlet_07_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_02_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_02_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_02_input_number_set(converted);
        }
    }
    
    void numbertilde_03_sig_number_set(number v) {
        this->numbertilde_03_outValue = v;
    }
    
    void numbertilde_03_sig_list_set(const list& v) {
        this->numbertilde_03_outValue = v[0];
    }
    
    void numbertilde_03_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_03_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_03_currentMode = 1;
        }
    }
    
    void eventinlet_08_out1_bang_bang() {}
    
    void eventinlet_08_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_03_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_03_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_03_input_number_set(converted);
        }
    }
    
    void numbertilde_04_sig_number_set(number v) {
        this->numbertilde_04_outValue = v;
    }
    
    void numbertilde_04_sig_list_set(const list& v) {
        this->numbertilde_04_outValue = v[0];
    }
    
    void numbertilde_04_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_04_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_04_currentMode = 1;
        }
    }
    
    void eventinlet_09_out1_bang_bang() {}
    
    void eventinlet_09_out1_list_set(const list& v) {
        {
            if (v->length > 1)
                this->cycle_tilde_04_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_04_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_04_input_number_set(converted);
        }
    }
    
    void loadmess_01_startupbang_bang() {
        this->loadmess_01_message_bang();
    }
    
    void numberobj_01_valin_set(number v) {
        this->numberobj_01_value_set(v);
    }
    
    void numberobj_01_format_set(number v) {
        this->numberobj_01_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numbertilde_05_sig_number_set(number v) {
        this->numbertilde_05_outValue = v;
    }
    
    void numbertilde_05_sig_list_set(const list& v) {
        this->numbertilde_05_outValue = v[0];
    }
    
    void numbertilde_05_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_05_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_05_currentMode = 1;
        }
    }
    
    void numbertilde_06_sig_number_set(number v) {
        this->numbertilde_06_outValue = v;
    }
    
    void numbertilde_06_sig_list_set(const list& v) {
        this->numbertilde_06_outValue = v[0];
    }
    
    void numbertilde_06_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_06_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_06_currentMode = 1;
        }
    }
    
    void numbertilde_01_value_set(number ) {}
    
    void linetilde_01_target_bang() {}
    
    void numbertilde_02_value_set(number ) {}
    
    void numbertilde_03_value_set(number ) {}
    
    void numbertilde_04_value_set(number ) {}
    
    void numbertilde_05_value_set(number ) {}
    
    void numbertilde_06_value_set(number ) {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 1;
    }
    
    void initializeObjects() {
        this->numbertilde_01_init();
        this->message_01_init();
        this->numbertilde_02_init();
        this->data_01_init();
        this->numbertilde_03_init();
        this->numbertilde_04_init();
        this->numberobj_01_init();
        this->numbertilde_05_init();
        this->numbertilde_06_init();
        this->p_01->initializeObjects();
        this->p_02->initializeObjects();
        this->p_03->initializeObjects();
        this->p_04->initializeObjects();
        this->p_05->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_01->startup();
        this->p_02->startup();
        this->p_03->startup();
        this->p_04->startup();
        this->p_05->startup();
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
    
        {
            this->scheduleParamInit(0, 0);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_01->allocateDataRefs();
        this->p_02->allocateDataRefs();
        this->p_03->allocateDataRefs();
        this->p_04->allocateDataRefs();
        this->p_05->allocateDataRefs();
        this->cycle_tilde_01_buffer->requestSize(16384, 1);
        this->cycle_tilde_01_buffer->setSampleRate(this->sr);
        this->cycle_tilde_02_buffer->requestSize(16384, 1);
        this->cycle_tilde_02_buffer->setSampleRate(this->sr);
        this->cycle_tilde_03_buffer->requestSize(16384, 1);
        this->cycle_tilde_03_buffer->setSampleRate(this->sr);
        this->cycle_tilde_04_buffer->requestSize(16384, 1);
        this->cycle_tilde_04_buffer->setSampleRate(this->sr);
        this->cycle_tilde_05_buffer->requestSize(16384, 1);
        this->cycle_tilde_05_buffer->setSampleRate(this->sr);
        this->data_01_buffer = this->data_01_buffer->allocateIfNeeded();
        this->cycle_tilde_01_buffer = this->cycle_tilde_01_buffer->allocateIfNeeded();
        this->cycle_tilde_02_buffer = this->cycle_tilde_02_buffer->allocateIfNeeded();
        this->cycle_tilde_03_buffer = this->cycle_tilde_03_buffer->allocateIfNeeded();
        this->cycle_tilde_04_buffer = this->cycle_tilde_04_buffer->allocateIfNeeded();
        this->cycle_tilde_05_buffer = this->cycle_tilde_05_buffer->allocateIfNeeded();
    }
    
    void delay_01_stop_bang() {
        this->getEngine()->flushClockEvents(this, -1357044121, false);;
    }
    
    void delay_01_input_bang() {
        if ((bool)(!(bool)(this->delay_01_delayall)))
            this->delay_01_stop_bang();
    
        this->getEngine()->scheduleClockEvent(this, -1357044121, this->delay_01_time + this->_currentTime);;
    }
    
    void receive_01_output_bang_bang() {
        this->delay_01_input_bang();
    }
    
    void cycle_tilde_04_frequency_set(number v) {
        this->cycle_tilde_04_frequency = v;
    }
    
    void numbertilde_04_input_number_set(number v) {
        this->numbertilde_04_input_number = v;
        this->numbertilde_04_outValue = v;
    
        if (this->numbertilde_04_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-33"),
                {this->numbertilde_04_outValue},
                this->_currentTime
            );
        }
    }
    
    void eventinlet_09_out1_number_set(number v) {
        this->cycle_tilde_04_frequency_set(v);
        this->numbertilde_04_input_number_set(v);
    }
    
    void cycle_tilde_05_frequency_set(number v) {
        this->cycle_tilde_05_frequency = v;
    }
    
    void numbertilde_05_input_number_set(number v) {
        this->numbertilde_05_input_number = v;
        this->numbertilde_05_outValue = v;
    
        if (this->numbertilde_05_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-34"),
                {this->numbertilde_05_outValue},
                this->_currentTime
            );
        }
    }
    
    void cycle_tilde_05_phase_offset_set(number v) {
        this->cycle_tilde_05_phase_offset = v;
    }
    
    void receive_02_output_list_set(const list& v) {
        this->receive_02_output_list = jsCreateListCopy(v);
    
        {
            if (v->length > 1)
                this->cycle_tilde_05_phase_offset_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->cycle_tilde_05_frequency_set(converted);
        }
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numbertilde_05_input_number_set(converted);
        }
    }
    
    void cycle_tilde_03_frequency_set(number v) {
        this->cycle_tilde_03_frequency = v;
    }
    
    void numbertilde_03_input_number_set(number v) {
        this->numbertilde_03_input_number = v;
        this->numbertilde_03_outValue = v;
    
        if (this->numbertilde_03_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-32"),
                {this->numbertilde_03_outValue},
                this->_currentTime
            );
        }
    }
    
    void eventinlet_08_out1_number_set(number v) {
        this->cycle_tilde_03_frequency_set(v);
        this->numbertilde_03_input_number_set(v);
    }
    
    void cycle_tilde_02_frequency_set(number v) {
        this->cycle_tilde_02_frequency = v;
    }
    
    void numbertilde_02_input_number_set(number v) {
        this->numbertilde_02_input_number = v;
        this->numbertilde_02_outValue = v;
    
        if (this->numbertilde_02_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-31"),
                {this->numbertilde_02_outValue},
                this->_currentTime
            );
        }
    }
    
    void eventinlet_07_out1_number_set(number v) {
        this->cycle_tilde_02_frequency_set(v);
        this->numbertilde_02_input_number_set(v);
    }
    
    void cycle_tilde_01_frequency_set(number v) {
        this->cycle_tilde_01_frequency = v;
    }
    
    void numbertilde_01_input_number_set(number v) {
        this->numbertilde_01_input_number = v;
        this->numbertilde_01_outValue = v;
    
        if (this->numbertilde_01_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-25"),
                {this->numbertilde_01_outValue},
                this->_currentTime
            );
        }
    }
    
    void eventinlet_06_out1_number_set(number v) {
        this->cycle_tilde_01_frequency_set(v);
        this->numbertilde_01_input_number_set(v);
    }
    
    number param_01_value_constrain(number v) const {
        v = (v > 8196 ? 8196 : (v < 1 ? 1 : v));
        return v;
    }
    
    void p_05_in3_number_set(number v) {
        this->p_05->updateTime(this->_currentTime);
        this->p_05->eventinlet_05_out1_number_set(v);
    }
    
    void p_04_in3_number_set(number v) {
        this->p_04->updateTime(this->_currentTime);
        this->p_04->eventinlet_04_out1_number_set(v);
    }
    
    void p_03_in3_number_set(number v) {
        this->p_03->updateTime(this->_currentTime);
        this->p_03->eventinlet_03_out1_number_set(v);
    }
    
    void p_02_in3_number_set(number v) {
        this->p_02->updateTime(this->_currentTime);
        this->p_02->eventinlet_02_out1_number_set(v);
    }
    
    void p_01_in3_number_set(number v) {
        this->p_01->updateTime(this->_currentTime);
        this->p_01->eventinlet_01_out1_number_set(v);
    }
    
    void numberobj_01_output_set(number v) {
        this->p_05_in3_number_set(v);
        this->p_04_in3_number_set(v);
        this->p_03_in3_number_set(v);
        this->p_02_in3_number_set(v);
        this->p_01_in3_number_set(v);
    }
    
    void numberobj_01_value_set(number v) {
        this->numberobj_01_value_setter(v);
        v = this->numberobj_01_value;
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("ChInst/number_obj-21"), localvalue, this->_currentTime);
        this->numberobj_01_output_set(localvalue);
    }
    
    number param_02_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0 ? 0 : v));
        return v;
    }
    
    void numbertilde_06_input_number_set(number v) {
        this->numbertilde_06_input_number = v;
        this->numbertilde_06_outValue = v;
    
        if (this->numbertilde_06_currentMode == 0) {
            this->getEngine()->sendNumMessage(
                TAG("assign"),
                TAG("ChInst/number~_obj-19"),
                {this->numbertilde_06_outValue},
                this->_currentTime
            );
        }
    }
    
    void cycle_tilde_01_phase_offset_set(number v) {
        this->cycle_tilde_01_phase_offset = v;
    }
    
    void linetilde_01_time_set(number v) {
        this->linetilde_01_time = v;
    }
    
    void linetilde_01_segments_set(const list& v) {
        this->linetilde_01_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_01_time == 0) {
                this->linetilde_01_activeRamps->length = 0;
                this->linetilde_01_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_01_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_01_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_01_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_01_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_01_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_01_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_01_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_01_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_01_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_01_activeRamps->push(lastRampValue);
                    this->linetilde_01_activeRamps->push(0);
                    this->linetilde_01_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_01_keepramp)) {
                            this->linetilde_01_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_01_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_01_activeRamps->push(destinationValue);
                    this->linetilde_01_activeRamps->push(inc);
                    this->linetilde_01_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void message_01_out_set(const list& v) {
        this->linetilde_01_segments_set(v);
    }
    
    void message_01_trigger_bang() {
        this->message_01_out_set(this->message_01_set);
    }
    
    void button_01_output_bang() {
        this->message_01_trigger_bang();
    }
    
    void button_01_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("ChInst/button_obj-13"), this->_currentTime);;
        this->button_01_output_bang();
    }
    
    void message_01_set_set(const list& v) {
        this->message_01_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("ChInst/message_obj-141"), v, this->_currentTime);
    }
    
    void cycle_tilde_02_phase_offset_set(number v) {
        this->cycle_tilde_02_phase_offset = v;
    }
    
    void cycle_tilde_03_phase_offset_set(number v) {
        this->cycle_tilde_03_phase_offset = v;
    }
    
    void cycle_tilde_04_phase_offset_set(number v) {
        this->cycle_tilde_04_phase_offset = v;
    }
    
    void loadmess_01_message_bang() {
        list v = this->loadmess_01_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_01_value_set(converted);
        }
    }
    
    void numbertilde_01_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_01_currentIntervalInSamples = this->numbertilde_01_currentIntervalInSamples;
        auto __numbertilde_01_lastValue = this->numbertilde_01_lastValue;
        auto __numbertilde_01_currentInterval = this->numbertilde_01_currentInterval;
        auto __numbertilde_01_rampInSamples = this->numbertilde_01_rampInSamples;
        auto __numbertilde_01_outValue = this->numbertilde_01_outValue;
        auto __numbertilde_01_currentMode = this->numbertilde_01_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_01_currentMode == 0) {
                output[(Index)i] = this->numbertilde_01_smooth_next(
                    __numbertilde_01_outValue,
                    __numbertilde_01_rampInSamples,
                    __numbertilde_01_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_01_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_01_lastValue && __numbertilde_01_currentInterval <= 0) {
            __numbertilde_01_currentInterval = __numbertilde_01_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -708766484,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_01_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-25"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_01_currentInterval = __numbertilde_01_currentInterval;
        this->numbertilde_01_lastValue = __numbertilde_01_lastValue;
    }
    
    void cycle_tilde_01_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_01_f2i = this->cycle_tilde_01_f2i;
        auto __cycle_tilde_01_buffer = this->cycle_tilde_01_buffer;
        auto __cycle_tilde_01_phasei = this->cycle_tilde_01_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_01_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_01_buffer[(Index)idx];
                number y1 = __cycle_tilde_01_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_01_f2i));
                    __cycle_tilde_01_phasei = uint32_add(__cycle_tilde_01_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_01_phasei = __cycle_tilde_01_phasei;
    }
    
    void linetilde_01_perform(SampleValue * out, Index n) {
        auto __linetilde_01_time = this->linetilde_01_time;
        auto __linetilde_01_keepramp = this->linetilde_01_keepramp;
        auto __linetilde_01_currentValue = this->linetilde_01_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_01_activeRamps->length)) {
            while ((bool)(this->linetilde_01_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_01_activeRamps[0];
                number inc = this->linetilde_01_activeRamps[1];
                number rampTimeInSamples = this->linetilde_01_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_01_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_01_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_01_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -281953904,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_01_keepramp))) {
                            __linetilde_01_time = 0;
                        }
                    }
                }
    
                __linetilde_01_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_01_currentValue;
            i++;
        }
    
        this->linetilde_01_currentValue = __linetilde_01_currentValue;
        this->linetilde_01_time = __linetilde_01_time;
    }
    
    void numbertilde_02_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_02_currentIntervalInSamples = this->numbertilde_02_currentIntervalInSamples;
        auto __numbertilde_02_lastValue = this->numbertilde_02_lastValue;
        auto __numbertilde_02_currentInterval = this->numbertilde_02_currentInterval;
        auto __numbertilde_02_rampInSamples = this->numbertilde_02_rampInSamples;
        auto __numbertilde_02_outValue = this->numbertilde_02_outValue;
        auto __numbertilde_02_currentMode = this->numbertilde_02_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_02_currentMode == 0) {
                output[(Index)i] = this->numbertilde_02_smooth_next(
                    __numbertilde_02_outValue,
                    __numbertilde_02_rampInSamples,
                    __numbertilde_02_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_02_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_02_lastValue && __numbertilde_02_currentInterval <= 0) {
            __numbertilde_02_currentInterval = __numbertilde_02_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                694892522,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_02_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-31"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_02_currentInterval = __numbertilde_02_currentInterval;
        this->numbertilde_02_lastValue = __numbertilde_02_lastValue;
    }
    
    void cycle_tilde_02_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_02_f2i = this->cycle_tilde_02_f2i;
        auto __cycle_tilde_02_buffer = this->cycle_tilde_02_buffer;
        auto __cycle_tilde_02_phasei = this->cycle_tilde_02_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_02_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_02_buffer[(Index)idx];
                number y1 = __cycle_tilde_02_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_02_f2i));
                    __cycle_tilde_02_phasei = uint32_add(__cycle_tilde_02_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_02_phasei = __cycle_tilde_02_phasei;
    }
    
    void numbertilde_03_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_03_currentIntervalInSamples = this->numbertilde_03_currentIntervalInSamples;
        auto __numbertilde_03_lastValue = this->numbertilde_03_lastValue;
        auto __numbertilde_03_currentInterval = this->numbertilde_03_currentInterval;
        auto __numbertilde_03_rampInSamples = this->numbertilde_03_rampInSamples;
        auto __numbertilde_03_outValue = this->numbertilde_03_outValue;
        auto __numbertilde_03_currentMode = this->numbertilde_03_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_03_currentMode == 0) {
                output[(Index)i] = this->numbertilde_03_smooth_next(
                    __numbertilde_03_outValue,
                    __numbertilde_03_rampInSamples,
                    __numbertilde_03_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_03_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_03_lastValue && __numbertilde_03_currentInterval <= 0) {
            __numbertilde_03_currentInterval = __numbertilde_03_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                1396722025,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_03_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-32"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_03_currentInterval = __numbertilde_03_currentInterval;
        this->numbertilde_03_lastValue = __numbertilde_03_lastValue;
    }
    
    void cycle_tilde_03_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_03_f2i = this->cycle_tilde_03_f2i;
        auto __cycle_tilde_03_buffer = this->cycle_tilde_03_buffer;
        auto __cycle_tilde_03_phasei = this->cycle_tilde_03_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_03_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_03_buffer[(Index)idx];
                number y1 = __cycle_tilde_03_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_03_f2i));
                    __cycle_tilde_03_phasei = uint32_add(__cycle_tilde_03_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_03_phasei = __cycle_tilde_03_phasei;
    }
    
    void numbertilde_04_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_04_currentIntervalInSamples = this->numbertilde_04_currentIntervalInSamples;
        auto __numbertilde_04_lastValue = this->numbertilde_04_lastValue;
        auto __numbertilde_04_currentInterval = this->numbertilde_04_currentInterval;
        auto __numbertilde_04_rampInSamples = this->numbertilde_04_rampInSamples;
        auto __numbertilde_04_outValue = this->numbertilde_04_outValue;
        auto __numbertilde_04_currentMode = this->numbertilde_04_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_04_currentMode == 0) {
                output[(Index)i] = this->numbertilde_04_smooth_next(
                    __numbertilde_04_outValue,
                    __numbertilde_04_rampInSamples,
                    __numbertilde_04_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_04_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_04_lastValue && __numbertilde_04_currentInterval <= 0) {
            __numbertilde_04_currentInterval = __numbertilde_04_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                2098551528,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_04_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-33"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_04_currentInterval = __numbertilde_04_currentInterval;
        this->numbertilde_04_lastValue = __numbertilde_04_lastValue;
    }
    
    void cycle_tilde_04_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_04_f2i = this->cycle_tilde_04_f2i;
        auto __cycle_tilde_04_buffer = this->cycle_tilde_04_buffer;
        auto __cycle_tilde_04_phasei = this->cycle_tilde_04_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_04_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_04_buffer[(Index)idx];
                number y1 = __cycle_tilde_04_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_04_f2i));
                    __cycle_tilde_04_phasei = uint32_add(__cycle_tilde_04_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_04_phasei = __cycle_tilde_04_phasei;
    }
    
    void numbertilde_05_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_05_currentIntervalInSamples = this->numbertilde_05_currentIntervalInSamples;
        auto __numbertilde_05_lastValue = this->numbertilde_05_lastValue;
        auto __numbertilde_05_currentInterval = this->numbertilde_05_currentInterval;
        auto __numbertilde_05_rampInSamples = this->numbertilde_05_rampInSamples;
        auto __numbertilde_05_outValue = this->numbertilde_05_outValue;
        auto __numbertilde_05_currentMode = this->numbertilde_05_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_05_currentMode == 0) {
                output[(Index)i] = this->numbertilde_05_smooth_next(
                    __numbertilde_05_outValue,
                    __numbertilde_05_rampInSamples,
                    __numbertilde_05_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_05_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_05_lastValue && __numbertilde_05_currentInterval <= 0) {
            __numbertilde_05_currentInterval = __numbertilde_05_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_05_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-34"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_05_currentInterval = __numbertilde_05_currentInterval;
        this->numbertilde_05_lastValue = __numbertilde_05_lastValue;
    }
    
    void cycle_tilde_05_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_05_f2i = this->cycle_tilde_05_f2i;
        auto __cycle_tilde_05_buffer = this->cycle_tilde_05_buffer;
        auto __cycle_tilde_05_phasei = this->cycle_tilde_05_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_05_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_05_buffer[(Index)idx];
                number y1 = __cycle_tilde_05_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_05_f2i));
                    __cycle_tilde_05_phasei = uint32_add(__cycle_tilde_05_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_05_phasei = __cycle_tilde_05_phasei;
    }
    
    void numbertilde_06_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_06_currentIntervalInSamples = this->numbertilde_06_currentIntervalInSamples;
        auto __numbertilde_06_lastValue = this->numbertilde_06_lastValue;
        auto __numbertilde_06_currentInterval = this->numbertilde_06_currentInterval;
        auto __numbertilde_06_rampInSamples = this->numbertilde_06_rampInSamples;
        auto __numbertilde_06_outValue = this->numbertilde_06_outValue;
        auto __numbertilde_06_currentMode = this->numbertilde_06_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_06_currentMode == 0) {
                output[(Index)i] = this->numbertilde_06_smooth_next(
                    __numbertilde_06_outValue,
                    __numbertilde_06_rampInSamples,
                    __numbertilde_06_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_06_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_06_lastValue && __numbertilde_06_currentInterval <= 0) {
            __numbertilde_06_currentInterval = __numbertilde_06_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -6936981,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_06_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("ChInst/number~_obj-19"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_06_currentInterval = __numbertilde_06_currentInterval;
        this->numbertilde_06_lastValue = __numbertilde_06_lastValue;
    }
    
    void p_02_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_02->process(ins, 2, outs, 1, n);
    }
    
    void p_01_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_01->process(ins, 2, outs, 1, n);
    }
    
    void p_03_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_03->process(ins, 2, outs, 1, n);
    }
    
    void p_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_04->process(ins, 2, outs, 1, n);
    }
    
    void p_05_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: Osc
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<1> outs = {out1};
        this->p_05->process(ins, 2, outs, 1, n);
    }
    
    void signaladder_01_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i] + in5[(Index)i];
        }
    }
    
    void dspexpr_01_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void data_01_srout_set(number ) {}
    
    void data_01_chanout_set(number ) {}
    
    void data_01_sizeout_set(number v) {
        this->data_01_sizeout = v;
    }
    
    void numberobj_01_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_01_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_01_value = localvalue;
    }
    
    number numbertilde_01_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_01_smooth_d_prev);
        this->numbertilde_01_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_01_smooth_d_dspsetup() {
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_smooth_d_reset() {
        this->numbertilde_01_smooth_d_prev = 0;
    }
    
    number numbertilde_01_smooth_next(number x, number up, number down) {
        if (this->numbertilde_01_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_01_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_01_smooth_index = _up;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _up;
            } else if (x < this->numbertilde_01_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_01_smooth_index = _down;
                this->numbertilde_01_smooth_increment = (x - this->numbertilde_01_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_01_smooth_index > 0) {
            this->numbertilde_01_smooth_prev += this->numbertilde_01_smooth_increment;
            this->numbertilde_01_smooth_index -= 1;
        } else {
            this->numbertilde_01_smooth_prev = x;
        }
    
        return this->numbertilde_01_smooth_prev;
    }
    
    void numbertilde_01_smooth_reset() {
        this->numbertilde_01_smooth_prev = 0;
        this->numbertilde_01_smooth_index = 0;
        this->numbertilde_01_smooth_increment = 0;
        this->numbertilde_01_smooth_d_reset();
    }
    
    void numbertilde_01_init() {
        this->numbertilde_01_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-25"), 1, this->_currentTime);
    }
    
    void numbertilde_01_dspsetup(bool force) {
        if ((bool)(this->numbertilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_01_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_01_currentInterval = this->numbertilde_01_currentIntervalInSamples;
        this->numbertilde_01_rampInSamples = this->mstosamps(this->numbertilde_01_ramp);
        this->numbertilde_01_setupDone = true;
        this->numbertilde_01_smooth_d_dspsetup();
    }
    
    number cycle_tilde_01_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_01_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_01_ph_conv;
    
        if (this->cycle_tilde_01_ph_currentPhase < 0.)
            this->cycle_tilde_01_ph_currentPhase = 1. + this->cycle_tilde_01_ph_currentPhase;
    
        if (this->cycle_tilde_01_ph_currentPhase > 1.)
            this->cycle_tilde_01_ph_currentPhase = this->cycle_tilde_01_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_01_ph_currentPhase;
        this->cycle_tilde_01_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_01_ph_reset() {
        this->cycle_tilde_01_ph_currentPhase = 0;
    }
    
    void cycle_tilde_01_ph_dspsetup() {
        this->cycle_tilde_01_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_01_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_01_phasei = 0;
        this->cycle_tilde_01_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
        this->cycle_tilde_01_setupDone = true;
        this->cycle_tilde_01_ph_dspsetup();
    }
    
    void cycle_tilde_01_bufferUpdated() {
        this->cycle_tilde_01_wrap = (long)(this->cycle_tilde_01_buffer->getSize()) - 1;
    }
    
    void message_01_init() {
        this->message_01_set_set({0.25, 100, 0, 5000});
    }
    
    number numbertilde_02_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_02_smooth_d_prev);
        this->numbertilde_02_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_02_smooth_d_dspsetup() {
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_smooth_d_reset() {
        this->numbertilde_02_smooth_d_prev = 0;
    }
    
    number numbertilde_02_smooth_next(number x, number up, number down) {
        if (this->numbertilde_02_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_02_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_02_smooth_index = _up;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _up;
            } else if (x < this->numbertilde_02_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_02_smooth_index = _down;
                this->numbertilde_02_smooth_increment = (x - this->numbertilde_02_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_02_smooth_index > 0) {
            this->numbertilde_02_smooth_prev += this->numbertilde_02_smooth_increment;
            this->numbertilde_02_smooth_index -= 1;
        } else {
            this->numbertilde_02_smooth_prev = x;
        }
    
        return this->numbertilde_02_smooth_prev;
    }
    
    void numbertilde_02_smooth_reset() {
        this->numbertilde_02_smooth_prev = 0;
        this->numbertilde_02_smooth_index = 0;
        this->numbertilde_02_smooth_increment = 0;
        this->numbertilde_02_smooth_d_reset();
    }
    
    void numbertilde_02_init() {
        this->numbertilde_02_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-31"), 1, this->_currentTime);
    }
    
    void numbertilde_02_dspsetup(bool force) {
        if ((bool)(this->numbertilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_02_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_02_currentInterval = this->numbertilde_02_currentIntervalInSamples;
        this->numbertilde_02_rampInSamples = this->mstosamps(this->numbertilde_02_ramp);
        this->numbertilde_02_setupDone = true;
        this->numbertilde_02_smooth_d_dspsetup();
    }
    
    number cycle_tilde_02_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_02_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_02_ph_conv;
    
        if (this->cycle_tilde_02_ph_currentPhase < 0.)
            this->cycle_tilde_02_ph_currentPhase = 1. + this->cycle_tilde_02_ph_currentPhase;
    
        if (this->cycle_tilde_02_ph_currentPhase > 1.)
            this->cycle_tilde_02_ph_currentPhase = this->cycle_tilde_02_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_02_ph_currentPhase;
        this->cycle_tilde_02_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_02_ph_reset() {
        this->cycle_tilde_02_ph_currentPhase = 0;
    }
    
    void cycle_tilde_02_ph_dspsetup() {
        this->cycle_tilde_02_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_02_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_02_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_02_phasei = 0;
        this->cycle_tilde_02_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
        this->cycle_tilde_02_setupDone = true;
        this->cycle_tilde_02_ph_dspsetup();
    }
    
    void cycle_tilde_02_bufferUpdated() {
        this->cycle_tilde_02_wrap = (long)(this->cycle_tilde_02_buffer->getSize()) - 1;
    }
    
    void data_01_init() {
        this->data_01_buffer->setWantsFill(true);
    }
    
    Index data_01_evaluateSizeExpr(number samplerate, number vectorsize) {
        RNBO_UNUSED(vectorsize);
        RNBO_UNUSED(samplerate);
        number size = 0;
        return (Index)(size);
    }
    
    void data_01_dspsetup(bool force) {
        if ((bool)(this->data_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        if (this->data_01_sizemode == 2) {
            this->data_01_buffer = this->data_01_buffer->setSize((Index)(this->mstosamps(this->data_01_sizems)));
            updateDataRef(this, this->data_01_buffer);
        } else if (this->data_01_sizemode == 3) {
            this->data_01_buffer = this->data_01_buffer->setSize(this->data_01_evaluateSizeExpr(this->samplerate(), this->vectorsize()));
            updateDataRef(this, this->data_01_buffer);
        }
    
        this->data_01_setupDone = true;
    }
    
    void data_01_bufferUpdated() {
        this->data_01_report();
    }
    
    void data_01_report() {
        this->data_01_srout_set(this->data_01_buffer->getSampleRate());
        this->data_01_chanout_set(this->data_01_buffer->getChannels());
        this->data_01_sizeout_set(this->data_01_buffer->getSize());
    }
    
    number numbertilde_03_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_03_smooth_d_prev);
        this->numbertilde_03_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_03_smooth_d_dspsetup() {
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_smooth_d_reset() {
        this->numbertilde_03_smooth_d_prev = 0;
    }
    
    number numbertilde_03_smooth_next(number x, number up, number down) {
        if (this->numbertilde_03_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_03_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_03_smooth_index = _up;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _up;
            } else if (x < this->numbertilde_03_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_03_smooth_index = _down;
                this->numbertilde_03_smooth_increment = (x - this->numbertilde_03_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_03_smooth_index > 0) {
            this->numbertilde_03_smooth_prev += this->numbertilde_03_smooth_increment;
            this->numbertilde_03_smooth_index -= 1;
        } else {
            this->numbertilde_03_smooth_prev = x;
        }
    
        return this->numbertilde_03_smooth_prev;
    }
    
    void numbertilde_03_smooth_reset() {
        this->numbertilde_03_smooth_prev = 0;
        this->numbertilde_03_smooth_index = 0;
        this->numbertilde_03_smooth_increment = 0;
        this->numbertilde_03_smooth_d_reset();
    }
    
    void numbertilde_03_init() {
        this->numbertilde_03_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-32"), 1, this->_currentTime);
    }
    
    void numbertilde_03_dspsetup(bool force) {
        if ((bool)(this->numbertilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_03_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_03_currentInterval = this->numbertilde_03_currentIntervalInSamples;
        this->numbertilde_03_rampInSamples = this->mstosamps(this->numbertilde_03_ramp);
        this->numbertilde_03_setupDone = true;
        this->numbertilde_03_smooth_d_dspsetup();
    }
    
    number cycle_tilde_03_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_03_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_03_ph_conv;
    
        if (this->cycle_tilde_03_ph_currentPhase < 0.)
            this->cycle_tilde_03_ph_currentPhase = 1. + this->cycle_tilde_03_ph_currentPhase;
    
        if (this->cycle_tilde_03_ph_currentPhase > 1.)
            this->cycle_tilde_03_ph_currentPhase = this->cycle_tilde_03_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_03_ph_currentPhase;
        this->cycle_tilde_03_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_03_ph_reset() {
        this->cycle_tilde_03_ph_currentPhase = 0;
    }
    
    void cycle_tilde_03_ph_dspsetup() {
        this->cycle_tilde_03_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_03_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_03_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_03_phasei = 0;
        this->cycle_tilde_03_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
        this->cycle_tilde_03_setupDone = true;
        this->cycle_tilde_03_ph_dspsetup();
    }
    
    void cycle_tilde_03_bufferUpdated() {
        this->cycle_tilde_03_wrap = (long)(this->cycle_tilde_03_buffer->getSize()) - 1;
    }
    
    number numbertilde_04_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_04_smooth_d_prev);
        this->numbertilde_04_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_04_smooth_d_dspsetup() {
        this->numbertilde_04_smooth_d_reset();
    }
    
    void numbertilde_04_smooth_d_reset() {
        this->numbertilde_04_smooth_d_prev = 0;
    }
    
    number numbertilde_04_smooth_next(number x, number up, number down) {
        if (this->numbertilde_04_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_04_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_04_smooth_index = _up;
                this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _up;
            } else if (x < this->numbertilde_04_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_04_smooth_index = _down;
                this->numbertilde_04_smooth_increment = (x - this->numbertilde_04_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_04_smooth_index > 0) {
            this->numbertilde_04_smooth_prev += this->numbertilde_04_smooth_increment;
            this->numbertilde_04_smooth_index -= 1;
        } else {
            this->numbertilde_04_smooth_prev = x;
        }
    
        return this->numbertilde_04_smooth_prev;
    }
    
    void numbertilde_04_smooth_reset() {
        this->numbertilde_04_smooth_prev = 0;
        this->numbertilde_04_smooth_index = 0;
        this->numbertilde_04_smooth_increment = 0;
        this->numbertilde_04_smooth_d_reset();
    }
    
    void numbertilde_04_init() {
        this->numbertilde_04_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-33"), 1, this->_currentTime);
    }
    
    void numbertilde_04_dspsetup(bool force) {
        if ((bool)(this->numbertilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_04_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_04_currentInterval = this->numbertilde_04_currentIntervalInSamples;
        this->numbertilde_04_rampInSamples = this->mstosamps(this->numbertilde_04_ramp);
        this->numbertilde_04_setupDone = true;
        this->numbertilde_04_smooth_d_dspsetup();
    }
    
    number cycle_tilde_04_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_04_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_04_ph_conv;
    
        if (this->cycle_tilde_04_ph_currentPhase < 0.)
            this->cycle_tilde_04_ph_currentPhase = 1. + this->cycle_tilde_04_ph_currentPhase;
    
        if (this->cycle_tilde_04_ph_currentPhase > 1.)
            this->cycle_tilde_04_ph_currentPhase = this->cycle_tilde_04_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_04_ph_currentPhase;
        this->cycle_tilde_04_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_04_ph_reset() {
        this->cycle_tilde_04_ph_currentPhase = 0;
    }
    
    void cycle_tilde_04_ph_dspsetup() {
        this->cycle_tilde_04_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_04_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_04_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_04_phasei = 0;
        this->cycle_tilde_04_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_04_wrap = (long)(this->cycle_tilde_04_buffer->getSize()) - 1;
        this->cycle_tilde_04_setupDone = true;
        this->cycle_tilde_04_ph_dspsetup();
    }
    
    void cycle_tilde_04_bufferUpdated() {
        this->cycle_tilde_04_wrap = (long)(this->cycle_tilde_04_buffer->getSize()) - 1;
    }
    
    void numberobj_01_init() {
        this->numberobj_01_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_01_value;
    }
    
    void numberobj_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_01_value_set(preset["value"]);
    }
    
    void param_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_01_value;
    }
    
    void param_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_01_value_set(preset["value"]);
    }
    
    number numbertilde_05_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_05_smooth_d_prev);
        this->numbertilde_05_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_05_smooth_d_dspsetup() {
        this->numbertilde_05_smooth_d_reset();
    }
    
    void numbertilde_05_smooth_d_reset() {
        this->numbertilde_05_smooth_d_prev = 0;
    }
    
    number numbertilde_05_smooth_next(number x, number up, number down) {
        if (this->numbertilde_05_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_05_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_05_smooth_index = _up;
                this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _up;
            } else if (x < this->numbertilde_05_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_05_smooth_index = _down;
                this->numbertilde_05_smooth_increment = (x - this->numbertilde_05_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_05_smooth_index > 0) {
            this->numbertilde_05_smooth_prev += this->numbertilde_05_smooth_increment;
            this->numbertilde_05_smooth_index -= 1;
        } else {
            this->numbertilde_05_smooth_prev = x;
        }
    
        return this->numbertilde_05_smooth_prev;
    }
    
    void numbertilde_05_smooth_reset() {
        this->numbertilde_05_smooth_prev = 0;
        this->numbertilde_05_smooth_index = 0;
        this->numbertilde_05_smooth_increment = 0;
        this->numbertilde_05_smooth_d_reset();
    }
    
    void numbertilde_05_init() {
        this->numbertilde_05_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-34"), 1, this->_currentTime);
    }
    
    void numbertilde_05_dspsetup(bool force) {
        if ((bool)(this->numbertilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_05_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_05_currentInterval = this->numbertilde_05_currentIntervalInSamples;
        this->numbertilde_05_rampInSamples = this->mstosamps(this->numbertilde_05_ramp);
        this->numbertilde_05_setupDone = true;
        this->numbertilde_05_smooth_d_dspsetup();
    }
    
    number cycle_tilde_05_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_05_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_05_ph_conv;
    
        if (this->cycle_tilde_05_ph_currentPhase < 0.)
            this->cycle_tilde_05_ph_currentPhase = 1. + this->cycle_tilde_05_ph_currentPhase;
    
        if (this->cycle_tilde_05_ph_currentPhase > 1.)
            this->cycle_tilde_05_ph_currentPhase = this->cycle_tilde_05_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_05_ph_currentPhase;
        this->cycle_tilde_05_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_05_ph_reset() {
        this->cycle_tilde_05_ph_currentPhase = 0;
    }
    
    void cycle_tilde_05_ph_dspsetup() {
        this->cycle_tilde_05_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_05_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_05_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_05_phasei = 0;
        this->cycle_tilde_05_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_05_wrap = (long)(this->cycle_tilde_05_buffer->getSize()) - 1;
        this->cycle_tilde_05_setupDone = true;
        this->cycle_tilde_05_ph_dspsetup();
    }
    
    void cycle_tilde_05_bufferUpdated() {
        this->cycle_tilde_05_wrap = (long)(this->cycle_tilde_05_buffer->getSize()) - 1;
    }
    
    void param_02_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_02_value;
    }
    
    void param_02_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_02_value_set(preset["value"]);
    }
    
    number numbertilde_06_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_06_smooth_d_prev);
        this->numbertilde_06_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_06_smooth_d_dspsetup() {
        this->numbertilde_06_smooth_d_reset();
    }
    
    void numbertilde_06_smooth_d_reset() {
        this->numbertilde_06_smooth_d_prev = 0;
    }
    
    number numbertilde_06_smooth_next(number x, number up, number down) {
        if (this->numbertilde_06_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_06_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_06_smooth_index = _up;
                this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _up;
            } else if (x < this->numbertilde_06_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_06_smooth_index = _down;
                this->numbertilde_06_smooth_increment = (x - this->numbertilde_06_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_06_smooth_index > 0) {
            this->numbertilde_06_smooth_prev += this->numbertilde_06_smooth_increment;
            this->numbertilde_06_smooth_index -= 1;
        } else {
            this->numbertilde_06_smooth_prev = x;
        }
    
        return this->numbertilde_06_smooth_prev;
    }
    
    void numbertilde_06_smooth_reset() {
        this->numbertilde_06_smooth_prev = 0;
        this->numbertilde_06_smooth_index = 0;
        this->numbertilde_06_smooth_increment = 0;
        this->numbertilde_06_smooth_d_reset();
    }
    
    void numbertilde_06_init() {
        this->numbertilde_06_currentMode = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("ChInst/number~_obj-19"), 1, this->_currentTime);
    }
    
    void numbertilde_06_dspsetup(bool force) {
        if ((bool)(this->numbertilde_06_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_06_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_06_currentInterval = this->numbertilde_06_currentIntervalInSamples;
        this->numbertilde_06_rampInSamples = this->mstosamps(this->numbertilde_06_ramp);
        this->numbertilde_06_setupDone = true;
        this->numbertilde_06_smooth_d_dspsetup();
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        p_01_target = 0;
        numbertilde_01_input_number = 0;
        numbertilde_01_ramp = 0;
        cycle_tilde_01_frequency = 0;
        cycle_tilde_01_phase_offset = 0;
        delay_01_time = 20;
        delay_01_delayall = 1;
        receive_01_output_number = 0;
        linetilde_01_time = 0;
        linetilde_01_keepramp = 0;
        p_02_target = 0;
        numbertilde_02_input_number = 0;
        numbertilde_02_ramp = 0;
        dspexpr_01_in1 = 0;
        dspexpr_01_in2 = 0.25;
        cycle_tilde_02_frequency = 0;
        cycle_tilde_02_phase_offset = 0;
        data_01_sizeout = 0;
        data_01_size = 0;
        data_01_sizems = 0;
        data_01_normalize = 0.995;
        data_01_channels = 1;
        p_03_target = 0;
        numbertilde_03_input_number = 0;
        numbertilde_03_ramp = 0;
        cycle_tilde_03_frequency = 0;
        cycle_tilde_03_phase_offset = 0;
        p_04_target = 0;
        numbertilde_04_input_number = 0;
        numbertilde_04_ramp = 0;
        cycle_tilde_04_frequency = 0;
        cycle_tilde_04_phase_offset = 0;
        loadmess_01_message = { 256 };
        numberobj_01_value = 0;
        numberobj_01_value_setter(numberobj_01_value);
        param_01_value = 256;
        p_05_target = 0;
        numbertilde_05_input_number = 0;
        numbertilde_05_ramp = 0;
        receive_02_output_number = 0;
        cycle_tilde_05_frequency = 0;
        cycle_tilde_05_phase_offset = 0;
        param_02_value = 1;
        numbertilde_06_input_number = 0;
        numbertilde_06_ramp = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        signals[7] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numbertilde_01_currentInterval = 0;
        numbertilde_01_currentIntervalInSamples = 0;
        numbertilde_01_lastValue = 0;
        numbertilde_01_outValue = 0;
        numbertilde_01_rampInSamples = 0;
        numbertilde_01_currentMode = 0;
        numbertilde_01_smooth_d_prev = 0;
        numbertilde_01_smooth_prev = 0;
        numbertilde_01_smooth_index = 0;
        numbertilde_01_smooth_increment = 0;
        numbertilde_01_setupDone = false;
        cycle_tilde_01_wrap = 0;
        cycle_tilde_01_ph_currentPhase = 0;
        cycle_tilde_01_ph_conv = 0;
        cycle_tilde_01_setupDone = false;
        linetilde_01_currentValue = 0;
        numbertilde_02_currentInterval = 0;
        numbertilde_02_currentIntervalInSamples = 0;
        numbertilde_02_lastValue = 0;
        numbertilde_02_outValue = 0;
        numbertilde_02_rampInSamples = 0;
        numbertilde_02_currentMode = 0;
        numbertilde_02_smooth_d_prev = 0;
        numbertilde_02_smooth_prev = 0;
        numbertilde_02_smooth_index = 0;
        numbertilde_02_smooth_increment = 0;
        numbertilde_02_setupDone = false;
        cycle_tilde_02_wrap = 0;
        cycle_tilde_02_ph_currentPhase = 0;
        cycle_tilde_02_ph_conv = 0;
        cycle_tilde_02_setupDone = false;
        data_01_sizemode = 0;
        data_01_setupDone = false;
        numbertilde_03_currentInterval = 0;
        numbertilde_03_currentIntervalInSamples = 0;
        numbertilde_03_lastValue = 0;
        numbertilde_03_outValue = 0;
        numbertilde_03_rampInSamples = 0;
        numbertilde_03_currentMode = 0;
        numbertilde_03_smooth_d_prev = 0;
        numbertilde_03_smooth_prev = 0;
        numbertilde_03_smooth_index = 0;
        numbertilde_03_smooth_increment = 0;
        numbertilde_03_setupDone = false;
        cycle_tilde_03_wrap = 0;
        cycle_tilde_03_ph_currentPhase = 0;
        cycle_tilde_03_ph_conv = 0;
        cycle_tilde_03_setupDone = false;
        numbertilde_04_currentInterval = 0;
        numbertilde_04_currentIntervalInSamples = 0;
        numbertilde_04_lastValue = 0;
        numbertilde_04_outValue = 0;
        numbertilde_04_rampInSamples = 0;
        numbertilde_04_currentMode = 0;
        numbertilde_04_smooth_d_prev = 0;
        numbertilde_04_smooth_prev = 0;
        numbertilde_04_smooth_index = 0;
        numbertilde_04_smooth_increment = 0;
        numbertilde_04_setupDone = false;
        cycle_tilde_04_wrap = 0;
        cycle_tilde_04_ph_currentPhase = 0;
        cycle_tilde_04_ph_conv = 0;
        cycle_tilde_04_setupDone = false;
        numberobj_01_currentFormat = 6;
        numberobj_01_lastValue = 0;
        param_01_lastValue = 0;
        numbertilde_05_currentInterval = 0;
        numbertilde_05_currentIntervalInSamples = 0;
        numbertilde_05_lastValue = 0;
        numbertilde_05_outValue = 0;
        numbertilde_05_rampInSamples = 0;
        numbertilde_05_currentMode = 0;
        numbertilde_05_smooth_d_prev = 0;
        numbertilde_05_smooth_prev = 0;
        numbertilde_05_smooth_index = 0;
        numbertilde_05_smooth_increment = 0;
        numbertilde_05_setupDone = false;
        cycle_tilde_05_wrap = 0;
        cycle_tilde_05_ph_currentPhase = 0;
        cycle_tilde_05_ph_conv = 0;
        cycle_tilde_05_setupDone = false;
        param_02_lastValue = 0;
        numbertilde_06_currentInterval = 0;
        numbertilde_06_currentIntervalInSamples = 0;
        numbertilde_06_lastValue = 0;
        numbertilde_06_outValue = 0;
        numbertilde_06_rampInSamples = 0;
        numbertilde_06_currentMode = 0;
        numbertilde_06_smooth_d_prev = 0;
        numbertilde_06_smooth_prev = 0;
        numbertilde_06_smooth_index = 0;
        numbertilde_06_smooth_increment = 0;
        numbertilde_06_setupDone = false;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number p_01_target;
        number numbertilde_01_input_number;
        number numbertilde_01_ramp;
        number cycle_tilde_01_frequency;
        number cycle_tilde_01_phase_offset;
        number delay_01_time;
        number delay_01_delayall;
        number receive_01_output_number;
        list receive_01_output_list;
        list message_01_set;
        list linetilde_01_segments;
        number linetilde_01_time;
        number linetilde_01_keepramp;
        number p_02_target;
        number numbertilde_02_input_number;
        number numbertilde_02_ramp;
        number dspexpr_01_in1;
        number dspexpr_01_in2;
        number cycle_tilde_02_frequency;
        number cycle_tilde_02_phase_offset;
        number data_01_sizeout;
        number data_01_size;
        number data_01_sizems;
        number data_01_normalize;
        number data_01_channels;
        number p_03_target;
        number numbertilde_03_input_number;
        number numbertilde_03_ramp;
        number cycle_tilde_03_frequency;
        number cycle_tilde_03_phase_offset;
        number p_04_target;
        number numbertilde_04_input_number;
        number numbertilde_04_ramp;
        number cycle_tilde_04_frequency;
        number cycle_tilde_04_phase_offset;
        list loadmess_01_message;
        number numberobj_01_value;
        number param_01_value;
        number p_05_target;
        number numbertilde_05_input_number;
        number numbertilde_05_ramp;
        number receive_02_output_number;
        list receive_02_output_list;
        number cycle_tilde_05_frequency;
        number cycle_tilde_05_phase_offset;
        number param_02_value;
        number numbertilde_06_input_number;
        number numbertilde_06_ramp;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[8];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        SampleIndex numbertilde_01_currentInterval;
        SampleIndex numbertilde_01_currentIntervalInSamples;
        number numbertilde_01_lastValue;
        number numbertilde_01_outValue;
        number numbertilde_01_rampInSamples;
        Int numbertilde_01_currentMode;
        number numbertilde_01_smooth_d_prev;
        number numbertilde_01_smooth_prev;
        number numbertilde_01_smooth_index;
        number numbertilde_01_smooth_increment;
        bool numbertilde_01_setupDone;
        Float64BufferRef cycle_tilde_01_buffer;
        long cycle_tilde_01_wrap;
        uint32_t cycle_tilde_01_phasei;
        SampleValue cycle_tilde_01_f2i;
        number cycle_tilde_01_ph_currentPhase;
        number cycle_tilde_01_ph_conv;
        bool cycle_tilde_01_setupDone;
        list linetilde_01_activeRamps;
        number linetilde_01_currentValue;
        SampleIndex numbertilde_02_currentInterval;
        SampleIndex numbertilde_02_currentIntervalInSamples;
        number numbertilde_02_lastValue;
        number numbertilde_02_outValue;
        number numbertilde_02_rampInSamples;
        Int numbertilde_02_currentMode;
        number numbertilde_02_smooth_d_prev;
        number numbertilde_02_smooth_prev;
        number numbertilde_02_smooth_index;
        number numbertilde_02_smooth_increment;
        bool numbertilde_02_setupDone;
        Float64BufferRef cycle_tilde_02_buffer;
        long cycle_tilde_02_wrap;
        uint32_t cycle_tilde_02_phasei;
        SampleValue cycle_tilde_02_f2i;
        number cycle_tilde_02_ph_currentPhase;
        number cycle_tilde_02_ph_conv;
        bool cycle_tilde_02_setupDone;
        Float32BufferRef data_01_buffer;
        Int data_01_sizemode;
        bool data_01_setupDone;
        SampleIndex numbertilde_03_currentInterval;
        SampleIndex numbertilde_03_currentIntervalInSamples;
        number numbertilde_03_lastValue;
        number numbertilde_03_outValue;
        number numbertilde_03_rampInSamples;
        Int numbertilde_03_currentMode;
        number numbertilde_03_smooth_d_prev;
        number numbertilde_03_smooth_prev;
        number numbertilde_03_smooth_index;
        number numbertilde_03_smooth_increment;
        bool numbertilde_03_setupDone;
        Float64BufferRef cycle_tilde_03_buffer;
        long cycle_tilde_03_wrap;
        uint32_t cycle_tilde_03_phasei;
        SampleValue cycle_tilde_03_f2i;
        number cycle_tilde_03_ph_currentPhase;
        number cycle_tilde_03_ph_conv;
        bool cycle_tilde_03_setupDone;
        SampleIndex numbertilde_04_currentInterval;
        SampleIndex numbertilde_04_currentIntervalInSamples;
        number numbertilde_04_lastValue;
        number numbertilde_04_outValue;
        number numbertilde_04_rampInSamples;
        Int numbertilde_04_currentMode;
        number numbertilde_04_smooth_d_prev;
        number numbertilde_04_smooth_prev;
        number numbertilde_04_smooth_index;
        number numbertilde_04_smooth_increment;
        bool numbertilde_04_setupDone;
        Float64BufferRef cycle_tilde_04_buffer;
        long cycle_tilde_04_wrap;
        uint32_t cycle_tilde_04_phasei;
        SampleValue cycle_tilde_04_f2i;
        number cycle_tilde_04_ph_currentPhase;
        number cycle_tilde_04_ph_conv;
        bool cycle_tilde_04_setupDone;
        Int numberobj_01_currentFormat;
        number numberobj_01_lastValue;
        number param_01_lastValue;
        SampleIndex numbertilde_05_currentInterval;
        SampleIndex numbertilde_05_currentIntervalInSamples;
        number numbertilde_05_lastValue;
        number numbertilde_05_outValue;
        number numbertilde_05_rampInSamples;
        Int numbertilde_05_currentMode;
        number numbertilde_05_smooth_d_prev;
        number numbertilde_05_smooth_prev;
        number numbertilde_05_smooth_index;
        number numbertilde_05_smooth_increment;
        bool numbertilde_05_setupDone;
        Float64BufferRef cycle_tilde_05_buffer;
        long cycle_tilde_05_wrap;
        uint32_t cycle_tilde_05_phasei;
        SampleValue cycle_tilde_05_f2i;
        number cycle_tilde_05_ph_currentPhase;
        number cycle_tilde_05_ph_conv;
        bool cycle_tilde_05_setupDone;
        number param_02_lastValue;
        SampleIndex numbertilde_06_currentInterval;
        SampleIndex numbertilde_06_currentIntervalInSamples;
        number numbertilde_06_lastValue;
        number numbertilde_06_outValue;
        number numbertilde_06_rampInSamples;
        Int numbertilde_06_currentMode;
        number numbertilde_06_smooth_d_prev;
        number numbertilde_06_smooth_prev;
        number numbertilde_06_smooth_index;
        number numbertilde_06_smooth_increment;
        bool numbertilde_06_setupDone;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_82* p_01;
        RNBOSubpatcher_83* p_02;
        RNBOSubpatcher_84* p_03;
        RNBOSubpatcher_85* p_04;
        RNBOSubpatcher_86* p_05;
    
};

class RNBOSubpatcher_99 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_88 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_99;
            friend class rnbomatic;
            
            public:
            
            class RNBOSubpatcher_87 : public PatcherInterfaceImpl {
                        
                        friend class RNBOSubpatcher_88;
                        friend class rnbomatic;
                        
                        public:
                        
                        RNBOSubpatcher_87()
                        {
                        }
                        
                        ~RNBOSubpatcher_87()
                        {
                        }
                        
                        virtual RNBOSubpatcher_88* getPatcher() const {
                            return static_cast<RNBOSubpatcher_88 *>(_parentPatcher);
                        }
                        
                        rnbomatic* getTopLevelPatcher() {
                            return this->getPatcher()->getTopLevelPatcher();
                        }
                        
                        void cancelClockEvents()
                        {
                            getEngine()->flushClockEvents(this, -871642103, false);
                        }
                        
                        Index voice() {
                            return this->_voiceIndex;
                        }
                        
                        number random(number low, number high) {
                            number range = high - low;
                            return globalrandom() * range + low;
                        }
                        
                        Index getNumMidiInputPorts() const {
                            return 0;
                        }
                        
                        void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
                        
                        Index getNumMidiOutputPorts() const {
                            return 0;
                        }
                        
                        void process(
                            const SampleValue * const* inputs,
                            Index numInputs,
                            SampleValue * const* outputs,
                            Index numOutputs,
                            Index n
                        ) {
                            RNBO_UNUSED(numOutputs);
                            RNBO_UNUSED(outputs);
                            RNBO_UNUSED(numInputs);
                            RNBO_UNUSED(inputs);
                            this->vs = n;
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->stackprotect_perform(n);
                            this->audioProcessSampleCount += this->vs;
                        }
                        
                        void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                            if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                                this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                                this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                                this->didAllocateSignals = true;
                            }
                        
                            const bool sampleRateChanged = sampleRate != this->sr;
                            const bool maxvsChanged = maxBlockSize != this->maxvs;
                            const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
                        
                            if (sampleRateChanged || maxvsChanged) {
                                this->vs = maxBlockSize;
                                this->maxvs = maxBlockSize;
                                this->sr = sampleRate;
                                this->invsr = 1 / sampleRate;
                            }
                        
                            RNBO_UNUSED(forceDSPSetup);
                        
                            if (sampleRateChanged)
                                this->onSampleRateChanged(sampleRate);
                        }
                        
                        void setProbingTarget(MessageTag id) {
                            switch (id) {
                            default:
                                {
                                this->setProbingIndex(-1);
                                break;
                                }
                            }
                        }
                        
                        void setProbingIndex(ProbingIndex ) {}
                        
                        Index getProbingChannels(MessageTag outletId) const {
                            RNBO_UNUSED(outletId);
                            return 0;
                        }
                        
                        Index getIsMuted()  {
                            return this->isMuted;
                        }
                        
                        void setIsMuted(Index v)  {
                            this->isMuted = v;
                        }
                        
                        void onSampleRateChanged(double ) {}
                        
                        Index getPatcherSerial() const {
                            return 0;
                        }
                        
                        void getState(PatcherStateInterface& ) {}
                        
                        void setState() {}
                        
                        void getPreset(PatcherStateInterface& ) {}
                        
                        void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
                        
                        void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValue(index, value, time);
                        }
                        
                        void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                            this->setParameterValue(index, this->getParameterValue(index), time);
                        }
                        
                        void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                            this->setParameterValueNormalized(index, value, time);
                        }
                        
                        ParameterValue getParameterValue(ParameterIndex index)  {
                            switch (index) {
                            default:
                                {
                                return 0;
                                }
                            }
                        }
                        
                        ParameterIndex getNumSignalInParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumSignalOutParameters() const {
                            return 0;
                        }
                        
                        ParameterIndex getNumParameters() const {
                            return 0;
                        }
                        
                        ConstCharPointer getParameterName(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        ConstCharPointer getParameterId(ParameterIndex index) const {
                            switch (index) {
                            default:
                                {
                                return "bogus";
                                }
                            }
                        }
                        
                        void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
                        
                        void sendParameter(ParameterIndex index, bool ignoreValue) {
                            this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
                        }
                        
                        void setParameterOffset(ParameterIndex offset) {
                            this->parameterOffset = offset;
                        }
                        
                        ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                            if (steps == 1) {
                                if (normalizedValue > 0) {
                                    normalizedValue = 1.;
                                }
                            } else {
                                ParameterValue oneStep = (number)1. / (steps - 1);
                                ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                                normalizedValue = numberOfSteps * oneStep;
                            }
                        
                            return normalizedValue;
                        }
                        
                        ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                        
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                            switch (index) {
                            default:
                                {
                                return value;
                                }
                            }
                        }
                        
                        void scheduleParamInit(ParameterIndex index, Index order) {
                            this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
                        }
                        
                        void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                            RNBO_UNUSED(value);
                            RNBO_UNUSED(hasValue);
                            this->updateTime(time);
                        
                            switch (index) {
                            case -871642103:
                                {
                                this->loadbang_01_startupbang_bang();
                                break;
                                }
                            }
                        }
                        
                        void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
                        
                        void processOutletEvent(
                            EngineLink* sender,
                            OutletIndex index,
                            ParameterValue value,
                            MillisecondTime time
                        ) {
                            this->updateTime(time);
                            this->processOutletAtCurrentTime(sender, index, value);
                        }
                        
                        void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("valin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/number_obj-14") == objectId)
                                    this->numberobj_02_valin_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/number_obj-6") == objectId)
                                    this->numberobj_03_valin_set(payload);
                        
                                break;
                                }
                            case TAG("format"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/number_obj-14") == objectId)
                                    this->numberobj_02_format_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/number_obj-6") == objectId)
                                    this->numberobj_03_format_set(payload);
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_02_listin_number_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_03_listin_number_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_04_listin_number_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processListMessage(
                            MessageTag tag,
                            MessageTag objectId,
                            MillisecondTime time,
                            const list& payload
                        ) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("listin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_02_listin_list_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_03_listin_list_set(payload);
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_04_listin_list_set(payload);
                        
                                break;
                                }
                            }
                        }
                        
                        void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                            this->updateTime(time);
                        
                            switch (tag) {
                            case TAG("bangin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/button_obj-16") == objectId)
                                    this->button_02_bangin_bang();
                        
                                break;
                                }
                            case TAG("startupbang"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/loadbang_obj-197") == objectId)
                                    this->loadbang_01_startupbang_bang();
                        
                                break;
                                }
                            case TAG("listin"):
                                {
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-43") == objectId)
                                    this->message_02_listin_bang_bang();
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-3") == objectId)
                                    this->message_03_listin_bang_bang();
                        
                                if (TAG("Chords/ChordColl/I_chordVariants/message_obj-8") == objectId)
                                    this->message_04_listin_bang_bang();
                        
                                break;
                                }
                            }
                        }
                        
                        MessageTagInfo resolveTag(MessageTag tag) const {
                            switch (tag) {
                            case TAG("bangout"):
                                {
                                return "bangout";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/button_obj-16"):
                                {
                                return "Chords/ChordColl/I_chordVariants/button_obj-16";
                                }
                            case TAG("valout"):
                                {
                                return "valout";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/number_obj-14"):
                                {
                                return "Chords/ChordColl/I_chordVariants/number_obj-14";
                                }
                            case TAG("setup"):
                                {
                                return "setup";
                                }
                            case TAG("listout"):
                                {
                                return "listout";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/message_obj-43"):
                                {
                                return "Chords/ChordColl/I_chordVariants/message_obj-43";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/message_obj-3"):
                                {
                                return "Chords/ChordColl/I_chordVariants/message_obj-3";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/message_obj-8"):
                                {
                                return "Chords/ChordColl/I_chordVariants/message_obj-8";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/number_obj-6"):
                                {
                                return "Chords/ChordColl/I_chordVariants/number_obj-6";
                                }
                            case TAG("bangin"):
                                {
                                return "bangin";
                                }
                            case TAG("valin"):
                                {
                                return "valin";
                                }
                            case TAG("format"):
                                {
                                return "format";
                                }
                            case TAG("startupbang"):
                                {
                                return "startupbang";
                                }
                            case TAG("Chords/ChordColl/I_chordVariants/loadbang_obj-197"):
                                {
                                return "Chords/ChordColl/I_chordVariants/loadbang_obj-197";
                                }
                            case TAG("listin"):
                                {
                                return "listin";
                                }
                            }
                        
                            return nullptr;
                        }
                        
                        DataRef* getDataRef(DataRefIndex index)  {
                            switch (index) {
                            case 6:
                                {
                                return addressOf(this->liststore_01_storage_storageobj);
                                break;
                                }
                            default:
                                {
                                return nullptr;
                                }
                            }
                        }
                        
                        DataRefIndex getNumDataRefs() const {
                            return 1;
                        }
                        
                        void fillDataRef(DataRefIndex , DataRef& ) {}
                        
                        void zeroDataRef(DataRef& ref) {
                            ref->setZero();
                        }
                        
                        void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                            this->updateTime(time);
                        
                            if (index == 6) {
                                this->liststore_01_storage_storage = new Float64Buffer(this->liststore_01_storage_storageobj);
                            }
                        }
                        
                        void initialize() {
                            this->liststore_01_storage_storageobj = initDataRef("liststore_01_storage_storageobj", true, nullptr, "buffer~");
                            this->assign_defaults();
                            this->setState();
                            this->liststore_01_storage_storageobj->setIndex(6);
                            this->liststore_01_storage_storage = new Float64Buffer(this->liststore_01_storage_storageobj);
                        }
                        
                        protected:
                        
                        void button_02_bangin_bang() {
                            this->button_02_bangval_bang();
                        }
                        
                        void numberobj_02_valin_set(number v) {
                            this->numberobj_02_value_set(v);
                        }
                        
                        void numberobj_02_format_set(number v) {
                            this->numberobj_02_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        void eventinlet_10_out1_number_set(number v) {
                            this->trigger_01_input_number_set(v);
                        }
                        
                        void eventinlet_10_out1_list_set(const list& v) {
                            this->trigger_01_input_list_set(v);
                        }
                        
                        void loadbang_01_startupbang_bang() {
                            this->loadbang_01_output_bang();
                        }
                        
                        void message_02_listin_list_set(const list& v) {
                            this->message_02_set_set(v);
                        }
                        
                        void message_02_listin_number_set(number v) {
                            this->message_02_set_set(v);
                        }
                        
                        void message_02_listin_bang_bang() {
                            this->message_02_trigger_bang();
                        }
                        
                        void message_03_listin_list_set(const list& v) {
                            this->message_03_set_set(v);
                        }
                        
                        void message_03_listin_number_set(number v) {
                            this->message_03_set_set(v);
                        }
                        
                        void message_03_listin_bang_bang() {
                            this->message_03_trigger_bang();
                        }
                        
                        void message_04_listin_list_set(const list& v) {
                            this->message_04_set_set(v);
                        }
                        
                        void message_04_listin_number_set(number v) {
                            this->message_04_set_set(v);
                        }
                        
                        void message_04_listin_bang_bang() {
                            this->message_04_trigger_bang();
                        }
                        
                        void numberobj_03_valin_set(number v) {
                            this->numberobj_03_value_set(v);
                        }
                        
                        void numberobj_03_format_set(number v) {
                            this->numberobj_03_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
                        }
                        
                        number msToSamps(MillisecondTime ms, number sampleRate) {
                            return ms * sampleRate * 0.001;
                        }
                        
                        MillisecondTime sampsToMs(SampleIndex samps) {
                            return samps * (this->invsr * 1000);
                        }
                        
                        Index getMaxBlockSize() const {
                            return this->maxvs;
                        }
                        
                        number getSampleRate() const {
                            return this->sr;
                        }
                        
                        bool hasFixedVectorSize() const {
                            return false;
                        }
                        
                        Index getNumInputChannels() const {
                            return 0;
                        }
                        
                        Index getNumOutputChannels() const {
                            return 0;
                        }
                        
                        void initializeObjects() {
                            this->numberobj_02_init();
                            this->random_01_nz_init();
                            this->liststore_01_storage_init();
                            this->message_02_init();
                            this->message_03_init();
                            this->message_04_init();
                            this->numberobj_03_init();
                        }
                        
                        void sendOutlet(OutletIndex index, ParameterValue value) {
                            this->getEngine()->sendOutlet(this, index, value);
                        }
                        
                        void startup() {
                            this->updateTime(this->getEngine()->getCurrentTime());
                            this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
                        }
                        
                        void allocateDataRefs() {
                            this->liststore_01_storage_storage = this->liststore_01_storage_storage->allocateIfNeeded();
                        
                            if (this->liststore_01_storage_storageobj->hasRequestedSize()) {
                                if (this->liststore_01_storage_storageobj->wantsFill())
                                    this->zeroDataRef(this->liststore_01_storage_storageobj);
                        
                                this->getEngine()->sendDataRefUpdated(6);
                            }
                        }
                        
                        void liststore_01_storeidx_set(number v) {
                            this->liststore_01_storeidx = v;
                        }
                        
                        void numberobj_03_output_set(number v) {
                            this->liststore_01_storeidx_set(v);
                        }
                        
                        void numberobj_03_value_set(number v) {
                            this->numberobj_03_value_setter(v);
                            v = this->numberobj_03_value;
                            number localvalue = v;
                        
                            if (this->numberobj_03_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Chords/ChordColl/I_chordVariants/number_obj-6"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_03_output_set(localvalue);
                        }
                        
                        void liststore_01_storelist_set(const list& v) {
                            this->liststore_01_storelist = jsCreateListCopy(v);
                            this->liststore_01_storage_store(this->liststore_01_storeidx, v);
                        }
                        
                        void message_02_out_set(const list& v) {
                            this->liststore_01_storelist_set(v);
                        }
                        
                        void message_02_trigger_bang() {
                            this->message_02_out_set(this->message_02_set);
                        }
                        
                        void select_01_match1_bang() {
                            this->message_02_trigger_bang();
                        }
                        
                        void message_03_out_set(const list& v) {
                            this->liststore_01_storelist_set(v);
                        }
                        
                        void message_03_trigger_bang() {
                            this->message_03_out_set(this->message_03_set);
                        }
                        
                        void select_01_match2_bang() {
                            this->message_03_trigger_bang();
                        }
                        
                        void select_01_nomatch_number_set(number ) {}
                        
                        void select_01_input_number_set(number v) {
                            if (v == this->select_01_test1)
                                this->select_01_match1_bang();
                            else if (v == this->select_01_test2)
                                this->select_01_match2_bang();
                            else
                                this->select_01_nomatch_number_set(v);
                        }
                        
                        void uzi_01_index_set(number v) {
                            this->numberobj_03_value_set(v);
                            this->select_01_input_number_set(v);
                        }
                        
                        void uzi_01_out_bang() {}
                        
                        void uzi_01_carry_bang() {}
                        
                        void uzi_01_start_bang_bang() {
                            this->uzi_01_gobang(0);
                        }
                        
                        void loadbang_01_output_bang() {
                            this->uzi_01_start_bang_bang();
                        }
                        
                        void loadbang_01_input_bang() {
                            this->loadbang_01_output_bang();
                        }
                        
                        void trigger_01_out2_bang() {
                            this->loadbang_01_input_bang();
                        }
                        
                        void liststore_01_out3_set(number ) {}
                        
                        void message_04_set_set(const list& v) {
                            this->message_04_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Chords/ChordColl/I_chordVariants/message_obj-8"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void eventoutlet_01_in1_list_set(const list& v) {
                            this->getPatcher()->updateTime(this->_currentTime);
                            this->getPatcher()->p_06_out1_list_set((list)v);
                        }
                        
                        void liststore_01_out1_set(const list& v) {
                            this->message_04_set_set(v);
                            this->eventoutlet_01_in1_list_set(v);
                        }
                        
                        void liststore_01_out2_bang() {}
                        
                        void liststore_01_lookupidx_set(number v) {
                            this->liststore_01_lookupidx = v;
                            list val = this->liststore_01_storage_lookup(v);
                            this->liststore_01_out3_set(v);
                        
                            if ((bool)(val->length)) {
                                this->liststore_01_out1_set(this->liststore_01_storage_lookup(v));
                            } else {
                                this->liststore_01_out2_bang();
                            }
                        }
                        
                        void numberobj_02_output_set(number v) {
                            this->liststore_01_lookupidx_set(v);
                        }
                        
                        void numberobj_02_value_set(number v) {
                            this->numberobj_02_value_setter(v);
                            v = this->numberobj_02_value;
                            number localvalue = v;
                        
                            if (this->numberobj_02_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->getEngine()->sendNumMessage(
                                TAG("valout"),
                                TAG("Chords/ChordColl/I_chordVariants/number_obj-14"),
                                localvalue,
                                this->_currentTime
                            );
                        
                            this->numberobj_02_output_set(localvalue);
                        }
                        
                        void random_01_result_set(number v) {
                            this->numberobj_02_value_set(v);
                        }
                        
                        void random_01_trigger_bang() {
                            this->random_01_result_set(rnbo_abs(this->random_01_nz_next()) * this->random_01_limit);
                        }
                        
                        void button_02_output_bang() {
                            this->random_01_trigger_bang();
                        }
                        
                        void button_02_bangval_bang() {
                            this->getEngine()->sendBangMessage(
                                TAG("bangout"),
                                TAG("Chords/ChordColl/I_chordVariants/button_obj-16"),
                                this->_currentTime
                            );;
                        
                            this->button_02_output_bang();
                        }
                        
                        void trigger_01_out1_bang() {
                            this->button_02_bangval_bang();
                        }
                        
                        void trigger_01_input_bang_bang() {
                            this->trigger_01_out2_bang();
                            this->trigger_01_out1_bang();
                        }
                        
                        void eventinlet_10_out1_bang_bang() {
                            this->trigger_01_input_bang_bang();
                        }
                        
                        void trigger_01_input_number_set(number v) {
                            RNBO_UNUSED(v);
                            this->trigger_01_out2_bang();
                            this->trigger_01_out1_bang();
                        }
                        
                        void trigger_01_input_list_set(const list& v) {
                            RNBO_UNUSED(v);
                            this->trigger_01_out2_bang();
                            this->trigger_01_out1_bang();
                        }
                        
                        void message_02_set_set(const list& v) {
                            this->message_02_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Chords/ChordColl/I_chordVariants/message_obj-43"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_03_set_set(const list& v) {
                            this->message_03_set = jsCreateListCopy(v);
                        
                            this->getEngine()->sendListMessage(
                                TAG("listout"),
                                TAG("Chords/ChordColl/I_chordVariants/message_obj-3"),
                                v,
                                this->_currentTime
                            );
                        }
                        
                        void message_04_out_set(const list& ) {}
                        
                        void message_04_trigger_bang() {
                            this->message_04_out_set(this->message_04_set);
                        }
                        
                        void stackprotect_perform(Index n) {
                            RNBO_UNUSED(n);
                            auto __stackprotect_count = this->stackprotect_count;
                            __stackprotect_count = 0;
                            this->stackprotect_count = __stackprotect_count;
                        }
                        
                        void numberobj_02_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_02_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_02_value = localvalue;
                        }
                        
                        void random_01_limit_setter(number v) {
                            if (v >= 0)
                                this->random_01_limit = v;
                        }
                        
                        void numberobj_03_value_setter(number v) {
                            number localvalue = v;
                        
                            if (this->numberobj_03_currentFormat != 6) {
                                localvalue = trunc(localvalue);
                            }
                        
                            this->numberobj_03_value = localvalue;
                        }
                        
                        void numberobj_02_init() {
                            this->numberobj_02_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Chords/ChordColl/I_chordVariants/number_obj-14"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_02_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_02_value;
                        }
                        
                        void numberobj_02_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_02_value_set(preset["value"]);
                        }
                        
                        void random_01_nz_reset() {
                            xoshiro_reset(
                                systemticks() + this->voice() + this->random(0, 10000),
                                this->random_01_nz_state
                            );
                        }
                        
                        void random_01_nz_init() {
                            this->random_01_nz_reset();
                        }
                        
                        void random_01_nz_seed(number v) {
                            xoshiro_reset(v, this->random_01_nz_state);
                        }
                        
                        number random_01_nz_next() {
                            return xoshiro_next(this->random_01_nz_state);
                        }
                        
                        list liststore_01_storage_next(number index) {
                            return this->liststore_01_storage_lookup(index);
                        }
                        
                        list liststore_01_storage_lookup(number index) {
                            list tmp1 = {};
                            int64_t idx = (int64_t)(index);
                        
                            if (index >= 0 && index < this->liststore_01_storage__slotcount) {
                                number entrylength = this->liststore_01_storage_storage[(Index)(idx * this->liststore_01_storage__entrysize)];
                        
                                if (entrylength > 0) {
                                    for (number i = 0; i < entrylength; i++) {
                                        tmp1->push(
                                            this->liststore_01_storage_storage[(Index)(idx * this->liststore_01_storage__entrysize + i + 1)]
                                        );
                                    }
                                }
                            }
                        
                            return tmp1;
                        }
                        
                        void liststore_01_storage_store(number index, list value) {
                            int64_t idx = (int64_t)(index);
                        
                            if (index >= 0 && index < this->liststore_01_storage__slotcount) {
                                number entrylength = value->length;
                                this->liststore_01_storage_storage[(Index)(idx * this->liststore_01_storage__entrysize)] = entrylength;
                        
                                if (entrylength > 0) {
                                    for (number i = 0; i < entrylength; i++) {
                                        this->liststore_01_storage_storage[(Index)(idx * this->liststore_01_storage__entrysize + i + 1)] = value[(Index)i];
                                    }
                                }
                            }
                        }
                        
                        void liststore_01_storage_init() {
                            this->liststore_01_storage__entrysize = 4 + 1;
                            this->liststore_01_storage__slotcount = 2;
                            int64_t storagesize = (int64_t)(2 * this->liststore_01_storage__entrysize);
                            this->liststore_01_storage_storage->requestSize((Index)(storagesize), 1);
                        }
                        
                        void liststore_01_storage_clear() {
                            this->liststore_01_storage_storage->setZero();
                        }
                        
                        void liststore_01_storage_reset() {
                            this->liststore_01_storage_init();
                            this->liststore_01_storage_clear();
                        }
                        
                        void uzi_01_gobang(number start) {
                            this->uzi_01_doPause = 0;
                            this->uzi_01_pausecount = 0;
                            number doCarry = true;
                        
                            for (int i = (int)(start); i < this->uzi_01_count; i++) {
                                if ((bool)(this->uzi_01_doPause)) {
                                    this->uzi_01_pausecount = i;
                                    doCarry = false;
                                    break;
                                } else {
                                    this->uzi_01_index_set(i + this->uzi_01_base);
                                    this->uzi_01_out_bang();
                                }
                            }
                        
                            if ((bool)(doCarry))
                                this->uzi_01_carry_bang();
                        }
                        
                        void message_02_init() {
                            this->message_02_set_set({48, 55, 64, 59});
                        }
                        
                        void message_03_init() {
                            this->message_03_set_set({48, 55, 64, 69});
                        }
                        
                        void message_04_init() {
                            this->message_04_set_set({48, 55, 64, 69});
                        }
                        
                        void numberobj_03_init() {
                            this->numberobj_03_currentFormat = 0;
                        
                            this->getEngine()->sendNumMessage(
                                TAG("setup"),
                                TAG("Chords/ChordColl/I_chordVariants/number_obj-6"),
                                1,
                                this->_currentTime
                            );
                        }
                        
                        void numberobj_03_getPresetValue(PatcherStateInterface& preset) {
                            preset["value"] = this->numberobj_03_value;
                        }
                        
                        void numberobj_03_setPresetValue(PatcherStateInterface& preset) {
                            if ((bool)(stateIsEmpty(preset)))
                                return;
                        
                            this->numberobj_03_value_set(preset["value"]);
                        }
                        
                        bool stackprotect_check() {
                            this->stackprotect_count++;
                        
                            if (this->stackprotect_count > 128) {
                                console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                                return true;
                            }
                        
                            return false;
                        }
                        
                        void updateTime(MillisecondTime time) {
                            this->_currentTime = time;
                            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
                        
                            if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
                        
                            if (this->sampleOffsetIntoNextAudioBuffer < 0)
                                this->sampleOffsetIntoNextAudioBuffer = 0;
                        }
                        
                        void assign_defaults()
                        {
                            numberobj_02_value = 0;
                            numberobj_02_value_setter(numberobj_02_value);
                            random_01_limit = 2;
                            random_01_limit_setter(random_01_limit);
                            random_01_seed = 0;
                            liststore_01_lookupidx = 0;
                            liststore_01_storeidx = 0;
                            uzi_01_start_number = 0;
                            uzi_01_count = 2;
                            uzi_01_base = 0;
                            select_01_test1 = 0;
                            select_01_test2 = 1;
                            numberobj_03_value = 0;
                            numberobj_03_value_setter(numberobj_03_value);
                            _currentTime = 0;
                            audioProcessSampleCount = 0;
                            sampleOffsetIntoNextAudioBuffer = 0;
                            zeroBuffer = nullptr;
                            dummyBuffer = nullptr;
                            didAllocateSignals = 0;
                            vs = 0;
                            maxvs = 0;
                            sr = 44100;
                            invsr = 0.00002267573696;
                            numberobj_02_currentFormat = 6;
                            numberobj_02_lastValue = 0;
                            liststore_01_storage__slotcount = 1024;
                            liststore_01_storage__entrysize = 65;
                            uzi_01_doPause = 0;
                            uzi_01_pausecount = 0;
                            numberobj_03_currentFormat = 6;
                            numberobj_03_lastValue = 0;
                            stackprotect_count = 0;
                            _voiceIndex = 0;
                            _noteNumber = 0;
                            isMuted = 1;
                            parameterOffset = 0;
                        }
                        
                        // member variables
                        
                            number numberobj_02_value;
                            number random_01_limit;
                            number random_01_seed;
                            number liststore_01_lookupidx;
                            list liststore_01_storelist;
                            number liststore_01_storeidx;
                            number uzi_01_start_number;
                            number uzi_01_count;
                            number uzi_01_base;
                            number select_01_test1;
                            number select_01_test2;
                            list message_02_set;
                            list message_03_set;
                            list message_04_set;
                            number numberobj_03_value;
                            MillisecondTime _currentTime;
                            UInt64 audioProcessSampleCount;
                            SampleIndex sampleOffsetIntoNextAudioBuffer;
                            signal zeroBuffer;
                            signal dummyBuffer;
                            bool didAllocateSignals;
                            Index vs;
                            Index maxvs;
                            number sr;
                            number invsr;
                            Int numberobj_02_currentFormat;
                            number numberobj_02_lastValue;
                            UInt random_01_nz_state[4] = { };
                            Float64BufferRef liststore_01_storage_storage;
                            number liststore_01_storage__slotcount;
                            number liststore_01_storage__entrysize;
                            number uzi_01_doPause;
                            long uzi_01_pausecount;
                            Int numberobj_03_currentFormat;
                            number numberobj_03_lastValue;
                            number stackprotect_count;
                            DataRef liststore_01_storage_storageobj;
                            Index _voiceIndex;
                            Int _noteNumber;
                            Index isMuted;
                            ParameterIndex parameterOffset;
                        
            };
            
            RNBOSubpatcher_88()
            {
            }
            
            ~RNBOSubpatcher_88()
            {
                delete this->p_06;
            }
            
            virtual RNBOSubpatcher_99* getPatcher() const {
                return static_cast<RNBOSubpatcher_99 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, 1964277200, false);
                getEngine()->flushClockEvents(this, 1592269969, false);
                getEngine()->flushClockEvents(this, -871642103, false);
                getEngine()->flushClockEvents(this, 1220262738, false);
                getEngine()->flushClockEvents(this, 848255507, false);
                getEngine()->flushClockEvents(this, -1735137014, false);
            }
            
            MillisecondTime currenttime() {
                return this->_currentTime;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_06_perform(n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
                this->p_06->prepareToProcess(sampleRate, maxBlockSize, force);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {
                this->p_06 = new RNBOSubpatcher_87();
                this->p_06->setEngineAndPatcher(this->getEngine(), this);
                this->p_06->initialize();
                this->p_06->setParameterOffset(this->getParameterOffset(this->p_06));
            }
            
            void getPreset(PatcherStateInterface& preset) {
                this->p_06->getPreset(getSubState(getSubState(preset, "__sps"), "I_chordVariants"));
            }
            
            void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
                RNBO_UNUSED(v);
                this->updateTime(time);
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        this->p_06->setParameterValue(index, v, time);
            
                    break;
                    }
                }
            }
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterValue(index);
            
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0 + this->p_06->getNumParameters();
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterName(index);
            
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->getParameterId(index);
            
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
                {
                    switch (index) {
                    default:
                        {
                        index -= 0;
            
                        if (index < this->p_06->getNumParameters())
                            this->p_06->getParameterInfo(index, info);
            
                        break;
                        }
                    }
                }
            }
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
                if (subpatcher == this->p_06)
                    return 0;
            
                return 0;
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->convertToNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->convertFromNormalizedParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    index -= 0;
            
                    if (index < this->p_06->getNumParameters())
                        return this->p_06->constrainParameterValue(index, value);
            
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case 1964277200:
                    {
                    this->line_01_tick_set(value);
                    break;
                    }
                case 1592269969:
                    {
                    this->line_02_tick_set(value);
                    break;
                    }
                case -871642103:
                    {
                    this->loadbang_02_startupbang_bang();
                    break;
                    }
                case 1220262738:
                    {
                    this->line_03_tick_set(value);
                    break;
                    }
                case 848255507:
                    {
                    this->line_04_tick_set(value);
                    break;
                    }
                case -1735137014:
                    {
                    this->loadbang_03_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Chords/ChordColl/message_obj-16") == objectId)
                        this->message_05_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-80") == objectId)
                        this->message_06_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-85") == objectId)
                        this->message_07_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-108") == objectId)
                        this->message_08_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-24") == objectId)
                        this->message_09_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-107") == objectId)
                        this->message_10_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-110") == objectId)
                        this->message_11_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-109") == objectId)
                        this->message_12_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-203") == objectId)
                        this->message_13_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-46") == objectId)
                        this->message_14_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-45") == objectId)
                        this->message_15_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-66") == objectId)
                        this->message_16_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-65") == objectId)
                        this->message_17_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-201") == objectId)
                        this->message_18_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-71") == objectId)
                        this->message_19_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-77") == objectId)
                        this->message_20_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-75") == objectId)
                        this->message_21_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-91") == objectId)
                        this->message_22_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-93") == objectId)
                        this->message_23_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-92") == objectId)
                        this->message_24_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-81") == objectId)
                        this->message_25_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-79") == objectId)
                        this->message_26_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-78") == objectId)
                        this->message_27_listin_number_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-119") == objectId)
                        this->message_28_listin_number_set(payload);
            
                    break;
                    }
                case TAG("valin"):
                    {
                    if (TAG("Chords/ChordColl/number_obj-62") == objectId)
                        this->numberobj_04_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-61") == objectId)
                        this->numberobj_05_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-60") == objectId)
                        this->numberobj_06_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-100") == objectId)
                        this->numberobj_07_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-112") == objectId)
                        this->numberobj_08_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-55") == objectId)
                        this->numberobj_09_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-111") == objectId)
                        this->numberobj_10_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-114") == objectId)
                        this->numberobj_11_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-113") == objectId)
                        this->numberobj_12_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-44") == objectId)
                        this->numberobj_13_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-28") == objectId)
                        this->numberobj_14_valin_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-32") == objectId)
                        this->numberobj_15_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Chords/ChordColl/number_obj-62") == objectId)
                        this->numberobj_04_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-61") == objectId)
                        this->numberobj_05_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-60") == objectId)
                        this->numberobj_06_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-100") == objectId)
                        this->numberobj_07_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-112") == objectId)
                        this->numberobj_08_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-55") == objectId)
                        this->numberobj_09_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-111") == objectId)
                        this->numberobj_10_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-114") == objectId)
                        this->numberobj_11_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-113") == objectId)
                        this->numberobj_12_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-44") == objectId)
                        this->numberobj_13_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-28") == objectId)
                        this->numberobj_14_format_set(payload);
            
                    if (TAG("Chords/ChordColl/number_obj-32") == objectId)
                        this->numberobj_15_format_set(payload);
            
                    break;
                    }
                }
            
                this->p_06->processNumMessage(tag, objectId, time, payload);
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Chords/ChordColl/message_obj-16") == objectId)
                        this->message_05_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-80") == objectId)
                        this->message_06_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-85") == objectId)
                        this->message_07_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-108") == objectId)
                        this->message_08_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-24") == objectId)
                        this->message_09_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-107") == objectId)
                        this->message_10_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-110") == objectId)
                        this->message_11_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-109") == objectId)
                        this->message_12_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-203") == objectId)
                        this->message_13_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-46") == objectId)
                        this->message_14_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-45") == objectId)
                        this->message_15_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-66") == objectId)
                        this->message_16_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-65") == objectId)
                        this->message_17_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-201") == objectId)
                        this->message_18_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-71") == objectId)
                        this->message_19_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-77") == objectId)
                        this->message_20_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-75") == objectId)
                        this->message_21_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-91") == objectId)
                        this->message_22_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-93") == objectId)
                        this->message_23_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-92") == objectId)
                        this->message_24_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-81") == objectId)
                        this->message_25_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-79") == objectId)
                        this->message_26_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-78") == objectId)
                        this->message_27_listin_list_set(payload);
            
                    if (TAG("Chords/ChordColl/message_obj-119") == objectId)
                        this->message_28_listin_list_set(payload);
            
                    break;
                    }
                }
            
                this->p_06->processListMessage(tag, objectId, time, payload);
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Chords/ChordColl/message_obj-16") == objectId)
                        this->message_05_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-80") == objectId)
                        this->message_06_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-85") == objectId)
                        this->message_07_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-108") == objectId)
                        this->message_08_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-24") == objectId)
                        this->message_09_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-107") == objectId)
                        this->message_10_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-110") == objectId)
                        this->message_11_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-109") == objectId)
                        this->message_12_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-203") == objectId)
                        this->message_13_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-46") == objectId)
                        this->message_14_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-45") == objectId)
                        this->message_15_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-66") == objectId)
                        this->message_16_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-65") == objectId)
                        this->message_17_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-201") == objectId)
                        this->message_18_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-71") == objectId)
                        this->message_19_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-77") == objectId)
                        this->message_20_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-75") == objectId)
                        this->message_21_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-91") == objectId)
                        this->message_22_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-93") == objectId)
                        this->message_23_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-92") == objectId)
                        this->message_24_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-81") == objectId)
                        this->message_25_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-79") == objectId)
                        this->message_26_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-78") == objectId)
                        this->message_27_listin_bang_bang();
            
                    if (TAG("Chords/ChordColl/message_obj-119") == objectId)
                        this->message_28_listin_bang_bang();
            
                    break;
                    }
                case TAG("bangin"):
                    {
                    if (TAG("Chords/ChordColl/button_obj-35") == objectId)
                        this->button_03_bangin_bang();
            
                    if (TAG("Chords/ChordColl/button_obj-27") == objectId)
                        this->button_04_bangin_bang();
            
                    if (TAG("Chords/ChordColl/button_obj-29") == objectId)
                        this->button_05_bangin_bang();
            
                    if (TAG("Chords/ChordColl/button_obj-8") == objectId)
                        this->button_06_bangin_bang();
            
                    if (TAG("Chords/ChordColl/button_obj-186") == objectId)
                        this->button_07_bangin_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("Chords/ChordColl/loadbang_obj-6") == objectId)
                        this->loadbang_02_startupbang_bang();
            
                    if (TAG("Chords/ChordColl/loadbang_obj-197") == objectId)
                        this->loadbang_03_startupbang_bang();
            
                    break;
                    }
                }
            
                this->p_06->processBangMessage(tag, objectId, time);
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Chords/ChordColl/message_obj-16"):
                    {
                    return "Chords/ChordColl/message_obj-16";
                    }
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Chords/ChordColl/number_obj-62"):
                    {
                    return "Chords/ChordColl/number_obj-62";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("Chords/ChordColl/number_obj-61"):
                    {
                    return "Chords/ChordColl/number_obj-61";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Chords/ChordColl/button_obj-35"):
                    {
                    return "Chords/ChordColl/button_obj-35";
                    }
                case TAG("Chords/ChordColl/message_obj-80"):
                    {
                    return "Chords/ChordColl/message_obj-80";
                    }
                case TAG("Chords/ChordColl/button_obj-27"):
                    {
                    return "Chords/ChordColl/button_obj-27";
                    }
                case TAG("Chords/ChordColl/number_obj-60"):
                    {
                    return "Chords/ChordColl/number_obj-60";
                    }
                case TAG("Chords/ChordColl/number_obj-100"):
                    {
                    return "Chords/ChordColl/number_obj-100";
                    }
                case TAG("Chords/ChordColl/message_obj-85"):
                    {
                    return "Chords/ChordColl/message_obj-85";
                    }
                case TAG("Chords/ChordColl/number_obj-112"):
                    {
                    return "Chords/ChordColl/number_obj-112";
                    }
                case TAG("Chords/ChordColl/message_obj-108"):
                    {
                    return "Chords/ChordColl/message_obj-108";
                    }
                case TAG("Chords/ChordColl/message_obj-24"):
                    {
                    return "Chords/ChordColl/message_obj-24";
                    }
                case TAG("Chords/ChordColl/button_obj-29"):
                    {
                    return "Chords/ChordColl/button_obj-29";
                    }
                case TAG("Chords/ChordColl/number_obj-55"):
                    {
                    return "Chords/ChordColl/number_obj-55";
                    }
                case TAG("Chords/ChordColl/number_obj-111"):
                    {
                    return "Chords/ChordColl/number_obj-111";
                    }
                case TAG("Chords/ChordColl/message_obj-107"):
                    {
                    return "Chords/ChordColl/message_obj-107";
                    }
                case TAG("Chords/ChordColl/button_obj-8"):
                    {
                    return "Chords/ChordColl/button_obj-8";
                    }
                case TAG("Chords/ChordColl/number_obj-114"):
                    {
                    return "Chords/ChordColl/number_obj-114";
                    }
                case TAG("Chords/ChordColl/message_obj-110"):
                    {
                    return "Chords/ChordColl/message_obj-110";
                    }
                case TAG("Chords/ChordColl/number_obj-113"):
                    {
                    return "Chords/ChordColl/number_obj-113";
                    }
                case TAG("Chords/ChordColl/message_obj-109"):
                    {
                    return "Chords/ChordColl/message_obj-109";
                    }
                case TAG("Chords/ChordColl/number_obj-44"):
                    {
                    return "Chords/ChordColl/number_obj-44";
                    }
                case TAG("Chords/ChordColl/message_obj-203"):
                    {
                    return "Chords/ChordColl/message_obj-203";
                    }
                case TAG("Chords/ChordColl/message_obj-46"):
                    {
                    return "Chords/ChordColl/message_obj-46";
                    }
                case TAG("Chords/ChordColl/number_obj-28"):
                    {
                    return "Chords/ChordColl/number_obj-28";
                    }
                case TAG("Chords/ChordColl/message_obj-45"):
                    {
                    return "Chords/ChordColl/message_obj-45";
                    }
                case TAG("Chords/ChordColl/button_obj-186"):
                    {
                    return "Chords/ChordColl/button_obj-186";
                    }
                case TAG("Chords/ChordColl/message_obj-66"):
                    {
                    return "Chords/ChordColl/message_obj-66";
                    }
                case TAG("Chords/ChordColl/message_obj-65"):
                    {
                    return "Chords/ChordColl/message_obj-65";
                    }
                case TAG("Chords/ChordColl/message_obj-201"):
                    {
                    return "Chords/ChordColl/message_obj-201";
                    }
                case TAG("Chords/ChordColl/message_obj-71"):
                    {
                    return "Chords/ChordColl/message_obj-71";
                    }
                case TAG("Chords/ChordColl/number_obj-32"):
                    {
                    return "Chords/ChordColl/number_obj-32";
                    }
                case TAG("Chords/ChordColl/message_obj-77"):
                    {
                    return "Chords/ChordColl/message_obj-77";
                    }
                case TAG("Chords/ChordColl/message_obj-75"):
                    {
                    return "Chords/ChordColl/message_obj-75";
                    }
                case TAG("Chords/ChordColl/message_obj-91"):
                    {
                    return "Chords/ChordColl/message_obj-91";
                    }
                case TAG("Chords/ChordColl/message_obj-93"):
                    {
                    return "Chords/ChordColl/message_obj-93";
                    }
                case TAG("Chords/ChordColl/message_obj-92"):
                    {
                    return "Chords/ChordColl/message_obj-92";
                    }
                case TAG("Chords/ChordColl/message_obj-81"):
                    {
                    return "Chords/ChordColl/message_obj-81";
                    }
                case TAG("Chords/ChordColl/message_obj-79"):
                    {
                    return "Chords/ChordColl/message_obj-79";
                    }
                case TAG("Chords/ChordColl/message_obj-78"):
                    {
                    return "Chords/ChordColl/message_obj-78";
                    }
                case TAG("Chords/ChordColl/message_obj-119"):
                    {
                    return "Chords/ChordColl/message_obj-119";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("Chords/ChordColl/loadbang_obj-6"):
                    {
                    return "Chords/ChordColl/loadbang_obj-6";
                    }
                case TAG("Chords/ChordColl/loadbang_obj-197"):
                    {
                    return "Chords/ChordColl/loadbang_obj-197";
                    }
                }
            
                auto subpatchResult_0 = this->p_06->resolveTag(tag);
            
                if (subpatchResult_0)
                    return subpatchResult_0;
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 3:
                    {
                    return addressOf(this->liststore_02_storage_storageobj);
                    break;
                    }
                case 4:
                    {
                    return addressOf(this->liststore_03_storage_storageobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->liststore_04_storage_storageobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 3;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 3) {
                    this->liststore_02_storage_storage = new Float64Buffer(this->liststore_02_storage_storageobj);
                }
            
                if (index == 4) {
                    this->liststore_03_storage_storage = new Float64Buffer(this->liststore_03_storage_storageobj);
                }
            
                if (index == 5) {
                    this->liststore_04_storage_storage = new Float64Buffer(this->liststore_04_storage_storageobj);
                }
            
                this->p_06->processDataViewUpdate(index, time);
            }
            
            void initialize() {
                this->liststore_02_storage_storageobj = initDataRef("liststore_02_storage_storageobj", true, nullptr, "buffer~");
                this->liststore_03_storage_storageobj = initDataRef("liststore_03_storage_storageobj", true, nullptr, "buffer~");
                this->liststore_04_storage_storageobj = initDataRef("liststore_04_storage_storageobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->liststore_02_storage_storageobj->setIndex(3);
                this->liststore_02_storage_storage = new Float64Buffer(this->liststore_02_storage_storageobj);
                this->liststore_03_storage_storageobj->setIndex(4);
                this->liststore_03_storage_storage = new Float64Buffer(this->liststore_03_storage_storageobj);
                this->liststore_04_storage_storageobj->setIndex(5);
                this->liststore_04_storage_storage = new Float64Buffer(this->liststore_04_storage_storageobj);
            }
            
            protected:
            
            void message_05_listin_list_set(const list& v) {
                this->message_05_set_set(v);
            }
            
            void message_05_listin_number_set(number v) {
                this->message_05_set_set(v);
            }
            
            void message_05_listin_bang_bang() {
                this->message_05_trigger_bang();
            }
            
            void numberobj_04_valin_set(number v) {
                this->numberobj_04_value_set(v);
            }
            
            void numberobj_04_format_set(number v) {
                this->numberobj_04_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_11_out1_bang_bang() {
                this->trigger_02_input_bang_bang();
            }
            
            void eventinlet_11_out1_list_set(const list& v) {
                this->trigger_02_input_list_set(v);
            }
            
            void numberobj_05_valin_set(number v) {
                this->numberobj_05_value_set(v);
            }
            
            void numberobj_05_format_set(number v) {
                this->numberobj_05_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void line_01_tick_set(number v) {
                this->line_01_output_set(v);
            
                if ((bool)(this->line_01_isFinished(v))) {
                    this->line_01_slope = 0;
                    this->line_01_startValue = v;
                    this->line_01_startPendingRamp();
                } else {
                    this->line_01_scheduleNext();
                }
            }
            
            void button_03_bangin_bang() {
                this->button_03_bangval_bang();
            }
            
            void message_06_listin_list_set(const list& v) {
                this->message_06_set_set(v);
            }
            
            void message_06_listin_number_set(number v) {
                this->message_06_set_set(v);
            }
            
            void message_06_listin_bang_bang() {
                this->message_06_trigger_bang();
            }
            
            void button_04_bangin_bang() {
                this->button_04_bangval_bang();
            }
            
            void numberobj_06_valin_set(number v) {
                this->numberobj_06_value_set(v);
            }
            
            void numberobj_06_format_set(number v) {
                this->numberobj_06_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_07_valin_set(number v) {
                this->numberobj_07_value_set(v);
            }
            
            void numberobj_07_format_set(number v) {
                this->numberobj_07_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_07_listin_list_set(const list& v) {
                this->message_07_set_set(v);
            }
            
            void message_07_listin_number_set(number v) {
                this->message_07_set_set(v);
            }
            
            void message_07_listin_bang_bang() {
                this->message_07_trigger_bang();
            }
            
            void numberobj_08_valin_set(number v) {
                this->numberobj_08_value_set(v);
            }
            
            void numberobj_08_format_set(number v) {
                this->numberobj_08_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void line_02_tick_set(number v) {
                this->line_02_output_set(v);
            
                if ((bool)(this->line_02_isFinished(v))) {
                    this->line_02_slope = 0;
                    this->line_02_startValue = v;
                    this->line_02_startPendingRamp();
                } else {
                    this->line_02_scheduleNext();
                }
            }
            
            void message_08_listin_list_set(const list& v) {
                this->message_08_set_set(v);
            }
            
            void message_08_listin_number_set(number v) {
                this->message_08_set_set(v);
            }
            
            void message_08_listin_bang_bang() {
                this->message_08_trigger_bang();
            }
            
            void message_09_listin_list_set(const list& v) {
                this->message_09_set_set(v);
            }
            
            void message_09_listin_number_set(number v) {
                this->message_09_set_set(v);
            }
            
            void message_09_listin_bang_bang() {
                this->message_09_trigger_bang();
            }
            
            void button_05_bangin_bang() {
                this->button_05_bangval_bang();
            }
            
            void numberobj_09_valin_set(number v) {
                this->numberobj_09_value_set(v);
            }
            
            void numberobj_09_format_set(number v) {
                this->numberobj_09_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void numberobj_10_valin_set(number v) {
                this->numberobj_10_value_set(v);
            }
            
            void numberobj_10_format_set(number v) {
                this->numberobj_10_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_10_listin_list_set(const list& v) {
                this->message_10_set_set(v);
            }
            
            void message_10_listin_number_set(number v) {
                this->message_10_set_set(v);
            }
            
            void message_10_listin_bang_bang() {
                this->message_10_trigger_bang();
            }
            
            void loadbang_02_startupbang_bang() {
                this->loadbang_02_output_bang();
            }
            
            void button_06_bangin_bang() {
                this->button_06_bangval_bang();
            }
            
            void line_03_tick_set(number v) {
                this->line_03_output_set(v);
            
                if ((bool)(this->line_03_isFinished(v))) {
                    this->line_03_slope = 0;
                    this->line_03_startValue = v;
                    this->line_03_startPendingRamp();
                } else {
                    this->line_03_scheduleNext();
                }
            }
            
            void numberobj_11_valin_set(number v) {
                this->numberobj_11_value_set(v);
            }
            
            void numberobj_11_format_set(number v) {
                this->numberobj_11_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_11_listin_list_set(const list& v) {
                this->message_11_set_set(v);
            }
            
            void message_11_listin_number_set(number v) {
                this->message_11_set_set(v);
            }
            
            void message_11_listin_bang_bang() {
                this->message_11_trigger_bang();
            }
            
            void numberobj_12_valin_set(number v) {
                this->numberobj_12_value_set(v);
            }
            
            void numberobj_12_format_set(number v) {
                this->numberobj_12_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_12_listin_list_set(const list& v) {
                this->message_12_set_set(v);
            }
            
            void message_12_listin_number_set(number v) {
                this->message_12_set_set(v);
            }
            
            void message_12_listin_bang_bang() {
                this->message_12_trigger_bang();
            }
            
            void numberobj_13_valin_set(number v) {
                this->numberobj_13_value_set(v);
            }
            
            void numberobj_13_format_set(number v) {
                this->numberobj_13_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void line_04_tick_set(number v) {
                this->line_04_output_set(v);
            
                if ((bool)(this->line_04_isFinished(v))) {
                    this->line_04_slope = 0;
                    this->line_04_startValue = v;
                    this->line_04_startPendingRamp();
                } else {
                    this->line_04_scheduleNext();
                }
            }
            
            void message_13_listin_list_set(const list& v) {
                this->message_13_set_set(v);
            }
            
            void message_13_listin_number_set(number v) {
                this->message_13_set_set(v);
            }
            
            void message_13_listin_bang_bang() {
                this->message_13_trigger_bang();
            }
            
            void message_14_listin_list_set(const list& v) {
                this->message_14_set_set(v);
            }
            
            void message_14_listin_number_set(number v) {
                this->message_14_set_set(v);
            }
            
            void message_14_listin_bang_bang() {
                this->message_14_trigger_bang();
            }
            
            void numberobj_14_valin_set(number v) {
                this->numberobj_14_value_set(v);
            }
            
            void numberobj_14_format_set(number v) {
                this->numberobj_14_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_15_listin_list_set(const list& v) {
                this->message_15_set_set(v);
            }
            
            void message_15_listin_number_set(number v) {
                this->message_15_set_set(v);
            }
            
            void message_15_listin_bang_bang() {
                this->message_15_trigger_bang();
            }
            
            void loadbang_03_startupbang_bang() {
                this->loadbang_03_output_bang();
            }
            
            void button_07_bangin_bang() {
                this->button_07_bangval_bang();
            }
            
            void message_16_listin_list_set(const list& v) {
                this->message_16_set_set(v);
            }
            
            void message_16_listin_number_set(number v) {
                this->message_16_set_set(v);
            }
            
            void message_16_listin_bang_bang() {
                this->message_16_trigger_bang();
            }
            
            void message_17_listin_list_set(const list& v) {
                this->message_17_set_set(v);
            }
            
            void message_17_listin_number_set(number v) {
                this->message_17_set_set(v);
            }
            
            void message_17_listin_bang_bang() {
                this->message_17_trigger_bang();
            }
            
            void message_18_listin_list_set(const list& v) {
                this->message_18_set_set(v);
            }
            
            void message_18_listin_number_set(number v) {
                this->message_18_set_set(v);
            }
            
            void message_18_listin_bang_bang() {
                this->message_18_trigger_bang();
            }
            
            void message_19_listin_list_set(const list& v) {
                this->message_19_set_set(v);
            }
            
            void message_19_listin_number_set(number v) {
                this->message_19_set_set(v);
            }
            
            void message_19_listin_bang_bang() {
                this->message_19_trigger_bang();
            }
            
            void numberobj_15_valin_set(number v) {
                this->numberobj_15_value_set(v);
            }
            
            void numberobj_15_format_set(number v) {
                this->numberobj_15_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_20_listin_list_set(const list& v) {
                this->message_20_set_set(v);
            }
            
            void message_20_listin_number_set(number v) {
                this->message_20_set_set(v);
            }
            
            void message_20_listin_bang_bang() {
                this->message_20_trigger_bang();
            }
            
            void message_21_listin_list_set(const list& v) {
                this->message_21_set_set(v);
            }
            
            void message_21_listin_number_set(number v) {
                this->message_21_set_set(v);
            }
            
            void message_21_listin_bang_bang() {
                this->message_21_trigger_bang();
            }
            
            void message_22_listin_list_set(const list& v) {
                this->message_22_set_set(v);
            }
            
            void message_22_listin_number_set(number v) {
                this->message_22_set_set(v);
            }
            
            void message_22_listin_bang_bang() {
                this->message_22_trigger_bang();
            }
            
            void message_23_listin_list_set(const list& v) {
                this->message_23_set_set(v);
            }
            
            void message_23_listin_number_set(number v) {
                this->message_23_set_set(v);
            }
            
            void message_23_listin_bang_bang() {
                this->message_23_trigger_bang();
            }
            
            void message_24_listin_list_set(const list& v) {
                this->message_24_set_set(v);
            }
            
            void message_24_listin_number_set(number v) {
                this->message_24_set_set(v);
            }
            
            void message_24_listin_bang_bang() {
                this->message_24_trigger_bang();
            }
            
            void message_25_listin_list_set(const list& v) {
                this->message_25_set_set(v);
            }
            
            void message_25_listin_number_set(number v) {
                this->message_25_set_set(v);
            }
            
            void message_25_listin_bang_bang() {
                this->message_25_trigger_bang();
            }
            
            void message_26_listin_list_set(const list& v) {
                this->message_26_set_set(v);
            }
            
            void message_26_listin_number_set(number v) {
                this->message_26_set_set(v);
            }
            
            void message_26_listin_bang_bang() {
                this->message_26_trigger_bang();
            }
            
            void message_27_listin_list_set(const list& v) {
                this->message_27_set_set(v);
            }
            
            void message_27_listin_number_set(number v) {
                this->message_27_set_set(v);
            }
            
            void message_27_listin_bang_bang() {
                this->message_27_trigger_bang();
            }
            
            void message_28_listin_list_set(const list& v) {
                this->message_28_set_set(v);
            }
            
            void message_28_listin_number_set(number v) {
                this->message_28_set_set(v);
            }
            
            void message_28_listin_bang_bang() {
                this->message_28_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->message_05_init();
                this->liststore_02_storage_init();
                this->numberobj_04_init();
                this->numberobj_05_init();
                this->liststore_03_storage_init();
                this->message_06_init();
                this->numberobj_06_init();
                this->numberobj_07_init();
                this->message_07_init();
                this->numberobj_08_init();
                this->message_08_init();
                this->liststore_04_storage_init();
                this->message_09_init();
                this->numberobj_09_init();
                this->numberobj_10_init();
                this->message_10_init();
                this->numberobj_11_init();
                this->message_11_init();
                this->numberobj_12_init();
                this->change_01_init();
                this->message_12_init();
                this->numberobj_13_init();
                this->message_13_init();
                this->message_14_init();
                this->numberobj_14_init();
                this->message_15_init();
                this->message_16_init();
                this->message_17_init();
                this->message_18_init();
                this->message_19_init();
                this->numberobj_15_init();
                this->message_20_init();
                this->message_21_init();
                this->message_22_init();
                this->message_23_init();
                this->message_24_init();
                this->message_25_init();
                this->message_26_init();
                this->message_27_init();
                this->message_28_init();
                this->p_06->initializeObjects();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->p_06->startup();
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
                this->getEngine()->scheduleClockEvent(this, -1735137014, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->p_06->allocateDataRefs();
                this->liststore_02_storage_storage = this->liststore_02_storage_storage->allocateIfNeeded();
            
                if (this->liststore_02_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_02_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_02_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(3);
                }
            
                this->liststore_03_storage_storage = this->liststore_03_storage_storage->allocateIfNeeded();
            
                if (this->liststore_03_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_03_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_03_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->liststore_04_storage_storage = this->liststore_04_storage_storage->allocateIfNeeded();
            
                if (this->liststore_04_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_04_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_04_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            }
            
            void liststore_03_storeidx_set(number v) {
                this->liststore_03_storeidx = v;
            }
            
            void numberobj_15_output_set(number v) {
                this->liststore_03_storeidx_set(v);
            }
            
            void numberobj_15_value_set(number v) {
                this->numberobj_15_value_setter(v);
                v = this->numberobj_15_value;
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-32"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_15_output_set(localvalue);
            }
            
            void liststore_03_storelist_set(const list& v) {
                this->liststore_03_storelist = jsCreateListCopy(v);
                this->liststore_03_storage_store(this->liststore_03_storeidx, v);
            }
            
            void p_06_out1_list_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void p_06_in1_bang_bang() {
                this->p_06->updateTime(this->_currentTime);
                this->p_06->eventinlet_10_out1_bang_bang();
            }
            
            void select_03_match1_bang() {
                this->p_06_in1_bang_bang();
            }
            
            void message_16_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_16_trigger_bang() {
                this->message_16_out_set(this->message_16_set);
            }
            
            void select_03_match2_bang() {
                this->message_16_trigger_bang();
            }
            
            void message_17_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_17_trigger_bang() {
                this->message_17_out_set(this->message_17_set);
            }
            
            void select_03_match3_bang() {
                this->message_17_trigger_bang();
            }
            
            void message_19_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_19_trigger_bang() {
                this->message_19_out_set(this->message_19_set);
            }
            
            void select_03_match4_bang() {
                this->message_19_trigger_bang();
            }
            
            void message_20_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_20_trigger_bang() {
                this->message_20_out_set(this->message_20_set);
            }
            
            void select_03_match5_bang() {
                this->message_20_trigger_bang();
            }
            
            void message_21_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_21_trigger_bang() {
                this->message_21_out_set(this->message_21_set);
            }
            
            void select_03_match6_bang() {
                this->message_21_trigger_bang();
            }
            
            void message_22_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_22_trigger_bang() {
                this->message_22_out_set(this->message_22_set);
            }
            
            void select_03_match7_bang() {
                this->message_22_trigger_bang();
            }
            
            void message_23_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_23_trigger_bang() {
                this->message_23_out_set(this->message_23_set);
            }
            
            void select_03_match8_bang() {
                this->message_23_trigger_bang();
            }
            
            void message_24_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_24_trigger_bang() {
                this->message_24_out_set(this->message_24_set);
            }
            
            void select_03_match9_bang() {
                this->message_24_trigger_bang();
            }
            
            void message_25_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_25_trigger_bang() {
                this->message_25_out_set(this->message_25_set);
            }
            
            void select_03_match10_bang() {
                this->message_25_trigger_bang();
            }
            
            void message_26_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_26_trigger_bang() {
                this->message_26_out_set(this->message_26_set);
            }
            
            void select_03_match11_bang() {
                this->message_26_trigger_bang();
            }
            
            void message_27_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_27_trigger_bang() {
                this->message_27_out_set(this->message_27_set);
            }
            
            void select_03_match12_bang() {
                this->message_27_trigger_bang();
            }
            
            void message_28_out_set(const list& v) {
                this->liststore_03_storelist_set(v);
            }
            
            void message_28_trigger_bang() {
                this->message_28_out_set(this->message_28_set);
            }
            
            void select_03_match13_bang() {
                this->message_28_trigger_bang();
            }
            
            void select_03_nomatch_number_set(number ) {}
            
            void select_03_input_number_set(number v) {
                if (v == this->select_03_test1)
                    this->select_03_match1_bang();
                else if (v == this->select_03_test2)
                    this->select_03_match2_bang();
                else if (v == this->select_03_test3)
                    this->select_03_match3_bang();
                else if (v == this->select_03_test4)
                    this->select_03_match4_bang();
                else if (v == this->select_03_test5)
                    this->select_03_match5_bang();
                else if (v == this->select_03_test6)
                    this->select_03_match6_bang();
                else if (v == this->select_03_test7)
                    this->select_03_match7_bang();
                else if (v == this->select_03_test8)
                    this->select_03_match8_bang();
                else if (v == this->select_03_test9)
                    this->select_03_match9_bang();
                else if (v == this->select_03_test10)
                    this->select_03_match10_bang();
                else if (v == this->select_03_test11)
                    this->select_03_match11_bang();
                else if (v == this->select_03_test12)
                    this->select_03_match12_bang();
                else if (v == this->select_03_test13)
                    this->select_03_match13_bang();
                else
                    this->select_03_nomatch_number_set(v);
            }
            
            void uzi_03_index_set(number v) {
                this->numberobj_15_value_set(v);
                this->select_03_input_number_set(v);
            }
            
            void uzi_03_out_bang() {}
            
            void uzi_03_carry_bang() {}
            
            void uzi_03_start_bang_bang() {
                this->uzi_03_gobang(0);
            }
            
            void loadbang_03_output_bang() {
                this->uzi_03_start_bang_bang();
            }
            
            void loadbang_03_input_bang() {
                this->loadbang_03_output_bang();
            }
            
            void button_07_output_bang() {
                this->loadbang_03_input_bang();
            }
            
            void button_07_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-186"), this->_currentTime);;
                this->button_07_output_bang();
            }
            
            void trigger_02_out2_bang() {
                this->button_07_bangval_bang();
            }
            
            void message_13_set_set(const list& v) {
                this->message_13_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-203"),
                    v,
                    this->_currentTime
                );
            }
            
            void change_01_zero_set(number ) {}
            
            void change_01_nonzero_set(number ) {}
            
            void eventoutlet_05_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out5_number_set(v);
            }
            
            void change_01_out_set(number v) {
                this->change_01_out = v;
                this->eventoutlet_05_in1_number_set(v);
            }
            
            void change_01_input_set(number v) {
                this->change_01_input = v;
            
                if (v != this->change_01_prev) {
                    number prev = this->change_01_prev;
                    this->change_01_prev = v;
            
                    if (v == 0) {
                        this->change_01_zero_set(1);
                    } else if (this->change_01_out == 0) {
                        this->change_01_nonzero_set(1);
                    }
            
                    {
                        this->change_01_out_set(v);
                    }
                } else {
                    this->change_01_prev = v;
                }
            }
            
            void liststore_03_out3_set(number v) {
                {
                    list converted = {v};
                    this->message_13_set_set(converted);
                }
            
                this->change_01_input_set(v);
            }
            
            void message_09_set_set(const list& v) {
                this->message_09_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-24"),
                    v,
                    this->_currentTime
                );
            }
            
            void pack_08_in2_set(number v) {
                this->pack_08_in2 = v;
            }
            
            void message_15_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_08_in2_set(converted);
                }
            }
            
            void message_15_trigger_bang() {
                this->message_15_out_set(this->message_15_set);
            }
            
            void listjoin_04_in2_set(const list& v) {
                this->listjoin_04_in2 = jsCreateListCopy(v);
            }
            
            void pack_08_out_set(const list& v) {
                this->listjoin_04_in2_set(v);
            }
            
            void pack_08_in1_set(number v) {
                this->pack_08_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_08_in1;
                array[1] = this->pack_08_in2;
                this->pack_08_out_set(array);
            }
            
            void numberobj_14_output_set(number v) {
                this->message_15_trigger_bang();
                this->pack_08_in1_set(v);
            }
            
            void numberobj_14_value_set(number v) {
                this->numberobj_14_value_setter(v);
                v = this->numberobj_14_value;
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-28"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_14_output_set(localvalue);
            }
            
            void unpack_02_out4_set(number v) {
                this->unpack_02_out4 = v;
                this->numberobj_14_value_set(v);
            }
            
            void pack_06_in2_set(number v) {
                this->pack_06_in2 = v;
            }
            
            void message_12_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_06_in2_set(converted);
                }
            }
            
            void message_12_trigger_bang() {
                this->message_12_out_set(this->message_12_set);
            }
            
            void listjoin_03_in2_set(const list& v) {
                this->listjoin_03_in2 = jsCreateListCopy(v);
            }
            
            void pack_06_out_set(const list& v) {
                this->listjoin_03_in2_set(v);
            }
            
            void pack_06_in1_set(number v) {
                this->pack_06_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_06_in1;
                array[1] = this->pack_06_in2;
                this->pack_06_out_set(array);
            }
            
            void numberobj_12_output_set(number v) {
                this->message_12_trigger_bang();
                this->pack_06_in1_set(v);
            }
            
            void numberobj_12_value_set(number v) {
                this->numberobj_12_value_setter(v);
                v = this->numberobj_12_value;
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-113"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_12_output_set(localvalue);
            }
            
            void unpack_02_out3_set(number v) {
                this->unpack_02_out3 = v;
                this->numberobj_12_value_set(v);
            }
            
            void pack_04_in2_set(number v) {
                this->pack_04_in2 = v;
            }
            
            void message_10_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_04_in2_set(converted);
                }
            }
            
            void message_10_trigger_bang() {
                this->message_10_out_set(this->message_10_set);
            }
            
            void listjoin_02_in2_set(const list& v) {
                this->listjoin_02_in2 = jsCreateListCopy(v);
            }
            
            void pack_04_out_set(const list& v) {
                this->listjoin_02_in2_set(v);
            }
            
            void pack_04_in1_set(number v) {
                this->pack_04_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_04_in1;
                array[1] = this->pack_04_in2;
                this->pack_04_out_set(array);
            }
            
            void numberobj_10_output_set(number v) {
                this->message_10_trigger_bang();
                this->pack_04_in1_set(v);
            }
            
            void numberobj_10_value_set(number v) {
                this->numberobj_10_value_setter(v);
                v = this->numberobj_10_value;
                number localvalue = v;
            
                if (this->numberobj_10_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-111"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_10_output_set(localvalue);
            }
            
            void unpack_02_out2_set(number v) {
                this->unpack_02_out2 = v;
                this->numberobj_10_value_set(v);
            }
            
            void pack_02_in2_set(number v) {
                this->pack_02_in2 = v;
            }
            
            void message_07_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_02_in2_set(converted);
                }
            }
            
            void message_07_trigger_bang() {
                this->message_07_out_set(this->message_07_set);
            }
            
            void listjoin_01_in2_set(const list& v) {
                this->listjoin_01_in2 = jsCreateListCopy(v);
            }
            
            void pack_02_out_set(const list& v) {
                this->listjoin_01_in2_set(v);
            }
            
            void pack_02_in1_set(number v) {
                this->pack_02_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_02_in1;
                array[1] = this->pack_02_in2;
                this->pack_02_out_set(array);
            }
            
            void numberobj_07_output_set(number v) {
                this->message_07_trigger_bang();
                this->pack_02_in1_set(v);
            }
            
            void numberobj_07_value_set(number v) {
                this->numberobj_07_value_setter(v);
                v = this->numberobj_07_value;
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-100"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_07_output_set(localvalue);
            }
            
            void unpack_02_out1_set(number v) {
                this->unpack_02_out1 = v;
                this->numberobj_07_value_set(v);
            }
            
            void unpack_02_input_list_set(const list& v) {
                if (v->length > 3)
                    this->unpack_02_out4_set(v[3]);
            
                if (v->length > 2)
                    this->unpack_02_out3_set(v[2]);
            
                if (v->length > 1)
                    this->unpack_02_out2_set(v[1]);
            
                if (v->length > 0)
                    this->unpack_02_out1_set(v[0]);
            }
            
            void listchange_01_compare_set(const list& v) {
                this->listchange_01_compare = jsCreateListCopy(v);
            }
            
            void listchange_01_changeflag_set(number ) {}
            
            void liststore_02_storelist_set(const list& v) {
                this->liststore_02_storelist = jsCreateListCopy(v);
                this->liststore_02_storage_store(this->liststore_02_storeidx, v);
            }
            
            void trigger_03_out3_set(const list& v) {
                this->liststore_02_storelist_set(v);
            }
            
            void liststore_02_storeidx_set(number v) {
                this->liststore_02_storeidx = v;
            }
            
            void message_05_set_set(const list& v) {
                this->message_05_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-16"),
                    v,
                    this->_currentTime
                );
            }
            
            void counter_01_output_set(number v) {
                this->counter_01_output = v;
                this->liststore_02_storeidx_set(v);
            
                {
                    list converted = {v};
                    this->message_05_set_set(converted);
                }
            }
            
            void counter_01_overflow_bang_bang() {}
            
            number counter_01_overflow_number_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                if (v > 1)
                    v = 1;
            
                return v;
            }
            
            void counter_01_overflow_number_set(number v) {
                v = this->counter_01_overflow_number_constrain(v);
                this->counter_01_overflow_number = v;
            }
            
            void counter_01_carry_set(number v) {
                this->counter_01_carry = v;
            }
            
            void counter_01_underflow_bang_bang() {}
            
            number counter_01_underflow_number_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                if (v > 1)
                    v = 1;
            
                return v;
            }
            
            void counter_01_underflow_number_set(number v) {
                v = this->counter_01_underflow_number_constrain(v);
                this->counter_01_underflow_number = v;
            }
            
            void counter_01_input_bang() {
                this->counter_01_output_set(this->counter_01_count);
                this->counter_01_inc();
            
                if (this->counter_01_count > this->counter_01_maximum) {
                    if (this->counter_01_direction == 2) {
                        this->counter_01_phase = !(bool)(this->counter_01_phase);
                        this->counter_01_count = this->counter_01_maximum;
                        this->counter_01_inc();
                    } else
                        this->counter_01_count = this->counter_01_minimum;
            
                    if ((bool)(!(bool)(this->counter_01_overflow_number))) {
                        if (this->counter_01_carryflag == 1)
                            this->counter_01_overflow_bang_bang();
                        else
                            this->counter_01_overflow_number_set(1);
                    }
            
                    this->counter_01_carry_set(this->counter_01_carry + 1);
                } else if ((bool)(this->counter_01_overflow_number) && this->counter_01_carryflag == 0)
                    this->counter_01_overflow_number_set(0);
            
                if (this->counter_01_count < this->counter_01_minimum) {
                    if (this->counter_01_direction == 2) {
                        this->counter_01_phase = !(bool)(this->counter_01_phase);
                        this->counter_01_count = this->counter_01_minimum;
                        this->counter_01_inc();
                    } else
                        this->counter_01_count = this->counter_01_maximum;
            
                    if ((bool)(!(bool)(this->counter_01_underflow_number))) {
                        if (this->counter_01_carryflag == 1)
                            this->counter_01_underflow_bang_bang();
                        else
                            this->counter_01_underflow_number_set(1);
                    }
            
                    this->counter_01_carry_set(this->counter_01_carry + 1);
                } else if ((bool)(this->counter_01_underflow_number) && this->counter_01_carryflag == 0)
                    this->counter_01_underflow_number_set(0);
            }
            
            void trigger_03_out2_bang() {
                this->counter_01_input_bang();
            }
            
            void liststore_02_out3_set(number ) {}
            
            void pack_07_in2_set(number v) {
                this->pack_07_in2 = v;
            }
            
            void message_14_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_07_in2_set(converted);
                }
            }
            
            void message_14_trigger_bang() {
                this->message_14_out_set(this->message_14_set);
            }
            
            number line_04_time_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_04_time_set(number v) {
                v = this->line_04_time_constrain(v);
                this->line_04_time = v;
            }
            
            void eventoutlet_06_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out4_number_set(v);
            }
            
            void line_04_output_set(number v) {
                this->line_04_output = v;
                this->eventoutlet_06_in1_number_set(v);
            }
            
            void line_04_stop_bang() {
                this->getEngine()->flushClockEvents(this, 848255507, false);;
                this->line_04_pendingRamps->length = 0;
                this->line_04_startValue = this->line_04_output;
                this->line_04_slope = 0;
                this->line_04__time = 0;
                this->line_04_time_set(0);
            }
            
            number line_04_grain_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_04_grain_set(number v) {
                v = this->line_04_grain_constrain(v);
                this->line_04_grain = v;
            
                if ((bool)(!(bool)(this->line_04_isFinished(this->line_04_startValue)))) {
                    this->getEngine()->flushClockEvents(this, 848255507, false);;
                    this->line_04_scheduleNext();
                }
            }
            
            void line_04_end_bang() {}
            
            void line_04_target_set(const list& v) {
                this->line_04_target = jsCreateListCopy(v);
                this->line_04_pendingRamps->length = 0;
            
                if (v->length == 1) {
                    this->line_04__time = this->line_04_time;
                    this->line_04_time_set(0);
            
                    if ((bool)(this->line_04__time)) {
                        this->line_04_startRamp(v[0], this->line_04__time);
                    } else {
                        this->line_04_output_set(v[0]);
                        this->line_04_startValue = v[0];
                        this->line_04_stop_bang();
                    }
                } else if (v->length == 2) {
                    this->line_04_time_set(0);
                    this->line_04__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_04_startRamp(v[0], this->line_04__time);
                } else if (v->length == 3) {
                    this->line_04_time_set(0);
                    this->line_04_grain_set(v[2]);
                    this->line_04__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_04_startRamp(v[0], this->line_04__time);
                } else {
                    this->line_04_time_set(0);
                    this->line_04_pendingRamps = jsCreateListCopy(v);
                    this->line_04_startPendingRamp();
                }
            }
            
            void listjoin_04_out1_set(const list& v) {
                this->line_04_target_set(v);
            }
            
            void listjoin_04_in1_set(const list& _in1) {
                RNBO_UNUSED(_in1);
                list in1 = createListCopy(_in1);
                this->listjoin_04_in1 = jsCreateListCopy(in1);
                auto in2 = this->listjoin_04_in2;
            
                {
                    this->listjoin_04_out1_set(in1->concat(in2));
                    return;
                }
            }
            
            void pack_07_out_set(const list& v) {
                this->listjoin_04_in1_set(v);
            }
            
            void pack_07_in1_set(number v) {
                this->pack_07_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_07_in1;
                array[1] = this->pack_07_in2;
                this->pack_07_out_set(array);
            }
            
            void numberobj_13_output_set(number v) {
                this->message_14_trigger_bang();
                this->pack_07_in1_set(v);
            }
            
            void numberobj_13_value_set(number v) {
                this->numberobj_13_value_setter(v);
                v = this->numberobj_13_value;
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-44"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_13_output_set(localvalue);
            }
            
            void unpack_01_out4_set(number v) {
                this->unpack_01_out4 = v;
                this->numberobj_13_value_set(v);
            }
            
            void pack_05_in2_set(number v) {
                this->pack_05_in2 = v;
            }
            
            void message_11_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_05_in2_set(converted);
                }
            }
            
            void message_11_trigger_bang() {
                this->message_11_out_set(this->message_11_set);
            }
            
            number line_03_time_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_03_time_set(number v) {
                v = this->line_03_time_constrain(v);
                this->line_03_time = v;
            }
            
            void eventoutlet_04_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out3_number_set(v);
            }
            
            void line_03_output_set(number v) {
                this->line_03_output = v;
                this->eventoutlet_04_in1_number_set(v);
            }
            
            void line_03_stop_bang() {
                this->getEngine()->flushClockEvents(this, 1220262738, false);;
                this->line_03_pendingRamps->length = 0;
                this->line_03_startValue = this->line_03_output;
                this->line_03_slope = 0;
                this->line_03__time = 0;
                this->line_03_time_set(0);
            }
            
            number line_03_grain_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_03_grain_set(number v) {
                v = this->line_03_grain_constrain(v);
                this->line_03_grain = v;
            
                if ((bool)(!(bool)(this->line_03_isFinished(this->line_03_startValue)))) {
                    this->getEngine()->flushClockEvents(this, 1220262738, false);;
                    this->line_03_scheduleNext();
                }
            }
            
            void line_03_end_bang() {}
            
            void line_03_target_set(const list& v) {
                this->line_03_target = jsCreateListCopy(v);
                this->line_03_pendingRamps->length = 0;
            
                if (v->length == 1) {
                    this->line_03__time = this->line_03_time;
                    this->line_03_time_set(0);
            
                    if ((bool)(this->line_03__time)) {
                        this->line_03_startRamp(v[0], this->line_03__time);
                    } else {
                        this->line_03_output_set(v[0]);
                        this->line_03_startValue = v[0];
                        this->line_03_stop_bang();
                    }
                } else if (v->length == 2) {
                    this->line_03_time_set(0);
                    this->line_03__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_03_startRamp(v[0], this->line_03__time);
                } else if (v->length == 3) {
                    this->line_03_time_set(0);
                    this->line_03_grain_set(v[2]);
                    this->line_03__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_03_startRamp(v[0], this->line_03__time);
                } else {
                    this->line_03_time_set(0);
                    this->line_03_pendingRamps = jsCreateListCopy(v);
                    this->line_03_startPendingRamp();
                }
            }
            
            void listjoin_03_out1_set(const list& v) {
                this->line_03_target_set(v);
            }
            
            void listjoin_03_in1_set(const list& _in1) {
                RNBO_UNUSED(_in1);
                list in1 = createListCopy(_in1);
                this->listjoin_03_in1 = jsCreateListCopy(in1);
                auto in2 = this->listjoin_03_in2;
            
                {
                    this->listjoin_03_out1_set(in1->concat(in2));
                    return;
                }
            }
            
            void pack_05_out_set(const list& v) {
                this->listjoin_03_in1_set(v);
            }
            
            void pack_05_in1_set(number v) {
                this->pack_05_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_05_in1;
                array[1] = this->pack_05_in2;
                this->pack_05_out_set(array);
            }
            
            void numberobj_11_output_set(number v) {
                this->message_11_trigger_bang();
                this->pack_05_in1_set(v);
            }
            
            void numberobj_11_value_set(number v) {
                this->numberobj_11_value_setter(v);
                v = this->numberobj_11_value;
                number localvalue = v;
            
                if (this->numberobj_11_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-114"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_11_output_set(localvalue);
            }
            
            void unpack_01_out3_set(number v) {
                this->unpack_01_out3 = v;
                this->numberobj_11_value_set(v);
            }
            
            void pack_03_in2_set(number v) {
                this->pack_03_in2 = v;
            }
            
            void message_08_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_03_in2_set(converted);
                }
            }
            
            void message_08_trigger_bang() {
                this->message_08_out_set(this->message_08_set);
            }
            
            number line_02_time_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_02_time_set(number v) {
                v = this->line_02_time_constrain(v);
                this->line_02_time = v;
            }
            
            void eventoutlet_03_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out2_number_set(v);
            }
            
            void line_02_output_set(number v) {
                this->line_02_output = v;
                this->eventoutlet_03_in1_number_set(v);
            }
            
            void line_02_stop_bang() {
                this->getEngine()->flushClockEvents(this, 1592269969, false);;
                this->line_02_pendingRamps->length = 0;
                this->line_02_startValue = this->line_02_output;
                this->line_02_slope = 0;
                this->line_02__time = 0;
                this->line_02_time_set(0);
            }
            
            number line_02_grain_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_02_grain_set(number v) {
                v = this->line_02_grain_constrain(v);
                this->line_02_grain = v;
            
                if ((bool)(!(bool)(this->line_02_isFinished(this->line_02_startValue)))) {
                    this->getEngine()->flushClockEvents(this, 1592269969, false);;
                    this->line_02_scheduleNext();
                }
            }
            
            void line_02_end_bang() {}
            
            void line_02_target_set(const list& v) {
                this->line_02_target = jsCreateListCopy(v);
                this->line_02_pendingRamps->length = 0;
            
                if (v->length == 1) {
                    this->line_02__time = this->line_02_time;
                    this->line_02_time_set(0);
            
                    if ((bool)(this->line_02__time)) {
                        this->line_02_startRamp(v[0], this->line_02__time);
                    } else {
                        this->line_02_output_set(v[0]);
                        this->line_02_startValue = v[0];
                        this->line_02_stop_bang();
                    }
                } else if (v->length == 2) {
                    this->line_02_time_set(0);
                    this->line_02__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_02_startRamp(v[0], this->line_02__time);
                } else if (v->length == 3) {
                    this->line_02_time_set(0);
                    this->line_02_grain_set(v[2]);
                    this->line_02__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_02_startRamp(v[0], this->line_02__time);
                } else {
                    this->line_02_time_set(0);
                    this->line_02_pendingRamps = jsCreateListCopy(v);
                    this->line_02_startPendingRamp();
                }
            }
            
            void listjoin_02_out1_set(const list& v) {
                this->line_02_target_set(v);
            }
            
            void listjoin_02_in1_set(const list& _in1) {
                RNBO_UNUSED(_in1);
                list in1 = createListCopy(_in1);
                this->listjoin_02_in1 = jsCreateListCopy(in1);
                auto in2 = this->listjoin_02_in2;
            
                {
                    this->listjoin_02_out1_set(in1->concat(in2));
                    return;
                }
            }
            
            void pack_03_out_set(const list& v) {
                this->listjoin_02_in1_set(v);
            }
            
            void pack_03_in1_set(number v) {
                this->pack_03_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_03_in1;
                array[1] = this->pack_03_in2;
                this->pack_03_out_set(array);
            }
            
            void numberobj_08_output_set(number v) {
                this->message_08_trigger_bang();
                this->pack_03_in1_set(v);
            }
            
            void numberobj_08_value_set(number v) {
                this->numberobj_08_value_setter(v);
                v = this->numberobj_08_value;
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-112"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_08_output_set(localvalue);
            }
            
            void unpack_01_out2_set(number v) {
                this->unpack_01_out2 = v;
                this->numberobj_08_value_set(v);
            }
            
            void pack_01_in2_set(number v) {
                this->pack_01_in2 = v;
            }
            
            void message_06_out_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->pack_01_in2_set(converted);
                }
            }
            
            void message_06_trigger_bang() {
                this->message_06_out_set(this->message_06_set);
            }
            
            number line_01_time_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_01_time_set(number v) {
                v = this->line_01_time_constrain(v);
                this->line_01_time = v;
            }
            
            void eventoutlet_02_in1_number_set(number v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_07_out1_number_set(v);
            }
            
            void line_01_output_set(number v) {
                this->line_01_output = v;
                this->eventoutlet_02_in1_number_set(v);
            }
            
            void line_01_stop_bang() {
                this->getEngine()->flushClockEvents(this, 1964277200, false);;
                this->line_01_pendingRamps->length = 0;
                this->line_01_startValue = this->line_01_output;
                this->line_01_slope = 0;
                this->line_01__time = 0;
                this->line_01_time_set(0);
            }
            
            number line_01_grain_constrain(number v) const {
                if (v < 0)
                    v = 0;
            
                return v;
            }
            
            void line_01_grain_set(number v) {
                v = this->line_01_grain_constrain(v);
                this->line_01_grain = v;
            
                if ((bool)(!(bool)(this->line_01_isFinished(this->line_01_startValue)))) {
                    this->getEngine()->flushClockEvents(this, 1964277200, false);;
                    this->line_01_scheduleNext();
                }
            }
            
            void line_01_end_bang() {}
            
            void line_01_target_set(const list& v) {
                this->line_01_target = jsCreateListCopy(v);
                this->line_01_pendingRamps->length = 0;
            
                if (v->length == 1) {
                    this->line_01__time = this->line_01_time;
                    this->line_01_time_set(0);
            
                    if ((bool)(this->line_01__time)) {
                        this->line_01_startRamp(v[0], this->line_01__time);
                    } else {
                        this->line_01_output_set(v[0]);
                        this->line_01_startValue = v[0];
                        this->line_01_stop_bang();
                    }
                } else if (v->length == 2) {
                    this->line_01_time_set(0);
                    this->line_01__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_01_startRamp(v[0], this->line_01__time);
                } else if (v->length == 3) {
                    this->line_01_time_set(0);
                    this->line_01_grain_set(v[2]);
                    this->line_01__time = (v[1] < 0 ? 0 : v[1]);
                    this->line_01_startRamp(v[0], this->line_01__time);
                } else {
                    this->line_01_time_set(0);
                    this->line_01_pendingRamps = jsCreateListCopy(v);
                    this->line_01_startPendingRamp();
                }
            }
            
            void listjoin_01_out1_set(const list& v) {
                this->line_01_target_set(v);
            }
            
            void listjoin_01_in1_set(const list& _in1) {
                RNBO_UNUSED(_in1);
                list in1 = createListCopy(_in1);
                this->listjoin_01_in1 = jsCreateListCopy(in1);
                auto in2 = this->listjoin_01_in2;
            
                {
                    this->listjoin_01_out1_set(in1->concat(in2));
                    return;
                }
            }
            
            void pack_01_out_set(const list& v) {
                this->listjoin_01_in1_set(v);
            }
            
            void pack_01_in1_set(number v) {
                this->pack_01_in1 = v;
                list array = list(0, 0);
                array[0] = this->pack_01_in1;
                array[1] = this->pack_01_in2;
                this->pack_01_out_set(array);
            }
            
            void numberobj_04_output_set(number v) {
                this->message_06_trigger_bang();
                this->pack_01_in1_set(v);
            }
            
            void numberobj_04_value_set(number v) {
                this->numberobj_04_value_setter(v);
                v = this->numberobj_04_value;
                number localvalue = v;
            
                if (this->numberobj_04_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-62"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_04_output_set(localvalue);
            }
            
            void unpack_01_out1_set(number v) {
                this->unpack_01_out1 = v;
                this->numberobj_04_value_set(v);
            }
            
            void unpack_01_input_list_set(const list& v) {
                if (v->length > 3)
                    this->unpack_01_out4_set(v[3]);
            
                if (v->length > 2)
                    this->unpack_01_out3_set(v[2]);
            
                if (v->length > 1)
                    this->unpack_01_out2_set(v[1]);
            
                if (v->length > 0)
                    this->unpack_01_out1_set(v[0]);
            }
            
            void liststore_02_out1_set(const list& v) {
                this->unpack_01_input_list_set(v);
            }
            
            void liststore_02_out2_bang() {}
            
            void liststore_02_lookupidx_set(number v) {
                this->liststore_02_lookupidx = v;
                list val = this->liststore_02_storage_lookup(v);
                this->liststore_02_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_02_out1_set(this->liststore_02_storage_lookup(v));
                } else {
                    this->liststore_02_out2_bang();
                }
            }
            
            void message_05_out_set(const list& v) {
                {
                    if (v->length > 2)
                        this->liststore_02_storeidx_set(v[2]);
            
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->liststore_02_lookupidx_set(converted);
                }
            }
            
            void message_05_trigger_bang() {
                this->message_05_out_set(this->message_05_set);
            }
            
            void trigger_03_out1_bang() {
                this->message_05_trigger_bang();
            }
            
            void trigger_03_input_list_set(const list& v) {
                this->trigger_03_out3_set(v);
                this->trigger_03_out2_bang();
                this->trigger_03_out1_bang();
            }
            
            void listchange_01_out_set(const list& v) {
                this->trigger_03_input_list_set(v);
            }
            
            void listchange_01_input_set(const list& v) {
                this->listchange_01_input = jsCreateListCopy(v);
                bool changed = false;
            
                if (v->length != this->listchange_01_compare->length) {
                    changed = true;
                } else {
                    for (int i = 0; i < v->length; i++) {
                        if (v[(Index)i] != this->listchange_01_compare[(Index)i]) {
                            changed = true;
                            break;
                        }
                    }
                }
            
                this->listchange_01_compare_set(v);
            
                if ((bool)(changed)) {
                    this->listchange_01_changeflag_set(1);
                    this->listchange_01_out_set(v);
                } else {
                    this->listchange_01_changeflag_set(0);
                }
            }
            
            void liststore_03_out1_set(const list& v) {
                this->message_09_set_set(v);
                this->unpack_02_input_list_set(v);
                this->listchange_01_input_set(v);
            }
            
            void liststore_03_out2_bang() {}
            
            void liststore_03_lookupidx_set(number v) {
                this->liststore_03_lookupidx = v;
                list val = this->liststore_03_storage_lookup(v);
                this->liststore_03_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_03_out1_set(this->liststore_03_storage_lookup(v));
                } else {
                    this->liststore_03_out2_bang();
                }
            }
            
            void numberobj_05_output_set(number v) {
                this->liststore_03_lookupidx_set(v);
            }
            
            void numberobj_05_value_set(number v) {
                this->numberobj_05_value_setter(v);
                v = this->numberobj_05_value;
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 12) {
                    localvalue = 12;
                }
            
                if (this->numberobj_05_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-61"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_05_output_set(localvalue);
            }
            
            void trigger_02_out1_set(number v) {
                this->numberobj_05_value_set(v);
            }
            
            void trigger_02_input_number_set(number v) {
                this->trigger_02_out2_bang();
                this->trigger_02_out1_set(trunc(v));
            }
            
            void eventinlet_11_out1_number_set(number v) {
                this->trigger_02_input_number_set(v);
            }
            
            void trigger_02_input_bang_bang() {
                this->trigger_02_out2_bang();
                this->trigger_02_out1_set(0);
            }
            
            void trigger_02_input_list_set(const list& v) {
                this->trigger_02_out2_bang();
                this->trigger_02_out1_set((v->length > 0 ? trunc(v[0]) : 0));
            }
            
            void message_18_set_set(const list& v) {
                this->message_18_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-201"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_03_out4_set(number v) {
                {
                    list converted = {v};
                    this->message_18_set_set(converted);
                }
            }
            
            void liststore_03_count_bang() {
                number n = 0;
            
                for (number i = 0; i < 13; i++) {
                    if (this->liststore_03_storage_lookup(i)->length > 0)
                        n++;
                }
            
                this->liststore_03_out4_set(n);
            }
            
            void button_03_output_bang() {
                this->liststore_03_count_bang();
            }
            
            void button_03_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-35"), this->_currentTime);;
                this->button_03_output_bang();
            }
            
            void message_06_set_set(const list& v) {
                this->message_06_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-80"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_03_dump_bang() {
                for (number i = 0; i < 13; i++) {
                    list val = this->liststore_03_storage_lookup(i);
            
                    if (val->length > 0) {
                        this->liststore_03_out3_set(i);
                        this->liststore_03_out1_set(val);
                    }
                }
            }
            
            void button_04_output_bang() {
                this->liststore_03_dump_bang();
            }
            
            void button_04_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-27"), this->_currentTime);;
                this->button_04_output_bang();
            }
            
            void numberobj_06_output_set(number v) {
                this->trigger_02_input_number_set(v);
            }
            
            void numberobj_06_value_set(number v) {
                this->numberobj_06_value_setter(v);
                v = this->numberobj_06_value;
                number localvalue = v;
            
                if (this->numberobj_06_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-60"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_06_output_set(localvalue);
            }
            
            void message_07_set_set(const list& v) {
                this->message_07_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-85"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_08_set_set(const list& v) {
                this->message_08_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-108"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_09_out_set(const list& ) {}
            
            void message_09_trigger_bang() {
                this->message_09_out_set(this->message_09_set);
            }
            
            void liststore_03_reset_bang() {
                this->liststore_03_storage_reset();
            }
            
            void button_05_output_bang() {
                this->liststore_03_reset_bang();
            }
            
            void button_05_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-29"), this->_currentTime);;
                this->button_05_output_bang();
            }
            
            void liststore_03_remove_set(number v) {
                this->liststore_03_storage_store(v, {});
            }
            
            void numberobj_09_output_set(number v) {
                this->liststore_03_remove_set(v);
            }
            
            void numberobj_09_value_set(number v) {
                this->numberobj_09_value_setter(v);
                v = this->numberobj_09_value;
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/ChordColl/number_obj-55"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_09_output_set(localvalue);
            }
            
            void message_10_set_set(const list& v) {
                this->message_10_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-107"),
                    v,
                    this->_currentTime
                );
            }
            
            void select_02_match1_bang() {}
            
            void select_02_match2_bang() {}
            
            void select_02_match3_bang() {}
            
            void select_02_nomatch_number_set(number ) {}
            
            void select_02_input_number_set(number v) {
                if (v == this->select_02_test1)
                    this->select_02_match1_bang();
                else if (v == this->select_02_test2)
                    this->select_02_match2_bang();
                else if (v == this->select_02_test3)
                    this->select_02_match3_bang();
                else
                    this->select_02_nomatch_number_set(v);
            }
            
            void uzi_02_index_set(number v) {
                this->select_02_input_number_set(v);
            }
            
            void uzi_02_out_bang() {}
            
            void uzi_02_carry_bang() {}
            
            void uzi_02_start_bang_bang() {
                this->uzi_02_gobang(0);
            }
            
            void loadbang_02_output_bang() {
                this->uzi_02_start_bang_bang();
            }
            
            void loadbang_02_input_bang() {
                this->loadbang_02_output_bang();
            }
            
            void button_06_output_bang() {
                this->loadbang_02_input_bang();
            }
            
            void button_06_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/ChordColl/button_obj-8"), this->_currentTime);;
                this->button_06_output_bang();
            }
            
            void message_11_set_set(const list& v) {
                this->message_11_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-110"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_12_set_set(const list& v) {
                this->message_12_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-109"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_13_out_set(const list& ) {}
            
            void message_13_trigger_bang() {
                this->message_13_out_set(this->message_13_set);
            }
            
            void message_14_set_set(const list& v) {
                this->message_14_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-46"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_15_set_set(const list& v) {
                this->message_15_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-45"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_16_set_set(const list& v) {
                this->message_16_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_17_set_set(const list& v) {
                this->message_17_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-65"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_18_out_set(const list& ) {}
            
            void message_18_trigger_bang() {
                this->message_18_out_set(this->message_18_set);
            }
            
            void message_19_set_set(const list& v) {
                this->message_19_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-71"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_20_set_set(const list& v) {
                this->message_20_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-77"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_21_set_set(const list& v) {
                this->message_21_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-75"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_22_set_set(const list& v) {
                this->message_22_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-91"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_23_set_set(const list& v) {
                this->message_23_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-93"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_24_set_set(const list& v) {
                this->message_24_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-92"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_25_set_set(const list& v) {
                this->message_25_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-81"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_26_set_set(const list& v) {
                this->message_26_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-79"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_27_set_set(const list& v) {
                this->message_27_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-78"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_28_set_set(const list& v) {
                this->message_28_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/ChordColl/message_obj-119"),
                    v,
                    this->_currentTime
                );
            }
            
            void p_06_perform(Index n) {
                // subpatcher: I_chordVariants
                this->p_06->process(nullptr, 0, nullptr, 0, n);
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_04_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_04_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_04_value = localvalue;
            }
            
            void numberobj_05_value_setter(number v) {
                number localvalue = v;
            
                if ((bool)(true) && localvalue < 0) {
                    localvalue = 0;
                }
            
                if ((bool)(true) && localvalue > 12) {
                    localvalue = 12;
                }
            
                if (this->numberobj_05_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_05_value = localvalue;
            }
            
            void numberobj_06_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_06_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_06_value = localvalue;
            }
            
            void numberobj_07_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_07_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_07_value = localvalue;
            }
            
            void numberobj_08_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_08_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_08_value = localvalue;
            }
            
            void numberobj_09_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_09_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_09_value = localvalue;
            }
            
            void numberobj_10_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_10_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_10_value = localvalue;
            }
            
            void numberobj_11_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_11_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_11_value = localvalue;
            }
            
            void numberobj_12_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_12_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_12_value = localvalue;
            }
            
            void numberobj_13_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_13_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_13_value = localvalue;
            }
            
            void numberobj_14_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_14_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_14_value = localvalue;
            }
            
            void numberobj_15_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_15_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_15_value = localvalue;
            }
            
            void message_05_init() {
                this->message_05_set_set({1});
            }
            
            list liststore_02_storage_next(number index) {
                return this->liststore_02_storage_lookup(index);
            }
            
            list liststore_02_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_02_storage__slotcount) {
                    number entrylength = this->liststore_02_storage_storage[(Index)(idx * this->liststore_02_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_02_storage_storage[(Index)(idx * this->liststore_02_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_02_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_02_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_02_storage_storage[(Index)(idx * this->liststore_02_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_02_storage_storage[(Index)(idx * this->liststore_02_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_02_storage_init() {
                this->liststore_02_storage__entrysize = 4 + 1;
                this->liststore_02_storage__slotcount = 2;
                int64_t storagesize = (int64_t)(2 * this->liststore_02_storage__entrysize);
                this->liststore_02_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_02_storage_clear() {
                this->liststore_02_storage_storage->setZero();
            }
            
            void liststore_02_storage_reset() {
                this->liststore_02_storage_init();
                this->liststore_02_storage_clear();
            }
            
            void numberobj_04_init() {
                this->numberobj_04_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-62"), 1, this->_currentTime);
            }
            
            void numberobj_04_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_04_value;
            }
            
            void numberobj_04_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_04_value_set(preset["value"]);
            }
            
            void numberobj_05_init() {
                this->numberobj_05_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-61"), 1, this->_currentTime);
            }
            
            void numberobj_05_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_05_value;
            }
            
            void numberobj_05_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_05_value_set(preset["value"]);
            }
            
            list liststore_03_storage_next(number index) {
                return this->liststore_03_storage_lookup(index);
            }
            
            list liststore_03_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_03_storage__slotcount) {
                    number entrylength = this->liststore_03_storage_storage[(Index)(idx * this->liststore_03_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_03_storage_storage[(Index)(idx * this->liststore_03_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_03_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_03_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_03_storage_storage[(Index)(idx * this->liststore_03_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_03_storage_storage[(Index)(idx * this->liststore_03_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_03_storage_init() {
                this->liststore_03_storage__entrysize = 4 + 1;
                this->liststore_03_storage__slotcount = 13;
                int64_t storagesize = (int64_t)(13 * this->liststore_03_storage__entrysize);
                this->liststore_03_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_03_storage_clear() {
                this->liststore_03_storage_storage->setZero();
            }
            
            void liststore_03_storage_reset() {
                this->liststore_03_storage_init();
                this->liststore_03_storage_clear();
            }
            
            number line_01_valueAtTime(MillisecondTime time) {
                return this->line_01_startValue + this->line_01_slope * (time - this->line_01_startTime);
            }
            
            void line_01_scheduleNext() {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                number nextTime = currentTime + this->line_01_grain;
                number nextValue;
            
                if (nextTime - this->line_01_startTime >= this->line_01__time || this->line_01_grain == 0) {
                    nextTime = this->line_01_startTime + this->line_01__time;
                    nextValue = this->line_01_currentTarget;
                } else {
                    nextValue = this->line_01_valueAtTime(nextTime);
                }
            
                this->getEngine()->scheduleClockEventWithValue(this, 1964277200, nextTime - currentTime + this->_currentTime, nextValue);;
            }
            
            void line_01_startRamp(number target, MillisecondTime time) {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                this->line_01_startValue = this->line_01_valueAtTime(currentTime);
                this->line_01_startTime = currentTime;
                this->line_01_currentTarget = target;
                this->getEngine()->flushClockEvents(this, 1964277200, false);;
                number rise = target - this->line_01_startValue;
                this->line_01_slope = rise / time;
                this->line_01_scheduleNext();
            }
            
            bool line_01_isFinished(number value) {
                return value == this->line_01_currentTarget && this->currenttime() - this->line_01_startTime >= this->line_01__time;
            }
            
            void line_01_startPendingRamp() {
                if (this->line_01_pendingRamps->length < 2) {
                    this->line_01_pendingRamps->length = 0;
                    this->line_01__time = 0;
                    this->line_01_time_set(0);
                    this->line_01_end_bang();
                    return;
                }
            
                if (this->line_01_pendingRamps->length > 1) {
                    number target = this->line_01_pendingRamps->shift();
                    this->line_01__time = this->line_01_pendingRamps->shift();
                    this->line_01__time = (this->line_01__time < 0 ? 0 : this->line_01__time);
                    this->line_01_startRamp(target, this->line_01__time);
                }
            }
            
            void counter_01_inc() {
                this->counter_01_count = ((bool)(this->counter_01_phase) ? this->counter_01_count + 1 : this->counter_01_count - 1);
            }
            
            void message_06_init() {
                this->message_06_set_set({0});
            }
            
            void numberobj_06_init() {
                this->numberobj_06_currentFormat = 0;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-60"), 1, this->_currentTime);
            }
            
            void numberobj_06_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_06_value;
            }
            
            void numberobj_06_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_06_value_set(preset["value"]);
            }
            
            void numberobj_07_init() {
                this->numberobj_07_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-100"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_07_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_07_value;
            }
            
            void numberobj_07_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_07_value_set(preset["value"]);
            }
            
            void message_07_init() {
                this->message_07_set_set({250});
            }
            
            void numberobj_08_init() {
                this->numberobj_08_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-112"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_08_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_08_value;
            }
            
            void numberobj_08_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_08_value_set(preset["value"]);
            }
            
            number line_02_valueAtTime(MillisecondTime time) {
                return this->line_02_startValue + this->line_02_slope * (time - this->line_02_startTime);
            }
            
            void line_02_scheduleNext() {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                number nextTime = currentTime + this->line_02_grain;
                number nextValue;
            
                if (nextTime - this->line_02_startTime >= this->line_02__time || this->line_02_grain == 0) {
                    nextTime = this->line_02_startTime + this->line_02__time;
                    nextValue = this->line_02_currentTarget;
                } else {
                    nextValue = this->line_02_valueAtTime(nextTime);
                }
            
                this->getEngine()->scheduleClockEventWithValue(this, 1592269969, nextTime - currentTime + this->_currentTime, nextValue);;
            }
            
            void line_02_startRamp(number target, MillisecondTime time) {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                this->line_02_startValue = this->line_02_valueAtTime(currentTime);
                this->line_02_startTime = currentTime;
                this->line_02_currentTarget = target;
                this->getEngine()->flushClockEvents(this, 1592269969, false);;
                number rise = target - this->line_02_startValue;
                this->line_02_slope = rise / time;
                this->line_02_scheduleNext();
            }
            
            bool line_02_isFinished(number value) {
                return value == this->line_02_currentTarget && this->currenttime() - this->line_02_startTime >= this->line_02__time;
            }
            
            void line_02_startPendingRamp() {
                if (this->line_02_pendingRamps->length < 2) {
                    this->line_02_pendingRamps->length = 0;
                    this->line_02__time = 0;
                    this->line_02_time_set(0);
                    this->line_02_end_bang();
                    return;
                }
            
                if (this->line_02_pendingRamps->length > 1) {
                    number target = this->line_02_pendingRamps->shift();
                    this->line_02__time = this->line_02_pendingRamps->shift();
                    this->line_02__time = (this->line_02__time < 0 ? 0 : this->line_02__time);
                    this->line_02_startRamp(target, this->line_02__time);
                }
            }
            
            void message_08_init() {
                this->message_08_set_set({0});
            }
            
            list liststore_04_storage_next(number index) {
                return this->liststore_04_storage_lookup(index);
            }
            
            list liststore_04_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_04_storage__slotcount) {
                    number entrylength = this->liststore_04_storage_storage[(Index)(idx * this->liststore_04_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_04_storage_storage[(Index)(idx * this->liststore_04_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_04_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_04_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_04_storage_storage[(Index)(idx * this->liststore_04_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_04_storage_storage[(Index)(idx * this->liststore_04_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_04_storage_init() {
                this->liststore_04_storage__entrysize = 3 + 1;
                this->liststore_04_storage__slotcount = 5;
                int64_t storagesize = (int64_t)(5 * this->liststore_04_storage__entrysize);
                this->liststore_04_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_04_storage_clear() {
                this->liststore_04_storage_storage->setZero();
            }
            
            void liststore_04_storage_reset() {
                this->liststore_04_storage_init();
                this->liststore_04_storage_clear();
            }
            
            void message_09_init() {
                this->message_09_set_set({53, 60, 69, 64});
            }
            
            void numberobj_09_init() {
                this->numberobj_09_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-55"), 1, this->_currentTime);
            }
            
            void numberobj_09_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_09_value;
            }
            
            void numberobj_09_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_09_value_set(preset["value"]);
            }
            
            void numberobj_10_init() {
                this->numberobj_10_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-111"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_10_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_10_value;
            }
            
            void numberobj_10_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_10_value_set(preset["value"]);
            }
            
            void message_10_init() {
                this->message_10_set_set({250});
            }
            
            void uzi_02_gobang(number start) {
                this->uzi_02_doPause = 0;
                this->uzi_02_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_02_count; i++) {
                    if ((bool)(this->uzi_02_doPause)) {
                        this->uzi_02_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_02_index_set(i + this->uzi_02_base);
                        this->uzi_02_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_02_carry_bang();
            }
            
            number line_03_valueAtTime(MillisecondTime time) {
                return this->line_03_startValue + this->line_03_slope * (time - this->line_03_startTime);
            }
            
            void line_03_scheduleNext() {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                number nextTime = currentTime + this->line_03_grain;
                number nextValue;
            
                if (nextTime - this->line_03_startTime >= this->line_03__time || this->line_03_grain == 0) {
                    nextTime = this->line_03_startTime + this->line_03__time;
                    nextValue = this->line_03_currentTarget;
                } else {
                    nextValue = this->line_03_valueAtTime(nextTime);
                }
            
                this->getEngine()->scheduleClockEventWithValue(this, 1220262738, nextTime - currentTime + this->_currentTime, nextValue);;
            }
            
            void line_03_startRamp(number target, MillisecondTime time) {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                this->line_03_startValue = this->line_03_valueAtTime(currentTime);
                this->line_03_startTime = currentTime;
                this->line_03_currentTarget = target;
                this->getEngine()->flushClockEvents(this, 1220262738, false);;
                number rise = target - this->line_03_startValue;
                this->line_03_slope = rise / time;
                this->line_03_scheduleNext();
            }
            
            bool line_03_isFinished(number value) {
                return value == this->line_03_currentTarget && this->currenttime() - this->line_03_startTime >= this->line_03__time;
            }
            
            void line_03_startPendingRamp() {
                if (this->line_03_pendingRamps->length < 2) {
                    this->line_03_pendingRamps->length = 0;
                    this->line_03__time = 0;
                    this->line_03_time_set(0);
                    this->line_03_end_bang();
                    return;
                }
            
                if (this->line_03_pendingRamps->length > 1) {
                    number target = this->line_03_pendingRamps->shift();
                    this->line_03__time = this->line_03_pendingRamps->shift();
                    this->line_03__time = (this->line_03__time < 0 ? 0 : this->line_03__time);
                    this->line_03_startRamp(target, this->line_03__time);
                }
            }
            
            void numberobj_11_init() {
                this->numberobj_11_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-114"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_11_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_11_value;
            }
            
            void numberobj_11_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_11_value_set(preset["value"]);
            }
            
            void message_11_init() {
                this->message_11_set_set({0});
            }
            
            void numberobj_12_init() {
                this->numberobj_12_currentFormat = 6;
            
                this->getEngine()->sendNumMessage(
                    TAG("setup"),
                    TAG("Chords/ChordColl/number_obj-113"),
                    1,
                    this->_currentTime
                );
            }
            
            void numberobj_12_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_12_value;
            }
            
            void numberobj_12_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_12_value_set(preset["value"]);
            }
            
            void change_01_init() {
                this->change_01_prev = this->change_01_input;
            }
            
            void message_12_init() {
                this->message_12_set_set({250});
            }
            
            void numberobj_13_init() {
                this->numberobj_13_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-44"), 1, this->_currentTime);
            }
            
            void numberobj_13_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_13_value;
            }
            
            void numberobj_13_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_13_value_set(preset["value"]);
            }
            
            number line_04_valueAtTime(MillisecondTime time) {
                return this->line_04_startValue + this->line_04_slope * (time - this->line_04_startTime);
            }
            
            void line_04_scheduleNext() {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                number nextTime = currentTime + this->line_04_grain;
                number nextValue;
            
                if (nextTime - this->line_04_startTime >= this->line_04__time || this->line_04_grain == 0) {
                    nextTime = this->line_04_startTime + this->line_04__time;
                    nextValue = this->line_04_currentTarget;
                } else {
                    nextValue = this->line_04_valueAtTime(nextTime);
                }
            
                this->getEngine()->scheduleClockEventWithValue(this, 848255507, nextTime - currentTime + this->_currentTime, nextValue);;
            }
            
            void line_04_startRamp(number target, MillisecondTime time) {
                MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
                this->line_04_startValue = this->line_04_valueAtTime(currentTime);
                this->line_04_startTime = currentTime;
                this->line_04_currentTarget = target;
                this->getEngine()->flushClockEvents(this, 848255507, false);;
                number rise = target - this->line_04_startValue;
                this->line_04_slope = rise / time;
                this->line_04_scheduleNext();
            }
            
            bool line_04_isFinished(number value) {
                return value == this->line_04_currentTarget && this->currenttime() - this->line_04_startTime >= this->line_04__time;
            }
            
            void line_04_startPendingRamp() {
                if (this->line_04_pendingRamps->length < 2) {
                    this->line_04_pendingRamps->length = 0;
                    this->line_04__time = 0;
                    this->line_04_time_set(0);
                    this->line_04_end_bang();
                    return;
                }
            
                if (this->line_04_pendingRamps->length > 1) {
                    number target = this->line_04_pendingRamps->shift();
                    this->line_04__time = this->line_04_pendingRamps->shift();
                    this->line_04__time = (this->line_04__time < 0 ? 0 : this->line_04__time);
                    this->line_04_startRamp(target, this->line_04__time);
                }
            }
            
            void message_13_init() {
                this->message_13_set_set({4});
            }
            
            void message_14_init() {
                this->message_14_set_set({0});
            }
            
            void numberobj_14_init() {
                this->numberobj_14_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-28"), 1, this->_currentTime);
            }
            
            void numberobj_14_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_14_value;
            }
            
            void numberobj_14_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_14_value_set(preset["value"]);
            }
            
            void message_15_init() {
                this->message_15_set_set({250});
            }
            
            void uzi_03_gobang(number start) {
                this->uzi_03_doPause = 0;
                this->uzi_03_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_03_count; i++) {
                    if ((bool)(this->uzi_03_doPause)) {
                        this->uzi_03_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_03_index_set(i + this->uzi_03_base);
                        this->uzi_03_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_03_carry_bang();
            }
            
            void message_16_init() {
                this->message_16_set_set({52, 59, 67, 62});
            }
            
            void message_17_init() {
                this->message_17_set_set({57, 64, 72, 67});
            }
            
            void message_18_init() {
                this->message_18_set_set({7});
            }
            
            void message_19_init() {
                this->message_19_set_set({50, 57, 65, 72});
            }
            
            void numberobj_15_init() {
                this->numberobj_15_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/ChordColl/number_obj-32"), 1, this->_currentTime);
            }
            
            void numberobj_15_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_15_value;
            }
            
            void numberobj_15_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_15_value_set(preset["value"]);
            }
            
            void message_20_init() {
                this->message_20_set_set({53, 60, 69, 64});
            }
            
            void message_21_init() {
                this->message_21_set_set({47, 53, 62, 69});
            }
            
            void message_22_init() {
                this->message_22_set_set({55, 62, 59, 65});
            }
            
            void message_23_init() {
                this->message_23_set_set({57, 64, 73, 79});
            }
            
            void message_24_init() {
                this->message_24_set_set({59, 66, 75, 81});
            }
            
            void message_25_init() {
                this->message_25_set_set({60, 67, 76, 82});
            }
            
            void message_26_init() {
                this->message_26_set_set({62, 69, 78, 84});
            }
            
            void message_27_init() {
                this->message_27_set_set({64, 71, 80, 86});
            }
            
            void message_28_init() {
                this->message_28_set_set({53, 60, 69, 75});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                listchange_01_compare = { 0 };
                liststore_02_lookupidx = 0;
                liststore_02_storeidx = 0;
                pack_01_in1 = 0;
                pack_01_in2 = 0;
                numberobj_04_value = 0;
                numberobj_04_value_setter(numberobj_04_value);
                unpack_01_out1 = 0;
                unpack_01_out2 = 0;
                unpack_01_out3 = 0;
                unpack_01_out4 = 0;
                numberobj_05_value = 0;
                numberobj_05_value_setter(numberobj_05_value);
                liststore_03_lookupidx = 0;
                liststore_03_storeidx = 0;
                line_01_time = 0;
                line_01_grain = 20;
                line_01_output = 0;
                counter_01_carryflag = 0;
                counter_01_direction = 0;
                counter_01_resetnext_number = 0;
                counter_01_resetnow_number = 0;
                counter_01_maximum = 1;
                counter_01_output = 0;
                counter_01_underflow_number = 0;
                counter_01_overflow_number = 0;
                counter_01_carry = 0;
                counter_01_minimum = 0;
                numberobj_06_value = 0;
                numberobj_06_value_setter(numberobj_06_value);
                unpack_02_out1 = 0;
                unpack_02_out2 = 0;
                unpack_02_out3 = 0;
                unpack_02_out4 = 0;
                numberobj_07_value = 0;
                numberobj_07_value_setter(numberobj_07_value);
                pack_02_in1 = 0;
                pack_02_in2 = 0;
                numberobj_08_value = 0;
                numberobj_08_value_setter(numberobj_08_value);
                pack_03_in1 = 0;
                pack_03_in2 = 0;
                line_02_time = 0;
                line_02_grain = 20;
                line_02_output = 0;
                liststore_04_lookupidx = 0;
                liststore_04_storeidx = 0;
                numberobj_09_value = 0;
                numberobj_09_value_setter(numberobj_09_value);
                numberobj_10_value = 0;
                numberobj_10_value_setter(numberobj_10_value);
                pack_04_in1 = 0;
                pack_04_in2 = 0;
                uzi_02_start_number = 0;
                uzi_02_count = 7;
                uzi_02_base = 0;
                line_03_time = 0;
                line_03_grain = 20;
                line_03_output = 0;
                numberobj_11_value = 0;
                numberobj_11_value_setter(numberobj_11_value);
                pack_05_in1 = 0;
                pack_05_in2 = 0;
                select_02_test1 = 0;
                select_02_test2 = 1;
                select_02_test3 = 2;
                numberobj_12_value = 0;
                numberobj_12_value_setter(numberobj_12_value);
                pack_06_in1 = 0;
                pack_06_in2 = 0;
                change_01_input = 0;
                change_01_out = 0;
                numberobj_13_value = 0;
                numberobj_13_value_setter(numberobj_13_value);
                line_04_time = 0;
                line_04_grain = 20;
                line_04_output = 0;
                pack_07_in1 = 0;
                pack_07_in2 = 0;
                numberobj_14_value = 0;
                numberobj_14_value_setter(numberobj_14_value);
                pack_08_in1 = 0;
                pack_08_in2 = 0;
                uzi_03_start_number = 0;
                uzi_03_count = 13;
                uzi_03_base = 0;
                select_03_test1 = 0;
                select_03_test2 = 1;
                select_03_test3 = 2;
                select_03_test4 = 3;
                select_03_test5 = 4;
                select_03_test6 = 5;
                select_03_test7 = 6;
                select_03_test8 = 7;
                select_03_test9 = 8;
                select_03_test10 = 9;
                select_03_test11 = 10;
                select_03_test12 = 11;
                select_03_test13 = 12;
                p_06_target = 0;
                numberobj_15_value = 0;
                numberobj_15_value_setter(numberobj_15_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                liststore_02_storage__slotcount = 1024;
                liststore_02_storage__entrysize = 65;
                numberobj_04_currentFormat = 6;
                numberobj_04_lastValue = 0;
                numberobj_05_currentFormat = 6;
                numberobj_05_lastValue = 0;
                liststore_03_storage__slotcount = 1024;
                liststore_03_storage__entrysize = 65;
                line_01_startTime = 0;
                line_01_startValue = 0;
                line_01_currentTarget = 0;
                line_01_slope = 0;
                line_01__time = 0;
                counter_01_count = 0;
                counter_01_phase = true;
                numberobj_06_currentFormat = 6;
                numberobj_06_lastValue = 0;
                numberobj_07_currentFormat = 6;
                numberobj_07_lastValue = 0;
                numberobj_08_currentFormat = 6;
                numberobj_08_lastValue = 0;
                line_02_startTime = 0;
                line_02_startValue = 0;
                line_02_currentTarget = 0;
                line_02_slope = 0;
                line_02__time = 0;
                liststore_04_storage__slotcount = 1024;
                liststore_04_storage__entrysize = 65;
                numberobj_09_currentFormat = 6;
                numberobj_09_lastValue = 0;
                numberobj_10_currentFormat = 6;
                numberobj_10_lastValue = 0;
                uzi_02_doPause = 0;
                uzi_02_pausecount = 0;
                line_03_startTime = 0;
                line_03_startValue = 0;
                line_03_currentTarget = 0;
                line_03_slope = 0;
                line_03__time = 0;
                numberobj_11_currentFormat = 6;
                numberobj_11_lastValue = 0;
                numberobj_12_currentFormat = 6;
                numberobj_12_lastValue = 0;
                numberobj_13_currentFormat = 6;
                numberobj_13_lastValue = 0;
                line_04_startTime = 0;
                line_04_startValue = 0;
                line_04_currentTarget = 0;
                line_04_slope = 0;
                line_04__time = 0;
                numberobj_14_currentFormat = 6;
                numberobj_14_lastValue = 0;
                uzi_03_doPause = 0;
                uzi_03_pausecount = 0;
                numberobj_15_currentFormat = 6;
                numberobj_15_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                list message_05_set;
                list listchange_01_input;
                list listchange_01_compare;
                number liststore_02_lookupidx;
                list liststore_02_storelist;
                number liststore_02_storeidx;
                number pack_01_in1;
                number pack_01_in2;
                number numberobj_04_value;
                number unpack_01_out1;
                number unpack_01_out2;
                number unpack_01_out3;
                number unpack_01_out4;
                number numberobj_05_value;
                number liststore_03_lookupidx;
                list liststore_03_storelist;
                number liststore_03_storeidx;
                list listjoin_01_in1;
                list listjoin_01_in2;
                list line_01_target;
                number line_01_time;
                number line_01_grain;
                number line_01_output;
                Int counter_01_carryflag;
                number counter_01_direction;
                number counter_01_resetnext_number;
                number counter_01_resetnow_number;
                number counter_01_maximum;
                number counter_01_output;
                number counter_01_underflow_number;
                number counter_01_overflow_number;
                number counter_01_carry;
                number counter_01_minimum;
                list message_06_set;
                number numberobj_06_value;
                number unpack_02_out1;
                number unpack_02_out2;
                number unpack_02_out3;
                number unpack_02_out4;
                number numberobj_07_value;
                number pack_02_in1;
                number pack_02_in2;
                list message_07_set;
                number numberobj_08_value;
                number pack_03_in1;
                number pack_03_in2;
                list listjoin_02_in1;
                list listjoin_02_in2;
                list line_02_target;
                number line_02_time;
                number line_02_grain;
                number line_02_output;
                list message_08_set;
                number liststore_04_lookupidx;
                list liststore_04_storelist;
                number liststore_04_storeidx;
                list message_09_set;
                number numberobj_09_value;
                number numberobj_10_value;
                number pack_04_in1;
                number pack_04_in2;
                list message_10_set;
                number uzi_02_start_number;
                number uzi_02_count;
                number uzi_02_base;
                list listjoin_03_in1;
                list listjoin_03_in2;
                list line_03_target;
                number line_03_time;
                number line_03_grain;
                number line_03_output;
                number numberobj_11_value;
                number pack_05_in1;
                number pack_05_in2;
                number select_02_test1;
                number select_02_test2;
                number select_02_test3;
                list message_11_set;
                number numberobj_12_value;
                number pack_06_in1;
                number pack_06_in2;
                number change_01_input;
                number change_01_out;
                list message_12_set;
                number numberobj_13_value;
                list listjoin_04_in1;
                list listjoin_04_in2;
                list line_04_target;
                number line_04_time;
                number line_04_grain;
                number line_04_output;
                number pack_07_in1;
                number pack_07_in2;
                list message_13_set;
                list message_14_set;
                number numberobj_14_value;
                number pack_08_in1;
                number pack_08_in2;
                list message_15_set;
                number uzi_03_start_number;
                number uzi_03_count;
                number uzi_03_base;
                number select_03_test1;
                number select_03_test2;
                number select_03_test3;
                number select_03_test4;
                number select_03_test5;
                number select_03_test6;
                number select_03_test7;
                number select_03_test8;
                number select_03_test9;
                number select_03_test10;
                number select_03_test11;
                number select_03_test12;
                number select_03_test13;
                number p_06_target;
                list message_16_set;
                list message_17_set;
                list message_18_set;
                list message_19_set;
                number numberobj_15_value;
                list message_20_set;
                list message_21_set;
                list message_22_set;
                list message_23_set;
                list message_24_set;
                list message_25_set;
                list message_26_set;
                list message_27_set;
                list message_28_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef liststore_02_storage_storage;
                number liststore_02_storage__slotcount;
                number liststore_02_storage__entrysize;
                Int numberobj_04_currentFormat;
                number numberobj_04_lastValue;
                Int numberobj_05_currentFormat;
                number numberobj_05_lastValue;
                Float64BufferRef liststore_03_storage_storage;
                number liststore_03_storage__slotcount;
                number liststore_03_storage__entrysize;
                MillisecondTime line_01_startTime;
                number line_01_startValue;
                number line_01_currentTarget;
                number line_01_slope;
                MillisecondTime line_01__time;
                list line_01_pendingRamps;
                number counter_01_count;
                bool counter_01_phase;
                Int numberobj_06_currentFormat;
                number numberobj_06_lastValue;
                Int numberobj_07_currentFormat;
                number numberobj_07_lastValue;
                Int numberobj_08_currentFormat;
                number numberobj_08_lastValue;
                MillisecondTime line_02_startTime;
                number line_02_startValue;
                number line_02_currentTarget;
                number line_02_slope;
                MillisecondTime line_02__time;
                list line_02_pendingRamps;
                Float64BufferRef liststore_04_storage_storage;
                number liststore_04_storage__slotcount;
                number liststore_04_storage__entrysize;
                Int numberobj_09_currentFormat;
                number numberobj_09_lastValue;
                Int numberobj_10_currentFormat;
                number numberobj_10_lastValue;
                number uzi_02_doPause;
                long uzi_02_pausecount;
                MillisecondTime line_03_startTime;
                number line_03_startValue;
                number line_03_currentTarget;
                number line_03_slope;
                MillisecondTime line_03__time;
                list line_03_pendingRamps;
                Int numberobj_11_currentFormat;
                number numberobj_11_lastValue;
                Int numberobj_12_currentFormat;
                number numberobj_12_lastValue;
                number change_01_prev;
                Int numberobj_13_currentFormat;
                number numberobj_13_lastValue;
                MillisecondTime line_04_startTime;
                number line_04_startValue;
                number line_04_currentTarget;
                number line_04_slope;
                MillisecondTime line_04__time;
                list line_04_pendingRamps;
                Int numberobj_14_currentFormat;
                number numberobj_14_lastValue;
                number uzi_03_doPause;
                long uzi_03_pausecount;
                Int numberobj_15_currentFormat;
                number numberobj_15_lastValue;
                number stackprotect_count;
                DataRef liststore_02_storage_storageobj;
                DataRef liststore_03_storage_storageobj;
                DataRef liststore_04_storage_storageobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
                RNBOSubpatcher_87* p_06;
            
    };
    
    class RNBOSubpatcher_89 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_99;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_89()
            {
            }
            
            ~RNBOSubpatcher_89()
            {
            }
            
            virtual RNBOSubpatcher_99* getPatcher() const {
                return static_cast<RNBOSubpatcher_99 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
                getEngine()->flushClockEvents(this, -871642103, false);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                RNBO_UNUSED(numOutputs);
                RNBO_UNUSED(outputs);
                RNBO_UNUSED(numInputs);
                RNBO_UNUSED(inputs);
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
                RNBO_UNUSED(value);
                RNBO_UNUSED(hasValue);
                this->updateTime(time);
            
                switch (index) {
                case -871642103:
                    {
                    this->loadbang_04_startupbang_bang();
                    break;
                    }
                }
            }
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("valin"):
                    {
                    if (TAG("Chords/NextChord/number_obj-61") == objectId)
                        this->numberobj_16_valin_set(payload);
            
                    if (TAG("Chords/NextChord/number_obj-55") == objectId)
                        this->numberobj_17_valin_set(payload);
            
                    if (TAG("Chords/NextChord/number_obj-32") == objectId)
                        this->numberobj_18_valin_set(payload);
            
                    break;
                    }
                case TAG("format"):
                    {
                    if (TAG("Chords/NextChord/number_obj-61") == objectId)
                        this->numberobj_16_format_set(payload);
            
                    if (TAG("Chords/NextChord/number_obj-55") == objectId)
                        this->numberobj_17_format_set(payload);
            
                    if (TAG("Chords/NextChord/number_obj-32") == objectId)
                        this->numberobj_18_format_set(payload);
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Chords/NextChord/message_obj-22") == objectId)
                        this->message_29_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-21") == objectId)
                        this->message_30_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-17") == objectId)
                        this->message_31_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-25") == objectId)
                        this->message_32_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-66") == objectId)
                        this->message_33_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-65") == objectId)
                        this->message_34_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-203") == objectId)
                        this->message_35_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-71") == objectId)
                        this->message_36_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-2") == objectId)
                        this->message_37_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-77") == objectId)
                        this->message_38_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-75") == objectId)
                        this->message_39_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-91") == objectId)
                        this->message_40_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-93") == objectId)
                        this->message_41_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-201") == objectId)
                        this->message_42_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-92") == objectId)
                        this->message_43_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-81") == objectId)
                        this->message_44_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-79") == objectId)
                        this->message_45_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-78") == objectId)
                        this->message_46_listin_number_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-28") == objectId)
                        this->message_47_listin_number_set(payload);
            
                    break;
                    }
                }
            }
            
            void processListMessage(
                MessageTag tag,
                MessageTag objectId,
                MillisecondTime time,
                const list& payload
            ) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("listin"):
                    {
                    if (TAG("Chords/NextChord/message_obj-22") == objectId)
                        this->message_29_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-21") == objectId)
                        this->message_30_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-17") == objectId)
                        this->message_31_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-25") == objectId)
                        this->message_32_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-66") == objectId)
                        this->message_33_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-65") == objectId)
                        this->message_34_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-203") == objectId)
                        this->message_35_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-71") == objectId)
                        this->message_36_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-2") == objectId)
                        this->message_37_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-77") == objectId)
                        this->message_38_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-75") == objectId)
                        this->message_39_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-91") == objectId)
                        this->message_40_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-93") == objectId)
                        this->message_41_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-201") == objectId)
                        this->message_42_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-92") == objectId)
                        this->message_43_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-81") == objectId)
                        this->message_44_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-79") == objectId)
                        this->message_45_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-78") == objectId)
                        this->message_46_listin_list_set(payload);
            
                    if (TAG("Chords/NextChord/message_obj-28") == objectId)
                        this->message_47_listin_list_set(payload);
            
                    break;
                    }
                }
            }
            
            void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
                this->updateTime(time);
            
                switch (tag) {
                case TAG("bangin"):
                    {
                    if (TAG("Chords/NextChord/button_obj-35") == objectId)
                        this->button_08_bangin_bang();
            
                    if (TAG("Chords/NextChord/button_obj-27") == objectId)
                        this->button_09_bangin_bang();
            
                    if (TAG("Chords/NextChord/button_obj-29") == objectId)
                        this->button_10_bangin_bang();
            
                    if (TAG("Chords/NextChord/button_obj-186") == objectId)
                        this->button_11_bangin_bang();
            
                    break;
                    }
                case TAG("listin"):
                    {
                    if (TAG("Chords/NextChord/message_obj-22") == objectId)
                        this->message_29_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-21") == objectId)
                        this->message_30_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-17") == objectId)
                        this->message_31_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-25") == objectId)
                        this->message_32_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-66") == objectId)
                        this->message_33_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-65") == objectId)
                        this->message_34_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-203") == objectId)
                        this->message_35_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-71") == objectId)
                        this->message_36_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-2") == objectId)
                        this->message_37_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-77") == objectId)
                        this->message_38_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-75") == objectId)
                        this->message_39_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-91") == objectId)
                        this->message_40_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-93") == objectId)
                        this->message_41_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-201") == objectId)
                        this->message_42_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-92") == objectId)
                        this->message_43_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-81") == objectId)
                        this->message_44_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-79") == objectId)
                        this->message_45_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-78") == objectId)
                        this->message_46_listin_bang_bang();
            
                    if (TAG("Chords/NextChord/message_obj-28") == objectId)
                        this->message_47_listin_bang_bang();
            
                    break;
                    }
                case TAG("startupbang"):
                    {
                    if (TAG("Chords/NextChord/loadbang_obj-197") == objectId)
                        this->loadbang_04_startupbang_bang();
            
                    break;
                    }
                }
            }
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
                case TAG("valout"):
                    {
                    return "valout";
                    }
                case TAG("Chords/NextChord/number_obj-61"):
                    {
                    return "Chords/NextChord/number_obj-61";
                    }
                case TAG("setup"):
                    {
                    return "setup";
                    }
                case TAG("bangout"):
                    {
                    return "bangout";
                    }
                case TAG("Chords/NextChord/button_obj-35"):
                    {
                    return "Chords/NextChord/button_obj-35";
                    }
                case TAG("Chords/NextChord/button_obj-27"):
                    {
                    return "Chords/NextChord/button_obj-27";
                    }
                case TAG("listout"):
                    {
                    return "listout";
                    }
                case TAG("Chords/NextChord/message_obj-22"):
                    {
                    return "Chords/NextChord/message_obj-22";
                    }
                case TAG("Chords/NextChord/button_obj-29"):
                    {
                    return "Chords/NextChord/button_obj-29";
                    }
                case TAG("Chords/NextChord/message_obj-21"):
                    {
                    return "Chords/NextChord/message_obj-21";
                    }
                case TAG("Chords/NextChord/number_obj-55"):
                    {
                    return "Chords/NextChord/number_obj-55";
                    }
                case TAG("Chords/NextChord/message_obj-17"):
                    {
                    return "Chords/NextChord/message_obj-17";
                    }
                case TAG("Chords/NextChord/button_obj-186"):
                    {
                    return "Chords/NextChord/button_obj-186";
                    }
                case TAG("Chords/NextChord/message_obj-25"):
                    {
                    return "Chords/NextChord/message_obj-25";
                    }
                case TAG("Chords/NextChord/message_obj-66"):
                    {
                    return "Chords/NextChord/message_obj-66";
                    }
                case TAG("Chords/NextChord/message_obj-65"):
                    {
                    return "Chords/NextChord/message_obj-65";
                    }
                case TAG("Chords/NextChord/message_obj-203"):
                    {
                    return "Chords/NextChord/message_obj-203";
                    }
                case TAG("Chords/NextChord/message_obj-71"):
                    {
                    return "Chords/NextChord/message_obj-71";
                    }
                case TAG("Chords/NextChord/message_obj-2"):
                    {
                    return "Chords/NextChord/message_obj-2";
                    }
                case TAG("Chords/NextChord/message_obj-77"):
                    {
                    return "Chords/NextChord/message_obj-77";
                    }
                case TAG("Chords/NextChord/message_obj-75"):
                    {
                    return "Chords/NextChord/message_obj-75";
                    }
                case TAG("Chords/NextChord/message_obj-91"):
                    {
                    return "Chords/NextChord/message_obj-91";
                    }
                case TAG("Chords/NextChord/message_obj-93"):
                    {
                    return "Chords/NextChord/message_obj-93";
                    }
                case TAG("Chords/NextChord/message_obj-201"):
                    {
                    return "Chords/NextChord/message_obj-201";
                    }
                case TAG("Chords/NextChord/message_obj-92"):
                    {
                    return "Chords/NextChord/message_obj-92";
                    }
                case TAG("Chords/NextChord/number_obj-32"):
                    {
                    return "Chords/NextChord/number_obj-32";
                    }
                case TAG("Chords/NextChord/message_obj-81"):
                    {
                    return "Chords/NextChord/message_obj-81";
                    }
                case TAG("Chords/NextChord/message_obj-79"):
                    {
                    return "Chords/NextChord/message_obj-79";
                    }
                case TAG("Chords/NextChord/message_obj-78"):
                    {
                    return "Chords/NextChord/message_obj-78";
                    }
                case TAG("Chords/NextChord/message_obj-28"):
                    {
                    return "Chords/NextChord/message_obj-28";
                    }
                case TAG("valin"):
                    {
                    return "valin";
                    }
                case TAG("format"):
                    {
                    return "format";
                    }
                case TAG("bangin"):
                    {
                    return "bangin";
                    }
                case TAG("listin"):
                    {
                    return "listin";
                    }
                case TAG("startupbang"):
                    {
                    return "startupbang";
                    }
                case TAG("Chords/NextChord/loadbang_obj-197"):
                    {
                    return "Chords/NextChord/loadbang_obj-197";
                    }
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 3:
                    {
                    return addressOf(this->liststore_05_storage_storageobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 1;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 3) {
                    this->liststore_05_storage_storage = new Float64Buffer(this->liststore_05_storage_storageobj);
                }
            }
            
            void initialize() {
                this->liststore_05_storage_storageobj = initDataRef("liststore_05_storage_storageobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->liststore_05_storage_storageobj->setIndex(3);
                this->liststore_05_storage_storage = new Float64Buffer(this->liststore_05_storage_storageobj);
            }
            
            protected:
            
            void numberobj_16_valin_set(number v) {
                this->numberobj_16_value_set(v);
            }
            
            void numberobj_16_format_set(number v) {
                this->numberobj_16_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void eventinlet_12_out1_bang_bang() {
                this->numberobj_16_value_bang();
            }
            
            void eventinlet_12_out1_list_set(const list& v) {
                {
                    number converted = (v->length > 0 ? v[0] : 0);
                    this->numberobj_16_value_set(converted);
                }
            }
            
            void button_08_bangin_bang() {
                this->button_08_bangval_bang();
            }
            
            void button_09_bangin_bang() {
                this->button_09_bangval_bang();
            }
            
            void message_29_listin_list_set(const list& v) {
                this->message_29_set_set(v);
            }
            
            void message_29_listin_number_set(number v) {
                this->message_29_set_set(v);
            }
            
            void message_29_listin_bang_bang() {
                this->message_29_trigger_bang();
            }
            
            void button_10_bangin_bang() {
                this->button_10_bangval_bang();
            }
            
            void message_30_listin_list_set(const list& v) {
                this->message_30_set_set(v);
            }
            
            void message_30_listin_number_set(number v) {
                this->message_30_set_set(v);
            }
            
            void message_30_listin_bang_bang() {
                this->message_30_trigger_bang();
            }
            
            void numberobj_17_valin_set(number v) {
                this->numberobj_17_value_set(v);
            }
            
            void numberobj_17_format_set(number v) {
                this->numberobj_17_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_31_listin_list_set(const list& v) {
                this->message_31_set_set(v);
            }
            
            void message_31_listin_number_set(number v) {
                this->message_31_set_set(v);
            }
            
            void message_31_listin_bang_bang() {
                this->message_31_trigger_bang();
            }
            
            void loadbang_04_startupbang_bang() {
                this->loadbang_04_output_bang();
            }
            
            void button_11_bangin_bang() {
                this->button_11_bangval_bang();
            }
            
            void message_32_listin_list_set(const list& v) {
                this->message_32_set_set(v);
            }
            
            void message_32_listin_number_set(number v) {
                this->message_32_set_set(v);
            }
            
            void message_32_listin_bang_bang() {
                this->message_32_trigger_bang();
            }
            
            void message_33_listin_list_set(const list& v) {
                this->message_33_set_set(v);
            }
            
            void message_33_listin_number_set(number v) {
                this->message_33_set_set(v);
            }
            
            void message_33_listin_bang_bang() {
                this->message_33_trigger_bang();
            }
            
            void message_34_listin_list_set(const list& v) {
                this->message_34_set_set(v);
            }
            
            void message_34_listin_number_set(number v) {
                this->message_34_set_set(v);
            }
            
            void message_34_listin_bang_bang() {
                this->message_34_trigger_bang();
            }
            
            void message_35_listin_list_set(const list& v) {
                this->message_35_set_set(v);
            }
            
            void message_35_listin_number_set(number v) {
                this->message_35_set_set(v);
            }
            
            void message_35_listin_bang_bang() {
                this->message_35_trigger_bang();
            }
            
            void message_36_listin_list_set(const list& v) {
                this->message_36_set_set(v);
            }
            
            void message_36_listin_number_set(number v) {
                this->message_36_set_set(v);
            }
            
            void message_36_listin_bang_bang() {
                this->message_36_trigger_bang();
            }
            
            void message_37_listin_list_set(const list& v) {
                this->message_37_set_set(v);
            }
            
            void message_37_listin_number_set(number v) {
                this->message_37_set_set(v);
            }
            
            void message_37_listin_bang_bang() {
                this->message_37_trigger_bang();
            }
            
            void message_38_listin_list_set(const list& v) {
                this->message_38_set_set(v);
            }
            
            void message_38_listin_number_set(number v) {
                this->message_38_set_set(v);
            }
            
            void message_38_listin_bang_bang() {
                this->message_38_trigger_bang();
            }
            
            void message_39_listin_list_set(const list& v) {
                this->message_39_set_set(v);
            }
            
            void message_39_listin_number_set(number v) {
                this->message_39_set_set(v);
            }
            
            void message_39_listin_bang_bang() {
                this->message_39_trigger_bang();
            }
            
            void message_40_listin_list_set(const list& v) {
                this->message_40_set_set(v);
            }
            
            void message_40_listin_number_set(number v) {
                this->message_40_set_set(v);
            }
            
            void message_40_listin_bang_bang() {
                this->message_40_trigger_bang();
            }
            
            void message_41_listin_list_set(const list& v) {
                this->message_41_set_set(v);
            }
            
            void message_41_listin_number_set(number v) {
                this->message_41_set_set(v);
            }
            
            void message_41_listin_bang_bang() {
                this->message_41_trigger_bang();
            }
            
            void message_42_listin_list_set(const list& v) {
                this->message_42_set_set(v);
            }
            
            void message_42_listin_number_set(number v) {
                this->message_42_set_set(v);
            }
            
            void message_42_listin_bang_bang() {
                this->message_42_trigger_bang();
            }
            
            void message_43_listin_list_set(const list& v) {
                this->message_43_set_set(v);
            }
            
            void message_43_listin_number_set(number v) {
                this->message_43_set_set(v);
            }
            
            void message_43_listin_bang_bang() {
                this->message_43_trigger_bang();
            }
            
            void numberobj_18_valin_set(number v) {
                this->numberobj_18_value_set(v);
            }
            
            void numberobj_18_format_set(number v) {
                this->numberobj_18_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
            }
            
            void message_44_listin_list_set(const list& v) {
                this->message_44_set_set(v);
            }
            
            void message_44_listin_number_set(number v) {
                this->message_44_set_set(v);
            }
            
            void message_44_listin_bang_bang() {
                this->message_44_trigger_bang();
            }
            
            void message_45_listin_list_set(const list& v) {
                this->message_45_set_set(v);
            }
            
            void message_45_listin_number_set(number v) {
                this->message_45_set_set(v);
            }
            
            void message_45_listin_bang_bang() {
                this->message_45_trigger_bang();
            }
            
            void message_46_listin_list_set(const list& v) {
                this->message_46_set_set(v);
            }
            
            void message_46_listin_number_set(number v) {
                this->message_46_set_set(v);
            }
            
            void message_46_listin_bang_bang() {
                this->message_46_trigger_bang();
            }
            
            void message_47_listin_list_set(const list& v) {
                this->message_47_set_set(v);
            }
            
            void message_47_listin_number_set(number v) {
                this->message_47_set_set(v);
            }
            
            void message_47_listin_bang_bang() {
                this->message_47_trigger_bang();
            }
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 0;
            }
            
            Index getNumOutputChannels() const {
                return 0;
            }
            
            void initializeObjects() {
                this->numberobj_16_init();
                this->liststore_05_storage_init();
                this->message_29_init();
                this->message_30_init();
                this->numberobj_17_init();
                this->message_31_init();
                this->message_32_init();
                this->message_33_init();
                this->message_34_init();
                this->message_35_init();
                this->message_36_init();
                this->message_37_init();
                this->message_38_init();
                this->message_39_init();
                this->message_40_init();
                this->message_41_init();
                this->message_42_init();
                this->message_43_init();
                this->numberobj_18_init();
                this->message_44_init();
                this->message_45_init();
                this->message_46_init();
                this->message_47_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {
                this->updateTime(this->getEngine()->getCurrentTime());
                this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
            }
            
            void allocateDataRefs() {
                this->liststore_05_storage_storage = this->liststore_05_storage_storage->allocateIfNeeded();
            
                if (this->liststore_05_storage_storageobj->hasRequestedSize()) {
                    if (this->liststore_05_storage_storageobj->wantsFill())
                        this->zeroDataRef(this->liststore_05_storage_storageobj);
            
                    this->getEngine()->sendDataRefUpdated(3);
                }
            }
            
            void message_35_set_set(const list& v) {
                this->message_35_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-203"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_05_out3_set(number v) {
                {
                    list converted = {v};
                    this->message_35_set_set(converted);
                }
            }
            
            void eventoutlet_07_in1_list_set(const list& v) {
                this->getPatcher()->updateTime(this->_currentTime);
                this->getPatcher()->p_08_out1_list_set((list)v);
            }
            
            void liststore_05_out1_set(const list& v) {
                this->eventoutlet_07_in1_list_set(v);
            }
            
            void liststore_05_out2_bang() {}
            
            void liststore_05_lookupidx_set(number v) {
                this->liststore_05_lookupidx = v;
                list val = this->liststore_05_storage_lookup(v);
                this->liststore_05_out3_set(v);
            
                if ((bool)(val->length)) {
                    this->liststore_05_out1_set(this->liststore_05_storage_lookup(v));
                } else {
                    this->liststore_05_out2_bang();
                }
            }
            
            void numberobj_16_output_set(number v) {
                this->liststore_05_lookupidx_set(v);
            }
            
            void numberobj_16_value_set(number v) {
                this->numberobj_16_value_setter(v);
                v = this->numberobj_16_value;
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/NextChord/number_obj-61"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_16_output_set(localvalue);
            }
            
            void eventinlet_12_out1_number_set(number v) {
                this->numberobj_16_value_set(v);
            }
            
            void numberobj_16_value_bang() {
                number v = this->numberobj_16_value;
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/NextChord/number_obj-61"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_16_output_set(localvalue);
            }
            
            void message_42_set_set(const list& v) {
                this->message_42_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-201"),
                    v,
                    this->_currentTime
                );
            }
            
            void liststore_05_out4_set(number v) {
                {
                    list converted = {v};
                    this->message_42_set_set(converted);
                }
            }
            
            void liststore_05_count_bang() {
                number n = 0;
            
                for (number i = 0; i < 13; i++) {
                    if (this->liststore_05_storage_lookup(i)->length > 0)
                        n++;
                }
            
                this->liststore_05_out4_set(n);
            }
            
            void button_08_output_bang() {
                this->liststore_05_count_bang();
            }
            
            void button_08_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/NextChord/button_obj-35"), this->_currentTime);;
                this->button_08_output_bang();
            }
            
            void liststore_05_dump_bang() {
                for (number i = 0; i < 13; i++) {
                    list val = this->liststore_05_storage_lookup(i);
            
                    if (val->length > 0) {
                        this->liststore_05_out3_set(i);
                        this->liststore_05_out1_set(val);
                    }
                }
            }
            
            void button_09_output_bang() {
                this->liststore_05_dump_bang();
            }
            
            void button_09_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/NextChord/button_obj-27"), this->_currentTime);;
                this->button_09_output_bang();
            }
            
            void message_29_set_set(const list& v) {
                this->message_29_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-22"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_29_out_set(const list& ) {}
            
            void message_29_trigger_bang() {
                this->message_29_out_set(this->message_29_set);
            }
            
            void liststore_05_reset_bang() {
                this->liststore_05_storage_reset();
            }
            
            void button_10_output_bang() {
                this->liststore_05_reset_bang();
            }
            
            void button_10_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/NextChord/button_obj-29"), this->_currentTime);;
                this->button_10_output_bang();
            }
            
            void message_30_set_set(const list& v) {
                this->message_30_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-21"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_30_out_set(const list& ) {}
            
            void message_30_trigger_bang() {
                this->message_30_out_set(this->message_30_set);
            }
            
            void liststore_05_remove_set(number v) {
                this->liststore_05_storage_store(v, {});
            }
            
            void numberobj_17_output_set(number v) {
                this->liststore_05_remove_set(v);
            }
            
            void numberobj_17_value_set(number v) {
                this->numberobj_17_value_setter(v);
                v = this->numberobj_17_value;
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/NextChord/number_obj-55"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_17_output_set(localvalue);
            }
            
            void message_31_set_set(const list& v) {
                this->message_31_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-17"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_31_out_set(const list& ) {}
            
            void message_31_trigger_bang() {
                this->message_31_out_set(this->message_31_set);
            }
            
            void liststore_05_storeidx_set(number v) {
                this->liststore_05_storeidx = v;
            }
            
            void numberobj_18_output_set(number v) {
                this->liststore_05_storeidx_set(v);
            }
            
            void numberobj_18_value_set(number v) {
                this->numberobj_18_value_setter(v);
                v = this->numberobj_18_value;
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->getEngine()->sendNumMessage(
                    TAG("valout"),
                    TAG("Chords/NextChord/number_obj-32"),
                    localvalue,
                    this->_currentTime
                );
            
                this->numberobj_18_output_set(localvalue);
            }
            
            void liststore_05_storelist_set(const list& v) {
                this->liststore_05_storelist = jsCreateListCopy(v);
                this->liststore_05_storage_store(this->liststore_05_storeidx, v);
            }
            
            void message_32_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_32_trigger_bang() {
                this->message_32_out_set(this->message_32_set);
            }
            
            void select_04_match1_bang() {
                this->message_32_trigger_bang();
            }
            
            void message_33_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_33_trigger_bang() {
                this->message_33_out_set(this->message_33_set);
            }
            
            void select_04_match2_bang() {
                this->message_33_trigger_bang();
            }
            
            void message_34_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_34_trigger_bang() {
                this->message_34_out_set(this->message_34_set);
            }
            
            void select_04_match3_bang() {
                this->message_34_trigger_bang();
            }
            
            void message_36_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_36_trigger_bang() {
                this->message_36_out_set(this->message_36_set);
            }
            
            void select_04_match4_bang() {
                this->message_36_trigger_bang();
            }
            
            void message_38_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_38_trigger_bang() {
                this->message_38_out_set(this->message_38_set);
            }
            
            void select_04_match5_bang() {
                this->message_38_trigger_bang();
            }
            
            void message_39_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_39_trigger_bang() {
                this->message_39_out_set(this->message_39_set);
            }
            
            void select_04_match6_bang() {
                this->message_39_trigger_bang();
            }
            
            void message_40_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_40_trigger_bang() {
                this->message_40_out_set(this->message_40_set);
            }
            
            void select_04_match7_bang() {
                this->message_40_trigger_bang();
            }
            
            void message_41_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_41_trigger_bang() {
                this->message_41_out_set(this->message_41_set);
            }
            
            void select_04_match8_bang() {
                this->message_41_trigger_bang();
            }
            
            void message_43_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_43_trigger_bang() {
                this->message_43_out_set(this->message_43_set);
            }
            
            void select_04_match9_bang() {
                this->message_43_trigger_bang();
            }
            
            void message_44_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_44_trigger_bang() {
                this->message_44_out_set(this->message_44_set);
            }
            
            void select_04_match10_bang() {
                this->message_44_trigger_bang();
            }
            
            void message_45_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_45_trigger_bang() {
                this->message_45_out_set(this->message_45_set);
            }
            
            void select_04_match11_bang() {
                this->message_45_trigger_bang();
            }
            
            void message_46_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_46_trigger_bang() {
                this->message_46_out_set(this->message_46_set);
            }
            
            void select_04_match12_bang() {
                this->message_46_trigger_bang();
            }
            
            void message_47_out_set(const list& v) {
                this->liststore_05_storelist_set(v);
            }
            
            void message_47_trigger_bang() {
                this->message_47_out_set(this->message_47_set);
            }
            
            void select_04_match13_bang() {
                this->message_47_trigger_bang();
            }
            
            void select_04_nomatch_number_set(number ) {}
            
            void select_04_input_number_set(number v) {
                if (v == this->select_04_test1)
                    this->select_04_match1_bang();
                else if (v == this->select_04_test2)
                    this->select_04_match2_bang();
                else if (v == this->select_04_test3)
                    this->select_04_match3_bang();
                else if (v == this->select_04_test4)
                    this->select_04_match4_bang();
                else if (v == this->select_04_test5)
                    this->select_04_match5_bang();
                else if (v == this->select_04_test6)
                    this->select_04_match6_bang();
                else if (v == this->select_04_test7)
                    this->select_04_match7_bang();
                else if (v == this->select_04_test8)
                    this->select_04_match8_bang();
                else if (v == this->select_04_test9)
                    this->select_04_match9_bang();
                else if (v == this->select_04_test10)
                    this->select_04_match10_bang();
                else if (v == this->select_04_test11)
                    this->select_04_match11_bang();
                else if (v == this->select_04_test12)
                    this->select_04_match12_bang();
                else if (v == this->select_04_test13)
                    this->select_04_match13_bang();
                else
                    this->select_04_nomatch_number_set(v);
            }
            
            void uzi_04_index_set(number v) {
                this->numberobj_18_value_set(v);
                this->select_04_input_number_set(v);
            }
            
            void uzi_04_out_bang() {}
            
            void uzi_04_carry_bang() {}
            
            void uzi_04_start_bang_bang() {
                this->uzi_04_gobang(0);
            }
            
            void loadbang_04_output_bang() {
                this->uzi_04_start_bang_bang();
            }
            
            void loadbang_04_input_bang() {
                this->loadbang_04_output_bang();
            }
            
            void button_11_output_bang() {
                this->loadbang_04_input_bang();
            }
            
            void button_11_bangval_bang() {
                this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/NextChord/button_obj-186"), this->_currentTime);;
                this->button_11_output_bang();
            }
            
            void message_32_set_set(const list& v) {
                this->message_32_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-25"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_33_set_set(const list& v) {
                this->message_33_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-66"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_34_set_set(const list& v) {
                this->message_34_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-65"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_35_out_set(const list& ) {}
            
            void message_35_trigger_bang() {
                this->message_35_out_set(this->message_35_set);
            }
            
            void message_36_set_set(const list& v) {
                this->message_36_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-71"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_37_set_set(const list& v) {
                this->message_37_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-2"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_37_out_set(const list& ) {}
            
            void message_37_trigger_bang() {
                this->message_37_out_set(this->message_37_set);
            }
            
            void message_38_set_set(const list& v) {
                this->message_38_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-77"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_39_set_set(const list& v) {
                this->message_39_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-75"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_40_set_set(const list& v) {
                this->message_40_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-91"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_41_set_set(const list& v) {
                this->message_41_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-93"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_42_out_set(const list& ) {}
            
            void message_42_trigger_bang() {
                this->message_42_out_set(this->message_42_set);
            }
            
            void message_43_set_set(const list& v) {
                this->message_43_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-92"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_44_set_set(const list& v) {
                this->message_44_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-81"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_45_set_set(const list& v) {
                this->message_45_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-79"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_46_set_set(const list& v) {
                this->message_46_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-78"),
                    v,
                    this->_currentTime
                );
            }
            
            void message_47_set_set(const list& v) {
                this->message_47_set = jsCreateListCopy(v);
            
                this->getEngine()->sendListMessage(
                    TAG("listout"),
                    TAG("Chords/NextChord/message_obj-28"),
                    v,
                    this->_currentTime
                );
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void numberobj_16_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_16_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_16_value = localvalue;
            }
            
            void numberobj_17_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_17_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_17_value = localvalue;
            }
            
            void numberobj_18_value_setter(number v) {
                number localvalue = v;
            
                if (this->numberobj_18_currentFormat != 6) {
                    localvalue = trunc(localvalue);
                }
            
                this->numberobj_18_value = localvalue;
            }
            
            void numberobj_16_init() {
                this->numberobj_16_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/NextChord/number_obj-61"), 1, this->_currentTime);
            }
            
            void numberobj_16_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_16_value;
            }
            
            void numberobj_16_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_16_value_set(preset["value"]);
            }
            
            list liststore_05_storage_next(number index) {
                return this->liststore_05_storage_lookup(index);
            }
            
            list liststore_05_storage_lookup(number index) {
                list tmp1 = {};
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_05_storage__slotcount) {
                    number entrylength = this->liststore_05_storage_storage[(Index)(idx * this->liststore_05_storage__entrysize)];
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            tmp1->push(
                                this->liststore_05_storage_storage[(Index)(idx * this->liststore_05_storage__entrysize + i + 1)]
                            );
                        }
                    }
                }
            
                return tmp1;
            }
            
            void liststore_05_storage_store(number index, list value) {
                int64_t idx = (int64_t)(index);
            
                if (index >= 0 && index < this->liststore_05_storage__slotcount) {
                    number entrylength = value->length;
                    this->liststore_05_storage_storage[(Index)(idx * this->liststore_05_storage__entrysize)] = entrylength;
            
                    if (entrylength > 0) {
                        for (number i = 0; i < entrylength; i++) {
                            this->liststore_05_storage_storage[(Index)(idx * this->liststore_05_storage__entrysize + i + 1)] = value[(Index)i];
                        }
                    }
                }
            }
            
            void liststore_05_storage_init() {
                this->liststore_05_storage__entrysize = 16 + 1;
                this->liststore_05_storage__slotcount = 13;
                int64_t storagesize = (int64_t)(13 * this->liststore_05_storage__entrysize);
                this->liststore_05_storage_storage->requestSize((Index)(storagesize), 1);
            }
            
            void liststore_05_storage_clear() {
                this->liststore_05_storage_storage->setZero();
            }
            
            void liststore_05_storage_reset() {
                this->liststore_05_storage_init();
                this->liststore_05_storage_clear();
            }
            
            void message_29_init() {
                this->message_29_set_set({0, 1, 1, 1, 2, 2, 2});
            }
            
            void message_30_init() {
                this->message_30_set_set({0, 0, 2, 2, 2});
            }
            
            void numberobj_17_init() {
                this->numberobj_17_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/NextChord/number_obj-55"), 1, this->_currentTime);
            }
            
            void numberobj_17_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_17_value;
            }
            
            void numberobj_17_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_17_value_set(preset["value"]);
            }
            
            void message_31_init() {
                this->message_31_set_set({0, 0, 1});
            }
            
            void uzi_04_gobang(number start) {
                this->uzi_04_doPause = 0;
                this->uzi_04_pausecount = 0;
                number doCarry = true;
            
                for (int i = (int)(start); i < this->uzi_04_count; i++) {
                    if ((bool)(this->uzi_04_doPause)) {
                        this->uzi_04_pausecount = i;
                        doCarry = false;
                        break;
                    } else {
                        this->uzi_04_index_set(i + this->uzi_04_base);
                        this->uzi_04_out_bang();
                    }
                }
            
                if ((bool)(doCarry))
                    this->uzi_04_carry_bang();
            }
            
            void message_32_init() {
                this->message_32_set_set({1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5});
            }
            
            void message_33_init() {
                this->message_33_set_set({2, 2, 2, 3, 3, 3, 3, 4, 4, 4});
            }
            
            void message_34_init() {
                this->message_34_set_set({3, 3, 3, 4, 4, 4, 4, 4, 5, 5});
            }
            
            void message_35_init() {
                this->message_35_set_set({4});
            }
            
            void message_36_init() {
                this->message_36_set_set({0, 0, 0, 1, 1, 1, 1});
            }
            
            void message_37_init() {
                this->message_37_set_set({2, 2, 2, 3, 3, 3, 3, 7});
            }
            
            void message_38_init() {
                this->message_38_set_set({0, 0, 0, 0, 3, 3, 3, 5});
            }
            
            void message_39_init() {
                this->message_39_set_set({0, 0, 0, 0, 0, 1});
            }
            
            void message_40_init() {
                this->message_40_set_set({0, 0, 0, 0, 1, 2, 2, 5});
            }
            
            void message_41_init() {
                this->message_41_set_set({3});
            }
            
            void message_42_init() {
                this->message_42_set_set({7});
            }
            
            void message_43_init() {
                this->message_43_set_set({1});
            }
            
            void numberobj_18_init() {
                this->numberobj_18_currentFormat = 6;
                this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/NextChord/number_obj-32"), 1, this->_currentTime);
            }
            
            void numberobj_18_getPresetValue(PatcherStateInterface& preset) {
                preset["value"] = this->numberobj_18_value;
            }
            
            void numberobj_18_setPresetValue(PatcherStateInterface& preset) {
                if ((bool)(stateIsEmpty(preset)))
                    return;
            
                this->numberobj_18_value_set(preset["value"]);
            }
            
            void message_44_init() {
                this->message_44_set_set({4});
            }
            
            void message_45_init() {
                this->message_45_set_set({6});
            }
            
            void message_46_init() {
                this->message_46_set_set({2});
            }
            
            void message_47_init() {
                this->message_47_set_set({1, 1, 1, 6, 0, 0});
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                numberobj_16_value = 0;
                numberobj_16_value_setter(numberobj_16_value);
                liststore_05_lookupidx = 0;
                liststore_05_storeidx = 0;
                numberobj_17_value = 0;
                numberobj_17_value_setter(numberobj_17_value);
                uzi_04_start_number = 0;
                uzi_04_count = 13;
                uzi_04_base = 0;
                select_04_test1 = 0;
                select_04_test2 = 1;
                select_04_test3 = 2;
                select_04_test4 = 3;
                select_04_test5 = 4;
                select_04_test6 = 5;
                select_04_test7 = 6;
                select_04_test8 = 7;
                select_04_test9 = 8;
                select_04_test10 = 9;
                select_04_test11 = 10;
                select_04_test12 = 11;
                select_04_test13 = 12;
                numberobj_18_value = 0;
                numberobj_18_value_setter(numberobj_18_value);
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                numberobj_16_currentFormat = 6;
                numberobj_16_lastValue = 0;
                liststore_05_storage__slotcount = 1024;
                liststore_05_storage__entrysize = 65;
                numberobj_17_currentFormat = 6;
                numberobj_17_lastValue = 0;
                uzi_04_doPause = 0;
                uzi_04_pausecount = 0;
                numberobj_18_currentFormat = 6;
                numberobj_18_lastValue = 0;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number numberobj_16_value;
                number liststore_05_lookupidx;
                list liststore_05_storelist;
                number liststore_05_storeidx;
                list message_29_set;
                list message_30_set;
                number numberobj_17_value;
                list message_31_set;
                number uzi_04_start_number;
                number uzi_04_count;
                number uzi_04_base;
                list message_32_set;
                number select_04_test1;
                number select_04_test2;
                number select_04_test3;
                number select_04_test4;
                number select_04_test5;
                number select_04_test6;
                number select_04_test7;
                number select_04_test8;
                number select_04_test9;
                number select_04_test10;
                number select_04_test11;
                number select_04_test12;
                number select_04_test13;
                list message_33_set;
                list message_34_set;
                list message_35_set;
                list message_36_set;
                list message_37_set;
                list message_38_set;
                list message_39_set;
                list message_40_set;
                list message_41_set;
                list message_42_set;
                list message_43_set;
                number numberobj_18_value;
                list message_44_set;
                list message_45_set;
                list message_46_set;
                list message_47_set;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Int numberobj_16_currentFormat;
                number numberobj_16_lastValue;
                Float64BufferRef liststore_05_storage_storage;
                number liststore_05_storage__slotcount;
                number liststore_05_storage__entrysize;
                Int numberobj_17_currentFormat;
                number numberobj_17_lastValue;
                number uzi_04_doPause;
                long uzi_04_pausecount;
                Int numberobj_18_currentFormat;
                number numberobj_18_lastValue;
                number stackprotect_count;
                DataRef liststore_05_storage_storageobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_99()
    {
    }
    
    ~RNBOSubpatcher_99()
    {
        delete this->p_07;
        delete this->p_08;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
    }
    
    inline number linearinterp(number frac, number x, number y) {
        return x + (y - x) * frac;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    Index getNumMidiInputPorts() const {
        return 0;
    }
    
    void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        RNBO_UNUSED(numOutputs);
        RNBO_UNUSED(outputs);
        RNBO_UNUSED(numInputs);
        RNBO_UNUSED(inputs);
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_07_perform(n);
        this->p_08_perform(n);
        this->stackprotect_perform(n);
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        RNBO_UNUSED(forceDSPSetup);
        this->p_07->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_08->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_07 = new RNBOSubpatcher_88();
        this->p_07->setEngineAndPatcher(this->getEngine(), this);
        this->p_07->initialize();
        this->p_07->setParameterOffset(this->getParameterOffset(this->p_07));
        this->p_08 = new RNBOSubpatcher_89();
        this->p_08->setEngineAndPatcher(this->getEngine(), this);
        this->p_08->initialize();
        this->p_08->setParameterOffset(this->getParameterOffset(this->p_08));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->p_07->getPreset(getSubState(getSubState(preset, "__sps"), "ChordColl"));
        this->p_08->getPreset(getSubState(getSubState(preset, "__sps"), "NextChord"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        RNBO_UNUSED(v);
        this->updateTime(time);
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                this->p_07->setParameterValue(index, v, time);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                this->p_08->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterValue(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 0;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 0;
    }
    
    ParameterIndex getNumParameters() const {
        return 0 + this->p_07->getNumParameters() + this->p_08->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterName(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->getParameterId(index);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            default:
                {
                index -= 0;
    
                if (index < this->p_07->getNumParameters())
                    this->p_07->getParameterInfo(index, info);
    
                index -= this->p_07->getNumParameters();
    
                if (index < this->p_08->getNumParameters())
                    this->p_08->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_07)
            return 0;
    
        if (subpatcher == this->p_08)
            return 0 + this->p_07->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        default:
            {
            index -= 0;
    
            if (index < this->p_07->getNumParameters())
                return this->p_07->constrainParameterValue(index, value);
    
            index -= this->p_07->getNumParameters();
    
            if (index < this->p_08->getNumParameters())
                return this->p_08->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Chords/message_obj-11") == objectId)
                this->message_48_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-8") == objectId)
                this->message_49_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-20") == objectId)
                this->message_50_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-9") == objectId)
                this->message_51_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-38") == objectId)
                this->message_52_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-42") == objectId)
                this->message_53_listin_number_set(payload);
    
            if (TAG("Chords/message_obj-3") == objectId)
                this->message_54_listin_number_set(payload);
    
            break;
            }
        case TAG("valin"):
            {
            if (TAG("Chords/number_obj-29") == objectId)
                this->numberobj_19_valin_set(payload);
    
            if (TAG("Chords/number_obj-32") == objectId)
                this->numberobj_20_valin_set(payload);
    
            if (TAG("Chords/number_obj-6") == objectId)
                this->numberobj_21_valin_set(payload);
    
            if (TAG("Chords/number_obj-14") == objectId)
                this->numberobj_22_valin_set(payload);
    
            if (TAG("Chords/number_obj-37") == objectId)
                this->numberobj_23_valin_set(payload);
    
            if (TAG("Chords/number_obj-40") == objectId)
                this->numberobj_24_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Chords/number_obj-29") == objectId)
                this->numberobj_19_format_set(payload);
    
            if (TAG("Chords/number_obj-32") == objectId)
                this->numberobj_20_format_set(payload);
    
            if (TAG("Chords/number_obj-6") == objectId)
                this->numberobj_21_format_set(payload);
    
            if (TAG("Chords/number_obj-14") == objectId)
                this->numberobj_22_format_set(payload);
    
            if (TAG("Chords/number_obj-37") == objectId)
                this->numberobj_23_format_set(payload);
    
            if (TAG("Chords/number_obj-40") == objectId)
                this->numberobj_24_format_set(payload);
    
            break;
            }
        }
    
        this->p_07->processNumMessage(tag, objectId, time, payload);
        this->p_08->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Chords/message_obj-11") == objectId)
                this->message_48_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-8") == objectId)
                this->message_49_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-20") == objectId)
                this->message_50_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-9") == objectId)
                this->message_51_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-38") == objectId)
                this->message_52_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-42") == objectId)
                this->message_53_listin_list_set(payload);
    
            if (TAG("Chords/message_obj-3") == objectId)
                this->message_54_listin_list_set(payload);
    
            break;
            }
        }
    
        this->p_07->processListMessage(tag, objectId, time, payload);
        this->p_08->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("listin"):
            {
            if (TAG("Chords/message_obj-11") == objectId)
                this->message_48_listin_bang_bang();
    
            if (TAG("Chords/message_obj-8") == objectId)
                this->message_49_listin_bang_bang();
    
            if (TAG("Chords/message_obj-20") == objectId)
                this->message_50_listin_bang_bang();
    
            if (TAG("Chords/message_obj-9") == objectId)
                this->message_51_listin_bang_bang();
    
            if (TAG("Chords/message_obj-38") == objectId)
                this->message_52_listin_bang_bang();
    
            if (TAG("Chords/message_obj-42") == objectId)
                this->message_53_listin_bang_bang();
    
            if (TAG("Chords/message_obj-3") == objectId)
                this->message_54_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("Chords/button_obj-26") == objectId)
                this->button_12_bangin_bang();
    
            break;
            }
        }
    
        this->p_07->processBangMessage(tag, objectId, time);
        this->p_08->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("Chords/message_obj-11"):
            {
            return "Chords/message_obj-11";
            }
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Chords/number_obj-29"):
            {
            return "Chords/number_obj-29";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("Chords/button_obj-26"):
            {
            return "Chords/button_obj-26";
            }
        case TAG("Chords/message_obj-8"):
            {
            return "Chords/message_obj-8";
            }
        case TAG("Chords/number_obj-32"):
            {
            return "Chords/number_obj-32";
            }
        case TAG("Chords/number_obj-6"):
            {
            return "Chords/number_obj-6";
            }
        case TAG("Chords/number_obj-14"):
            {
            return "Chords/number_obj-14";
            }
        case TAG("Chords/number_obj-37"):
            {
            return "Chords/number_obj-37";
            }
        case TAG("Chords/message_obj-20"):
            {
            return "Chords/message_obj-20";
            }
        case TAG("Chords/message_obj-9"):
            {
            return "Chords/message_obj-9";
            }
        case TAG("Chords/number_obj-40"):
            {
            return "Chords/number_obj-40";
            }
        case TAG("Chords/message_obj-38"):
            {
            return "Chords/message_obj-38";
            }
        case TAG("Chords/message_obj-42"):
            {
            return "Chords/message_obj-42";
            }
        case TAG("Chords/message_obj-3"):
            {
            return "Chords/message_obj-3";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_07->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_08->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 0;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 2) {
            this->mtof_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
            this->mtof_02_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
            this->mtof_03_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
            this->mtof_04_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
            this->mtof_05_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        }
    
        this->p_07->processDataViewUpdate(index, time);
        this->p_08->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->assign_defaults();
        this->setState();
        this->mtof_01_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->mtof_02_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->mtof_03_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->mtof_04_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
        this->mtof_05_innerMtoF_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultMtofLookupTable256);
    }
    
    protected:
    
    void message_48_listin_list_set(const list& v) {
        this->message_48_set_set(v);
    }
    
    void message_48_listin_number_set(number v) {
        this->message_48_set_set(v);
    }
    
    void message_48_listin_bang_bang() {
        this->message_48_trigger_bang();
    }
    
    void numberobj_19_valin_set(number v) {
        this->numberobj_19_value_set(v);
    }
    
    void numberobj_19_format_set(number v) {
        this->numberobj_19_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_12_bangin_bang() {
        this->button_12_bangval_bang();
    }
    
    void eventinlet_13_out1_number_set(number v) {
        this->numberobj_21_value_set(v);
        this->button_12_bangval_bang();
    }
    
    void eventinlet_13_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_21_value_set(converted);
        }
    
        this->button_12_bangval_bang();
    }
    
    void message_49_listin_list_set(const list& v) {
        this->message_49_set_set(v);
    }
    
    void message_49_listin_number_set(number v) {
        this->message_49_set_set(v);
    }
    
    void message_49_listin_bang_bang() {
        this->message_49_trigger_bang();
    }
    
    void numberobj_20_valin_set(number v) {
        this->numberobj_20_value_set(v);
    }
    
    void numberobj_20_format_set(number v) {
        this->numberobj_20_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_21_valin_set(number v) {
        this->numberobj_21_value_set(v);
    }
    
    void numberobj_21_format_set(number v) {
        this->numberobj_21_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_22_valin_set(number v) {
        this->numberobj_22_value_set(v);
    }
    
    void numberobj_22_format_set(number v) {
        this->numberobj_22_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_23_valin_set(number v) {
        this->numberobj_23_value_set(v);
    }
    
    void numberobj_23_format_set(number v) {
        this->numberobj_23_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_50_listin_list_set(const list& v) {
        this->message_50_set_set(v);
    }
    
    void message_50_listin_number_set(number v) {
        this->message_50_set_set(v);
    }
    
    void message_50_listin_bang_bang() {
        this->message_50_trigger_bang();
    }
    
    void message_51_listin_list_set(const list& v) {
        this->message_51_set_set(v);
    }
    
    void message_51_listin_number_set(number v) {
        this->message_51_set_set(v);
    }
    
    void message_51_listin_bang_bang() {
        this->message_51_trigger_bang();
    }
    
    void numberobj_24_valin_set(number v) {
        this->numberobj_24_value_set(v);
    }
    
    void numberobj_24_format_set(number v) {
        this->numberobj_24_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_52_listin_list_set(const list& v) {
        this->message_52_set_set(v);
    }
    
    void message_52_listin_number_set(number v) {
        this->message_52_set_set(v);
    }
    
    void message_52_listin_bang_bang() {
        this->message_52_trigger_bang();
    }
    
    void message_53_listin_list_set(const list& v) {
        this->message_53_set_set(v);
    }
    
    void message_53_listin_number_set(number v) {
        this->message_53_set_set(v);
    }
    
    void message_53_listin_bang_bang() {
        this->message_53_trigger_bang();
    }
    
    void message_54_listin_list_set(const list& v) {
        this->message_54_set_set(v);
    }
    
    void message_54_listin_number_set(number v) {
        this->message_54_set_set(v);
    }
    
    void message_54_listin_bang_bang() {
        this->message_54_trigger_bang();
    }
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 0;
    }
    
    Index getNumOutputChannels() const {
        return 0;
    }
    
    void initializeObjects() {
        this->message_48_init();
        this->numberobj_19_init();
        this->mtof_01_innerScala_init();
        this->mtof_01_init();
        this->message_49_init();
        this->numberobj_20_init();
        this->mtof_02_innerScala_init();
        this->mtof_02_init();
        this->change_02_init();
        this->numberobj_21_init();
        this->numberobj_22_init();
        this->random_02_nz_init();
        this->numberobj_23_init();
        this->mtof_03_innerScala_init();
        this->mtof_03_init();
        this->message_50_init();
        this->message_51_init();
        this->numberobj_24_init();
        this->message_52_init();
        this->mtof_04_innerScala_init();
        this->mtof_04_init();
        this->mtof_05_innerScala_init();
        this->mtof_05_init();
        this->message_53_init();
        this->message_54_init();
        this->p_07->initializeObjects();
        this->p_08->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_07->startup();
        this->p_08->startup();
    }
    
    void allocateDataRefs() {
        this->p_07->allocateDataRefs();
        this->p_08->allocateDataRefs();
        this->mtof_01_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_01_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_02_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_02_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_03_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_03_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_04_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_04_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_05_innerMtoF_buffer->requestSize(65536, 1);
        this->mtof_05_innerMtoF_buffer->setSampleRate(this->sr);
        this->mtof_01_innerMtoF_buffer = this->mtof_01_innerMtoF_buffer->allocateIfNeeded();
        this->mtof_02_innerMtoF_buffer = this->mtof_02_innerMtoF_buffer->allocateIfNeeded();
        this->mtof_03_innerMtoF_buffer = this->mtof_03_innerMtoF_buffer->allocateIfNeeded();
        this->mtof_04_innerMtoF_buffer = this->mtof_04_innerMtoF_buffer->allocateIfNeeded();
        this->mtof_05_innerMtoF_buffer = this->mtof_05_innerMtoF_buffer->allocateIfNeeded();
    }
    
    void change_02_zero_set(number ) {}
    
    void change_02_nonzero_set(number ) {}
    
    void change_02_out_set(number v) {
        this->change_02_out = v;
    }
    
    void change_02_input_set(number v) {
        this->change_02_input = v;
    
        if (v != this->change_02_prev) {
            number prev = this->change_02_prev;
            this->change_02_prev = v;
    
            if (v == 0) {
                this->change_02_zero_set(1);
            } else if (this->change_02_out == 0) {
                this->change_02_nonzero_set(1);
            }
    
            {
                this->change_02_out_set(v);
            }
        } else {
            this->change_02_prev = v;
        }
    }
    
    void numberobj_21_output_set(number v) {
        this->change_02_input_set(v);
    }
    
    void numberobj_21_value_bang() {
        number v = this->numberobj_21_value;
        number localvalue = v;
    
        if (this->numberobj_21_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-6"), localvalue, this->_currentTime);
        this->numberobj_21_output_set(localvalue);
    }
    
    void message_51_set_set(const list& v) {
        this->message_51_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-9"), v, this->_currentTime);
    }
    
    void random_02_limit_set(number v) {
        this->random_02_limit_setter(v);
        v = this->random_02_limit;
    }
    
    void listlen_01_out1_set(number v) {
        this->random_02_limit_set(v);
    }
    
    void listlen_01_input_set(const list& input) {
        this->listlen_01_input = jsCreateListCopy(input);
    
        {
            this->listlen_01_out1_set(input->length);
            return;
        }
    }
    
    void trigger_04_out3_set(const list& v) {
        this->listlen_01_input_set(v);
    }
    
    void listindex_01_index_set(const list& v) {
        this->listindex_01_index = jsCreateListCopy(v);
    }
    
    void numberobj_22_output_set(number v) {
        {
            list converted = {v};
            this->listindex_01_index_set(converted);
        }
    }
    
    void numberobj_22_value_set(number v) {
        this->numberobj_22_value_setter(v);
        v = this->numberobj_22_value;
        number localvalue = v;
    
        if (this->numberobj_22_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-14"), localvalue, this->_currentTime);
        this->numberobj_22_output_set(localvalue);
    }
    
    void random_02_result_set(number v) {
        this->numberobj_22_value_set(v);
    }
    
    void random_02_trigger_bang() {
        this->random_02_result_set(rnbo_abs(this->random_02_nz_next()) * this->random_02_limit);
    }
    
    void trigger_04_out2_bang() {
        this->random_02_trigger_bang();
    }
    
    void listindex_01_out2_set(const list& ) {}
    
    void message_49_set_set(const list& v) {
        this->message_49_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-8"), v, this->_currentTime);
    }
    
    void intnum_01_value_set(number v) {
        this->intnum_01_value = v;
        this->intnum_01_stored = v;
    }
    
    void listindex_01_out1_set(number v) {
        {
            list converted = {v};
            this->message_49_set_set(converted);
        }
    
        this->intnum_01_value_set(v);
    }
    
    void listindex_01_input_set(const list& v) {
        this->listindex_01_input = jsCreateListCopy(v);
        list result = jsCreateListCopy(v);
    
        if (this->listindex_01_index->length > 0 && this->listindex_01_index[0] < v->length && this->listindex_01_index[0] >= 0) {
            number nth = v[(Index)this->listindex_01_index[0]];
    
            if (this->listindex_01_index->length == 1)
                result->splice(this->listindex_01_index[0], 1);
            else
                result->splice(this->listindex_01_index[0], 1, this->listindex_01_index[1]);
    
            this->listindex_01_out2_set(result);
            this->listindex_01_out1_set(nth);
        } else if ((bool)(this->listindex_01_input->length))
            this->listindex_01_out2_set(v);
    }
    
    void trigger_04_out1_set(const list& v) {
        this->listindex_01_input_set(v);
    }
    
    void trigger_04_input_list_set(const list& v) {
        this->trigger_04_out3_set(v);
        this->trigger_04_out2_bang();
        this->trigger_04_out1_set(v);
    }
    
    void p_08_out1_list_set(const list& v) {
        this->message_51_set_set(v);
        this->trigger_04_input_list_set(v);
    }
    
    void p_08_in1_number_set(number v) {
        this->p_08->updateTime(this->_currentTime);
        this->p_08->eventinlet_12_out1_number_set(v);
    }
    
    void receive_03_output_number_set(number v) {
        this->receive_03_output_number = v;
        this->p_08_in1_number_set(v);
    }
    
    void send_03_input_number_set(number v) {
        this->send_03_input_number = v;
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_18_source_currentChord_Index_number_set(v);
        this->receive_03_output_number_set(v);
    }
    
    void message_54_set_set(const list& v) {
        this->message_54_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-3"), v, this->_currentTime);
    }
    
    void send_02_input_bang_bang() {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_18_source_BassBang_bang_bang();
    }
    
    void message_53_set_set(const list& v) {
        this->message_53_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-42"), v, this->_currentTime);
    }
    
    void counter_02_output_set(number v) {
        this->counter_02_output = v;
    
        {
            list converted = {v};
            this->message_53_set_set(converted);
        }
    }
    
    void counter_02_overflow_bang_bang() {}
    
    number counter_02_overflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_02_overflow_number_set(number v) {
        v = this->counter_02_overflow_number_constrain(v);
        this->counter_02_overflow_number = v;
    }
    
    void counter_02_carry_set(number v) {
        this->counter_02_carry = v;
    }
    
    void counter_02_underflow_bang_bang() {}
    
    number counter_02_underflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_02_underflow_number_set(number v) {
        v = this->counter_02_underflow_number_constrain(v);
        this->counter_02_underflow_number = v;
    }
    
    void counter_02_input_bang() {
        this->counter_02_output_set(this->counter_02_count);
        this->counter_02_inc();
    
        if (this->counter_02_count > this->counter_02_maximum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_maximum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_minimum;
    
            if ((bool)(!(bool)(this->counter_02_overflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_overflow_bang_bang();
                else
                    this->counter_02_overflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_overflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_overflow_number_set(0);
    
        if (this->counter_02_count < this->counter_02_minimum) {
            if (this->counter_02_direction == 2) {
                this->counter_02_phase = !(bool)(this->counter_02_phase);
                this->counter_02_count = this->counter_02_minimum;
                this->counter_02_inc();
            } else
                this->counter_02_count = this->counter_02_maximum;
    
            if ((bool)(!(bool)(this->counter_02_underflow_number))) {
                if (this->counter_02_carryflag == 1)
                    this->counter_02_underflow_bang_bang();
                else
                    this->counter_02_underflow_number_set(1);
            }
    
            this->counter_02_carry_set(this->counter_02_carry + 1);
        } else if ((bool)(this->counter_02_underflow_number) && this->counter_02_carryflag == 0)
            this->counter_02_underflow_number_set(0);
    }
    
    void trigger_05_out2_bang() {
        this->send_02_input_bang_bang();
        this->counter_02_input_bang();
    }
    
    void switchobj_01_onoff_set(number v) {
        this->switchobj_01_onoff = v;
    }
    
    void expr_06_out1_set(number v) {
        this->expr_06_out1 = v;
        this->switchobj_01_onoff_set(this->expr_06_out1);
    }
    
    void expr_06_in1_set(number in1) {
        this->expr_06_in1 = in1;
        this->expr_06_out1_set(this->expr_06_in1 + this->expr_06_in2);//#map:Chords/+_obj-47:1
    }
    
    void expr_06_in2_set(number v) {
        this->expr_06_in2 = v;
    }
    
    void message_53_out_set(const list& v) {
        {
            if (v->length > 1)
                this->expr_06_in2_set(v[1]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->expr_06_in1_set(converted);
        }
    }
    
    void message_53_trigger_bang() {
        this->message_53_out_set(this->message_53_set);
    }
    
    void trigger_05_out1_bang() {
        this->message_53_trigger_bang();
    }
    
    void trigger_05_input_number_set(number v) {
        RNBO_UNUSED(v);
        this->trigger_05_out2_bang();
        this->trigger_05_out1_bang();
    }
    
    void p_07_out5_number_set(number v) {
        this->send_03_input_number_set(v);
    
        {
            list converted = {v};
            this->message_54_set_set(converted);
        }
    
        this->trigger_05_input_number_set(v);
    }
    
    void eventoutlet_11_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_18_out4_number_set(v);
    }
    
    void expr_04_out1_set(number v) {
        this->expr_04_out1 = v;
        this->eventoutlet_11_in1_number_set(this->expr_04_out1);
    }
    
    void expr_04_in1_set(number in1) {
        this->expr_04_in1 = in1;
        this->expr_04_out1_set(this->expr_04_in1 + this->expr_04_in2);//#map:Chords/+_obj-4:1
    }
    
    void numberobj_24_output_set(number v) {
        this->expr_04_in1_set(v);
    }
    
    void numberobj_24_value_set(number v) {
        this->numberobj_24_value_setter(v);
        v = this->numberobj_24_value;
        number localvalue = v;
    
        if (this->numberobj_24_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-40"), localvalue, this->_currentTime);
        this->numberobj_24_output_set(localvalue);
    }
    
    void mtof_04_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_24_value_set(converted);
        }
    }
    
    void mtof_04_midivalue_set(const list& v) {
        this->mtof_04_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_04_midivalue->length; i++) {
            tmp->push(
                this->mtof_04_innerMtoF_next(this->mtof_04_midivalue[(Index)i], this->mtof_04_base)
            );
        }
    
        this->mtof_04_out_set(tmp);
    }
    
    void p_07_out4_number_set(number v) {
        {
            list converted = {v};
            this->mtof_04_midivalue_set(converted);
        }
    }
    
    void send_01_input_list_set(const list& v) {
        this->send_01_input_list = jsCreateListCopy(v);
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_18_source_Bass_list_set(v);
    }
    
    void message_50_set_set(const list& v) {
        this->message_50_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-20"), v, this->_currentTime);
    }
    
    void mtof_05_out_set(const list& v) {
        this->send_01_input_list_set(v);
        this->message_50_set_set(v);
    }
    
    void mtof_05_midivalue_set(const list& v) {
        this->mtof_05_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_05_midivalue->length; i++) {
            tmp->push(
                this->mtof_05_innerMtoF_next(this->mtof_05_midivalue[(Index)i], this->mtof_05_base)
            );
        }
    
        this->mtof_05_out_set(tmp);
    }
    
    void message_52_set_set(const list& v) {
        this->message_52_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-38"), v, this->_currentTime);
    }
    
    void expr_05_out1_set(number v) {
        this->expr_05_out1 = v;
    
        {
            list converted = {this->expr_05_out1};
            this->mtof_05_midivalue_set(converted);
        }
    
        {
            list converted = {this->expr_05_out1};
            this->message_52_set_set(converted);
        }
    }
    
    void expr_05_in1_set(number in1) {
        this->expr_05_in1 = in1;
        this->expr_05_out1_set(this->expr_05_in1 - this->expr_05_in2);//#map:Chords/-_obj-35:1
    }
    
    void switchobj_01_out_number_set(number v) {
        this->expr_05_in1_set(v);
    }
    
    void switchobj_01_in3_number_set(number v) {
        if (this->switchobj_01_onoff == 3) {
            this->switchobj_01_out_number_set(v);
        }
    }
    
    void expr_07_out1_set(number v) {
        this->expr_07_out1 = v;
        this->switchobj_01_in3_number_set(this->expr_07_out1);
    }
    
    void expr_07_in1_set(number in1) {
        this->expr_07_in1 = in1;
        this->expr_07_out1_set(this->expr_07_in1 - this->expr_07_in2);//#map:Chords/-_obj-49:1
    }
    
    void eventoutlet_10_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_18_out3_number_set(v);
    }
    
    void expr_03_out1_set(number v) {
        this->expr_03_out1 = v;
        this->eventoutlet_10_in1_number_set(this->expr_03_out1);
    }
    
    void expr_03_in1_set(number in1) {
        this->expr_03_in1 = in1;
        this->expr_03_out1_set(this->expr_03_in1 + this->expr_03_in2);//#map:Chords/+_obj-220:1
    }
    
    void numberobj_23_output_set(number v) {
        this->expr_03_in1_set(v);
    }
    
    void numberobj_23_value_set(number v) {
        this->numberobj_23_value_setter(v);
        v = this->numberobj_23_value;
        number localvalue = v;
    
        if (this->numberobj_23_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-37"), localvalue, this->_currentTime);
        this->numberobj_23_output_set(localvalue);
    }
    
    void mtof_03_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_23_value_set(converted);
        }
    }
    
    void mtof_03_midivalue_set(const list& v) {
        this->mtof_03_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_03_midivalue->length; i++) {
            tmp->push(
                this->mtof_03_innerMtoF_next(this->mtof_03_midivalue[(Index)i], this->mtof_03_base)
            );
        }
    
        this->mtof_03_out_set(tmp);
    }
    
    void p_07_out3_number_set(number v) {
        this->expr_07_in1_set(v);
    
        {
            list converted = {v};
            this->mtof_03_midivalue_set(converted);
        }
    }
    
    void switchobj_01_in2_number_set(number v) {
        if (this->switchobj_01_onoff == 2) {
            this->switchobj_01_out_number_set(v);
        }
    }
    
    void eventoutlet_09_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_18_out2_number_set(v);
    }
    
    void expr_02_out1_set(number v) {
        this->expr_02_out1 = v;
        this->eventoutlet_09_in1_number_set(this->expr_02_out1);
    }
    
    void expr_02_in1_set(number in1) {
        this->expr_02_in1 = in1;
        this->expr_02_out1_set(this->expr_02_in1 + this->expr_02_in2);//#map:Chords/+_obj-224:1
    }
    
    void numberobj_20_output_set(number v) {
        this->expr_02_in1_set(v);
    }
    
    void numberobj_20_value_set(number v) {
        this->numberobj_20_value_setter(v);
        v = this->numberobj_20_value;
        number localvalue = v;
    
        if (this->numberobj_20_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-32"), localvalue, this->_currentTime);
        this->numberobj_20_output_set(localvalue);
    }
    
    void mtof_02_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_20_value_set(converted);
        }
    }
    
    void mtof_02_midivalue_set(const list& v) {
        this->mtof_02_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_02_midivalue->length; i++) {
            tmp->push(
                this->mtof_02_innerMtoF_next(this->mtof_02_midivalue[(Index)i], this->mtof_02_base)
            );
        }
    
        this->mtof_02_out_set(tmp);
    }
    
    void p_07_out2_number_set(number v) {
        this->switchobj_01_in2_number_set(v);
    
        {
            list converted = {v};
            this->mtof_02_midivalue_set(converted);
        }
    }
    
    void switchobj_01_in1_number_set(number v) {
        if (this->switchobj_01_onoff == 1) {
            this->switchobj_01_out_number_set(v);
        }
    }
    
    void eventoutlet_08_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_18_out1_number_set(v);
    }
    
    void expr_01_out1_set(number v) {
        this->expr_01_out1 = v;
        this->eventoutlet_08_in1_number_set(this->expr_01_out1);
    }
    
    void expr_01_in1_set(number in1) {
        this->expr_01_in1 = in1;
        this->expr_01_out1_set(this->expr_01_in1 + this->expr_01_in2);//#map:Chords/+_obj-225:1
    }
    
    void numberobj_19_output_set(number v) {
        this->expr_01_in1_set(v);
    }
    
    void numberobj_19_value_set(number v) {
        this->numberobj_19_value_setter(v);
        v = this->numberobj_19_value;
        number localvalue = v;
    
        if (this->numberobj_19_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-29"), localvalue, this->_currentTime);
        this->numberobj_19_output_set(localvalue);
    }
    
    void mtof_01_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_19_value_set(converted);
        }
    }
    
    void mtof_01_midivalue_set(const list& v) {
        this->mtof_01_midivalue = jsCreateListCopy(v);
        list tmp = list();
    
        for (int i = 0; i < this->mtof_01_midivalue->length; i++) {
            tmp->push(
                this->mtof_01_innerMtoF_next(this->mtof_01_midivalue[(Index)i], this->mtof_01_base)
            );
        }
    
        this->mtof_01_out_set(tmp);
    }
    
    void p_07_out1_number_set(number v) {
        this->switchobj_01_in1_number_set(v);
    
        {
            list converted = {v};
            this->mtof_01_midivalue_set(converted);
        }
    }
    
    void p_07_in1_number_set(number v) {
        this->p_07->updateTime(this->_currentTime);
        this->p_07->eventinlet_11_out1_number_set(v);
    }
    
    void message_48_set_set(const list& v) {
        this->message_48_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Chords/message_obj-11"), v, this->_currentTime);
    }
    
    void intnum_01_out_set(number v) {
        this->p_07_in1_number_set(v);
    
        {
            list converted = {v};
            this->message_48_set_set(converted);
        }
    }
    
    void intnum_01_input_bang_bang() {
        this->intnum_01_out_set(trunc(this->intnum_01_stored));
    }
    
    void button_12_output_bang() {
        this->intnum_01_input_bang_bang();
    }
    
    void button_12_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Chords/button_obj-26"), this->_currentTime);;
        this->button_12_output_bang();
    }
    
    void eventinlet_13_out1_bang_bang() {
        this->numberobj_21_value_bang();
        this->button_12_bangval_bang();
    }
    
    void message_48_out_set(const list& ) {}
    
    void message_48_trigger_bang() {
        this->message_48_out_set(this->message_48_set);
    }
    
    void numberobj_21_value_set(number v) {
        this->numberobj_21_value_setter(v);
        v = this->numberobj_21_value;
        number localvalue = v;
    
        if (this->numberobj_21_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Chords/number_obj-6"), localvalue, this->_currentTime);
        this->numberobj_21_output_set(localvalue);
    }
    
    void message_49_out_set(const list& ) {}
    
    void message_49_trigger_bang() {
        this->message_49_out_set(this->message_49_set);
    }
    
    void message_50_out_set(const list& ) {}
    
    void message_50_trigger_bang() {
        this->message_50_out_set(this->message_50_set);
    }
    
    void message_51_out_set(const list& ) {}
    
    void message_51_trigger_bang() {
        this->message_51_out_set(this->message_51_set);
    }
    
    void message_52_out_set(const list& ) {}
    
    void message_52_trigger_bang() {
        this->message_52_out_set(this->message_52_set);
    }
    
    void message_54_out_set(const list& ) {}
    
    void message_54_trigger_bang() {
        this->message_54_out_set(this->message_54_set);
    }
    
    void p_07_perform(Index n) {
        // subpatcher: ChordColl
        this->p_07->process(nullptr, 0, nullptr, 0, n);
    }
    
    void p_08_perform(Index n) {
        // subpatcher: NextChord
        this->p_08->process(nullptr, 0, nullptr, 0, n);
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void numberobj_19_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_19_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_19_value = localvalue;
    }
    
    void numberobj_20_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_20_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_20_value = localvalue;
    }
    
    void numberobj_21_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_21_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_21_value = localvalue;
    }
    
    void numberobj_22_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_22_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_22_value = localvalue;
    }
    
    void random_02_limit_setter(number v) {
        if (v >= 0)
            this->random_02_limit = v;
    }
    
    void numberobj_23_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_23_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_23_value = localvalue;
    }
    
    void numberobj_24_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_24_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_24_value = localvalue;
    }
    
    void message_48_init() {
        this->message_48_set_set({4});
    }
    
    void numberobj_19_init() {
        this->numberobj_19_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-29"), 1, this->_currentTime);
    }
    
    void numberobj_19_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_19_value;
    }
    
    void numberobj_19_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_19_value_set(preset["value"]);
    }
    
    number mtof_01_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_01_innerMtoF_lastInValue && tuning == this->mtof_01_innerMtoF_lastTuning)
            return this->mtof_01_innerMtoF_lastOutValue;
    
        this->mtof_01_innerMtoF_lastInValue = midivalue;
        this->mtof_01_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_01_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_01_innerMtoF_lastOutValue;
    }
    
    void mtof_01_innerMtoF_reset() {
        this->mtof_01_innerMtoF_lastInValue = 0;
        this->mtof_01_innerMtoF_lastOutValue = 0;
        this->mtof_01_innerMtoF_lastTuning = 0;
    }
    
    void mtof_01_innerScala_mid(int v) {
        this->mtof_01_innerScala_kbmMid = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_ref(int v) {
        this->mtof_01_innerScala_kbmRefNum = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_base(number v) {
        this->mtof_01_innerScala_kbmRefFreq = v;
        this->mtof_01_innerScala_updateRefFreq();
    }
    
    void mtof_01_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_01_innerScala_updateScale(sclValid);
    }
    
    void mtof_01_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_01_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_01_innerScala_updateMap(map);
        }
    }
    
    number mtof_01_innerScala_mtof(number note) {
        if ((bool)(this->mtof_01_innerScala_lastValid) && this->mtof_01_innerScala_lastNote == note) {
            return this->mtof_01_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_01_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_01_innerScala_applySCL(degoct[0], fract(note), this->mtof_01_innerScala_refFreq);
        }
    
        this->mtof_01_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_01_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_01_innerScala_lastValid) && this->mtof_01_innerScala_lastFreq == hz) {
            return this->mtof_01_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_01_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_01_innerScala_kbmSize == 0) {
            out = this->mtof_01_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_01_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_01_innerScala_kbmValid[(Index)(i + this->mtof_01_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_01_innerScala_kbmSize + entry + this->mtof_01_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_01_innerScala_updateLast(out, hz);
        return this->mtof_01_innerScala_lastNote;
    }
    
    int mtof_01_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_01_innerScala_lastValid = false;
            this->mtof_01_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_01_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_01_innerScala_sclOctaveMul = last;
            this->mtof_01_innerScala_sclEntryCount = (int)(this->mtof_01_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_01_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_01_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_01_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_01_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_01_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_01_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_01_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_01_innerScala_kbmSize = (int)(size);
            this->mtof_01_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_01_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_01_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_01_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_01_innerScala_kbmRefFreq = kbm[5];
            this->mtof_01_innerScala_kbmOctaveDegree = octave;
            this->mtof_01_innerScala_kbmValid = kbm;
            this->mtof_01_innerScala_kbmMapSize = (kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_01_innerScala_KBM_MAP_OFFSET));
            this->mtof_01_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_01_innerScala_updateLast(number note, number freq) {
        this->mtof_01_innerScala_lastValid = true;
        this->mtof_01_innerScala_lastNote = note;
        this->mtof_01_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_01_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_01_innerScala_refFreq) / this->mtof_01_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_01_innerScala_sclEntryCount; i++) {
            number c = this->mtof_01_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_01_innerScala_refFreq);
            n = this->mtof_01_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_01_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_01_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_01_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_01_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_01_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_01_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_01_innerScala_applyKBM(number note) {
        if ((this->mtof_01_innerScala_kbmMin == this->mtof_01_innerScala_kbmMax && this->mtof_01_innerScala_kbmMax == 0) || (note >= this->mtof_01_innerScala_kbmMin && note <= this->mtof_01_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_01_innerScala_kbmMid));
    
            if (this->mtof_01_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_01_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_01_innerScala_kbmValid[(Index)(this->mtof_01_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_01_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_01_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(degree, this->mtof_01_innerScala_sclEntryCount);
        return this->mtof_01_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_01_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_01_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_01_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_01_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_01_innerScala_sclOctaveMul);
    }
    
    void mtof_01_innerScala_updateRefFreq() {
        this->mtof_01_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_01_innerScala_kbmRefNum - this->mtof_01_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_01_innerScala_refFreq = this->mtof_01_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_01_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_01_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_01_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_01_innerScala_kbmSize) {
                if (index < this->mtof_01_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_01_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_01_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_01_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_01_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_01_innerScala_refFreq = this->mtof_01_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_01_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_01_innerScala_reset() {
        this->mtof_01_innerScala_lastValid = false;
        this->mtof_01_innerScala_lastNote = 0;
        this->mtof_01_innerScala_lastFreq = 0;
        this->mtof_01_innerScala_sclEntryCount = 0;
        this->mtof_01_innerScala_sclOctaveMul = 1;
        this->mtof_01_innerScala_sclExpMul = {};
        this->mtof_01_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_01_innerScala_kbmMid = 60;
        this->mtof_01_innerScala_kbmRefNum = 69;
        this->mtof_01_innerScala_kbmRefFreq = 440;
        this->mtof_01_innerScala_kbmSize = 0;
        this->mtof_01_innerScala_kbmMin = 0;
        this->mtof_01_innerScala_kbmMax = 0;
        this->mtof_01_innerScala_kbmOctaveDegree = 12;
        this->mtof_01_innerScala_kbmMapSize = 0;
        this->mtof_01_innerScala_refFreq = 261.63;
    }
    
    void mtof_01_init() {
        this->mtof_01_innerScala_update(this->mtof_01_scale, this->mtof_01_map);
    }
    
    void message_49_init() {
        this->message_49_set_set({0});
    }
    
    void numberobj_20_init() {
        this->numberobj_20_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-32"), 1, this->_currentTime);
    }
    
    void numberobj_20_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_20_value;
    }
    
    void numberobj_20_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_20_value_set(preset["value"]);
    }
    
    number mtof_02_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_02_innerMtoF_lastInValue && tuning == this->mtof_02_innerMtoF_lastTuning)
            return this->mtof_02_innerMtoF_lastOutValue;
    
        this->mtof_02_innerMtoF_lastInValue = midivalue;
        this->mtof_02_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_02_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_02_innerMtoF_lastOutValue;
    }
    
    void mtof_02_innerMtoF_reset() {
        this->mtof_02_innerMtoF_lastInValue = 0;
        this->mtof_02_innerMtoF_lastOutValue = 0;
        this->mtof_02_innerMtoF_lastTuning = 0;
    }
    
    void mtof_02_innerScala_mid(int v) {
        this->mtof_02_innerScala_kbmMid = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_ref(int v) {
        this->mtof_02_innerScala_kbmRefNum = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_base(number v) {
        this->mtof_02_innerScala_kbmRefFreq = v;
        this->mtof_02_innerScala_updateRefFreq();
    }
    
    void mtof_02_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_02_innerScala_updateScale(sclValid);
    }
    
    void mtof_02_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_02_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_02_innerScala_updateMap(map);
        }
    }
    
    number mtof_02_innerScala_mtof(number note) {
        if ((bool)(this->mtof_02_innerScala_lastValid) && this->mtof_02_innerScala_lastNote == note) {
            return this->mtof_02_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_02_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_02_innerScala_applySCL(degoct[0], fract(note), this->mtof_02_innerScala_refFreq);
        }
    
        this->mtof_02_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_02_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_02_innerScala_lastValid) && this->mtof_02_innerScala_lastFreq == hz) {
            return this->mtof_02_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_02_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_02_innerScala_kbmSize == 0) {
            out = this->mtof_02_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_02_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_02_innerScala_kbmValid[(Index)(i + this->mtof_02_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_02_innerScala_kbmSize + entry + this->mtof_02_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_02_innerScala_updateLast(out, hz);
        return this->mtof_02_innerScala_lastNote;
    }
    
    int mtof_02_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_02_innerScala_lastValid = false;
            this->mtof_02_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_02_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_02_innerScala_sclOctaveMul = last;
            this->mtof_02_innerScala_sclEntryCount = (int)(this->mtof_02_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_02_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_02_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_02_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_02_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_02_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_02_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_02_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_02_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_02_innerScala_kbmSize = (int)(size);
            this->mtof_02_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_02_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_02_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_02_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_02_innerScala_kbmRefFreq = kbm[5];
            this->mtof_02_innerScala_kbmOctaveDegree = octave;
            this->mtof_02_innerScala_kbmValid = kbm;
            this->mtof_02_innerScala_kbmMapSize = (kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_02_innerScala_KBM_MAP_OFFSET));
            this->mtof_02_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_02_innerScala_updateLast(number note, number freq) {
        this->mtof_02_innerScala_lastValid = true;
        this->mtof_02_innerScala_lastNote = note;
        this->mtof_02_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_02_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_02_innerScala_refFreq) / this->mtof_02_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_02_innerScala_sclEntryCount; i++) {
            number c = this->mtof_02_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_02_innerScala_refFreq);
            n = this->mtof_02_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_02_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_02_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_02_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_02_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_02_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_02_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_02_innerScala_applyKBM(number note) {
        if ((this->mtof_02_innerScala_kbmMin == this->mtof_02_innerScala_kbmMax && this->mtof_02_innerScala_kbmMax == 0) || (note >= this->mtof_02_innerScala_kbmMin && note <= this->mtof_02_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_02_innerScala_kbmMid));
    
            if (this->mtof_02_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_02_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_02_innerScala_kbmValid[(Index)(this->mtof_02_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_02_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_02_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(degree, this->mtof_02_innerScala_sclEntryCount);
        return this->mtof_02_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_02_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_02_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_02_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_02_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_02_innerScala_sclOctaveMul);
    }
    
    void mtof_02_innerScala_updateRefFreq() {
        this->mtof_02_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_02_innerScala_kbmRefNum - this->mtof_02_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_02_innerScala_refFreq = this->mtof_02_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_02_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_02_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_02_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_02_innerScala_kbmSize) {
                if (index < this->mtof_02_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_02_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_02_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_02_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_02_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_02_innerScala_refFreq = this->mtof_02_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_02_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_02_innerScala_reset() {
        this->mtof_02_innerScala_lastValid = false;
        this->mtof_02_innerScala_lastNote = 0;
        this->mtof_02_innerScala_lastFreq = 0;
        this->mtof_02_innerScala_sclEntryCount = 0;
        this->mtof_02_innerScala_sclOctaveMul = 1;
        this->mtof_02_innerScala_sclExpMul = {};
        this->mtof_02_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_02_innerScala_kbmMid = 60;
        this->mtof_02_innerScala_kbmRefNum = 69;
        this->mtof_02_innerScala_kbmRefFreq = 440;
        this->mtof_02_innerScala_kbmSize = 0;
        this->mtof_02_innerScala_kbmMin = 0;
        this->mtof_02_innerScala_kbmMax = 0;
        this->mtof_02_innerScala_kbmOctaveDegree = 12;
        this->mtof_02_innerScala_kbmMapSize = 0;
        this->mtof_02_innerScala_refFreq = 261.63;
    }
    
    void mtof_02_init() {
        this->mtof_02_innerScala_update(this->mtof_02_scale, this->mtof_02_map);
    }
    
    void change_02_init() {
        this->change_02_prev = this->change_02_input;
    }
    
    void numberobj_21_init() {
        this->numberobj_21_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-6"), 1, this->_currentTime);
    }
    
    void numberobj_21_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_21_value;
    }
    
    void numberobj_21_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_21_value_set(preset["value"]);
    }
    
    void numberobj_22_init() {
        this->numberobj_22_currentFormat = 0;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-14"), 1, this->_currentTime);
    }
    
    void numberobj_22_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_22_value;
    }
    
    void numberobj_22_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_22_value_set(preset["value"]);
    }
    
    void random_02_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->random_02_nz_state
        );
    }
    
    void random_02_nz_init() {
        this->random_02_nz_reset();
    }
    
    void random_02_nz_seed(number v) {
        xoshiro_reset(v, this->random_02_nz_state);
    }
    
    number random_02_nz_next() {
        return xoshiro_next(this->random_02_nz_state);
    }
    
    void numberobj_23_init() {
        this->numberobj_23_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-37"), 1, this->_currentTime);
    }
    
    void numberobj_23_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_23_value;
    }
    
    void numberobj_23_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_23_value_set(preset["value"]);
    }
    
    number mtof_03_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_03_innerMtoF_lastInValue && tuning == this->mtof_03_innerMtoF_lastTuning)
            return this->mtof_03_innerMtoF_lastOutValue;
    
        this->mtof_03_innerMtoF_lastInValue = midivalue;
        this->mtof_03_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_03_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_03_innerMtoF_lastOutValue;
    }
    
    void mtof_03_innerMtoF_reset() {
        this->mtof_03_innerMtoF_lastInValue = 0;
        this->mtof_03_innerMtoF_lastOutValue = 0;
        this->mtof_03_innerMtoF_lastTuning = 0;
    }
    
    void mtof_03_innerScala_mid(int v) {
        this->mtof_03_innerScala_kbmMid = v;
        this->mtof_03_innerScala_updateRefFreq();
    }
    
    void mtof_03_innerScala_ref(int v) {
        this->mtof_03_innerScala_kbmRefNum = v;
        this->mtof_03_innerScala_updateRefFreq();
    }
    
    void mtof_03_innerScala_base(number v) {
        this->mtof_03_innerScala_kbmRefFreq = v;
        this->mtof_03_innerScala_updateRefFreq();
    }
    
    void mtof_03_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_03_innerScala_updateScale(sclValid);
    }
    
    void mtof_03_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_03_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_03_innerScala_updateMap(map);
        }
    }
    
    number mtof_03_innerScala_mtof(number note) {
        if ((bool)(this->mtof_03_innerScala_lastValid) && this->mtof_03_innerScala_lastNote == note) {
            return this->mtof_03_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_03_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_03_innerScala_applySCL(degoct[0], fract(note), this->mtof_03_innerScala_refFreq);
        }
    
        this->mtof_03_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_03_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_03_innerScala_lastValid) && this->mtof_03_innerScala_lastFreq == hz) {
            return this->mtof_03_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_03_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_03_innerScala_kbmSize == 0) {
            out = this->mtof_03_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_03_innerScala_octdegree(degree, this->mtof_03_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_03_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_03_innerScala_kbmValid[(Index)(i + this->mtof_03_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_03_innerScala_kbmSize + entry + this->mtof_03_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_03_innerScala_updateLast(out, hz);
        return this->mtof_03_innerScala_lastNote;
    }
    
    int mtof_03_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_03_innerScala_lastValid = false;
            this->mtof_03_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_03_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_03_innerScala_sclOctaveMul = last;
            this->mtof_03_innerScala_sclEntryCount = (int)(this->mtof_03_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_03_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_03_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_03_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_03_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_03_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_03_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_03_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_03_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_03_innerScala_kbmSize = (int)(size);
            this->mtof_03_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_03_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_03_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_03_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_03_innerScala_kbmRefFreq = kbm[5];
            this->mtof_03_innerScala_kbmOctaveDegree = octave;
            this->mtof_03_innerScala_kbmValid = kbm;
            this->mtof_03_innerScala_kbmMapSize = (kbm->length - this->mtof_03_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_03_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_03_innerScala_KBM_MAP_OFFSET));
            this->mtof_03_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_03_innerScala_updateLast(number note, number freq) {
        this->mtof_03_innerScala_lastValid = true;
        this->mtof_03_innerScala_lastNote = note;
        this->mtof_03_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_03_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_03_innerScala_refFreq) / this->mtof_03_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_03_innerScala_sclEntryCount; i++) {
            number c = this->mtof_03_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_03_innerScala_refFreq);
            n = this->mtof_03_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_03_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_03_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_03_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_03_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_03_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_03_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_03_innerScala_applyKBM(number note) {
        if ((this->mtof_03_innerScala_kbmMin == this->mtof_03_innerScala_kbmMax && this->mtof_03_innerScala_kbmMax == 0) || (note >= this->mtof_03_innerScala_kbmMin && note <= this->mtof_03_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_03_innerScala_kbmMid));
    
            if (this->mtof_03_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_03_innerScala_octdegree(degree, this->mtof_03_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_03_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_03_innerScala_kbmValid[(Index)(this->mtof_03_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_03_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_03_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_03_innerScala_octdegree(degree, this->mtof_03_innerScala_sclEntryCount);
        return this->mtof_03_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_03_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_03_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_03_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_03_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_03_innerScala_sclOctaveMul);
    }
    
    void mtof_03_innerScala_updateRefFreq() {
        this->mtof_03_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_03_innerScala_kbmRefNum - this->mtof_03_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_03_innerScala_refFreq = this->mtof_03_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_03_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_03_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_03_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_03_innerScala_kbmSize) {
                if (index < this->mtof_03_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_03_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_03_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_03_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_03_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_03_innerScala_refFreq = this->mtof_03_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_03_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_03_innerScala_reset() {
        this->mtof_03_innerScala_lastValid = false;
        this->mtof_03_innerScala_lastNote = 0;
        this->mtof_03_innerScala_lastFreq = 0;
        this->mtof_03_innerScala_sclEntryCount = 0;
        this->mtof_03_innerScala_sclOctaveMul = 1;
        this->mtof_03_innerScala_sclExpMul = {};
        this->mtof_03_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_03_innerScala_kbmMid = 60;
        this->mtof_03_innerScala_kbmRefNum = 69;
        this->mtof_03_innerScala_kbmRefFreq = 440;
        this->mtof_03_innerScala_kbmSize = 0;
        this->mtof_03_innerScala_kbmMin = 0;
        this->mtof_03_innerScala_kbmMax = 0;
        this->mtof_03_innerScala_kbmOctaveDegree = 12;
        this->mtof_03_innerScala_kbmMapSize = 0;
        this->mtof_03_innerScala_refFreq = 261.63;
    }
    
    void mtof_03_init() {
        this->mtof_03_innerScala_update(this->mtof_03_scale, this->mtof_03_map);
    }
    
    void message_50_init() {
        this->message_50_set_set({130.812783});
    }
    
    void message_51_init() {
        this->message_51_set_set({0, 0, 0, 0, 3, 3, 3, 5});
    }
    
    void numberobj_24_init() {
        this->numberobj_24_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Chords/number_obj-40"), 1, this->_currentTime);
    }
    
    void numberobj_24_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_24_value;
    }
    
    void numberobj_24_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_24_value_set(preset["value"]);
    }
    
    void message_52_init() {
        this->message_52_set_set({48});
    }
    
    number mtof_04_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_04_innerMtoF_lastInValue && tuning == this->mtof_04_innerMtoF_lastTuning)
            return this->mtof_04_innerMtoF_lastOutValue;
    
        this->mtof_04_innerMtoF_lastInValue = midivalue;
        this->mtof_04_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_04_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_04_innerMtoF_lastOutValue;
    }
    
    void mtof_04_innerMtoF_reset() {
        this->mtof_04_innerMtoF_lastInValue = 0;
        this->mtof_04_innerMtoF_lastOutValue = 0;
        this->mtof_04_innerMtoF_lastTuning = 0;
    }
    
    void mtof_04_innerScala_mid(int v) {
        this->mtof_04_innerScala_kbmMid = v;
        this->mtof_04_innerScala_updateRefFreq();
    }
    
    void mtof_04_innerScala_ref(int v) {
        this->mtof_04_innerScala_kbmRefNum = v;
        this->mtof_04_innerScala_updateRefFreq();
    }
    
    void mtof_04_innerScala_base(number v) {
        this->mtof_04_innerScala_kbmRefFreq = v;
        this->mtof_04_innerScala_updateRefFreq();
    }
    
    void mtof_04_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_04_innerScala_updateScale(sclValid);
    }
    
    void mtof_04_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_04_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_04_innerScala_updateMap(map);
        }
    }
    
    number mtof_04_innerScala_mtof(number note) {
        if ((bool)(this->mtof_04_innerScala_lastValid) && this->mtof_04_innerScala_lastNote == note) {
            return this->mtof_04_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_04_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_04_innerScala_applySCL(degoct[0], fract(note), this->mtof_04_innerScala_refFreq);
        }
    
        this->mtof_04_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_04_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_04_innerScala_lastValid) && this->mtof_04_innerScala_lastFreq == hz) {
            return this->mtof_04_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_04_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_04_innerScala_kbmSize == 0) {
            out = this->mtof_04_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_04_innerScala_octdegree(degree, this->mtof_04_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_04_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_04_innerScala_kbmValid[(Index)(i + this->mtof_04_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_04_innerScala_kbmSize + entry + this->mtof_04_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_04_innerScala_updateLast(out, hz);
        return this->mtof_04_innerScala_lastNote;
    }
    
    int mtof_04_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_04_innerScala_lastValid = false;
            this->mtof_04_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_04_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_04_innerScala_sclOctaveMul = last;
            this->mtof_04_innerScala_sclEntryCount = (int)(this->mtof_04_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_04_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_04_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_04_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_04_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_04_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_04_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_04_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_04_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_04_innerScala_kbmSize = (int)(size);
            this->mtof_04_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_04_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_04_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_04_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_04_innerScala_kbmRefFreq = kbm[5];
            this->mtof_04_innerScala_kbmOctaveDegree = octave;
            this->mtof_04_innerScala_kbmValid = kbm;
            this->mtof_04_innerScala_kbmMapSize = (kbm->length - this->mtof_04_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_04_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_04_innerScala_KBM_MAP_OFFSET));
            this->mtof_04_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_04_innerScala_updateLast(number note, number freq) {
        this->mtof_04_innerScala_lastValid = true;
        this->mtof_04_innerScala_lastNote = note;
        this->mtof_04_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_04_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_04_innerScala_refFreq) / this->mtof_04_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_04_innerScala_sclEntryCount; i++) {
            number c = this->mtof_04_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_04_innerScala_refFreq);
            n = this->mtof_04_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_04_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_04_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_04_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_04_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_04_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_04_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_04_innerScala_applyKBM(number note) {
        if ((this->mtof_04_innerScala_kbmMin == this->mtof_04_innerScala_kbmMax && this->mtof_04_innerScala_kbmMax == 0) || (note >= this->mtof_04_innerScala_kbmMin && note <= this->mtof_04_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_04_innerScala_kbmMid));
    
            if (this->mtof_04_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_04_innerScala_octdegree(degree, this->mtof_04_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_04_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_04_innerScala_kbmValid[(Index)(this->mtof_04_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_04_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_04_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_04_innerScala_octdegree(degree, this->mtof_04_innerScala_sclEntryCount);
        return this->mtof_04_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_04_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_04_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_04_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_04_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_04_innerScala_sclOctaveMul);
    }
    
    void mtof_04_innerScala_updateRefFreq() {
        this->mtof_04_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_04_innerScala_kbmRefNum - this->mtof_04_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_04_innerScala_refFreq = this->mtof_04_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_04_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_04_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_04_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_04_innerScala_kbmSize) {
                if (index < this->mtof_04_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_04_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_04_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_04_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_04_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_04_innerScala_refFreq = this->mtof_04_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_04_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_04_innerScala_reset() {
        this->mtof_04_innerScala_lastValid = false;
        this->mtof_04_innerScala_lastNote = 0;
        this->mtof_04_innerScala_lastFreq = 0;
        this->mtof_04_innerScala_sclEntryCount = 0;
        this->mtof_04_innerScala_sclOctaveMul = 1;
        this->mtof_04_innerScala_sclExpMul = {};
        this->mtof_04_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_04_innerScala_kbmMid = 60;
        this->mtof_04_innerScala_kbmRefNum = 69;
        this->mtof_04_innerScala_kbmRefFreq = 440;
        this->mtof_04_innerScala_kbmSize = 0;
        this->mtof_04_innerScala_kbmMin = 0;
        this->mtof_04_innerScala_kbmMax = 0;
        this->mtof_04_innerScala_kbmOctaveDegree = 12;
        this->mtof_04_innerScala_kbmMapSize = 0;
        this->mtof_04_innerScala_refFreq = 261.63;
    }
    
    void mtof_04_init() {
        this->mtof_04_innerScala_update(this->mtof_04_scale, this->mtof_04_map);
    }
    
    number mtof_05_innerMtoF_next(number midivalue, number tuning) {
        if (midivalue == this->mtof_05_innerMtoF_lastInValue && tuning == this->mtof_05_innerMtoF_lastTuning)
            return this->mtof_05_innerMtoF_lastOutValue;
    
        this->mtof_05_innerMtoF_lastInValue = midivalue;
        this->mtof_05_innerMtoF_lastTuning = tuning;
        number result = 0;
    
        {
            result = rnbo_exp(.057762265 * (midivalue - 69.0));
        }
    
        this->mtof_05_innerMtoF_lastOutValue = tuning * result;
        return this->mtof_05_innerMtoF_lastOutValue;
    }
    
    void mtof_05_innerMtoF_reset() {
        this->mtof_05_innerMtoF_lastInValue = 0;
        this->mtof_05_innerMtoF_lastOutValue = 0;
        this->mtof_05_innerMtoF_lastTuning = 0;
    }
    
    void mtof_05_innerScala_mid(int v) {
        this->mtof_05_innerScala_kbmMid = v;
        this->mtof_05_innerScala_updateRefFreq();
    }
    
    void mtof_05_innerScala_ref(int v) {
        this->mtof_05_innerScala_kbmRefNum = v;
        this->mtof_05_innerScala_updateRefFreq();
    }
    
    void mtof_05_innerScala_base(number v) {
        this->mtof_05_innerScala_kbmRefFreq = v;
        this->mtof_05_innerScala_updateRefFreq();
    }
    
    void mtof_05_innerScala_init() {
        list sclValid = {
            12,
            100,
            0,
            200,
            0,
            300,
            0,
            400,
            0,
            500,
            0,
            600,
            0,
            700,
            0,
            800,
            0,
            900,
            0,
            1000,
            0,
            1100,
            0,
            2,
            1
        };
    
        this->mtof_05_innerScala_updateScale(sclValid);
    }
    
    void mtof_05_innerScala_update(list scale, list map) {
        if (scale->length > 0) {
            this->mtof_05_innerScala_updateScale(scale);
        }
    
        if (map->length > 0) {
            this->mtof_05_innerScala_updateMap(map);
        }
    }
    
    number mtof_05_innerScala_mtof(number note) {
        if ((bool)(this->mtof_05_innerScala_lastValid) && this->mtof_05_innerScala_lastNote == note) {
            return this->mtof_05_innerScala_lastFreq;
        }
    
        array<int, 2> degoct = this->mtof_05_innerScala_applyKBM(note);
        number out = 0;
    
        if (degoct[1] > 0) {
            out = this->mtof_05_innerScala_applySCL(degoct[0], fract(note), this->mtof_05_innerScala_refFreq);
        }
    
        this->mtof_05_innerScala_updateLast(note, out);
        return out;
    }
    
    number mtof_05_innerScala_ftom(number hz) {
        if (hz <= 0.0) {
            return 0.0;
        }
    
        if ((bool)(this->mtof_05_innerScala_lastValid) && this->mtof_05_innerScala_lastFreq == hz) {
            return this->mtof_05_innerScala_lastNote;
        }
    
        array<number, 2> df = this->mtof_05_innerScala_hztodeg(hz);
        int degree = (int)(df[0]);
        number frac = df[1];
        number out = 0;
    
        if (this->mtof_05_innerScala_kbmSize == 0) {
            out = this->mtof_05_innerScala_kbmMid + degree;
        } else {
            array<int, 2> octdeg = this->mtof_05_innerScala_octdegree(degree, this->mtof_05_innerScala_kbmOctaveDegree);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
            Index entry = 0;
    
            for (Index i = 0; i < this->mtof_05_innerScala_kbmMapSize; i++) {
                if (index == this->mtof_05_innerScala_kbmValid[(Index)(i + this->mtof_05_innerScala_KBM_MAP_OFFSET)]) {
                    entry = i;
                    break;
                }
            }
    
            out = oct * this->mtof_05_innerScala_kbmSize + entry + this->mtof_05_innerScala_kbmMid;
        }
    
        out = out + frac;
        this->mtof_05_innerScala_updateLast(out, hz);
        return this->mtof_05_innerScala_lastNote;
    }
    
    int mtof_05_innerScala_updateScale(list scl) {
        if (scl->length < 1) {
            return 0;
        }
    
        number sclDataEntries = scl[0] * 2 + 1;
    
        if (sclDataEntries <= scl->length) {
            this->mtof_05_innerScala_lastValid = false;
            this->mtof_05_innerScala_sclExpMul = {};
            number last = 1;
    
            for (Index i = 1; i < sclDataEntries; i += 2) {
                const number c = (const number)(scl[(Index)(i + 0)]);
                const number d = (const number)(scl[(Index)(i + 1)]);
    
                if (d <= 0) {
                    last = c / (number)1200;
                } else {
                    last = rnbo_log2(c / d);
                }
    
                this->mtof_05_innerScala_sclExpMul->push(last);
            }
    
            this->mtof_05_innerScala_sclOctaveMul = last;
            this->mtof_05_innerScala_sclEntryCount = (int)(this->mtof_05_innerScala_sclExpMul->length);
    
            if (scl->length >= sclDataEntries + 3) {
                this->mtof_05_innerScala_kbmMid = (int)(scl[(Index)(sclDataEntries + 2)]);
                this->mtof_05_innerScala_kbmRefNum = (int)(scl[(Index)(sclDataEntries + 1)]);
                this->mtof_05_innerScala_kbmRefFreq = scl[(Index)(sclDataEntries + 0)];
                this->mtof_05_innerScala_kbmSize = (int)(0);
            }
    
            this->mtof_05_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    int mtof_05_innerScala_updateMap(list kbm) {
        if (kbm->length == 1 && kbm[0] == 0.0) {
            kbm = {0.0, 0.0, 0.0, 60.0, 69.0, 440.0};
        }
    
        if (kbm->length >= 6 && kbm[0] >= 0.0) {
            this->mtof_05_innerScala_lastValid = false;
            Index size = (Index)(kbm[0]);
            int octave = 12;
    
            if (kbm->length > 6) {
                octave = (int)(kbm[6]);
            }
    
            if (size > 0 && kbm->length < this->mtof_05_innerScala_KBM_MAP_OFFSET) {
                return 0;
            }
    
            this->mtof_05_innerScala_kbmSize = (int)(size);
            this->mtof_05_innerScala_kbmMin = (int)(kbm[1]);
            this->mtof_05_innerScala_kbmMax = (int)(kbm[2]);
            this->mtof_05_innerScala_kbmMid = (int)(kbm[3]);
            this->mtof_05_innerScala_kbmRefNum = (int)(kbm[4]);
            this->mtof_05_innerScala_kbmRefFreq = kbm[5];
            this->mtof_05_innerScala_kbmOctaveDegree = octave;
            this->mtof_05_innerScala_kbmValid = kbm;
            this->mtof_05_innerScala_kbmMapSize = (kbm->length - this->mtof_05_innerScala_KBM_MAP_OFFSET > kbm->length ? kbm->length : (kbm->length - this->mtof_05_innerScala_KBM_MAP_OFFSET < 0 ? 0 : kbm->length - this->mtof_05_innerScala_KBM_MAP_OFFSET));
            this->mtof_05_innerScala_updateRefFreq();
            return 1;
        }
    
        return 0;
    }
    
    void mtof_05_innerScala_updateLast(number note, number freq) {
        this->mtof_05_innerScala_lastValid = true;
        this->mtof_05_innerScala_lastNote = note;
        this->mtof_05_innerScala_lastFreq = freq;
    }
    
    array<number, 2> mtof_05_innerScala_hztodeg(number hz) {
        number hza = rnbo_abs(hz);
    
        number octave = rnbo_floor(
            rnbo_log2(hza / this->mtof_05_innerScala_refFreq) / this->mtof_05_innerScala_sclOctaveMul
        );
    
        int i = 0;
        number frac = 0;
        number n = 0;
    
        for (; i < this->mtof_05_innerScala_sclEntryCount; i++) {
            number c = this->mtof_05_innerScala_applySCLOctIndex(octave, i + 0, 0.0, this->mtof_05_innerScala_refFreq);
            n = this->mtof_05_innerScala_applySCLOctIndex(octave, i + 1, 0.0, this->mtof_05_innerScala_refFreq);
    
            if (c <= hza && hza < n) {
                if (c != hza) {
                    frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
                }
    
                break;
            }
        }
    
        if (i == this->mtof_05_innerScala_sclEntryCount && n != hza) {
            number c = n;
            n = this->mtof_05_innerScala_applySCLOctIndex(octave + 1, 0, 0.0, this->mtof_05_innerScala_refFreq);
            frac = rnbo_log2(hza / c) / rnbo_log2(n / c);
        }
    
        number deg = i + octave * this->mtof_05_innerScala_sclEntryCount;
    
        {
            deg = rnbo_fround((deg + frac) * 1 / (number)1) * 1;
            frac = 0.0;
        }
    
        return {deg, frac};
    }
    
    array<int, 2> mtof_05_innerScala_octdegree(int degree, int count) {
        int octave = 0;
        int index = 0;
    
        if (degree < 0) {
            octave = -(1 + (-1 - degree) / count);
            index = -degree % count;
    
            if (index > 0) {
                index = count - index;
            }
        } else {
            octave = degree / count;
            index = degree % count;
        }
    
        return {octave, index};
    }
    
    array<int, 2> mtof_05_innerScala_applyKBM(number note) {
        if ((this->mtof_05_innerScala_kbmMin == this->mtof_05_innerScala_kbmMax && this->mtof_05_innerScala_kbmMax == 0) || (note >= this->mtof_05_innerScala_kbmMin && note <= this->mtof_05_innerScala_kbmMax)) {
            int degree = (int)(rnbo_floor(note - this->mtof_05_innerScala_kbmMid));
    
            if (this->mtof_05_innerScala_kbmSize == 0) {
                return {degree, 1};
            }
    
            array<int, 2> octdeg = this->mtof_05_innerScala_octdegree(degree, this->mtof_05_innerScala_kbmSize);
            int octave = (int)(octdeg[0]);
            Index index = (Index)(octdeg[1]);
    
            if (this->mtof_05_innerScala_kbmMapSize > index) {
                degree = (int)(this->mtof_05_innerScala_kbmValid[(Index)(this->mtof_05_innerScala_KBM_MAP_OFFSET + index)]);
    
                if (degree >= 0) {
                    return {degree + octave * this->mtof_05_innerScala_kbmOctaveDegree, 1};
                }
            }
        }
    
        return {-1, 0};
    }
    
    number mtof_05_innerScala_applySCL(int degree, number frac, number refFreq) {
        array<int, 2> octdeg = this->mtof_05_innerScala_octdegree(degree, this->mtof_05_innerScala_sclEntryCount);
        return this->mtof_05_innerScala_applySCLOctIndex(octdeg[0], octdeg[1], frac, refFreq);
    }
    
    number mtof_05_innerScala_applySCLOctIndex(number octave, int index, number frac, number refFreq) {
        number p = 0;
    
        if (index > 0) {
            p = this->mtof_05_innerScala_sclExpMul[(Index)(index - 1)];
        }
    
        if (frac > 0) {
            p = this->linearinterp(frac, p, this->mtof_05_innerScala_sclExpMul[(Index)index]);
        } else if (frac < 0) {
            p = this->linearinterp(-frac, this->mtof_05_innerScala_sclExpMul[(Index)index], p);
        }
    
        return refFreq * rnbo_pow(2, p + octave * this->mtof_05_innerScala_sclOctaveMul);
    }
    
    void mtof_05_innerScala_updateRefFreq() {
        this->mtof_05_innerScala_lastValid = false;
        int refOffset = (int)(this->mtof_05_innerScala_kbmRefNum - this->mtof_05_innerScala_kbmMid);
    
        if (refOffset == 0) {
            this->mtof_05_innerScala_refFreq = this->mtof_05_innerScala_kbmRefFreq;
        } else {
            int base = (int)(this->mtof_05_innerScala_kbmSize);
    
            if (base < 1) {
                base = this->mtof_05_innerScala_sclEntryCount;
            }
    
            array<int, 2> octdeg = this->mtof_05_innerScala_octdegree(refOffset, base);
            number oct = (number)(octdeg[0]);
            int index = (int)(octdeg[1]);
    
            if (base > 0) {
                oct = oct + rnbo_floor(index / base);
                index = index % base;
            }
    
            if (index >= 0 && index < this->mtof_05_innerScala_kbmSize) {
                if (index < this->mtof_05_innerScala_kbmMapSize) {
                    index = (int)(this->mtof_05_innerScala_kbmValid[(Index)((Index)(index) + this->mtof_05_innerScala_KBM_MAP_OFFSET)]);
                } else {
                    index = -1;
                }
            }
    
            if (index < 0 || index > this->mtof_05_innerScala_sclExpMul->length)
                {} else {
                number p = 0;
    
                if (index > 0) {
                    p = this->mtof_05_innerScala_sclExpMul[(Index)(index - 1)];
                }
    
                this->mtof_05_innerScala_refFreq = this->mtof_05_innerScala_kbmRefFreq / rnbo_pow(2, p + oct * this->mtof_05_innerScala_sclOctaveMul);
            }
        }
    }
    
    void mtof_05_innerScala_reset() {
        this->mtof_05_innerScala_lastValid = false;
        this->mtof_05_innerScala_lastNote = 0;
        this->mtof_05_innerScala_lastFreq = 0;
        this->mtof_05_innerScala_sclEntryCount = 0;
        this->mtof_05_innerScala_sclOctaveMul = 1;
        this->mtof_05_innerScala_sclExpMul = {};
        this->mtof_05_innerScala_kbmValid = {0, 0, 0, 60, 69, 440};
        this->mtof_05_innerScala_kbmMid = 60;
        this->mtof_05_innerScala_kbmRefNum = 69;
        this->mtof_05_innerScala_kbmRefFreq = 440;
        this->mtof_05_innerScala_kbmSize = 0;
        this->mtof_05_innerScala_kbmMin = 0;
        this->mtof_05_innerScala_kbmMax = 0;
        this->mtof_05_innerScala_kbmOctaveDegree = 12;
        this->mtof_05_innerScala_kbmMapSize = 0;
        this->mtof_05_innerScala_refFreq = 261.63;
    }
    
    void mtof_05_init() {
        this->mtof_05_innerScala_update(this->mtof_05_scale, this->mtof_05_map);
    }
    
    void message_53_init() {
        this->message_53_set_set({1});
    }
    
    void message_54_init() {
        this->message_54_set_set({4});
    }
    
    void counter_02_inc() {
        this->counter_02_count = ((bool)(this->counter_02_phase) ? this->counter_02_count + 1 : this->counter_02_count - 1);
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        numberobj_19_value = 0;
        numberobj_19_value_setter(numberobj_19_value);
        mtof_01_base = 440;
        expr_01_in1 = 0;
        expr_01_in2 = 0;
        expr_01_out1 = 0;
        p_07_target = 0;
        intnum_01_input_number = 0;
        intnum_01_value = 0;
        p_08_target = 0;
        receive_03_output_number = 0;
        numberobj_20_value = 0;
        numberobj_20_value_setter(numberobj_20_value);
        mtof_02_base = 440;
        change_02_input = 0;
        change_02_out = 0;
        numberobj_21_value = 0;
        numberobj_21_value_setter(numberobj_21_value);
        expr_02_in1 = 0;
        expr_02_in2 = 0;
        expr_02_out1 = 0;
        numberobj_22_value = 0;
        numberobj_22_value_setter(numberobj_22_value);
        random_02_limit = 1;
        random_02_limit_setter(random_02_limit);
        random_02_seed = 0;
        receive_04_output_number = 0;
        numberobj_23_value = 0;
        numberobj_23_value_setter(numberobj_23_value);
        mtof_03_base = 440;
        expr_03_in1 = 0;
        expr_03_in2 = 0;
        expr_03_out1 = 0;
        numberobj_24_value = 0;
        numberobj_24_value_setter(numberobj_24_value);
        mtof_04_base = 440;
        expr_04_in1 = 0;
        expr_04_in2 = 0;
        expr_04_out1 = 0;
        switchobj_01_onoff = 0;
        mtof_05_base = 440;
        expr_05_in1 = 0;
        expr_05_in2 = 12;
        expr_05_out1 = 0;
        expr_06_in1 = 0;
        expr_06_in2 = 1;
        expr_06_out1 = 0;
        send_01_input_number = 0;
        counter_02_carryflag = 0;
        counter_02_direction = 0;
        counter_02_resetnext_number = 0;
        counter_02_resetnow_number = 0;
        counter_02_maximum = 2;
        counter_02_output = 0;
        counter_02_underflow_number = 0;
        counter_02_overflow_number = 0;
        counter_02_carry = 0;
        counter_02_minimum = 0;
        send_02_input_number = 0;
        send_03_input_number = 0;
        expr_07_in1 = 0;
        expr_07_in2 = 12;
        expr_07_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        numberobj_19_currentFormat = 6;
        numberobj_19_lastValue = 0;
        mtof_01_innerMtoF_lastInValue = 0;
        mtof_01_innerMtoF_lastOutValue = 0;
        mtof_01_innerMtoF_lastTuning = 0;
        mtof_01_innerScala_lastValid = false;
        mtof_01_innerScala_lastNote = 0;
        mtof_01_innerScala_lastFreq = 0;
        mtof_01_innerScala_sclEntryCount = 0;
        mtof_01_innerScala_sclOctaveMul = 1;
        mtof_01_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_01_innerScala_kbmMid = 60;
        mtof_01_innerScala_kbmRefNum = 69;
        mtof_01_innerScala_kbmRefFreq = 440;
        mtof_01_innerScala_kbmSize = 0;
        mtof_01_innerScala_kbmMin = 0;
        mtof_01_innerScala_kbmMax = 0;
        mtof_01_innerScala_kbmOctaveDegree = 12;
        mtof_01_innerScala_kbmMapSize = 0;
        mtof_01_innerScala_refFreq = 261.63;
        intnum_01_stored = 1;
        numberobj_20_currentFormat = 6;
        numberobj_20_lastValue = 0;
        mtof_02_innerMtoF_lastInValue = 0;
        mtof_02_innerMtoF_lastOutValue = 0;
        mtof_02_innerMtoF_lastTuning = 0;
        mtof_02_innerScala_lastValid = false;
        mtof_02_innerScala_lastNote = 0;
        mtof_02_innerScala_lastFreq = 0;
        mtof_02_innerScala_sclEntryCount = 0;
        mtof_02_innerScala_sclOctaveMul = 1;
        mtof_02_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_02_innerScala_kbmMid = 60;
        mtof_02_innerScala_kbmRefNum = 69;
        mtof_02_innerScala_kbmRefFreq = 440;
        mtof_02_innerScala_kbmSize = 0;
        mtof_02_innerScala_kbmMin = 0;
        mtof_02_innerScala_kbmMax = 0;
        mtof_02_innerScala_kbmOctaveDegree = 12;
        mtof_02_innerScala_kbmMapSize = 0;
        mtof_02_innerScala_refFreq = 261.63;
        numberobj_21_currentFormat = 6;
        numberobj_21_lastValue = 0;
        numberobj_22_currentFormat = 6;
        numberobj_22_lastValue = 0;
        numberobj_23_currentFormat = 6;
        numberobj_23_lastValue = 0;
        mtof_03_innerMtoF_lastInValue = 0;
        mtof_03_innerMtoF_lastOutValue = 0;
        mtof_03_innerMtoF_lastTuning = 0;
        mtof_03_innerScala_lastValid = false;
        mtof_03_innerScala_lastNote = 0;
        mtof_03_innerScala_lastFreq = 0;
        mtof_03_innerScala_sclEntryCount = 0;
        mtof_03_innerScala_sclOctaveMul = 1;
        mtof_03_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_03_innerScala_kbmMid = 60;
        mtof_03_innerScala_kbmRefNum = 69;
        mtof_03_innerScala_kbmRefFreq = 440;
        mtof_03_innerScala_kbmSize = 0;
        mtof_03_innerScala_kbmMin = 0;
        mtof_03_innerScala_kbmMax = 0;
        mtof_03_innerScala_kbmOctaveDegree = 12;
        mtof_03_innerScala_kbmMapSize = 0;
        mtof_03_innerScala_refFreq = 261.63;
        numberobj_24_currentFormat = 6;
        numberobj_24_lastValue = 0;
        mtof_04_innerMtoF_lastInValue = 0;
        mtof_04_innerMtoF_lastOutValue = 0;
        mtof_04_innerMtoF_lastTuning = 0;
        mtof_04_innerScala_lastValid = false;
        mtof_04_innerScala_lastNote = 0;
        mtof_04_innerScala_lastFreq = 0;
        mtof_04_innerScala_sclEntryCount = 0;
        mtof_04_innerScala_sclOctaveMul = 1;
        mtof_04_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_04_innerScala_kbmMid = 60;
        mtof_04_innerScala_kbmRefNum = 69;
        mtof_04_innerScala_kbmRefFreq = 440;
        mtof_04_innerScala_kbmSize = 0;
        mtof_04_innerScala_kbmMin = 0;
        mtof_04_innerScala_kbmMax = 0;
        mtof_04_innerScala_kbmOctaveDegree = 12;
        mtof_04_innerScala_kbmMapSize = 0;
        mtof_04_innerScala_refFreq = 261.63;
        mtof_05_innerMtoF_lastInValue = 0;
        mtof_05_innerMtoF_lastOutValue = 0;
        mtof_05_innerMtoF_lastTuning = 0;
        mtof_05_innerScala_lastValid = false;
        mtof_05_innerScala_lastNote = 0;
        mtof_05_innerScala_lastFreq = 0;
        mtof_05_innerScala_sclEntryCount = 0;
        mtof_05_innerScala_sclOctaveMul = 1;
        mtof_05_innerScala_kbmValid = { 0, 0, 0, 60, 69, 440 };
        mtof_05_innerScala_kbmMid = 60;
        mtof_05_innerScala_kbmRefNum = 69;
        mtof_05_innerScala_kbmRefFreq = 440;
        mtof_05_innerScala_kbmSize = 0;
        mtof_05_innerScala_kbmMin = 0;
        mtof_05_innerScala_kbmMax = 0;
        mtof_05_innerScala_kbmOctaveDegree = 12;
        mtof_05_innerScala_kbmMapSize = 0;
        mtof_05_innerScala_refFreq = 261.63;
        counter_02_count = 0;
        counter_02_phase = true;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        list message_48_set;
        number numberobj_19_value;
        list mtof_01_midivalue;
        list mtof_01_scale;
        list mtof_01_map;
        number mtof_01_base;
        number expr_01_in1;
        number expr_01_in2;
        number expr_01_out1;
        number p_07_target;
        number intnum_01_input_number;
        number intnum_01_value;
        number p_08_target;
        number receive_03_output_number;
        list receive_03_output_list;
        list listindex_01_input;
        list listindex_01_index;
        list message_49_set;
        number numberobj_20_value;
        list mtof_02_midivalue;
        list mtof_02_scale;
        list mtof_02_map;
        number mtof_02_base;
        number change_02_input;
        number change_02_out;
        number numberobj_21_value;
        number expr_02_in1;
        number expr_02_in2;
        number expr_02_out1;
        number numberobj_22_value;
        number random_02_limit;
        number random_02_seed;
        number receive_04_output_number;
        list receive_04_output_list;
        list listlen_01_input;
        number numberobj_23_value;
        list mtof_03_midivalue;
        list mtof_03_scale;
        list mtof_03_map;
        number mtof_03_base;
        number expr_03_in1;
        number expr_03_in2;
        number expr_03_out1;
        list message_50_set;
        list message_51_set;
        number numberobj_24_value;
        list message_52_set;
        list mtof_04_midivalue;
        list mtof_04_scale;
        list mtof_04_map;
        number mtof_04_base;
        number expr_04_in1;
        number expr_04_in2;
        number expr_04_out1;
        number switchobj_01_onoff;
        list mtof_05_midivalue;
        list mtof_05_scale;
        list mtof_05_map;
        number mtof_05_base;
        number expr_05_in1;
        number expr_05_in2;
        number expr_05_out1;
        number expr_06_in1;
        number expr_06_in2;
        number expr_06_out1;
        list message_53_set;
        number send_01_input_number;
        list send_01_input_list;
        list message_54_set;
        Int counter_02_carryflag;
        number counter_02_direction;
        number counter_02_resetnext_number;
        number counter_02_resetnow_number;
        number counter_02_maximum;
        number counter_02_output;
        number counter_02_underflow_number;
        number counter_02_overflow_number;
        number counter_02_carry;
        number counter_02_minimum;
        number send_02_input_number;
        list send_02_input_list;
        number send_03_input_number;
        list send_03_input_list;
        number expr_07_in1;
        number expr_07_in2;
        number expr_07_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        Int numberobj_19_currentFormat;
        number numberobj_19_lastValue;
        number mtof_01_innerMtoF_lastInValue;
        number mtof_01_innerMtoF_lastOutValue;
        number mtof_01_innerMtoF_lastTuning;
        Float64BufferRef mtof_01_innerMtoF_buffer;
        const Index mtof_01_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_01_innerScala_lastValid;
        number mtof_01_innerScala_lastNote;
        number mtof_01_innerScala_lastFreq;
        int mtof_01_innerScala_sclEntryCount;
        number mtof_01_innerScala_sclOctaveMul;
        list mtof_01_innerScala_sclExpMul;
        list mtof_01_innerScala_kbmValid;
        int mtof_01_innerScala_kbmMid;
        int mtof_01_innerScala_kbmRefNum;
        number mtof_01_innerScala_kbmRefFreq;
        int mtof_01_innerScala_kbmSize;
        int mtof_01_innerScala_kbmMin;
        int mtof_01_innerScala_kbmMax;
        int mtof_01_innerScala_kbmOctaveDegree;
        Index mtof_01_innerScala_kbmMapSize;
        number mtof_01_innerScala_refFreq;
        number intnum_01_stored;
        Int numberobj_20_currentFormat;
        number numberobj_20_lastValue;
        number mtof_02_innerMtoF_lastInValue;
        number mtof_02_innerMtoF_lastOutValue;
        number mtof_02_innerMtoF_lastTuning;
        Float64BufferRef mtof_02_innerMtoF_buffer;
        const Index mtof_02_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_02_innerScala_lastValid;
        number mtof_02_innerScala_lastNote;
        number mtof_02_innerScala_lastFreq;
        int mtof_02_innerScala_sclEntryCount;
        number mtof_02_innerScala_sclOctaveMul;
        list mtof_02_innerScala_sclExpMul;
        list mtof_02_innerScala_kbmValid;
        int mtof_02_innerScala_kbmMid;
        int mtof_02_innerScala_kbmRefNum;
        number mtof_02_innerScala_kbmRefFreq;
        int mtof_02_innerScala_kbmSize;
        int mtof_02_innerScala_kbmMin;
        int mtof_02_innerScala_kbmMax;
        int mtof_02_innerScala_kbmOctaveDegree;
        Index mtof_02_innerScala_kbmMapSize;
        number mtof_02_innerScala_refFreq;
        number change_02_prev;
        Int numberobj_21_currentFormat;
        number numberobj_21_lastValue;
        Int numberobj_22_currentFormat;
        number numberobj_22_lastValue;
        UInt random_02_nz_state[4] = { };
        Int numberobj_23_currentFormat;
        number numberobj_23_lastValue;
        number mtof_03_innerMtoF_lastInValue;
        number mtof_03_innerMtoF_lastOutValue;
        number mtof_03_innerMtoF_lastTuning;
        Float64BufferRef mtof_03_innerMtoF_buffer;
        const Index mtof_03_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_03_innerScala_lastValid;
        number mtof_03_innerScala_lastNote;
        number mtof_03_innerScala_lastFreq;
        int mtof_03_innerScala_sclEntryCount;
        number mtof_03_innerScala_sclOctaveMul;
        list mtof_03_innerScala_sclExpMul;
        list mtof_03_innerScala_kbmValid;
        int mtof_03_innerScala_kbmMid;
        int mtof_03_innerScala_kbmRefNum;
        number mtof_03_innerScala_kbmRefFreq;
        int mtof_03_innerScala_kbmSize;
        int mtof_03_innerScala_kbmMin;
        int mtof_03_innerScala_kbmMax;
        int mtof_03_innerScala_kbmOctaveDegree;
        Index mtof_03_innerScala_kbmMapSize;
        number mtof_03_innerScala_refFreq;
        Int numberobj_24_currentFormat;
        number numberobj_24_lastValue;
        number mtof_04_innerMtoF_lastInValue;
        number mtof_04_innerMtoF_lastOutValue;
        number mtof_04_innerMtoF_lastTuning;
        Float64BufferRef mtof_04_innerMtoF_buffer;
        const Index mtof_04_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_04_innerScala_lastValid;
        number mtof_04_innerScala_lastNote;
        number mtof_04_innerScala_lastFreq;
        int mtof_04_innerScala_sclEntryCount;
        number mtof_04_innerScala_sclOctaveMul;
        list mtof_04_innerScala_sclExpMul;
        list mtof_04_innerScala_kbmValid;
        int mtof_04_innerScala_kbmMid;
        int mtof_04_innerScala_kbmRefNum;
        number mtof_04_innerScala_kbmRefFreq;
        int mtof_04_innerScala_kbmSize;
        int mtof_04_innerScala_kbmMin;
        int mtof_04_innerScala_kbmMax;
        int mtof_04_innerScala_kbmOctaveDegree;
        Index mtof_04_innerScala_kbmMapSize;
        number mtof_04_innerScala_refFreq;
        number mtof_05_innerMtoF_lastInValue;
        number mtof_05_innerMtoF_lastOutValue;
        number mtof_05_innerMtoF_lastTuning;
        Float64BufferRef mtof_05_innerMtoF_buffer;
        const Index mtof_05_innerScala_KBM_MAP_OFFSET = 7;
        bool mtof_05_innerScala_lastValid;
        number mtof_05_innerScala_lastNote;
        number mtof_05_innerScala_lastFreq;
        int mtof_05_innerScala_sclEntryCount;
        number mtof_05_innerScala_sclOctaveMul;
        list mtof_05_innerScala_sclExpMul;
        list mtof_05_innerScala_kbmValid;
        int mtof_05_innerScala_kbmMid;
        int mtof_05_innerScala_kbmRefNum;
        number mtof_05_innerScala_kbmRefFreq;
        int mtof_05_innerScala_kbmSize;
        int mtof_05_innerScala_kbmMin;
        int mtof_05_innerScala_kbmMax;
        int mtof_05_innerScala_kbmOctaveDegree;
        Index mtof_05_innerScala_kbmMapSize;
        number mtof_05_innerScala_refFreq;
        number counter_02_count;
        bool counter_02_phase;
        number stackprotect_count;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_88* p_07;
        RNBOSubpatcher_89* p_08;
    
};

class RNBOSubpatcher_100 : public PatcherInterfaceImpl {
    
    friend class rnbomatic;
    
    public:
    
    class RNBOSubpatcher_90 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_100;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_90()
            {
            }
            
            ~RNBOSubpatcher_90()
            {
            }
            
            virtual RNBOSubpatcher_100* getPatcher() const {
                return static_cast<RNBOSubpatcher_100 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number safemod(number f, number m) {
                if (m != 0) {
                    Int f_trunc = (Int)(trunc(f));
                    Int m_trunc = (Int)(trunc(m));
            
                    if (f == f_trunc && m == m_trunc) {
                        f = f_trunc % m_trunc;
                    } else {
                        if (m < 0) {
                            m = -m;
                        }
            
                        if (f >= m) {
                            if (f >= m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f -= m;
                            }
                        } else if (f <= -m) {
                            if (f <= -m * 2.0) {
                                number d = f / m;
                                Int i = (Int)(trunc(d));
                                d = d - i;
                                f = d * m;
                            } else {
                                f += m;
                            }
                        }
                    }
                } else {
                    f = 0.0;
                }
            
                return f;
            }
            
            inline number safesqrt(number num) {
                return (num > 0.0 ? rnbo_sqrt(num) : 0.0);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                this->xfade_tilde_01_perform(in5, in1, in3, out1, n);
                this->xfade_tilde_02_perform(in5, in2, in4, out2, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 5;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void xfade_tilde_01_perform(
                const Sample * pos,
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_01_func_next(pos[(Index)i], 1);
                }
            }
            
            void xfade_tilde_02_perform(
                const Sample * pos,
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 0) + in2[(Index)i] * this->xfade_tilde_02_func_next(pos[(Index)i], 1);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            number xfade_tilde_01_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            if (pos > nchan_1)
                                pos = nchan_1;
                            else if (pos < 0)
                                pos = 0;
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                return rnbo_cos(1.57079632679489661923 * pos);
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void xfade_tilde_01_func_reset() {}
            
            number xfade_tilde_02_func_next(number pos, int channel) {
                {
                    {
                        number nchan_1 = 2 - 1;
            
                        {
                            pos = pos * nchan_1;
                        }
            
                        {
                            if (pos > nchan_1)
                                pos = nchan_1;
                            else if (pos < 0)
                                pos = 0;
                        }
            
                        pos = pos - channel;
            
                        if (pos > -1 && pos < 1) {
                            {
                                return rnbo_cos(1.57079632679489661923 * pos);
                            }
                        } else {
                            return 0;
                        }
                    }
                }
            }
            
            void xfade_tilde_02_func_reset() {}
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                xfade_tilde_01_pos = 0;
                xfade_tilde_02_pos = 0;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number xfade_tilde_01_pos;
                number xfade_tilde_02_pos;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_91 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_100;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_91()
            {
            }
            
            ~RNBOSubpatcher_91()
            {
            }
            
            virtual RNBOSubpatcher_100* getPatcher() const {
                return static_cast<RNBOSubpatcher_100 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                SampleValue * out5 = (numOutputs >= 5 && outputs[4] ? outputs[4] : this->dummyBuffer);
                SampleValue * out6 = (numOutputs >= 6 && outputs[5] ? outputs[5] : this->dummyBuffer);
                SampleValue * out7 = (numOutputs >= 7 && outputs[6] ? outputs[6] : this->dummyBuffer);
                SampleValue * out8 = (numOutputs >= 8 && outputs[7] ? outputs[7] : this->dummyBuffer);
                SampleValue * out9 = (numOutputs >= 9 && outputs[8] ? outputs[8] : this->dummyBuffer);
                SampleValue * out10 = (numOutputs >= 10 && outputs[9] ? outputs[9] : this->dummyBuffer);
                SampleValue * out11 = (numOutputs >= 11 && outputs[10] ? outputs[10] : this->dummyBuffer);
                SampleValue * out12 = (numOutputs >= 12 && outputs[11] ? outputs[11] : this->dummyBuffer);
                SampleValue * out13 = (numOutputs >= 13 && outputs[12] ? outputs[12] : this->dummyBuffer);
                SampleValue * out14 = (numOutputs >= 14 && outputs[13] ? outputs[13] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                const SampleValue * in8 = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                this->signalforwarder_06_perform(in1, out2, n);
                this->signalforwarder_07_perform(in1, out1, n);
                this->signalforwarder_08_perform(in2, out12, n);
                this->signalforwarder_09_perform(in3, out13, n);
                this->signalforwarder_10_perform(in3, out3, n);
                this->signalforwarder_11_perform(in4, out14, n);
                this->signalforwarder_12_perform(in4, out4, n);
                this->signalforwarder_13_perform(in5, out8, n);
                this->signalforwarder_14_perform(in5, out9, n);
                this->signalforwarder_15_perform(in6, out5, n);
                this->signalforwarder_16_perform(in7, out10, n);
                this->signalforwarder_17_perform(in7, out6, n);
                this->signalforwarder_18_perform(in8, out11, n);
                this->signalforwarder_19_perform(in8, out7, n);
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                RNBO_UNUSED(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 8;
            }
            
            Index getNumOutputChannels() const {
                return 14;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void signalforwarder_06_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_07_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_08_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_09_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_10_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_11_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_12_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_13_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_14_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_15_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_16_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_17_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_18_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_19_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_92 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_100;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_92()
            {
            }
            
            ~RNBOSubpatcher_92()
            {
            }
            
            virtual RNBOSubpatcher_100* getPatcher() const {
                return static_cast<RNBOSubpatcher_100 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
            
                this->allpass_tilde_04_perform(
                    in1,
                    this->allpass_tilde_04_delayTime,
                    this->allpass_tilde_04_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_03_perform(
                    this->signals[0],
                    this->allpass_tilde_03_delayTime,
                    this->allpass_tilde_03_gain,
                    this->signals[1],
                    n
                );
            
                this->allpass_tilde_02_perform(
                    this->signals[1],
                    this->allpass_tilde_02_delayTime,
                    this->allpass_tilde_02_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_01_perform(
                    this->signals[0],
                    this->allpass_tilde_01_delayTime,
                    this->allpass_tilde_01_gain,
                    out1,
                    n
                );
            
                this->allpass_tilde_08_perform(
                    in2,
                    this->allpass_tilde_08_delayTime,
                    this->allpass_tilde_08_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_07_perform(
                    this->signals[0],
                    this->allpass_tilde_07_delayTime,
                    this->allpass_tilde_07_gain,
                    this->signals[1],
                    n
                );
            
                this->allpass_tilde_06_perform(
                    this->signals[1],
                    this->allpass_tilde_06_delayTime,
                    this->allpass_tilde_06_gain,
                    this->signals[0],
                    n
                );
            
                this->allpass_tilde_05_perform(
                    this->signals[0],
                    this->allpass_tilde_05_delayTime,
                    this->allpass_tilde_05_gain,
                    out2,
                    n
                );
            
                this->stackprotect_perform(n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 2; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->allpass_tilde_04_dspsetup(forceDSPSetup);
                this->allpass_tilde_03_dspsetup(forceDSPSetup);
                this->allpass_tilde_02_dspsetup(forceDSPSetup);
                this->allpass_tilde_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_08_dspsetup(forceDSPSetup);
                this->allpass_tilde_07_dspsetup(forceDSPSetup);
                this->allpass_tilde_06_dspsetup(forceDSPSetup);
                this->allpass_tilde_05_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 0;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->allpass_tilde_01_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->allpass_tilde_01_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->allpass_tilde_02_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->allpass_tilde_02_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->allpass_tilde_03_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->allpass_tilde_03_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->allpass_tilde_04_feedForward_bufferobj);
                    break;
                    }
                case 11:
                    {
                    return addressOf(this->allpass_tilde_04_feedBack_bufferobj);
                    break;
                    }
                case 12:
                    {
                    return addressOf(this->allpass_tilde_05_feedForward_bufferobj);
                    break;
                    }
                case 13:
                    {
                    return addressOf(this->allpass_tilde_05_feedBack_bufferobj);
                    break;
                    }
                case 14:
                    {
                    return addressOf(this->allpass_tilde_06_feedForward_bufferobj);
                    break;
                    }
                case 15:
                    {
                    return addressOf(this->allpass_tilde_06_feedBack_bufferobj);
                    break;
                    }
                case 16:
                    {
                    return addressOf(this->allpass_tilde_07_feedForward_bufferobj);
                    break;
                    }
                case 17:
                    {
                    return addressOf(this->allpass_tilde_07_feedBack_bufferobj);
                    break;
                    }
                case 18:
                    {
                    return addressOf(this->allpass_tilde_08_feedForward_bufferobj);
                    break;
                    }
                case 19:
                    {
                    return addressOf(this->allpass_tilde_08_feedBack_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 16;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
                }
            
                if (index == 11) {
                    this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
                }
            
                if (index == 12) {
                    this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
                }
            
                if (index == 13) {
                    this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
                }
            
                if (index == 14) {
                    this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
                }
            
                if (index == 15) {
                    this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
                }
            
                if (index == 16) {
                    this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
                }
            
                if (index == 17) {
                    this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
                }
            
                if (index == 18) {
                    this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
                }
            
                if (index == 19) {
                    this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_01_feedForward_bufferobj = initDataRef("allpass_tilde_01_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_01_feedBack_bufferobj = initDataRef("allpass_tilde_01_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_02_feedForward_bufferobj = initDataRef("allpass_tilde_02_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_02_feedBack_bufferobj = initDataRef("allpass_tilde_02_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_03_feedForward_bufferobj = initDataRef("allpass_tilde_03_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_03_feedBack_bufferobj = initDataRef("allpass_tilde_03_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_04_feedForward_bufferobj = initDataRef("allpass_tilde_04_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_04_feedBack_bufferobj = initDataRef("allpass_tilde_04_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_05_feedForward_bufferobj = initDataRef("allpass_tilde_05_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_05_feedBack_bufferobj = initDataRef("allpass_tilde_05_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_06_feedForward_bufferobj = initDataRef("allpass_tilde_06_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_06_feedBack_bufferobj = initDataRef("allpass_tilde_06_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_07_feedForward_bufferobj = initDataRef("allpass_tilde_07_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_07_feedBack_bufferobj = initDataRef("allpass_tilde_07_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_08_feedForward_bufferobj = initDataRef("allpass_tilde_08_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_08_feedBack_bufferobj = initDataRef("allpass_tilde_08_feedBack_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_01_feedForward_bufferobj->setIndex(4);
                this->allpass_tilde_01_feedForward_buffer = new Float64Buffer(this->allpass_tilde_01_feedForward_bufferobj);
                this->allpass_tilde_01_feedBack_bufferobj->setIndex(5);
                this->allpass_tilde_01_feedBack_buffer = new Float64Buffer(this->allpass_tilde_01_feedBack_bufferobj);
                this->allpass_tilde_02_feedForward_bufferobj->setIndex(6);
                this->allpass_tilde_02_feedForward_buffer = new Float64Buffer(this->allpass_tilde_02_feedForward_bufferobj);
                this->allpass_tilde_02_feedBack_bufferobj->setIndex(7);
                this->allpass_tilde_02_feedBack_buffer = new Float64Buffer(this->allpass_tilde_02_feedBack_bufferobj);
                this->allpass_tilde_03_feedForward_bufferobj->setIndex(8);
                this->allpass_tilde_03_feedForward_buffer = new Float64Buffer(this->allpass_tilde_03_feedForward_bufferobj);
                this->allpass_tilde_03_feedBack_bufferobj->setIndex(9);
                this->allpass_tilde_03_feedBack_buffer = new Float64Buffer(this->allpass_tilde_03_feedBack_bufferobj);
                this->allpass_tilde_04_feedForward_bufferobj->setIndex(10);
                this->allpass_tilde_04_feedForward_buffer = new Float64Buffer(this->allpass_tilde_04_feedForward_bufferobj);
                this->allpass_tilde_04_feedBack_bufferobj->setIndex(11);
                this->allpass_tilde_04_feedBack_buffer = new Float64Buffer(this->allpass_tilde_04_feedBack_bufferobj);
                this->allpass_tilde_05_feedForward_bufferobj->setIndex(12);
                this->allpass_tilde_05_feedForward_buffer = new Float64Buffer(this->allpass_tilde_05_feedForward_bufferobj);
                this->allpass_tilde_05_feedBack_bufferobj->setIndex(13);
                this->allpass_tilde_05_feedBack_buffer = new Float64Buffer(this->allpass_tilde_05_feedBack_bufferobj);
                this->allpass_tilde_06_feedForward_bufferobj->setIndex(14);
                this->allpass_tilde_06_feedForward_buffer = new Float64Buffer(this->allpass_tilde_06_feedForward_bufferobj);
                this->allpass_tilde_06_feedBack_bufferobj->setIndex(15);
                this->allpass_tilde_06_feedBack_buffer = new Float64Buffer(this->allpass_tilde_06_feedBack_bufferobj);
                this->allpass_tilde_07_feedForward_bufferobj->setIndex(16);
                this->allpass_tilde_07_feedForward_buffer = new Float64Buffer(this->allpass_tilde_07_feedForward_bufferobj);
                this->allpass_tilde_07_feedBack_bufferobj->setIndex(17);
                this->allpass_tilde_07_feedBack_buffer = new Float64Buffer(this->allpass_tilde_07_feedBack_bufferobj);
                this->allpass_tilde_08_feedForward_bufferobj->setIndex(18);
                this->allpass_tilde_08_feedForward_buffer = new Float64Buffer(this->allpass_tilde_08_feedForward_bufferobj);
                this->allpass_tilde_08_feedBack_bufferobj->setIndex(19);
                this->allpass_tilde_08_feedBack_buffer = new Float64Buffer(this->allpass_tilde_08_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {
                this->allpass_tilde_01_feedForward_init();
                this->allpass_tilde_01_feedBack_init();
                this->allpass_tilde_01_init();
                this->allpass_tilde_02_feedForward_init();
                this->allpass_tilde_02_feedBack_init();
                this->allpass_tilde_02_init();
                this->allpass_tilde_03_feedForward_init();
                this->allpass_tilde_03_feedBack_init();
                this->allpass_tilde_03_init();
                this->allpass_tilde_04_feedForward_init();
                this->allpass_tilde_04_feedBack_init();
                this->allpass_tilde_04_init();
                this->allpass_tilde_05_feedForward_init();
                this->allpass_tilde_05_feedBack_init();
                this->allpass_tilde_05_init();
                this->allpass_tilde_06_feedForward_init();
                this->allpass_tilde_06_feedBack_init();
                this->allpass_tilde_06_init();
                this->allpass_tilde_07_feedForward_init();
                this->allpass_tilde_07_feedBack_init();
                this->allpass_tilde_07_init();
                this->allpass_tilde_08_feedForward_init();
                this->allpass_tilde_08_feedBack_init();
                this->allpass_tilde_08_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_01_feedForward_buffer = this->allpass_tilde_01_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_01_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_01_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->allpass_tilde_01_feedBack_buffer = this->allpass_tilde_01_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_01_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_01_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->allpass_tilde_02_feedForward_buffer = this->allpass_tilde_02_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_02_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_02_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->allpass_tilde_02_feedBack_buffer = this->allpass_tilde_02_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_02_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_02_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->allpass_tilde_03_feedForward_buffer = this->allpass_tilde_03_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_03_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_03_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_03_feedBack_buffer = this->allpass_tilde_03_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_03_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_03_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->allpass_tilde_04_feedForward_buffer = this->allpass_tilde_04_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_04_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_04_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->allpass_tilde_04_feedBack_buffer = this->allpass_tilde_04_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_04_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_04_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->allpass_tilde_05_feedForward_buffer = this->allpass_tilde_05_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_05_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_05_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->allpass_tilde_05_feedBack_buffer = this->allpass_tilde_05_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_05_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_05_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->allpass_tilde_06_feedForward_buffer = this->allpass_tilde_06_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_06_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_06_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->allpass_tilde_06_feedBack_buffer = this->allpass_tilde_06_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_06_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_06_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->allpass_tilde_07_feedForward_buffer = this->allpass_tilde_07_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_07_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_07_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->allpass_tilde_07_feedBack_buffer = this->allpass_tilde_07_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_07_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_07_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            
                this->allpass_tilde_08_feedForward_buffer = this->allpass_tilde_08_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_08_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_08_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(18);
                }
            
                this->allpass_tilde_08_feedBack_buffer = this->allpass_tilde_08_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_08_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_08_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(19);
                }
            }
            
            void allpass_tilde_04_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    auto delayTimeinSamps = this->mstosamps(4.76);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_04_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_04_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_04_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_04_feedBack_write(ov);
                    this->allpass_tilde_04_feedForward_step();
                    this->allpass_tilde_04_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_03_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    auto delayTimeinSamps = this->mstosamps(3.58);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_03_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_03_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_03_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_03_feedBack_write(ov);
                    this->allpass_tilde_03_feedForward_step();
                    this->allpass_tilde_03_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_02_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    auto delayTimeinSamps = this->mstosamps(12.73);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_02_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_02_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_02_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_02_feedBack_write(ov);
                    this->allpass_tilde_02_feedForward_step();
                    this->allpass_tilde_02_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_01_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    auto delayTimeinSamps = this->mstosamps(9.3);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_01_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_01_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_01_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_01_feedBack_write(ov);
                    this->allpass_tilde_01_feedForward_step();
                    this->allpass_tilde_01_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_08_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    auto delayTimeinSamps = this->mstosamps(4.76);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_08_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_08_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_08_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_08_feedBack_write(ov);
                    this->allpass_tilde_08_feedForward_step();
                    this->allpass_tilde_08_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_07_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.75;
                    auto delayTimeinSamps = this->mstosamps(3.58);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_07_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_07_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_07_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_07_feedBack_write(ov);
                    this->allpass_tilde_07_feedForward_step();
                    this->allpass_tilde_07_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_06_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    auto delayTimeinSamps = this->mstosamps(12.73);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_06_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_06_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_06_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_06_feedBack_write(ov);
                    this->allpass_tilde_06_feedForward_step();
                    this->allpass_tilde_06_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void allpass_tilde_05_perform(
                const Sample * x,
                number delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                RNBO_UNUSED(delayTime);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.625;
                    auto delayTimeinSamps = this->mstosamps(9.3);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_05_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_05_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_05_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_05_feedBack_write(ov);
                    this->allpass_tilde_05_feedForward_step();
                    this->allpass_tilde_05_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void allpass_tilde_01_feedForward_step() {
                this->allpass_tilde_01_feedForward_reader++;
            
                if (this->allpass_tilde_01_feedForward_reader >= (int)(this->allpass_tilde_01_feedForward_buffer->getSize()))
                    this->allpass_tilde_01_feedForward_reader = 0;
            }
            
            number allpass_tilde_01_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? 1 + this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ), this->allpass_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_01_feedForward_buffer->getSize()) + this->allpass_tilde_01_feedForward_reader - ((size > this->allpass_tilde_01_feedForward__maxdelay ? this->allpass_tilde_01_feedForward__maxdelay : (size < (this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer) ? this->allpass_tilde_01_feedForward_reader != this->allpass_tilde_01_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_01_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedForward_wrap))
                );
            }
            
            void allpass_tilde_01_feedForward_write(number v) {
                this->allpass_tilde_01_feedForward_writer = this->allpass_tilde_01_feedForward_reader;
                this->allpass_tilde_01_feedForward_buffer[(Index)this->allpass_tilde_01_feedForward_writer] = v;
            }
            
            number allpass_tilde_01_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedForward__maxdelay : size);
                number val = this->allpass_tilde_01_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_01_feedForward_write(v);
                this->allpass_tilde_01_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_01_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_01_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_01_feedForward_init() {
                auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
                this->allpass_tilde_01_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_01_feedForward_clear() {
                this->allpass_tilde_01_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_01_feedForward_reset() {
                auto result = this->allpass_tilde_01_feedForward_calcSizeInSamples();
                this->allpass_tilde_01_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_01_feedForward_buffer);
                this->allpass_tilde_01_feedForward_wrap = this->allpass_tilde_01_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_01_feedForward_clear();
            
                if (this->allpass_tilde_01_feedForward_reader >= this->allpass_tilde_01_feedForward__maxdelay || this->allpass_tilde_01_feedForward_writer >= this->allpass_tilde_01_feedForward__maxdelay) {
                    this->allpass_tilde_01_feedForward_reader = 0;
                    this->allpass_tilde_01_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_01_feedForward_dspsetup() {
                this->allpass_tilde_01_feedForward_reset();
            }
            
            number allpass_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_01_feedForward_size() {
                return this->allpass_tilde_01_feedForward__maxdelay;
            }
            
            void allpass_tilde_01_feedBack_step() {
                this->allpass_tilde_01_feedBack_reader++;
            
                if (this->allpass_tilde_01_feedBack_reader >= (int)(this->allpass_tilde_01_feedBack_buffer->getSize()))
                    this->allpass_tilde_01_feedBack_reader = 0;
            }
            
            number allpass_tilde_01_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? 1 + this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ), this->allpass_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_01_feedBack_buffer->getSize()) + this->allpass_tilde_01_feedBack_reader - ((size > this->allpass_tilde_01_feedBack__maxdelay ? this->allpass_tilde_01_feedBack__maxdelay : (size < (this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer) ? this->allpass_tilde_01_feedBack_reader != this->allpass_tilde_01_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_01_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_01_feedBack_wrap))
                );
            }
            
            void allpass_tilde_01_feedBack_write(number v) {
                this->allpass_tilde_01_feedBack_writer = this->allpass_tilde_01_feedBack_reader;
                this->allpass_tilde_01_feedBack_buffer[(Index)this->allpass_tilde_01_feedBack_writer] = v;
            }
            
            number allpass_tilde_01_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_01_feedBack__maxdelay : size);
                number val = this->allpass_tilde_01_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_01_feedBack_write(v);
                this->allpass_tilde_01_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_01_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_01_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_01_feedBack_init() {
                auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
                this->allpass_tilde_01_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_01_feedBack_clear() {
                this->allpass_tilde_01_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_01_feedBack_reset() {
                auto result = this->allpass_tilde_01_feedBack_calcSizeInSamples();
                this->allpass_tilde_01_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_01_feedBack_buffer);
                this->allpass_tilde_01_feedBack_wrap = this->allpass_tilde_01_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_01_feedBack_clear();
            
                if (this->allpass_tilde_01_feedBack_reader >= this->allpass_tilde_01_feedBack__maxdelay || this->allpass_tilde_01_feedBack_writer >= this->allpass_tilde_01_feedBack__maxdelay) {
                    this->allpass_tilde_01_feedBack_reader = 0;
                    this->allpass_tilde_01_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_01_feedBack_dspsetup() {
                this->allpass_tilde_01_feedBack_reset();
            }
            
            number allpass_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_01_feedBack_size() {
                return this->allpass_tilde_01_feedBack__maxdelay;
            }
            
            void allpass_tilde_01_init() {
                this->allpass_tilde_01_feedForward_init();
                this->allpass_tilde_01_feedBack_init();
            }
            
            void allpass_tilde_01_clear() {
                this->allpass_tilde_01_feedForward_clear();
                this->allpass_tilde_01_feedBack_clear();
            }
            
            void allpass_tilde_01_reset() {
                this->allpass_tilde_01_init();
                this->allpass_tilde_01_clear();
            }
            
            void allpass_tilde_01_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_01_reset();
                this->allpass_tilde_01_setupDone = true;
                this->allpass_tilde_01_feedForward_dspsetup();
                this->allpass_tilde_01_feedBack_dspsetup();
            }
            
            void allpass_tilde_02_feedForward_step() {
                this->allpass_tilde_02_feedForward_reader++;
            
                if (this->allpass_tilde_02_feedForward_reader >= (int)(this->allpass_tilde_02_feedForward_buffer->getSize()))
                    this->allpass_tilde_02_feedForward_reader = 0;
            }
            
            number allpass_tilde_02_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? 1 + this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ), this->allpass_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_02_feedForward_buffer->getSize()) + this->allpass_tilde_02_feedForward_reader - ((size > this->allpass_tilde_02_feedForward__maxdelay ? this->allpass_tilde_02_feedForward__maxdelay : (size < (this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer) ? this->allpass_tilde_02_feedForward_reader != this->allpass_tilde_02_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_02_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedForward_wrap))
                );
            }
            
            void allpass_tilde_02_feedForward_write(number v) {
                this->allpass_tilde_02_feedForward_writer = this->allpass_tilde_02_feedForward_reader;
                this->allpass_tilde_02_feedForward_buffer[(Index)this->allpass_tilde_02_feedForward_writer] = v;
            }
            
            number allpass_tilde_02_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedForward__maxdelay : size);
                number val = this->allpass_tilde_02_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_02_feedForward_write(v);
                this->allpass_tilde_02_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_02_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_02_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_02_feedForward_init() {
                auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
                this->allpass_tilde_02_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_02_feedForward_clear() {
                this->allpass_tilde_02_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_02_feedForward_reset() {
                auto result = this->allpass_tilde_02_feedForward_calcSizeInSamples();
                this->allpass_tilde_02_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_02_feedForward_buffer);
                this->allpass_tilde_02_feedForward_wrap = this->allpass_tilde_02_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_02_feedForward_clear();
            
                if (this->allpass_tilde_02_feedForward_reader >= this->allpass_tilde_02_feedForward__maxdelay || this->allpass_tilde_02_feedForward_writer >= this->allpass_tilde_02_feedForward__maxdelay) {
                    this->allpass_tilde_02_feedForward_reader = 0;
                    this->allpass_tilde_02_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_02_feedForward_dspsetup() {
                this->allpass_tilde_02_feedForward_reset();
            }
            
            number allpass_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_02_feedForward_size() {
                return this->allpass_tilde_02_feedForward__maxdelay;
            }
            
            void allpass_tilde_02_feedBack_step() {
                this->allpass_tilde_02_feedBack_reader++;
            
                if (this->allpass_tilde_02_feedBack_reader >= (int)(this->allpass_tilde_02_feedBack_buffer->getSize()))
                    this->allpass_tilde_02_feedBack_reader = 0;
            }
            
            number allpass_tilde_02_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? 1 + this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ), this->allpass_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_02_feedBack_buffer->getSize()) + this->allpass_tilde_02_feedBack_reader - ((size > this->allpass_tilde_02_feedBack__maxdelay ? this->allpass_tilde_02_feedBack__maxdelay : (size < (this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer) ? this->allpass_tilde_02_feedBack_reader != this->allpass_tilde_02_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_02_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_02_feedBack_wrap))
                );
            }
            
            void allpass_tilde_02_feedBack_write(number v) {
                this->allpass_tilde_02_feedBack_writer = this->allpass_tilde_02_feedBack_reader;
                this->allpass_tilde_02_feedBack_buffer[(Index)this->allpass_tilde_02_feedBack_writer] = v;
            }
            
            number allpass_tilde_02_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_02_feedBack__maxdelay : size);
                number val = this->allpass_tilde_02_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_02_feedBack_write(v);
                this->allpass_tilde_02_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_02_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_02_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_02_feedBack_init() {
                auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
                this->allpass_tilde_02_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_02_feedBack_clear() {
                this->allpass_tilde_02_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_02_feedBack_reset() {
                auto result = this->allpass_tilde_02_feedBack_calcSizeInSamples();
                this->allpass_tilde_02_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_02_feedBack_buffer);
                this->allpass_tilde_02_feedBack_wrap = this->allpass_tilde_02_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_02_feedBack_clear();
            
                if (this->allpass_tilde_02_feedBack_reader >= this->allpass_tilde_02_feedBack__maxdelay || this->allpass_tilde_02_feedBack_writer >= this->allpass_tilde_02_feedBack__maxdelay) {
                    this->allpass_tilde_02_feedBack_reader = 0;
                    this->allpass_tilde_02_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_02_feedBack_dspsetup() {
                this->allpass_tilde_02_feedBack_reset();
            }
            
            number allpass_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_02_feedBack_size() {
                return this->allpass_tilde_02_feedBack__maxdelay;
            }
            
            void allpass_tilde_02_init() {
                this->allpass_tilde_02_feedForward_init();
                this->allpass_tilde_02_feedBack_init();
            }
            
            void allpass_tilde_02_clear() {
                this->allpass_tilde_02_feedForward_clear();
                this->allpass_tilde_02_feedBack_clear();
            }
            
            void allpass_tilde_02_reset() {
                this->allpass_tilde_02_init();
                this->allpass_tilde_02_clear();
            }
            
            void allpass_tilde_02_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_02_reset();
                this->allpass_tilde_02_setupDone = true;
                this->allpass_tilde_02_feedForward_dspsetup();
                this->allpass_tilde_02_feedBack_dspsetup();
            }
            
            void allpass_tilde_03_feedForward_step() {
                this->allpass_tilde_03_feedForward_reader++;
            
                if (this->allpass_tilde_03_feedForward_reader >= (int)(this->allpass_tilde_03_feedForward_buffer->getSize()))
                    this->allpass_tilde_03_feedForward_reader = 0;
            }
            
            number allpass_tilde_03_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? 1 + this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ), this->allpass_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_03_feedForward_buffer->getSize()) + this->allpass_tilde_03_feedForward_reader - ((size > this->allpass_tilde_03_feedForward__maxdelay ? this->allpass_tilde_03_feedForward__maxdelay : (size < (this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer) ? this->allpass_tilde_03_feedForward_reader != this->allpass_tilde_03_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_03_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedForward_wrap))
                );
            }
            
            void allpass_tilde_03_feedForward_write(number v) {
                this->allpass_tilde_03_feedForward_writer = this->allpass_tilde_03_feedForward_reader;
                this->allpass_tilde_03_feedForward_buffer[(Index)this->allpass_tilde_03_feedForward_writer] = v;
            }
            
            number allpass_tilde_03_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedForward__maxdelay : size);
                number val = this->allpass_tilde_03_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_03_feedForward_write(v);
                this->allpass_tilde_03_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_03_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_03_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_03_feedForward_init() {
                auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
                this->allpass_tilde_03_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_03_feedForward_clear() {
                this->allpass_tilde_03_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_03_feedForward_reset() {
                auto result = this->allpass_tilde_03_feedForward_calcSizeInSamples();
                this->allpass_tilde_03_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_03_feedForward_buffer);
                this->allpass_tilde_03_feedForward_wrap = this->allpass_tilde_03_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_03_feedForward_clear();
            
                if (this->allpass_tilde_03_feedForward_reader >= this->allpass_tilde_03_feedForward__maxdelay || this->allpass_tilde_03_feedForward_writer >= this->allpass_tilde_03_feedForward__maxdelay) {
                    this->allpass_tilde_03_feedForward_reader = 0;
                    this->allpass_tilde_03_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_03_feedForward_dspsetup() {
                this->allpass_tilde_03_feedForward_reset();
            }
            
            number allpass_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_03_feedForward_size() {
                return this->allpass_tilde_03_feedForward__maxdelay;
            }
            
            void allpass_tilde_03_feedBack_step() {
                this->allpass_tilde_03_feedBack_reader++;
            
                if (this->allpass_tilde_03_feedBack_reader >= (int)(this->allpass_tilde_03_feedBack_buffer->getSize()))
                    this->allpass_tilde_03_feedBack_reader = 0;
            }
            
            number allpass_tilde_03_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? 1 + this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ), this->allpass_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_03_feedBack_buffer->getSize()) + this->allpass_tilde_03_feedBack_reader - ((size > this->allpass_tilde_03_feedBack__maxdelay ? this->allpass_tilde_03_feedBack__maxdelay : (size < (this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer) ? this->allpass_tilde_03_feedBack_reader != this->allpass_tilde_03_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_03_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_03_feedBack_wrap))
                );
            }
            
            void allpass_tilde_03_feedBack_write(number v) {
                this->allpass_tilde_03_feedBack_writer = this->allpass_tilde_03_feedBack_reader;
                this->allpass_tilde_03_feedBack_buffer[(Index)this->allpass_tilde_03_feedBack_writer] = v;
            }
            
            number allpass_tilde_03_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_03_feedBack__maxdelay : size);
                number val = this->allpass_tilde_03_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_03_feedBack_write(v);
                this->allpass_tilde_03_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_03_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_03_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_03_feedBack_init() {
                auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
                this->allpass_tilde_03_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_03_feedBack_clear() {
                this->allpass_tilde_03_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_03_feedBack_reset() {
                auto result = this->allpass_tilde_03_feedBack_calcSizeInSamples();
                this->allpass_tilde_03_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_03_feedBack_buffer);
                this->allpass_tilde_03_feedBack_wrap = this->allpass_tilde_03_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_03_feedBack_clear();
            
                if (this->allpass_tilde_03_feedBack_reader >= this->allpass_tilde_03_feedBack__maxdelay || this->allpass_tilde_03_feedBack_writer >= this->allpass_tilde_03_feedBack__maxdelay) {
                    this->allpass_tilde_03_feedBack_reader = 0;
                    this->allpass_tilde_03_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_03_feedBack_dspsetup() {
                this->allpass_tilde_03_feedBack_reset();
            }
            
            number allpass_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_03_feedBack_size() {
                return this->allpass_tilde_03_feedBack__maxdelay;
            }
            
            void allpass_tilde_03_init() {
                this->allpass_tilde_03_feedForward_init();
                this->allpass_tilde_03_feedBack_init();
            }
            
            void allpass_tilde_03_clear() {
                this->allpass_tilde_03_feedForward_clear();
                this->allpass_tilde_03_feedBack_clear();
            }
            
            void allpass_tilde_03_reset() {
                this->allpass_tilde_03_init();
                this->allpass_tilde_03_clear();
            }
            
            void allpass_tilde_03_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_03_reset();
                this->allpass_tilde_03_setupDone = true;
                this->allpass_tilde_03_feedForward_dspsetup();
                this->allpass_tilde_03_feedBack_dspsetup();
            }
            
            void allpass_tilde_04_feedForward_step() {
                this->allpass_tilde_04_feedForward_reader++;
            
                if (this->allpass_tilde_04_feedForward_reader >= (int)(this->allpass_tilde_04_feedForward_buffer->getSize()))
                    this->allpass_tilde_04_feedForward_reader = 0;
            }
            
            number allpass_tilde_04_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? 1 + this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ), this->allpass_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_04_feedForward_buffer->getSize()) + this->allpass_tilde_04_feedForward_reader - ((size > this->allpass_tilde_04_feedForward__maxdelay ? this->allpass_tilde_04_feedForward__maxdelay : (size < (this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer) ? this->allpass_tilde_04_feedForward_reader != this->allpass_tilde_04_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_04_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedForward_wrap))
                );
            }
            
            void allpass_tilde_04_feedForward_write(number v) {
                this->allpass_tilde_04_feedForward_writer = this->allpass_tilde_04_feedForward_reader;
                this->allpass_tilde_04_feedForward_buffer[(Index)this->allpass_tilde_04_feedForward_writer] = v;
            }
            
            number allpass_tilde_04_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedForward__maxdelay : size);
                number val = this->allpass_tilde_04_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_04_feedForward_write(v);
                this->allpass_tilde_04_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_04_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_04_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_04_feedForward_init() {
                auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
                this->allpass_tilde_04_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_04_feedForward_clear() {
                this->allpass_tilde_04_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_04_feedForward_reset() {
                auto result = this->allpass_tilde_04_feedForward_calcSizeInSamples();
                this->allpass_tilde_04_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_04_feedForward_buffer);
                this->allpass_tilde_04_feedForward_wrap = this->allpass_tilde_04_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_04_feedForward_clear();
            
                if (this->allpass_tilde_04_feedForward_reader >= this->allpass_tilde_04_feedForward__maxdelay || this->allpass_tilde_04_feedForward_writer >= this->allpass_tilde_04_feedForward__maxdelay) {
                    this->allpass_tilde_04_feedForward_reader = 0;
                    this->allpass_tilde_04_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_04_feedForward_dspsetup() {
                this->allpass_tilde_04_feedForward_reset();
            }
            
            number allpass_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_04_feedForward_size() {
                return this->allpass_tilde_04_feedForward__maxdelay;
            }
            
            void allpass_tilde_04_feedBack_step() {
                this->allpass_tilde_04_feedBack_reader++;
            
                if (this->allpass_tilde_04_feedBack_reader >= (int)(this->allpass_tilde_04_feedBack_buffer->getSize()))
                    this->allpass_tilde_04_feedBack_reader = 0;
            }
            
            number allpass_tilde_04_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? 1 + this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ), this->allpass_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_04_feedBack_buffer->getSize()) + this->allpass_tilde_04_feedBack_reader - ((size > this->allpass_tilde_04_feedBack__maxdelay ? this->allpass_tilde_04_feedBack__maxdelay : (size < (this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer) ? this->allpass_tilde_04_feedBack_reader != this->allpass_tilde_04_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_04_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_04_feedBack_wrap))
                );
            }
            
            void allpass_tilde_04_feedBack_write(number v) {
                this->allpass_tilde_04_feedBack_writer = this->allpass_tilde_04_feedBack_reader;
                this->allpass_tilde_04_feedBack_buffer[(Index)this->allpass_tilde_04_feedBack_writer] = v;
            }
            
            number allpass_tilde_04_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_04_feedBack__maxdelay : size);
                number val = this->allpass_tilde_04_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_04_feedBack_write(v);
                this->allpass_tilde_04_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_04_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_04_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_04_feedBack_init() {
                auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
                this->allpass_tilde_04_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_04_feedBack_clear() {
                this->allpass_tilde_04_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_04_feedBack_reset() {
                auto result = this->allpass_tilde_04_feedBack_calcSizeInSamples();
                this->allpass_tilde_04_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_04_feedBack_buffer);
                this->allpass_tilde_04_feedBack_wrap = this->allpass_tilde_04_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_04_feedBack_clear();
            
                if (this->allpass_tilde_04_feedBack_reader >= this->allpass_tilde_04_feedBack__maxdelay || this->allpass_tilde_04_feedBack_writer >= this->allpass_tilde_04_feedBack__maxdelay) {
                    this->allpass_tilde_04_feedBack_reader = 0;
                    this->allpass_tilde_04_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_04_feedBack_dspsetup() {
                this->allpass_tilde_04_feedBack_reset();
            }
            
            number allpass_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_04_feedBack_size() {
                return this->allpass_tilde_04_feedBack__maxdelay;
            }
            
            void allpass_tilde_04_init() {
                this->allpass_tilde_04_feedForward_init();
                this->allpass_tilde_04_feedBack_init();
            }
            
            void allpass_tilde_04_clear() {
                this->allpass_tilde_04_feedForward_clear();
                this->allpass_tilde_04_feedBack_clear();
            }
            
            void allpass_tilde_04_reset() {
                this->allpass_tilde_04_init();
                this->allpass_tilde_04_clear();
            }
            
            void allpass_tilde_04_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_04_reset();
                this->allpass_tilde_04_setupDone = true;
                this->allpass_tilde_04_feedForward_dspsetup();
                this->allpass_tilde_04_feedBack_dspsetup();
            }
            
            void allpass_tilde_05_feedForward_step() {
                this->allpass_tilde_05_feedForward_reader++;
            
                if (this->allpass_tilde_05_feedForward_reader >= (int)(this->allpass_tilde_05_feedForward_buffer->getSize()))
                    this->allpass_tilde_05_feedForward_reader = 0;
            }
            
            number allpass_tilde_05_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? 1 + this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ), this->allpass_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_05_feedForward_buffer->getSize()) + this->allpass_tilde_05_feedForward_reader - ((size > this->allpass_tilde_05_feedForward__maxdelay ? this->allpass_tilde_05_feedForward__maxdelay : (size < (this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer) ? this->allpass_tilde_05_feedForward_reader != this->allpass_tilde_05_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_05_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedForward_wrap))
                );
            }
            
            void allpass_tilde_05_feedForward_write(number v) {
                this->allpass_tilde_05_feedForward_writer = this->allpass_tilde_05_feedForward_reader;
                this->allpass_tilde_05_feedForward_buffer[(Index)this->allpass_tilde_05_feedForward_writer] = v;
            }
            
            number allpass_tilde_05_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedForward__maxdelay : size);
                number val = this->allpass_tilde_05_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_05_feedForward_write(v);
                this->allpass_tilde_05_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_05_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_05_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_05_feedForward_init() {
                auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
                this->allpass_tilde_05_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_05_feedForward_clear() {
                this->allpass_tilde_05_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_05_feedForward_reset() {
                auto result = this->allpass_tilde_05_feedForward_calcSizeInSamples();
                this->allpass_tilde_05_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_05_feedForward_buffer);
                this->allpass_tilde_05_feedForward_wrap = this->allpass_tilde_05_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_05_feedForward_clear();
            
                if (this->allpass_tilde_05_feedForward_reader >= this->allpass_tilde_05_feedForward__maxdelay || this->allpass_tilde_05_feedForward_writer >= this->allpass_tilde_05_feedForward__maxdelay) {
                    this->allpass_tilde_05_feedForward_reader = 0;
                    this->allpass_tilde_05_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_05_feedForward_dspsetup() {
                this->allpass_tilde_05_feedForward_reset();
            }
            
            number allpass_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_05_feedForward_size() {
                return this->allpass_tilde_05_feedForward__maxdelay;
            }
            
            void allpass_tilde_05_feedBack_step() {
                this->allpass_tilde_05_feedBack_reader++;
            
                if (this->allpass_tilde_05_feedBack_reader >= (int)(this->allpass_tilde_05_feedBack_buffer->getSize()))
                    this->allpass_tilde_05_feedBack_reader = 0;
            }
            
            number allpass_tilde_05_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? 1 + this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ), this->allpass_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_05_feedBack_buffer->getSize()) + this->allpass_tilde_05_feedBack_reader - ((size > this->allpass_tilde_05_feedBack__maxdelay ? this->allpass_tilde_05_feedBack__maxdelay : (size < (this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer) ? this->allpass_tilde_05_feedBack_reader != this->allpass_tilde_05_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_05_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_05_feedBack_wrap))
                );
            }
            
            void allpass_tilde_05_feedBack_write(number v) {
                this->allpass_tilde_05_feedBack_writer = this->allpass_tilde_05_feedBack_reader;
                this->allpass_tilde_05_feedBack_buffer[(Index)this->allpass_tilde_05_feedBack_writer] = v;
            }
            
            number allpass_tilde_05_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_05_feedBack__maxdelay : size);
                number val = this->allpass_tilde_05_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_05_feedBack_write(v);
                this->allpass_tilde_05_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_05_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_05_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_05_feedBack_init() {
                auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
                this->allpass_tilde_05_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_05_feedBack_clear() {
                this->allpass_tilde_05_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_05_feedBack_reset() {
                auto result = this->allpass_tilde_05_feedBack_calcSizeInSamples();
                this->allpass_tilde_05_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_05_feedBack_buffer);
                this->allpass_tilde_05_feedBack_wrap = this->allpass_tilde_05_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_05_feedBack_clear();
            
                if (this->allpass_tilde_05_feedBack_reader >= this->allpass_tilde_05_feedBack__maxdelay || this->allpass_tilde_05_feedBack_writer >= this->allpass_tilde_05_feedBack__maxdelay) {
                    this->allpass_tilde_05_feedBack_reader = 0;
                    this->allpass_tilde_05_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_05_feedBack_dspsetup() {
                this->allpass_tilde_05_feedBack_reset();
            }
            
            number allpass_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_05_feedBack_size() {
                return this->allpass_tilde_05_feedBack__maxdelay;
            }
            
            void allpass_tilde_05_init() {
                this->allpass_tilde_05_feedForward_init();
                this->allpass_tilde_05_feedBack_init();
            }
            
            void allpass_tilde_05_clear() {
                this->allpass_tilde_05_feedForward_clear();
                this->allpass_tilde_05_feedBack_clear();
            }
            
            void allpass_tilde_05_reset() {
                this->allpass_tilde_05_init();
                this->allpass_tilde_05_clear();
            }
            
            void allpass_tilde_05_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_05_reset();
                this->allpass_tilde_05_setupDone = true;
                this->allpass_tilde_05_feedForward_dspsetup();
                this->allpass_tilde_05_feedBack_dspsetup();
            }
            
            void allpass_tilde_06_feedForward_step() {
                this->allpass_tilde_06_feedForward_reader++;
            
                if (this->allpass_tilde_06_feedForward_reader >= (int)(this->allpass_tilde_06_feedForward_buffer->getSize()))
                    this->allpass_tilde_06_feedForward_reader = 0;
            }
            
            number allpass_tilde_06_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? 1 + this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ), this->allpass_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_06_feedForward_buffer->getSize()) + this->allpass_tilde_06_feedForward_reader - ((size > this->allpass_tilde_06_feedForward__maxdelay ? this->allpass_tilde_06_feedForward__maxdelay : (size < (this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer) ? this->allpass_tilde_06_feedForward_reader != this->allpass_tilde_06_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_06_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedForward_wrap))
                );
            }
            
            void allpass_tilde_06_feedForward_write(number v) {
                this->allpass_tilde_06_feedForward_writer = this->allpass_tilde_06_feedForward_reader;
                this->allpass_tilde_06_feedForward_buffer[(Index)this->allpass_tilde_06_feedForward_writer] = v;
            }
            
            number allpass_tilde_06_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedForward__maxdelay : size);
                number val = this->allpass_tilde_06_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_06_feedForward_write(v);
                this->allpass_tilde_06_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_06_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_06_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_06_feedForward_init() {
                auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
                this->allpass_tilde_06_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_06_feedForward_clear() {
                this->allpass_tilde_06_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_06_feedForward_reset() {
                auto result = this->allpass_tilde_06_feedForward_calcSizeInSamples();
                this->allpass_tilde_06_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_06_feedForward_buffer);
                this->allpass_tilde_06_feedForward_wrap = this->allpass_tilde_06_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_06_feedForward_clear();
            
                if (this->allpass_tilde_06_feedForward_reader >= this->allpass_tilde_06_feedForward__maxdelay || this->allpass_tilde_06_feedForward_writer >= this->allpass_tilde_06_feedForward__maxdelay) {
                    this->allpass_tilde_06_feedForward_reader = 0;
                    this->allpass_tilde_06_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_06_feedForward_dspsetup() {
                this->allpass_tilde_06_feedForward_reset();
            }
            
            number allpass_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_06_feedForward_size() {
                return this->allpass_tilde_06_feedForward__maxdelay;
            }
            
            void allpass_tilde_06_feedBack_step() {
                this->allpass_tilde_06_feedBack_reader++;
            
                if (this->allpass_tilde_06_feedBack_reader >= (int)(this->allpass_tilde_06_feedBack_buffer->getSize()))
                    this->allpass_tilde_06_feedBack_reader = 0;
            }
            
            number allpass_tilde_06_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? 1 + this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ), this->allpass_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_06_feedBack_buffer->getSize()) + this->allpass_tilde_06_feedBack_reader - ((size > this->allpass_tilde_06_feedBack__maxdelay ? this->allpass_tilde_06_feedBack__maxdelay : (size < (this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer) ? this->allpass_tilde_06_feedBack_reader != this->allpass_tilde_06_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_06_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_06_feedBack_wrap))
                );
            }
            
            void allpass_tilde_06_feedBack_write(number v) {
                this->allpass_tilde_06_feedBack_writer = this->allpass_tilde_06_feedBack_reader;
                this->allpass_tilde_06_feedBack_buffer[(Index)this->allpass_tilde_06_feedBack_writer] = v;
            }
            
            number allpass_tilde_06_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_06_feedBack__maxdelay : size);
                number val = this->allpass_tilde_06_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_06_feedBack_write(v);
                this->allpass_tilde_06_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_06_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_06_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_06_feedBack_init() {
                auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
                this->allpass_tilde_06_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_06_feedBack_clear() {
                this->allpass_tilde_06_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_06_feedBack_reset() {
                auto result = this->allpass_tilde_06_feedBack_calcSizeInSamples();
                this->allpass_tilde_06_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_06_feedBack_buffer);
                this->allpass_tilde_06_feedBack_wrap = this->allpass_tilde_06_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_06_feedBack_clear();
            
                if (this->allpass_tilde_06_feedBack_reader >= this->allpass_tilde_06_feedBack__maxdelay || this->allpass_tilde_06_feedBack_writer >= this->allpass_tilde_06_feedBack__maxdelay) {
                    this->allpass_tilde_06_feedBack_reader = 0;
                    this->allpass_tilde_06_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_06_feedBack_dspsetup() {
                this->allpass_tilde_06_feedBack_reset();
            }
            
            number allpass_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_06_feedBack_size() {
                return this->allpass_tilde_06_feedBack__maxdelay;
            }
            
            void allpass_tilde_06_init() {
                this->allpass_tilde_06_feedForward_init();
                this->allpass_tilde_06_feedBack_init();
            }
            
            void allpass_tilde_06_clear() {
                this->allpass_tilde_06_feedForward_clear();
                this->allpass_tilde_06_feedBack_clear();
            }
            
            void allpass_tilde_06_reset() {
                this->allpass_tilde_06_init();
                this->allpass_tilde_06_clear();
            }
            
            void allpass_tilde_06_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_06_reset();
                this->allpass_tilde_06_setupDone = true;
                this->allpass_tilde_06_feedForward_dspsetup();
                this->allpass_tilde_06_feedBack_dspsetup();
            }
            
            void allpass_tilde_07_feedForward_step() {
                this->allpass_tilde_07_feedForward_reader++;
            
                if (this->allpass_tilde_07_feedForward_reader >= (int)(this->allpass_tilde_07_feedForward_buffer->getSize()))
                    this->allpass_tilde_07_feedForward_reader = 0;
            }
            
            number allpass_tilde_07_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? 1 + this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ), this->allpass_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_07_feedForward_buffer->getSize()) + this->allpass_tilde_07_feedForward_reader - ((size > this->allpass_tilde_07_feedForward__maxdelay ? this->allpass_tilde_07_feedForward__maxdelay : (size < (this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer) ? this->allpass_tilde_07_feedForward_reader != this->allpass_tilde_07_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_07_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedForward_wrap))
                );
            }
            
            void allpass_tilde_07_feedForward_write(number v) {
                this->allpass_tilde_07_feedForward_writer = this->allpass_tilde_07_feedForward_reader;
                this->allpass_tilde_07_feedForward_buffer[(Index)this->allpass_tilde_07_feedForward_writer] = v;
            }
            
            number allpass_tilde_07_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedForward__maxdelay : size);
                number val = this->allpass_tilde_07_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_07_feedForward_write(v);
                this->allpass_tilde_07_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_07_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_07_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_07_feedForward_init() {
                auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
                this->allpass_tilde_07_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_07_feedForward_clear() {
                this->allpass_tilde_07_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_07_feedForward_reset() {
                auto result = this->allpass_tilde_07_feedForward_calcSizeInSamples();
                this->allpass_tilde_07_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_07_feedForward_buffer);
                this->allpass_tilde_07_feedForward_wrap = this->allpass_tilde_07_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_07_feedForward_clear();
            
                if (this->allpass_tilde_07_feedForward_reader >= this->allpass_tilde_07_feedForward__maxdelay || this->allpass_tilde_07_feedForward_writer >= this->allpass_tilde_07_feedForward__maxdelay) {
                    this->allpass_tilde_07_feedForward_reader = 0;
                    this->allpass_tilde_07_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_07_feedForward_dspsetup() {
                this->allpass_tilde_07_feedForward_reset();
            }
            
            number allpass_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_07_feedForward_size() {
                return this->allpass_tilde_07_feedForward__maxdelay;
            }
            
            void allpass_tilde_07_feedBack_step() {
                this->allpass_tilde_07_feedBack_reader++;
            
                if (this->allpass_tilde_07_feedBack_reader >= (int)(this->allpass_tilde_07_feedBack_buffer->getSize()))
                    this->allpass_tilde_07_feedBack_reader = 0;
            }
            
            number allpass_tilde_07_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? 1 + this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ), this->allpass_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_07_feedBack_buffer->getSize()) + this->allpass_tilde_07_feedBack_reader - ((size > this->allpass_tilde_07_feedBack__maxdelay ? this->allpass_tilde_07_feedBack__maxdelay : (size < (this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer) ? this->allpass_tilde_07_feedBack_reader != this->allpass_tilde_07_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_07_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_07_feedBack_wrap))
                );
            }
            
            void allpass_tilde_07_feedBack_write(number v) {
                this->allpass_tilde_07_feedBack_writer = this->allpass_tilde_07_feedBack_reader;
                this->allpass_tilde_07_feedBack_buffer[(Index)this->allpass_tilde_07_feedBack_writer] = v;
            }
            
            number allpass_tilde_07_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_07_feedBack__maxdelay : size);
                number val = this->allpass_tilde_07_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_07_feedBack_write(v);
                this->allpass_tilde_07_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_07_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_07_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_07_feedBack_init() {
                auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
                this->allpass_tilde_07_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_07_feedBack_clear() {
                this->allpass_tilde_07_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_07_feedBack_reset() {
                auto result = this->allpass_tilde_07_feedBack_calcSizeInSamples();
                this->allpass_tilde_07_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_07_feedBack_buffer);
                this->allpass_tilde_07_feedBack_wrap = this->allpass_tilde_07_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_07_feedBack_clear();
            
                if (this->allpass_tilde_07_feedBack_reader >= this->allpass_tilde_07_feedBack__maxdelay || this->allpass_tilde_07_feedBack_writer >= this->allpass_tilde_07_feedBack__maxdelay) {
                    this->allpass_tilde_07_feedBack_reader = 0;
                    this->allpass_tilde_07_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_07_feedBack_dspsetup() {
                this->allpass_tilde_07_feedBack_reset();
            }
            
            number allpass_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_07_feedBack_size() {
                return this->allpass_tilde_07_feedBack__maxdelay;
            }
            
            void allpass_tilde_07_init() {
                this->allpass_tilde_07_feedForward_init();
                this->allpass_tilde_07_feedBack_init();
            }
            
            void allpass_tilde_07_clear() {
                this->allpass_tilde_07_feedForward_clear();
                this->allpass_tilde_07_feedBack_clear();
            }
            
            void allpass_tilde_07_reset() {
                this->allpass_tilde_07_init();
                this->allpass_tilde_07_clear();
            }
            
            void allpass_tilde_07_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_07_reset();
                this->allpass_tilde_07_setupDone = true;
                this->allpass_tilde_07_feedForward_dspsetup();
                this->allpass_tilde_07_feedBack_dspsetup();
            }
            
            void allpass_tilde_08_feedForward_step() {
                this->allpass_tilde_08_feedForward_reader++;
            
                if (this->allpass_tilde_08_feedForward_reader >= (int)(this->allpass_tilde_08_feedForward_buffer->getSize()))
                    this->allpass_tilde_08_feedForward_reader = 0;
            }
            
            number allpass_tilde_08_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? 1 + this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ), this->allpass_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_08_feedForward_buffer->getSize()) + this->allpass_tilde_08_feedForward_reader - ((size > this->allpass_tilde_08_feedForward__maxdelay ? this->allpass_tilde_08_feedForward__maxdelay : (size < (this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer) ? this->allpass_tilde_08_feedForward_reader != this->allpass_tilde_08_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_08_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedForward_wrap))
                );
            }
            
            void allpass_tilde_08_feedForward_write(number v) {
                this->allpass_tilde_08_feedForward_writer = this->allpass_tilde_08_feedForward_reader;
                this->allpass_tilde_08_feedForward_buffer[(Index)this->allpass_tilde_08_feedForward_writer] = v;
            }
            
            number allpass_tilde_08_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedForward__maxdelay : size);
                number val = this->allpass_tilde_08_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_08_feedForward_write(v);
                this->allpass_tilde_08_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_08_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_08_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_08_feedForward_init() {
                auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
                this->allpass_tilde_08_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_08_feedForward_clear() {
                this->allpass_tilde_08_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_08_feedForward_reset() {
                auto result = this->allpass_tilde_08_feedForward_calcSizeInSamples();
                this->allpass_tilde_08_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_08_feedForward_buffer);
                this->allpass_tilde_08_feedForward_wrap = this->allpass_tilde_08_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_08_feedForward_clear();
            
                if (this->allpass_tilde_08_feedForward_reader >= this->allpass_tilde_08_feedForward__maxdelay || this->allpass_tilde_08_feedForward_writer >= this->allpass_tilde_08_feedForward__maxdelay) {
                    this->allpass_tilde_08_feedForward_reader = 0;
                    this->allpass_tilde_08_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_08_feedForward_dspsetup() {
                this->allpass_tilde_08_feedForward_reset();
            }
            
            number allpass_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_08_feedForward_size() {
                return this->allpass_tilde_08_feedForward__maxdelay;
            }
            
            void allpass_tilde_08_feedBack_step() {
                this->allpass_tilde_08_feedBack_reader++;
            
                if (this->allpass_tilde_08_feedBack_reader >= (int)(this->allpass_tilde_08_feedBack_buffer->getSize()))
                    this->allpass_tilde_08_feedBack_reader = 0;
            }
            
            number allpass_tilde_08_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? 1 + this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ), this->allpass_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_08_feedBack_buffer->getSize()) + this->allpass_tilde_08_feedBack_reader - ((size > this->allpass_tilde_08_feedBack__maxdelay ? this->allpass_tilde_08_feedBack__maxdelay : (size < (this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer) ? this->allpass_tilde_08_feedBack_reader != this->allpass_tilde_08_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_08_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_08_feedBack_wrap))
                );
            }
            
            void allpass_tilde_08_feedBack_write(number v) {
                this->allpass_tilde_08_feedBack_writer = this->allpass_tilde_08_feedBack_reader;
                this->allpass_tilde_08_feedBack_buffer[(Index)this->allpass_tilde_08_feedBack_writer] = v;
            }
            
            number allpass_tilde_08_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_08_feedBack__maxdelay : size);
                number val = this->allpass_tilde_08_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_08_feedBack_write(v);
                this->allpass_tilde_08_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_08_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_08_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_08_feedBack_init() {
                auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
                this->allpass_tilde_08_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_08_feedBack_clear() {
                this->allpass_tilde_08_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_08_feedBack_reset() {
                auto result = this->allpass_tilde_08_feedBack_calcSizeInSamples();
                this->allpass_tilde_08_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_08_feedBack_buffer);
                this->allpass_tilde_08_feedBack_wrap = this->allpass_tilde_08_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_08_feedBack_clear();
            
                if (this->allpass_tilde_08_feedBack_reader >= this->allpass_tilde_08_feedBack__maxdelay || this->allpass_tilde_08_feedBack_writer >= this->allpass_tilde_08_feedBack__maxdelay) {
                    this->allpass_tilde_08_feedBack_reader = 0;
                    this->allpass_tilde_08_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_08_feedBack_dspsetup() {
                this->allpass_tilde_08_feedBack_reset();
            }
            
            number allpass_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_08_feedBack_size() {
                return this->allpass_tilde_08_feedBack__maxdelay;
            }
            
            void allpass_tilde_08_init() {
                this->allpass_tilde_08_feedForward_init();
                this->allpass_tilde_08_feedBack_init();
            }
            
            void allpass_tilde_08_clear() {
                this->allpass_tilde_08_feedForward_clear();
                this->allpass_tilde_08_feedBack_clear();
            }
            
            void allpass_tilde_08_reset() {
                this->allpass_tilde_08_init();
                this->allpass_tilde_08_clear();
            }
            
            void allpass_tilde_08_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_08_reset();
                this->allpass_tilde_08_setupDone = true;
                this->allpass_tilde_08_feedForward_dspsetup();
                this->allpass_tilde_08_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_01_x = 0;
                allpass_tilde_01_delayTime = 9.3;
                allpass_tilde_01_gain = 0.625;
                allpass_tilde_02_x = 0;
                allpass_tilde_02_delayTime = 12.73;
                allpass_tilde_02_gain = 0.625;
                allpass_tilde_03_x = 0;
                allpass_tilde_03_delayTime = 3.58;
                allpass_tilde_03_gain = 0.75;
                allpass_tilde_04_x = 0;
                allpass_tilde_04_delayTime = 4.76;
                allpass_tilde_04_gain = 0.75;
                allpass_tilde_05_x = 0;
                allpass_tilde_05_delayTime = 9.3;
                allpass_tilde_05_gain = 0.625;
                allpass_tilde_06_x = 0;
                allpass_tilde_06_delayTime = 12.73;
                allpass_tilde_06_gain = 0.625;
                allpass_tilde_07_x = 0;
                allpass_tilde_07_delayTime = 3.58;
                allpass_tilde_07_gain = 0.75;
                allpass_tilde_08_x = 0;
                allpass_tilde_08_delayTime = 4.76;
                allpass_tilde_08_gain = 0.75;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_01_feedForward__maxdelay = 0;
                allpass_tilde_01_feedForward_sizemode = 0;
                allpass_tilde_01_feedForward_wrap = 0;
                allpass_tilde_01_feedForward_reader = 0;
                allpass_tilde_01_feedForward_writer = 0;
                allpass_tilde_01_feedBack__maxdelay = 0;
                allpass_tilde_01_feedBack_sizemode = 0;
                allpass_tilde_01_feedBack_wrap = 0;
                allpass_tilde_01_feedBack_reader = 0;
                allpass_tilde_01_feedBack_writer = 0;
                allpass_tilde_01_setupDone = false;
                allpass_tilde_02_feedForward__maxdelay = 0;
                allpass_tilde_02_feedForward_sizemode = 0;
                allpass_tilde_02_feedForward_wrap = 0;
                allpass_tilde_02_feedForward_reader = 0;
                allpass_tilde_02_feedForward_writer = 0;
                allpass_tilde_02_feedBack__maxdelay = 0;
                allpass_tilde_02_feedBack_sizemode = 0;
                allpass_tilde_02_feedBack_wrap = 0;
                allpass_tilde_02_feedBack_reader = 0;
                allpass_tilde_02_feedBack_writer = 0;
                allpass_tilde_02_setupDone = false;
                allpass_tilde_03_feedForward__maxdelay = 0;
                allpass_tilde_03_feedForward_sizemode = 0;
                allpass_tilde_03_feedForward_wrap = 0;
                allpass_tilde_03_feedForward_reader = 0;
                allpass_tilde_03_feedForward_writer = 0;
                allpass_tilde_03_feedBack__maxdelay = 0;
                allpass_tilde_03_feedBack_sizemode = 0;
                allpass_tilde_03_feedBack_wrap = 0;
                allpass_tilde_03_feedBack_reader = 0;
                allpass_tilde_03_feedBack_writer = 0;
                allpass_tilde_03_setupDone = false;
                allpass_tilde_04_feedForward__maxdelay = 0;
                allpass_tilde_04_feedForward_sizemode = 0;
                allpass_tilde_04_feedForward_wrap = 0;
                allpass_tilde_04_feedForward_reader = 0;
                allpass_tilde_04_feedForward_writer = 0;
                allpass_tilde_04_feedBack__maxdelay = 0;
                allpass_tilde_04_feedBack_sizemode = 0;
                allpass_tilde_04_feedBack_wrap = 0;
                allpass_tilde_04_feedBack_reader = 0;
                allpass_tilde_04_feedBack_writer = 0;
                allpass_tilde_04_setupDone = false;
                allpass_tilde_05_feedForward__maxdelay = 0;
                allpass_tilde_05_feedForward_sizemode = 0;
                allpass_tilde_05_feedForward_wrap = 0;
                allpass_tilde_05_feedForward_reader = 0;
                allpass_tilde_05_feedForward_writer = 0;
                allpass_tilde_05_feedBack__maxdelay = 0;
                allpass_tilde_05_feedBack_sizemode = 0;
                allpass_tilde_05_feedBack_wrap = 0;
                allpass_tilde_05_feedBack_reader = 0;
                allpass_tilde_05_feedBack_writer = 0;
                allpass_tilde_05_setupDone = false;
                allpass_tilde_06_feedForward__maxdelay = 0;
                allpass_tilde_06_feedForward_sizemode = 0;
                allpass_tilde_06_feedForward_wrap = 0;
                allpass_tilde_06_feedForward_reader = 0;
                allpass_tilde_06_feedForward_writer = 0;
                allpass_tilde_06_feedBack__maxdelay = 0;
                allpass_tilde_06_feedBack_sizemode = 0;
                allpass_tilde_06_feedBack_wrap = 0;
                allpass_tilde_06_feedBack_reader = 0;
                allpass_tilde_06_feedBack_writer = 0;
                allpass_tilde_06_setupDone = false;
                allpass_tilde_07_feedForward__maxdelay = 0;
                allpass_tilde_07_feedForward_sizemode = 0;
                allpass_tilde_07_feedForward_wrap = 0;
                allpass_tilde_07_feedForward_reader = 0;
                allpass_tilde_07_feedForward_writer = 0;
                allpass_tilde_07_feedBack__maxdelay = 0;
                allpass_tilde_07_feedBack_sizemode = 0;
                allpass_tilde_07_feedBack_wrap = 0;
                allpass_tilde_07_feedBack_reader = 0;
                allpass_tilde_07_feedBack_writer = 0;
                allpass_tilde_07_setupDone = false;
                allpass_tilde_08_feedForward__maxdelay = 0;
                allpass_tilde_08_feedForward_sizemode = 0;
                allpass_tilde_08_feedForward_wrap = 0;
                allpass_tilde_08_feedForward_reader = 0;
                allpass_tilde_08_feedForward_writer = 0;
                allpass_tilde_08_feedBack__maxdelay = 0;
                allpass_tilde_08_feedBack_sizemode = 0;
                allpass_tilde_08_feedBack_wrap = 0;
                allpass_tilde_08_feedBack_reader = 0;
                allpass_tilde_08_feedBack_writer = 0;
                allpass_tilde_08_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_01_x;
                number allpass_tilde_01_delayTime;
                number allpass_tilde_01_gain;
                number allpass_tilde_02_x;
                number allpass_tilde_02_delayTime;
                number allpass_tilde_02_gain;
                number allpass_tilde_03_x;
                number allpass_tilde_03_delayTime;
                number allpass_tilde_03_gain;
                number allpass_tilde_04_x;
                number allpass_tilde_04_delayTime;
                number allpass_tilde_04_gain;
                number allpass_tilde_05_x;
                number allpass_tilde_05_delayTime;
                number allpass_tilde_05_gain;
                number allpass_tilde_06_x;
                number allpass_tilde_06_delayTime;
                number allpass_tilde_06_gain;
                number allpass_tilde_07_x;
                number allpass_tilde_07_delayTime;
                number allpass_tilde_07_gain;
                number allpass_tilde_08_x;
                number allpass_tilde_08_delayTime;
                number allpass_tilde_08_gain;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[2];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_01_feedForward_buffer;
                Index allpass_tilde_01_feedForward__maxdelay;
                Int allpass_tilde_01_feedForward_sizemode;
                Index allpass_tilde_01_feedForward_wrap;
                Int allpass_tilde_01_feedForward_reader;
                Int allpass_tilde_01_feedForward_writer;
                Float64BufferRef allpass_tilde_01_feedBack_buffer;
                Index allpass_tilde_01_feedBack__maxdelay;
                Int allpass_tilde_01_feedBack_sizemode;
                Index allpass_tilde_01_feedBack_wrap;
                Int allpass_tilde_01_feedBack_reader;
                Int allpass_tilde_01_feedBack_writer;
                bool allpass_tilde_01_setupDone;
                Float64BufferRef allpass_tilde_02_feedForward_buffer;
                Index allpass_tilde_02_feedForward__maxdelay;
                Int allpass_tilde_02_feedForward_sizemode;
                Index allpass_tilde_02_feedForward_wrap;
                Int allpass_tilde_02_feedForward_reader;
                Int allpass_tilde_02_feedForward_writer;
                Float64BufferRef allpass_tilde_02_feedBack_buffer;
                Index allpass_tilde_02_feedBack__maxdelay;
                Int allpass_tilde_02_feedBack_sizemode;
                Index allpass_tilde_02_feedBack_wrap;
                Int allpass_tilde_02_feedBack_reader;
                Int allpass_tilde_02_feedBack_writer;
                bool allpass_tilde_02_setupDone;
                Float64BufferRef allpass_tilde_03_feedForward_buffer;
                Index allpass_tilde_03_feedForward__maxdelay;
                Int allpass_tilde_03_feedForward_sizemode;
                Index allpass_tilde_03_feedForward_wrap;
                Int allpass_tilde_03_feedForward_reader;
                Int allpass_tilde_03_feedForward_writer;
                Float64BufferRef allpass_tilde_03_feedBack_buffer;
                Index allpass_tilde_03_feedBack__maxdelay;
                Int allpass_tilde_03_feedBack_sizemode;
                Index allpass_tilde_03_feedBack_wrap;
                Int allpass_tilde_03_feedBack_reader;
                Int allpass_tilde_03_feedBack_writer;
                bool allpass_tilde_03_setupDone;
                Float64BufferRef allpass_tilde_04_feedForward_buffer;
                Index allpass_tilde_04_feedForward__maxdelay;
                Int allpass_tilde_04_feedForward_sizemode;
                Index allpass_tilde_04_feedForward_wrap;
                Int allpass_tilde_04_feedForward_reader;
                Int allpass_tilde_04_feedForward_writer;
                Float64BufferRef allpass_tilde_04_feedBack_buffer;
                Index allpass_tilde_04_feedBack__maxdelay;
                Int allpass_tilde_04_feedBack_sizemode;
                Index allpass_tilde_04_feedBack_wrap;
                Int allpass_tilde_04_feedBack_reader;
                Int allpass_tilde_04_feedBack_writer;
                bool allpass_tilde_04_setupDone;
                Float64BufferRef allpass_tilde_05_feedForward_buffer;
                Index allpass_tilde_05_feedForward__maxdelay;
                Int allpass_tilde_05_feedForward_sizemode;
                Index allpass_tilde_05_feedForward_wrap;
                Int allpass_tilde_05_feedForward_reader;
                Int allpass_tilde_05_feedForward_writer;
                Float64BufferRef allpass_tilde_05_feedBack_buffer;
                Index allpass_tilde_05_feedBack__maxdelay;
                Int allpass_tilde_05_feedBack_sizemode;
                Index allpass_tilde_05_feedBack_wrap;
                Int allpass_tilde_05_feedBack_reader;
                Int allpass_tilde_05_feedBack_writer;
                bool allpass_tilde_05_setupDone;
                Float64BufferRef allpass_tilde_06_feedForward_buffer;
                Index allpass_tilde_06_feedForward__maxdelay;
                Int allpass_tilde_06_feedForward_sizemode;
                Index allpass_tilde_06_feedForward_wrap;
                Int allpass_tilde_06_feedForward_reader;
                Int allpass_tilde_06_feedForward_writer;
                Float64BufferRef allpass_tilde_06_feedBack_buffer;
                Index allpass_tilde_06_feedBack__maxdelay;
                Int allpass_tilde_06_feedBack_sizemode;
                Index allpass_tilde_06_feedBack_wrap;
                Int allpass_tilde_06_feedBack_reader;
                Int allpass_tilde_06_feedBack_writer;
                bool allpass_tilde_06_setupDone;
                Float64BufferRef allpass_tilde_07_feedForward_buffer;
                Index allpass_tilde_07_feedForward__maxdelay;
                Int allpass_tilde_07_feedForward_sizemode;
                Index allpass_tilde_07_feedForward_wrap;
                Int allpass_tilde_07_feedForward_reader;
                Int allpass_tilde_07_feedForward_writer;
                Float64BufferRef allpass_tilde_07_feedBack_buffer;
                Index allpass_tilde_07_feedBack__maxdelay;
                Int allpass_tilde_07_feedBack_sizemode;
                Index allpass_tilde_07_feedBack_wrap;
                Int allpass_tilde_07_feedBack_reader;
                Int allpass_tilde_07_feedBack_writer;
                bool allpass_tilde_07_setupDone;
                Float64BufferRef allpass_tilde_08_feedForward_buffer;
                Index allpass_tilde_08_feedForward__maxdelay;
                Int allpass_tilde_08_feedForward_sizemode;
                Index allpass_tilde_08_feedForward_wrap;
                Int allpass_tilde_08_feedForward_reader;
                Int allpass_tilde_08_feedForward_writer;
                Float64BufferRef allpass_tilde_08_feedBack_buffer;
                Index allpass_tilde_08_feedBack__maxdelay;
                Int allpass_tilde_08_feedBack_sizemode;
                Index allpass_tilde_08_feedBack_wrap;
                Int allpass_tilde_08_feedBack_reader;
                Int allpass_tilde_08_feedBack_writer;
                bool allpass_tilde_08_setupDone;
                number stackprotect_count;
                DataRef allpass_tilde_01_feedForward_bufferobj;
                DataRef allpass_tilde_01_feedBack_bufferobj;
                DataRef allpass_tilde_02_feedForward_bufferobj;
                DataRef allpass_tilde_02_feedBack_bufferobj;
                DataRef allpass_tilde_03_feedForward_bufferobj;
                DataRef allpass_tilde_03_feedBack_bufferobj;
                DataRef allpass_tilde_04_feedForward_bufferobj;
                DataRef allpass_tilde_04_feedBack_bufferobj;
                DataRef allpass_tilde_05_feedForward_bufferobj;
                DataRef allpass_tilde_05_feedBack_bufferobj;
                DataRef allpass_tilde_06_feedForward_bufferobj;
                DataRef allpass_tilde_06_feedBack_bufferobj;
                DataRef allpass_tilde_07_feedForward_bufferobj;
                DataRef allpass_tilde_07_feedBack_bufferobj;
                DataRef allpass_tilde_08_feedForward_bufferobj;
                DataRef allpass_tilde_08_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_93 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_100;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_93()
            {
            }
            
            ~RNBOSubpatcher_93()
            {
            }
            
            virtual RNBOSubpatcher_100* getPatcher() const {
                return static_cast<RNBOSubpatcher_100 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Size = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                const SampleValue * target_Diff = (numInputs >= 9 && inputs[8] ? inputs[8] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                this->stackprotect_perform(n);
                this->signalreceive_01_perform(target_Size, this->signals[0], n);
                this->signalreceive_02_perform(target_Diff, this->signals[1], n);
                this->dspexpr_06_perform(this->signals[0], this->signals[1], this->signals[2], n);
                this->dspexpr_11_perform(this->signals[2], this->dspexpr_11_in2, this->signals[1], n);
            
                this->comb_tilde_07_perform(
                    in7,
                    this->signals[1],
                    this->comb_tilde_07_gain,
                    this->comb_tilde_07_ffGain,
                    this->comb_tilde_07_fbGain,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_02_perform(this->signals[2], this->dspexpr_02_in2, this->signals[1], n);
            
                this->comb_tilde_01_perform(
                    in1,
                    this->signals[1],
                    this->comb_tilde_01_gain,
                    this->comb_tilde_01_ffGain,
                    this->comb_tilde_01_fbGain,
                    this->signals[3],
                    n
                );
            
                this->dspexpr_03_perform(this->signals[2], this->dspexpr_03_in2, this->signals[1], n);
            
                this->comb_tilde_02_perform(
                    in2,
                    this->signals[1],
                    this->comb_tilde_02_gain,
                    this->comb_tilde_02_ffGain,
                    this->comb_tilde_02_fbGain,
                    this->signals[4],
                    n
                );
            
                this->dspexpr_04_perform(this->signals[2], this->dspexpr_04_in2, this->signals[1], n);
            
                this->comb_tilde_03_perform(
                    in3,
                    this->signals[1],
                    this->comb_tilde_03_gain,
                    this->comb_tilde_03_ffGain,
                    this->comb_tilde_03_fbGain,
                    this->signals[5],
                    n
                );
            
                this->dspexpr_07_perform(this->signals[2], this->dspexpr_07_in2, this->signals[1], n);
            
                this->comb_tilde_04_perform(
                    in4,
                    this->signals[1],
                    this->comb_tilde_04_gain,
                    this->comb_tilde_04_ffGain,
                    this->comb_tilde_04_fbGain,
                    this->signals[6],
                    n
                );
            
                this->dspexpr_09_perform(this->signals[2], this->dspexpr_09_in2, this->signals[1], n);
            
                this->comb_tilde_05_perform(
                    in5,
                    this->signals[1],
                    this->comb_tilde_05_gain,
                    this->comb_tilde_05_ffGain,
                    this->comb_tilde_05_fbGain,
                    this->signals[7],
                    n
                );
            
                this->dspexpr_10_perform(this->signals[2], this->dspexpr_10_in2, this->signals[1], n);
            
                this->comb_tilde_06_perform(
                    in6,
                    this->signals[1],
                    this->comb_tilde_06_gain,
                    this->comb_tilde_06_ffGain,
                    this->comb_tilde_06_fbGain,
                    this->signals[2],
                    n
                );
            
                this->signaladder_15_perform(
                    this->signals[0],
                    this->signals[2],
                    this->signals[7],
                    this->signals[5],
                    this->signals[5],
                    n
                );
            
                this->dspexpr_08_perform(this->signals[5], this->dspexpr_08_in2, this->signals[1], n);
            
                this->signaladder_16_perform(
                    this->signals[6],
                    this->signals[4],
                    this->signals[3],
                    this->signals[1],
                    this->signals[1],
                    n
                );
            
                this->dspexpr_05_perform(this->signals[1], this->dspexpr_05_in2, out1, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->comb_tilde_07_dspsetup(forceDSPSetup);
                this->comb_tilde_01_dspsetup(forceDSPSetup);
                this->comb_tilde_02_dspsetup(forceDSPSetup);
                this->comb_tilde_03_dspsetup(forceDSPSetup);
                this->comb_tilde_04_dspsetup(forceDSPSetup);
                this->comb_tilde_05_dspsetup(forceDSPSetup);
                this->comb_tilde_06_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 2;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->comb_tilde_01_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->comb_tilde_01_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->comb_tilde_02_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->comb_tilde_02_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->comb_tilde_03_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->comb_tilde_03_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->comb_tilde_04_feedForward_bufferobj);
                    break;
                    }
                case 11:
                    {
                    return addressOf(this->comb_tilde_04_feedBack_bufferobj);
                    break;
                    }
                case 12:
                    {
                    return addressOf(this->comb_tilde_05_feedForward_bufferobj);
                    break;
                    }
                case 13:
                    {
                    return addressOf(this->comb_tilde_05_feedBack_bufferobj);
                    break;
                    }
                case 14:
                    {
                    return addressOf(this->comb_tilde_06_feedForward_bufferobj);
                    break;
                    }
                case 15:
                    {
                    return addressOf(this->comb_tilde_06_feedBack_bufferobj);
                    break;
                    }
                case 16:
                    {
                    return addressOf(this->comb_tilde_07_feedForward_bufferobj);
                    break;
                    }
                case 17:
                    {
                    return addressOf(this->comb_tilde_07_feedBack_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 14;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                }
            
                if (index == 11) {
                    this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                }
            
                if (index == 12) {
                    this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                }
            
                if (index == 13) {
                    this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                }
            
                if (index == 14) {
                    this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                }
            
                if (index == 15) {
                    this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                }
            
                if (index == 16) {
                    this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                }
            
                if (index == 17) {
                    this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->comb_tilde_01_feedForward_bufferobj = initDataRef("comb_tilde_01_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_01_feedBack_bufferobj = initDataRef("comb_tilde_01_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_02_feedForward_bufferobj = initDataRef("comb_tilde_02_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_02_feedBack_bufferobj = initDataRef("comb_tilde_02_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_03_feedForward_bufferobj = initDataRef("comb_tilde_03_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_03_feedBack_bufferobj = initDataRef("comb_tilde_03_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_04_feedForward_bufferobj = initDataRef("comb_tilde_04_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_04_feedBack_bufferobj = initDataRef("comb_tilde_04_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_05_feedForward_bufferobj = initDataRef("comb_tilde_05_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_05_feedBack_bufferobj = initDataRef("comb_tilde_05_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_06_feedForward_bufferobj = initDataRef("comb_tilde_06_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_06_feedBack_bufferobj = initDataRef("comb_tilde_06_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_07_feedForward_bufferobj = initDataRef("comb_tilde_07_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_07_feedBack_bufferobj = initDataRef("comb_tilde_07_feedBack_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->comb_tilde_01_feedForward_bufferobj->setIndex(4);
                this->comb_tilde_01_feedForward_buffer = new Float64Buffer(this->comb_tilde_01_feedForward_bufferobj);
                this->comb_tilde_01_feedBack_bufferobj->setIndex(5);
                this->comb_tilde_01_feedBack_buffer = new Float64Buffer(this->comb_tilde_01_feedBack_bufferobj);
                this->comb_tilde_02_feedForward_bufferobj->setIndex(6);
                this->comb_tilde_02_feedForward_buffer = new Float64Buffer(this->comb_tilde_02_feedForward_bufferobj);
                this->comb_tilde_02_feedBack_bufferobj->setIndex(7);
                this->comb_tilde_02_feedBack_buffer = new Float64Buffer(this->comb_tilde_02_feedBack_bufferobj);
                this->comb_tilde_03_feedForward_bufferobj->setIndex(8);
                this->comb_tilde_03_feedForward_buffer = new Float64Buffer(this->comb_tilde_03_feedForward_bufferobj);
                this->comb_tilde_03_feedBack_bufferobj->setIndex(9);
                this->comb_tilde_03_feedBack_buffer = new Float64Buffer(this->comb_tilde_03_feedBack_bufferobj);
                this->comb_tilde_04_feedForward_bufferobj->setIndex(10);
                this->comb_tilde_04_feedForward_buffer = new Float64Buffer(this->comb_tilde_04_feedForward_bufferobj);
                this->comb_tilde_04_feedBack_bufferobj->setIndex(11);
                this->comb_tilde_04_feedBack_buffer = new Float64Buffer(this->comb_tilde_04_feedBack_bufferobj);
                this->comb_tilde_05_feedForward_bufferobj->setIndex(12);
                this->comb_tilde_05_feedForward_buffer = new Float64Buffer(this->comb_tilde_05_feedForward_bufferobj);
                this->comb_tilde_05_feedBack_bufferobj->setIndex(13);
                this->comb_tilde_05_feedBack_buffer = new Float64Buffer(this->comb_tilde_05_feedBack_bufferobj);
                this->comb_tilde_06_feedForward_bufferobj->setIndex(14);
                this->comb_tilde_06_feedForward_buffer = new Float64Buffer(this->comb_tilde_06_feedForward_bufferobj);
                this->comb_tilde_06_feedBack_bufferobj->setIndex(15);
                this->comb_tilde_06_feedBack_buffer = new Float64Buffer(this->comb_tilde_06_feedBack_bufferobj);
                this->comb_tilde_07_feedForward_bufferobj->setIndex(16);
                this->comb_tilde_07_feedForward_buffer = new Float64Buffer(this->comb_tilde_07_feedForward_bufferobj);
                this->comb_tilde_07_feedBack_bufferobj->setIndex(17);
                this->comb_tilde_07_feedBack_buffer = new Float64Buffer(this->comb_tilde_07_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 7;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->comb_tilde_01_feedForward_init();
                this->comb_tilde_01_feedBack_init();
                this->comb_tilde_01_init();
                this->comb_tilde_02_feedForward_init();
                this->comb_tilde_02_feedBack_init();
                this->comb_tilde_02_init();
                this->comb_tilde_03_feedForward_init();
                this->comb_tilde_03_feedBack_init();
                this->comb_tilde_03_init();
                this->comb_tilde_04_feedForward_init();
                this->comb_tilde_04_feedBack_init();
                this->comb_tilde_04_init();
                this->comb_tilde_05_feedForward_init();
                this->comb_tilde_05_feedBack_init();
                this->comb_tilde_05_init();
                this->comb_tilde_06_feedForward_init();
                this->comb_tilde_06_feedBack_init();
                this->comb_tilde_06_init();
                this->comb_tilde_07_feedForward_init();
                this->comb_tilde_07_feedBack_init();
                this->comb_tilde_07_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->comb_tilde_01_feedForward_buffer = this->comb_tilde_01_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_01_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_01_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_01_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->comb_tilde_01_feedBack_buffer = this->comb_tilde_01_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_01_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_01_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_01_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_02_feedForward_buffer = this->comb_tilde_02_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_02_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_02_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_02_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_02_feedBack_buffer = this->comb_tilde_02_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_02_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_02_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_02_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->comb_tilde_03_feedForward_buffer = this->comb_tilde_03_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_03_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_03_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_03_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->comb_tilde_03_feedBack_buffer = this->comb_tilde_03_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_03_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_03_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_03_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->comb_tilde_04_feedForward_buffer = this->comb_tilde_04_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_04_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_04_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_04_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->comb_tilde_04_feedBack_buffer = this->comb_tilde_04_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_04_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_04_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_04_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->comb_tilde_05_feedForward_buffer = this->comb_tilde_05_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_05_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_05_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_05_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->comb_tilde_05_feedBack_buffer = this->comb_tilde_05_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_05_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_05_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_05_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->comb_tilde_06_feedForward_buffer = this->comb_tilde_06_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_06_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_06_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_06_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->comb_tilde_06_feedBack_buffer = this->comb_tilde_06_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_06_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_06_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_06_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->comb_tilde_07_feedForward_buffer = this->comb_tilde_07_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_07_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_07_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_07_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->comb_tilde_07_feedBack_buffer = this->comb_tilde_07_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_07_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_07_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_07_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_01_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void signalreceive_02_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_06_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_11_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 75;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_07_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_07_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_07_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_07_feedForward_write(x[(Index)i]);
                    this->comb_tilde_07_feedBack_write(ov);
                    this->comb_tilde_07_feedForward_step();
                    this->comb_tilde_07_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_02_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 110;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_01_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_01_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_01_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_01_feedForward_write(x[(Index)i]);
                    this->comb_tilde_01_feedBack_write(ov);
                    this->comb_tilde_01_feedForward_step();
                    this->comb_tilde_01_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_03_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 160;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_02_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_02_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_02_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_02_feedForward_write(x[(Index)i]);
                    this->comb_tilde_02_feedBack_write(ov);
                    this->comb_tilde_02_feedForward_step();
                    this->comb_tilde_02_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_04_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 50;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_03_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_03_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_03_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_03_feedForward_write(x[(Index)i]);
                    this->comb_tilde_03_feedBack_write(ov);
                    this->comb_tilde_03_feedForward_step();
                    this->comb_tilde_03_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_07_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 25;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_04_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_04_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_04_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_04_feedForward_write(x[(Index)i]);
                    this->comb_tilde_04_feedBack_write(ov);
                    this->comb_tilde_04_feedForward_step();
                    this->comb_tilde_04_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_09_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 69;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_05_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_05_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_05_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_05_feedForward_write(x[(Index)i]);
                    this->comb_tilde_05_feedBack_write(ov);
                    this->comb_tilde_05_feedForward_step();
                    this->comb_tilde_05_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_10_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 80;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_06_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_06_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_06_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_06_feedForward_write(x[(Index)i]);
                    this->comb_tilde_06_feedBack_write(ov);
                    this->comb_tilde_06_feedForward_step();
                    this->comb_tilde_06_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signaladder_15_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_08_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_16_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_05_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 0.355;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_01_feedForward_step() {
                this->comb_tilde_01_feedForward_reader++;
            
                if (this->comb_tilde_01_feedForward_reader >= (int)(this->comb_tilde_01_feedForward_buffer->getSize()))
                    this->comb_tilde_01_feedForward_reader = 0;
            }
            
            number comb_tilde_01_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? 1 + this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ), this->comb_tilde_01_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_01_feedForward_buffer->getSize()) + this->comb_tilde_01_feedForward_reader - ((size > this->comb_tilde_01_feedForward__maxdelay ? this->comb_tilde_01_feedForward__maxdelay : (size < (this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer) ? this->comb_tilde_01_feedForward_reader != this->comb_tilde_01_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_01_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedForward_wrap))
                );
            }
            
            void comb_tilde_01_feedForward_write(number v) {
                this->comb_tilde_01_feedForward_writer = this->comb_tilde_01_feedForward_reader;
                this->comb_tilde_01_feedForward_buffer[(Index)this->comb_tilde_01_feedForward_writer] = v;
            }
            
            number comb_tilde_01_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_01_feedForward__maxdelay : size);
                number val = this->comb_tilde_01_feedForward_read(effectiveSize, 0);
                this->comb_tilde_01_feedForward_write(v);
                this->comb_tilde_01_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_01_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_01_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_01_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_01_feedForward_init() {
                auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                this->comb_tilde_01_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_01_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_01_feedForward_clear() {
                this->comb_tilde_01_feedForward_buffer->setZero();
            }
            
            void comb_tilde_01_feedForward_reset() {
                auto result = this->comb_tilde_01_feedForward_calcSizeInSamples();
                this->comb_tilde_01_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_01_feedForward_buffer);
                this->comb_tilde_01_feedForward_wrap = this->comb_tilde_01_feedForward_buffer->getSize() - 1;
                this->comb_tilde_01_feedForward_clear();
            
                if (this->comb_tilde_01_feedForward_reader >= this->comb_tilde_01_feedForward__maxdelay || this->comb_tilde_01_feedForward_writer >= this->comb_tilde_01_feedForward__maxdelay) {
                    this->comb_tilde_01_feedForward_reader = 0;
                    this->comb_tilde_01_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_01_feedForward_dspsetup() {
                this->comb_tilde_01_feedForward_reset();
            }
            
            number comb_tilde_01_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_01_feedForward_size() {
                return this->comb_tilde_01_feedForward__maxdelay;
            }
            
            void comb_tilde_01_feedBack_step() {
                this->comb_tilde_01_feedBack_reader++;
            
                if (this->comb_tilde_01_feedBack_reader >= (int)(this->comb_tilde_01_feedBack_buffer->getSize()))
                    this->comb_tilde_01_feedBack_reader = 0;
            }
            
            number comb_tilde_01_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? 1 + this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ), this->comb_tilde_01_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_01_feedBack_buffer->getSize()) + this->comb_tilde_01_feedBack_reader - ((size > this->comb_tilde_01_feedBack__maxdelay ? this->comb_tilde_01_feedBack__maxdelay : (size < (this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer) ? this->comb_tilde_01_feedBack_reader != this->comb_tilde_01_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_01_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_01_feedBack_wrap))
                );
            }
            
            void comb_tilde_01_feedBack_write(number v) {
                this->comb_tilde_01_feedBack_writer = this->comb_tilde_01_feedBack_reader;
                this->comb_tilde_01_feedBack_buffer[(Index)this->comb_tilde_01_feedBack_writer] = v;
            }
            
            number comb_tilde_01_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_01_feedBack__maxdelay : size);
                number val = this->comb_tilde_01_feedBack_read(effectiveSize, 0);
                this->comb_tilde_01_feedBack_write(v);
                this->comb_tilde_01_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_01_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_01_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_01_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_01_feedBack_init() {
                auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                this->comb_tilde_01_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_01_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_01_feedBack_clear() {
                this->comb_tilde_01_feedBack_buffer->setZero();
            }
            
            void comb_tilde_01_feedBack_reset() {
                auto result = this->comb_tilde_01_feedBack_calcSizeInSamples();
                this->comb_tilde_01_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_01_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_01_feedBack_buffer);
                this->comb_tilde_01_feedBack_wrap = this->comb_tilde_01_feedBack_buffer->getSize() - 1;
                this->comb_tilde_01_feedBack_clear();
            
                if (this->comb_tilde_01_feedBack_reader >= this->comb_tilde_01_feedBack__maxdelay || this->comb_tilde_01_feedBack_writer >= this->comb_tilde_01_feedBack__maxdelay) {
                    this->comb_tilde_01_feedBack_reader = 0;
                    this->comb_tilde_01_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_01_feedBack_dspsetup() {
                this->comb_tilde_01_feedBack_reset();
            }
            
            number comb_tilde_01_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_01_feedBack_size() {
                return this->comb_tilde_01_feedBack__maxdelay;
            }
            
            void comb_tilde_01_init() {
                this->comb_tilde_01_feedForward_init();
                this->comb_tilde_01_feedBack_init();
            }
            
            void comb_tilde_01_clear() {
                this->comb_tilde_01_feedForward_clear();
                this->comb_tilde_01_feedBack_clear();
            }
            
            void comb_tilde_01_reset() {
                this->comb_tilde_01_init();
                this->comb_tilde_01_clear();
            }
            
            void comb_tilde_01_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_01_reset();
                this->comb_tilde_01_setupDone = true;
                this->comb_tilde_01_feedForward_dspsetup();
                this->comb_tilde_01_feedBack_dspsetup();
            }
            
            void comb_tilde_02_feedForward_step() {
                this->comb_tilde_02_feedForward_reader++;
            
                if (this->comb_tilde_02_feedForward_reader >= (int)(this->comb_tilde_02_feedForward_buffer->getSize()))
                    this->comb_tilde_02_feedForward_reader = 0;
            }
            
            number comb_tilde_02_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? 1 + this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ), this->comb_tilde_02_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_02_feedForward_buffer->getSize()) + this->comb_tilde_02_feedForward_reader - ((size > this->comb_tilde_02_feedForward__maxdelay ? this->comb_tilde_02_feedForward__maxdelay : (size < (this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer) ? this->comb_tilde_02_feedForward_reader != this->comb_tilde_02_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_02_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedForward_wrap))
                );
            }
            
            void comb_tilde_02_feedForward_write(number v) {
                this->comb_tilde_02_feedForward_writer = this->comb_tilde_02_feedForward_reader;
                this->comb_tilde_02_feedForward_buffer[(Index)this->comb_tilde_02_feedForward_writer] = v;
            }
            
            number comb_tilde_02_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_02_feedForward__maxdelay : size);
                number val = this->comb_tilde_02_feedForward_read(effectiveSize, 0);
                this->comb_tilde_02_feedForward_write(v);
                this->comb_tilde_02_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_02_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_02_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_02_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_02_feedForward_init() {
                auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                this->comb_tilde_02_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_02_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_02_feedForward_clear() {
                this->comb_tilde_02_feedForward_buffer->setZero();
            }
            
            void comb_tilde_02_feedForward_reset() {
                auto result = this->comb_tilde_02_feedForward_calcSizeInSamples();
                this->comb_tilde_02_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_02_feedForward_buffer);
                this->comb_tilde_02_feedForward_wrap = this->comb_tilde_02_feedForward_buffer->getSize() - 1;
                this->comb_tilde_02_feedForward_clear();
            
                if (this->comb_tilde_02_feedForward_reader >= this->comb_tilde_02_feedForward__maxdelay || this->comb_tilde_02_feedForward_writer >= this->comb_tilde_02_feedForward__maxdelay) {
                    this->comb_tilde_02_feedForward_reader = 0;
                    this->comb_tilde_02_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_02_feedForward_dspsetup() {
                this->comb_tilde_02_feedForward_reset();
            }
            
            number comb_tilde_02_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_02_feedForward_size() {
                return this->comb_tilde_02_feedForward__maxdelay;
            }
            
            void comb_tilde_02_feedBack_step() {
                this->comb_tilde_02_feedBack_reader++;
            
                if (this->comb_tilde_02_feedBack_reader >= (int)(this->comb_tilde_02_feedBack_buffer->getSize()))
                    this->comb_tilde_02_feedBack_reader = 0;
            }
            
            number comb_tilde_02_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? 1 + this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ), this->comb_tilde_02_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_02_feedBack_buffer->getSize()) + this->comb_tilde_02_feedBack_reader - ((size > this->comb_tilde_02_feedBack__maxdelay ? this->comb_tilde_02_feedBack__maxdelay : (size < (this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer) ? this->comb_tilde_02_feedBack_reader != this->comb_tilde_02_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_02_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_02_feedBack_wrap))
                );
            }
            
            void comb_tilde_02_feedBack_write(number v) {
                this->comb_tilde_02_feedBack_writer = this->comb_tilde_02_feedBack_reader;
                this->comb_tilde_02_feedBack_buffer[(Index)this->comb_tilde_02_feedBack_writer] = v;
            }
            
            number comb_tilde_02_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_02_feedBack__maxdelay : size);
                number val = this->comb_tilde_02_feedBack_read(effectiveSize, 0);
                this->comb_tilde_02_feedBack_write(v);
                this->comb_tilde_02_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_02_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_02_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_02_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_02_feedBack_init() {
                auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                this->comb_tilde_02_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_02_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_02_feedBack_clear() {
                this->comb_tilde_02_feedBack_buffer->setZero();
            }
            
            void comb_tilde_02_feedBack_reset() {
                auto result = this->comb_tilde_02_feedBack_calcSizeInSamples();
                this->comb_tilde_02_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_02_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_02_feedBack_buffer);
                this->comb_tilde_02_feedBack_wrap = this->comb_tilde_02_feedBack_buffer->getSize() - 1;
                this->comb_tilde_02_feedBack_clear();
            
                if (this->comb_tilde_02_feedBack_reader >= this->comb_tilde_02_feedBack__maxdelay || this->comb_tilde_02_feedBack_writer >= this->comb_tilde_02_feedBack__maxdelay) {
                    this->comb_tilde_02_feedBack_reader = 0;
                    this->comb_tilde_02_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_02_feedBack_dspsetup() {
                this->comb_tilde_02_feedBack_reset();
            }
            
            number comb_tilde_02_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_02_feedBack_size() {
                return this->comb_tilde_02_feedBack__maxdelay;
            }
            
            void comb_tilde_02_init() {
                this->comb_tilde_02_feedForward_init();
                this->comb_tilde_02_feedBack_init();
            }
            
            void comb_tilde_02_clear() {
                this->comb_tilde_02_feedForward_clear();
                this->comb_tilde_02_feedBack_clear();
            }
            
            void comb_tilde_02_reset() {
                this->comb_tilde_02_init();
                this->comb_tilde_02_clear();
            }
            
            void comb_tilde_02_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_02_reset();
                this->comb_tilde_02_setupDone = true;
                this->comb_tilde_02_feedForward_dspsetup();
                this->comb_tilde_02_feedBack_dspsetup();
            }
            
            void comb_tilde_03_feedForward_step() {
                this->comb_tilde_03_feedForward_reader++;
            
                if (this->comb_tilde_03_feedForward_reader >= (int)(this->comb_tilde_03_feedForward_buffer->getSize()))
                    this->comb_tilde_03_feedForward_reader = 0;
            }
            
            number comb_tilde_03_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? 1 + this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ), this->comb_tilde_03_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_03_feedForward_buffer->getSize()) + this->comb_tilde_03_feedForward_reader - ((size > this->comb_tilde_03_feedForward__maxdelay ? this->comb_tilde_03_feedForward__maxdelay : (size < (this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer) ? this->comb_tilde_03_feedForward_reader != this->comb_tilde_03_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_03_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedForward_wrap))
                );
            }
            
            void comb_tilde_03_feedForward_write(number v) {
                this->comb_tilde_03_feedForward_writer = this->comb_tilde_03_feedForward_reader;
                this->comb_tilde_03_feedForward_buffer[(Index)this->comb_tilde_03_feedForward_writer] = v;
            }
            
            number comb_tilde_03_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_03_feedForward__maxdelay : size);
                number val = this->comb_tilde_03_feedForward_read(effectiveSize, 0);
                this->comb_tilde_03_feedForward_write(v);
                this->comb_tilde_03_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_03_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_03_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_03_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_03_feedForward_init() {
                auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                this->comb_tilde_03_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_03_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_03_feedForward_clear() {
                this->comb_tilde_03_feedForward_buffer->setZero();
            }
            
            void comb_tilde_03_feedForward_reset() {
                auto result = this->comb_tilde_03_feedForward_calcSizeInSamples();
                this->comb_tilde_03_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_03_feedForward_buffer);
                this->comb_tilde_03_feedForward_wrap = this->comb_tilde_03_feedForward_buffer->getSize() - 1;
                this->comb_tilde_03_feedForward_clear();
            
                if (this->comb_tilde_03_feedForward_reader >= this->comb_tilde_03_feedForward__maxdelay || this->comb_tilde_03_feedForward_writer >= this->comb_tilde_03_feedForward__maxdelay) {
                    this->comb_tilde_03_feedForward_reader = 0;
                    this->comb_tilde_03_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_03_feedForward_dspsetup() {
                this->comb_tilde_03_feedForward_reset();
            }
            
            number comb_tilde_03_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_03_feedForward_size() {
                return this->comb_tilde_03_feedForward__maxdelay;
            }
            
            void comb_tilde_03_feedBack_step() {
                this->comb_tilde_03_feedBack_reader++;
            
                if (this->comb_tilde_03_feedBack_reader >= (int)(this->comb_tilde_03_feedBack_buffer->getSize()))
                    this->comb_tilde_03_feedBack_reader = 0;
            }
            
            number comb_tilde_03_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? 1 + this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ), this->comb_tilde_03_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_03_feedBack_buffer->getSize()) + this->comb_tilde_03_feedBack_reader - ((size > this->comb_tilde_03_feedBack__maxdelay ? this->comb_tilde_03_feedBack__maxdelay : (size < (this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer) ? this->comb_tilde_03_feedBack_reader != this->comb_tilde_03_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_03_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_03_feedBack_wrap))
                );
            }
            
            void comb_tilde_03_feedBack_write(number v) {
                this->comb_tilde_03_feedBack_writer = this->comb_tilde_03_feedBack_reader;
                this->comb_tilde_03_feedBack_buffer[(Index)this->comb_tilde_03_feedBack_writer] = v;
            }
            
            number comb_tilde_03_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_03_feedBack__maxdelay : size);
                number val = this->comb_tilde_03_feedBack_read(effectiveSize, 0);
                this->comb_tilde_03_feedBack_write(v);
                this->comb_tilde_03_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_03_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_03_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_03_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_03_feedBack_init() {
                auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                this->comb_tilde_03_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_03_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_03_feedBack_clear() {
                this->comb_tilde_03_feedBack_buffer->setZero();
            }
            
            void comb_tilde_03_feedBack_reset() {
                auto result = this->comb_tilde_03_feedBack_calcSizeInSamples();
                this->comb_tilde_03_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_03_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_03_feedBack_buffer);
                this->comb_tilde_03_feedBack_wrap = this->comb_tilde_03_feedBack_buffer->getSize() - 1;
                this->comb_tilde_03_feedBack_clear();
            
                if (this->comb_tilde_03_feedBack_reader >= this->comb_tilde_03_feedBack__maxdelay || this->comb_tilde_03_feedBack_writer >= this->comb_tilde_03_feedBack__maxdelay) {
                    this->comb_tilde_03_feedBack_reader = 0;
                    this->comb_tilde_03_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_03_feedBack_dspsetup() {
                this->comb_tilde_03_feedBack_reset();
            }
            
            number comb_tilde_03_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_03_feedBack_size() {
                return this->comb_tilde_03_feedBack__maxdelay;
            }
            
            void comb_tilde_03_init() {
                this->comb_tilde_03_feedForward_init();
                this->comb_tilde_03_feedBack_init();
            }
            
            void comb_tilde_03_clear() {
                this->comb_tilde_03_feedForward_clear();
                this->comb_tilde_03_feedBack_clear();
            }
            
            void comb_tilde_03_reset() {
                this->comb_tilde_03_init();
                this->comb_tilde_03_clear();
            }
            
            void comb_tilde_03_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_03_reset();
                this->comb_tilde_03_setupDone = true;
                this->comb_tilde_03_feedForward_dspsetup();
                this->comb_tilde_03_feedBack_dspsetup();
            }
            
            void comb_tilde_04_feedForward_step() {
                this->comb_tilde_04_feedForward_reader++;
            
                if (this->comb_tilde_04_feedForward_reader >= (int)(this->comb_tilde_04_feedForward_buffer->getSize()))
                    this->comb_tilde_04_feedForward_reader = 0;
            }
            
            number comb_tilde_04_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? 1 + this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ), this->comb_tilde_04_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_04_feedForward_buffer->getSize()) + this->comb_tilde_04_feedForward_reader - ((size > this->comb_tilde_04_feedForward__maxdelay ? this->comb_tilde_04_feedForward__maxdelay : (size < (this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer) ? this->comb_tilde_04_feedForward_reader != this->comb_tilde_04_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_04_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedForward_wrap))
                );
            }
            
            void comb_tilde_04_feedForward_write(number v) {
                this->comb_tilde_04_feedForward_writer = this->comb_tilde_04_feedForward_reader;
                this->comb_tilde_04_feedForward_buffer[(Index)this->comb_tilde_04_feedForward_writer] = v;
            }
            
            number comb_tilde_04_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_04_feedForward__maxdelay : size);
                number val = this->comb_tilde_04_feedForward_read(effectiveSize, 0);
                this->comb_tilde_04_feedForward_write(v);
                this->comb_tilde_04_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_04_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_04_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_04_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_04_feedForward_init() {
                auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                this->comb_tilde_04_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_04_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_04_feedForward_clear() {
                this->comb_tilde_04_feedForward_buffer->setZero();
            }
            
            void comb_tilde_04_feedForward_reset() {
                auto result = this->comb_tilde_04_feedForward_calcSizeInSamples();
                this->comb_tilde_04_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_04_feedForward_buffer);
                this->comb_tilde_04_feedForward_wrap = this->comb_tilde_04_feedForward_buffer->getSize() - 1;
                this->comb_tilde_04_feedForward_clear();
            
                if (this->comb_tilde_04_feedForward_reader >= this->comb_tilde_04_feedForward__maxdelay || this->comb_tilde_04_feedForward_writer >= this->comb_tilde_04_feedForward__maxdelay) {
                    this->comb_tilde_04_feedForward_reader = 0;
                    this->comb_tilde_04_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_04_feedForward_dspsetup() {
                this->comb_tilde_04_feedForward_reset();
            }
            
            number comb_tilde_04_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_04_feedForward_size() {
                return this->comb_tilde_04_feedForward__maxdelay;
            }
            
            void comb_tilde_04_feedBack_step() {
                this->comb_tilde_04_feedBack_reader++;
            
                if (this->comb_tilde_04_feedBack_reader >= (int)(this->comb_tilde_04_feedBack_buffer->getSize()))
                    this->comb_tilde_04_feedBack_reader = 0;
            }
            
            number comb_tilde_04_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? 1 + this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ), this->comb_tilde_04_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_04_feedBack_buffer->getSize()) + this->comb_tilde_04_feedBack_reader - ((size > this->comb_tilde_04_feedBack__maxdelay ? this->comb_tilde_04_feedBack__maxdelay : (size < (this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer) ? this->comb_tilde_04_feedBack_reader != this->comb_tilde_04_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_04_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_04_feedBack_wrap))
                );
            }
            
            void comb_tilde_04_feedBack_write(number v) {
                this->comb_tilde_04_feedBack_writer = this->comb_tilde_04_feedBack_reader;
                this->comb_tilde_04_feedBack_buffer[(Index)this->comb_tilde_04_feedBack_writer] = v;
            }
            
            number comb_tilde_04_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_04_feedBack__maxdelay : size);
                number val = this->comb_tilde_04_feedBack_read(effectiveSize, 0);
                this->comb_tilde_04_feedBack_write(v);
                this->comb_tilde_04_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_04_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_04_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_04_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_04_feedBack_init() {
                auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                this->comb_tilde_04_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_04_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_04_feedBack_clear() {
                this->comb_tilde_04_feedBack_buffer->setZero();
            }
            
            void comb_tilde_04_feedBack_reset() {
                auto result = this->comb_tilde_04_feedBack_calcSizeInSamples();
                this->comb_tilde_04_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_04_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_04_feedBack_buffer);
                this->comb_tilde_04_feedBack_wrap = this->comb_tilde_04_feedBack_buffer->getSize() - 1;
                this->comb_tilde_04_feedBack_clear();
            
                if (this->comb_tilde_04_feedBack_reader >= this->comb_tilde_04_feedBack__maxdelay || this->comb_tilde_04_feedBack_writer >= this->comb_tilde_04_feedBack__maxdelay) {
                    this->comb_tilde_04_feedBack_reader = 0;
                    this->comb_tilde_04_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_04_feedBack_dspsetup() {
                this->comb_tilde_04_feedBack_reset();
            }
            
            number comb_tilde_04_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_04_feedBack_size() {
                return this->comb_tilde_04_feedBack__maxdelay;
            }
            
            void comb_tilde_04_init() {
                this->comb_tilde_04_feedForward_init();
                this->comb_tilde_04_feedBack_init();
            }
            
            void comb_tilde_04_clear() {
                this->comb_tilde_04_feedForward_clear();
                this->comb_tilde_04_feedBack_clear();
            }
            
            void comb_tilde_04_reset() {
                this->comb_tilde_04_init();
                this->comb_tilde_04_clear();
            }
            
            void comb_tilde_04_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_04_reset();
                this->comb_tilde_04_setupDone = true;
                this->comb_tilde_04_feedForward_dspsetup();
                this->comb_tilde_04_feedBack_dspsetup();
            }
            
            void comb_tilde_05_feedForward_step() {
                this->comb_tilde_05_feedForward_reader++;
            
                if (this->comb_tilde_05_feedForward_reader >= (int)(this->comb_tilde_05_feedForward_buffer->getSize()))
                    this->comb_tilde_05_feedForward_reader = 0;
            }
            
            number comb_tilde_05_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? 1 + this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ), this->comb_tilde_05_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_05_feedForward_buffer->getSize()) + this->comb_tilde_05_feedForward_reader - ((size > this->comb_tilde_05_feedForward__maxdelay ? this->comb_tilde_05_feedForward__maxdelay : (size < (this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer) ? this->comb_tilde_05_feedForward_reader != this->comb_tilde_05_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_05_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedForward_wrap))
                );
            }
            
            void comb_tilde_05_feedForward_write(number v) {
                this->comb_tilde_05_feedForward_writer = this->comb_tilde_05_feedForward_reader;
                this->comb_tilde_05_feedForward_buffer[(Index)this->comb_tilde_05_feedForward_writer] = v;
            }
            
            number comb_tilde_05_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_05_feedForward__maxdelay : size);
                number val = this->comb_tilde_05_feedForward_read(effectiveSize, 0);
                this->comb_tilde_05_feedForward_write(v);
                this->comb_tilde_05_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_05_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_05_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_05_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_05_feedForward_init() {
                auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                this->comb_tilde_05_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_05_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_05_feedForward_clear() {
                this->comb_tilde_05_feedForward_buffer->setZero();
            }
            
            void comb_tilde_05_feedForward_reset() {
                auto result = this->comb_tilde_05_feedForward_calcSizeInSamples();
                this->comb_tilde_05_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_05_feedForward_buffer);
                this->comb_tilde_05_feedForward_wrap = this->comb_tilde_05_feedForward_buffer->getSize() - 1;
                this->comb_tilde_05_feedForward_clear();
            
                if (this->comb_tilde_05_feedForward_reader >= this->comb_tilde_05_feedForward__maxdelay || this->comb_tilde_05_feedForward_writer >= this->comb_tilde_05_feedForward__maxdelay) {
                    this->comb_tilde_05_feedForward_reader = 0;
                    this->comb_tilde_05_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_05_feedForward_dspsetup() {
                this->comb_tilde_05_feedForward_reset();
            }
            
            number comb_tilde_05_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_05_feedForward_size() {
                return this->comb_tilde_05_feedForward__maxdelay;
            }
            
            void comb_tilde_05_feedBack_step() {
                this->comb_tilde_05_feedBack_reader++;
            
                if (this->comb_tilde_05_feedBack_reader >= (int)(this->comb_tilde_05_feedBack_buffer->getSize()))
                    this->comb_tilde_05_feedBack_reader = 0;
            }
            
            number comb_tilde_05_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? 1 + this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ), this->comb_tilde_05_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_05_feedBack_buffer->getSize()) + this->comb_tilde_05_feedBack_reader - ((size > this->comb_tilde_05_feedBack__maxdelay ? this->comb_tilde_05_feedBack__maxdelay : (size < (this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer) ? this->comb_tilde_05_feedBack_reader != this->comb_tilde_05_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_05_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_05_feedBack_wrap))
                );
            }
            
            void comb_tilde_05_feedBack_write(number v) {
                this->comb_tilde_05_feedBack_writer = this->comb_tilde_05_feedBack_reader;
                this->comb_tilde_05_feedBack_buffer[(Index)this->comb_tilde_05_feedBack_writer] = v;
            }
            
            number comb_tilde_05_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_05_feedBack__maxdelay : size);
                number val = this->comb_tilde_05_feedBack_read(effectiveSize, 0);
                this->comb_tilde_05_feedBack_write(v);
                this->comb_tilde_05_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_05_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_05_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_05_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_05_feedBack_init() {
                auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                this->comb_tilde_05_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_05_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_05_feedBack_clear() {
                this->comb_tilde_05_feedBack_buffer->setZero();
            }
            
            void comb_tilde_05_feedBack_reset() {
                auto result = this->comb_tilde_05_feedBack_calcSizeInSamples();
                this->comb_tilde_05_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_05_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_05_feedBack_buffer);
                this->comb_tilde_05_feedBack_wrap = this->comb_tilde_05_feedBack_buffer->getSize() - 1;
                this->comb_tilde_05_feedBack_clear();
            
                if (this->comb_tilde_05_feedBack_reader >= this->comb_tilde_05_feedBack__maxdelay || this->comb_tilde_05_feedBack_writer >= this->comb_tilde_05_feedBack__maxdelay) {
                    this->comb_tilde_05_feedBack_reader = 0;
                    this->comb_tilde_05_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_05_feedBack_dspsetup() {
                this->comb_tilde_05_feedBack_reset();
            }
            
            number comb_tilde_05_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_05_feedBack_size() {
                return this->comb_tilde_05_feedBack__maxdelay;
            }
            
            void comb_tilde_05_init() {
                this->comb_tilde_05_feedForward_init();
                this->comb_tilde_05_feedBack_init();
            }
            
            void comb_tilde_05_clear() {
                this->comb_tilde_05_feedForward_clear();
                this->comb_tilde_05_feedBack_clear();
            }
            
            void comb_tilde_05_reset() {
                this->comb_tilde_05_init();
                this->comb_tilde_05_clear();
            }
            
            void comb_tilde_05_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_05_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_05_reset();
                this->comb_tilde_05_setupDone = true;
                this->comb_tilde_05_feedForward_dspsetup();
                this->comb_tilde_05_feedBack_dspsetup();
            }
            
            void comb_tilde_06_feedForward_step() {
                this->comb_tilde_06_feedForward_reader++;
            
                if (this->comb_tilde_06_feedForward_reader >= (int)(this->comb_tilde_06_feedForward_buffer->getSize()))
                    this->comb_tilde_06_feedForward_reader = 0;
            }
            
            number comb_tilde_06_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? 1 + this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ), this->comb_tilde_06_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_06_feedForward_buffer->getSize()) + this->comb_tilde_06_feedForward_reader - ((size > this->comb_tilde_06_feedForward__maxdelay ? this->comb_tilde_06_feedForward__maxdelay : (size < (this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer) ? this->comb_tilde_06_feedForward_reader != this->comb_tilde_06_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_06_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedForward_wrap))
                );
            }
            
            void comb_tilde_06_feedForward_write(number v) {
                this->comb_tilde_06_feedForward_writer = this->comb_tilde_06_feedForward_reader;
                this->comb_tilde_06_feedForward_buffer[(Index)this->comb_tilde_06_feedForward_writer] = v;
            }
            
            number comb_tilde_06_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_06_feedForward__maxdelay : size);
                number val = this->comb_tilde_06_feedForward_read(effectiveSize, 0);
                this->comb_tilde_06_feedForward_write(v);
                this->comb_tilde_06_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_06_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_06_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_06_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_06_feedForward_init() {
                auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                this->comb_tilde_06_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_06_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_06_feedForward_clear() {
                this->comb_tilde_06_feedForward_buffer->setZero();
            }
            
            void comb_tilde_06_feedForward_reset() {
                auto result = this->comb_tilde_06_feedForward_calcSizeInSamples();
                this->comb_tilde_06_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_06_feedForward_buffer);
                this->comb_tilde_06_feedForward_wrap = this->comb_tilde_06_feedForward_buffer->getSize() - 1;
                this->comb_tilde_06_feedForward_clear();
            
                if (this->comb_tilde_06_feedForward_reader >= this->comb_tilde_06_feedForward__maxdelay || this->comb_tilde_06_feedForward_writer >= this->comb_tilde_06_feedForward__maxdelay) {
                    this->comb_tilde_06_feedForward_reader = 0;
                    this->comb_tilde_06_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_06_feedForward_dspsetup() {
                this->comb_tilde_06_feedForward_reset();
            }
            
            number comb_tilde_06_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_06_feedForward_size() {
                return this->comb_tilde_06_feedForward__maxdelay;
            }
            
            void comb_tilde_06_feedBack_step() {
                this->comb_tilde_06_feedBack_reader++;
            
                if (this->comb_tilde_06_feedBack_reader >= (int)(this->comb_tilde_06_feedBack_buffer->getSize()))
                    this->comb_tilde_06_feedBack_reader = 0;
            }
            
            number comb_tilde_06_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? 1 + this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ), this->comb_tilde_06_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_06_feedBack_buffer->getSize()) + this->comb_tilde_06_feedBack_reader - ((size > this->comb_tilde_06_feedBack__maxdelay ? this->comb_tilde_06_feedBack__maxdelay : (size < (this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer) ? this->comb_tilde_06_feedBack_reader != this->comb_tilde_06_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_06_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_06_feedBack_wrap))
                );
            }
            
            void comb_tilde_06_feedBack_write(number v) {
                this->comb_tilde_06_feedBack_writer = this->comb_tilde_06_feedBack_reader;
                this->comb_tilde_06_feedBack_buffer[(Index)this->comb_tilde_06_feedBack_writer] = v;
            }
            
            number comb_tilde_06_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_06_feedBack__maxdelay : size);
                number val = this->comb_tilde_06_feedBack_read(effectiveSize, 0);
                this->comb_tilde_06_feedBack_write(v);
                this->comb_tilde_06_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_06_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_06_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_06_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_06_feedBack_init() {
                auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                this->comb_tilde_06_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_06_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_06_feedBack_clear() {
                this->comb_tilde_06_feedBack_buffer->setZero();
            }
            
            void comb_tilde_06_feedBack_reset() {
                auto result = this->comb_tilde_06_feedBack_calcSizeInSamples();
                this->comb_tilde_06_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_06_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_06_feedBack_buffer);
                this->comb_tilde_06_feedBack_wrap = this->comb_tilde_06_feedBack_buffer->getSize() - 1;
                this->comb_tilde_06_feedBack_clear();
            
                if (this->comb_tilde_06_feedBack_reader >= this->comb_tilde_06_feedBack__maxdelay || this->comb_tilde_06_feedBack_writer >= this->comb_tilde_06_feedBack__maxdelay) {
                    this->comb_tilde_06_feedBack_reader = 0;
                    this->comb_tilde_06_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_06_feedBack_dspsetup() {
                this->comb_tilde_06_feedBack_reset();
            }
            
            number comb_tilde_06_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_06_feedBack_size() {
                return this->comb_tilde_06_feedBack__maxdelay;
            }
            
            void comb_tilde_06_init() {
                this->comb_tilde_06_feedForward_init();
                this->comb_tilde_06_feedBack_init();
            }
            
            void comb_tilde_06_clear() {
                this->comb_tilde_06_feedForward_clear();
                this->comb_tilde_06_feedBack_clear();
            }
            
            void comb_tilde_06_reset() {
                this->comb_tilde_06_init();
                this->comb_tilde_06_clear();
            }
            
            void comb_tilde_06_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_06_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_06_reset();
                this->comb_tilde_06_setupDone = true;
                this->comb_tilde_06_feedForward_dspsetup();
                this->comb_tilde_06_feedBack_dspsetup();
            }
            
            void comb_tilde_07_feedForward_step() {
                this->comb_tilde_07_feedForward_reader++;
            
                if (this->comb_tilde_07_feedForward_reader >= (int)(this->comb_tilde_07_feedForward_buffer->getSize()))
                    this->comb_tilde_07_feedForward_reader = 0;
            }
            
            number comb_tilde_07_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? 1 + this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ), this->comb_tilde_07_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_07_feedForward_buffer->getSize()) + this->comb_tilde_07_feedForward_reader - ((size > this->comb_tilde_07_feedForward__maxdelay ? this->comb_tilde_07_feedForward__maxdelay : (size < (this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer) ? this->comb_tilde_07_feedForward_reader != this->comb_tilde_07_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_07_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedForward_wrap))
                );
            }
            
            void comb_tilde_07_feedForward_write(number v) {
                this->comb_tilde_07_feedForward_writer = this->comb_tilde_07_feedForward_reader;
                this->comb_tilde_07_feedForward_buffer[(Index)this->comb_tilde_07_feedForward_writer] = v;
            }
            
            number comb_tilde_07_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_07_feedForward__maxdelay : size);
                number val = this->comb_tilde_07_feedForward_read(effectiveSize, 0);
                this->comb_tilde_07_feedForward_write(v);
                this->comb_tilde_07_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_07_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_07_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_07_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_07_feedForward_init() {
                auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                this->comb_tilde_07_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_07_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_07_feedForward_clear() {
                this->comb_tilde_07_feedForward_buffer->setZero();
            }
            
            void comb_tilde_07_feedForward_reset() {
                auto result = this->comb_tilde_07_feedForward_calcSizeInSamples();
                this->comb_tilde_07_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_07_feedForward_buffer);
                this->comb_tilde_07_feedForward_wrap = this->comb_tilde_07_feedForward_buffer->getSize() - 1;
                this->comb_tilde_07_feedForward_clear();
            
                if (this->comb_tilde_07_feedForward_reader >= this->comb_tilde_07_feedForward__maxdelay || this->comb_tilde_07_feedForward_writer >= this->comb_tilde_07_feedForward__maxdelay) {
                    this->comb_tilde_07_feedForward_reader = 0;
                    this->comb_tilde_07_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_07_feedForward_dspsetup() {
                this->comb_tilde_07_feedForward_reset();
            }
            
            number comb_tilde_07_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_07_feedForward_size() {
                return this->comb_tilde_07_feedForward__maxdelay;
            }
            
            void comb_tilde_07_feedBack_step() {
                this->comb_tilde_07_feedBack_reader++;
            
                if (this->comb_tilde_07_feedBack_reader >= (int)(this->comb_tilde_07_feedBack_buffer->getSize()))
                    this->comb_tilde_07_feedBack_reader = 0;
            }
            
            number comb_tilde_07_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? 1 + this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ), this->comb_tilde_07_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_07_feedBack_buffer->getSize()) + this->comb_tilde_07_feedBack_reader - ((size > this->comb_tilde_07_feedBack__maxdelay ? this->comb_tilde_07_feedBack__maxdelay : (size < (this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer) ? this->comb_tilde_07_feedBack_reader != this->comb_tilde_07_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_07_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_07_feedBack_wrap))
                );
            }
            
            void comb_tilde_07_feedBack_write(number v) {
                this->comb_tilde_07_feedBack_writer = this->comb_tilde_07_feedBack_reader;
                this->comb_tilde_07_feedBack_buffer[(Index)this->comb_tilde_07_feedBack_writer] = v;
            }
            
            number comb_tilde_07_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_07_feedBack__maxdelay : size);
                number val = this->comb_tilde_07_feedBack_read(effectiveSize, 0);
                this->comb_tilde_07_feedBack_write(v);
                this->comb_tilde_07_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_07_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_07_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_07_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_07_feedBack_init() {
                auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                this->comb_tilde_07_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_07_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_07_feedBack_clear() {
                this->comb_tilde_07_feedBack_buffer->setZero();
            }
            
            void comb_tilde_07_feedBack_reset() {
                auto result = this->comb_tilde_07_feedBack_calcSizeInSamples();
                this->comb_tilde_07_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_07_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_07_feedBack_buffer);
                this->comb_tilde_07_feedBack_wrap = this->comb_tilde_07_feedBack_buffer->getSize() - 1;
                this->comb_tilde_07_feedBack_clear();
            
                if (this->comb_tilde_07_feedBack_reader >= this->comb_tilde_07_feedBack__maxdelay || this->comb_tilde_07_feedBack_writer >= this->comb_tilde_07_feedBack__maxdelay) {
                    this->comb_tilde_07_feedBack_reader = 0;
                    this->comb_tilde_07_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_07_feedBack_dspsetup() {
                this->comb_tilde_07_feedBack_reset();
            }
            
            number comb_tilde_07_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_07_feedBack_size() {
                return this->comb_tilde_07_feedBack__maxdelay;
            }
            
            void comb_tilde_07_init() {
                this->comb_tilde_07_feedForward_init();
                this->comb_tilde_07_feedBack_init();
            }
            
            void comb_tilde_07_clear() {
                this->comb_tilde_07_feedForward_clear();
                this->comb_tilde_07_feedBack_clear();
            }
            
            void comb_tilde_07_reset() {
                this->comb_tilde_07_init();
                this->comb_tilde_07_clear();
            }
            
            void comb_tilde_07_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_07_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_07_reset();
                this->comb_tilde_07_setupDone = true;
                this->comb_tilde_07_feedForward_dspsetup();
                this->comb_tilde_07_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                comb_tilde_01_x = 0;
                comb_tilde_01_delayTime = 110;
                comb_tilde_01_gain = 0;
                comb_tilde_01_ffGain = 1;
                comb_tilde_01_fbGain = 0;
                dspexpr_02_in1 = 0;
                dspexpr_02_in2 = 110;
                comb_tilde_02_x = 0;
                comb_tilde_02_delayTime = 160;
                comb_tilde_02_gain = 0;
                comb_tilde_02_ffGain = 1;
                comb_tilde_02_fbGain = 0;
                dspexpr_03_in1 = 0;
                dspexpr_03_in2 = 160;
                comb_tilde_03_x = 0;
                comb_tilde_03_delayTime = 50;
                comb_tilde_03_gain = 0;
                comb_tilde_03_ffGain = 1;
                comb_tilde_03_fbGain = 0;
                dspexpr_04_in1 = 0;
                dspexpr_04_in2 = 50;
                dspexpr_05_in1 = 0;
                dspexpr_05_in2 = 0.355;
                comb_tilde_04_x = 0;
                comb_tilde_04_delayTime = 25;
                comb_tilde_04_gain = 0;
                comb_tilde_04_ffGain = 1;
                comb_tilde_04_fbGain = 0;
                dspexpr_06_in1 = 0;
                dspexpr_06_in2 = 0;
                dspexpr_07_in1 = 0;
                dspexpr_07_in2 = 25;
                dspexpr_08_in1 = 0;
                dspexpr_08_in2 = -1;
                comb_tilde_05_x = 0;
                comb_tilde_05_delayTime = 69;
                comb_tilde_05_gain = 0;
                comb_tilde_05_ffGain = 1;
                comb_tilde_05_fbGain = 0;
                dspexpr_09_in1 = 0;
                dspexpr_09_in2 = 69;
                comb_tilde_06_x = 0;
                comb_tilde_06_delayTime = 80;
                comb_tilde_06_gain = 0;
                comb_tilde_06_ffGain = 1;
                comb_tilde_06_fbGain = 0;
                dspexpr_10_in1 = 0;
                dspexpr_10_in2 = 80;
                comb_tilde_07_x = 0;
                comb_tilde_07_delayTime = 75;
                comb_tilde_07_gain = 0;
                comb_tilde_07_ffGain = 1;
                comb_tilde_07_fbGain = 0;
                dspexpr_11_in1 = 0;
                dspexpr_11_in2 = 75;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                comb_tilde_01_feedForward__maxdelay = 0;
                comb_tilde_01_feedForward_sizemode = 0;
                comb_tilde_01_feedForward_wrap = 0;
                comb_tilde_01_feedForward_reader = 0;
                comb_tilde_01_feedForward_writer = 0;
                comb_tilde_01_feedBack__maxdelay = 0;
                comb_tilde_01_feedBack_sizemode = 0;
                comb_tilde_01_feedBack_wrap = 0;
                comb_tilde_01_feedBack_reader = 0;
                comb_tilde_01_feedBack_writer = 0;
                comb_tilde_01_setupDone = false;
                comb_tilde_02_feedForward__maxdelay = 0;
                comb_tilde_02_feedForward_sizemode = 0;
                comb_tilde_02_feedForward_wrap = 0;
                comb_tilde_02_feedForward_reader = 0;
                comb_tilde_02_feedForward_writer = 0;
                comb_tilde_02_feedBack__maxdelay = 0;
                comb_tilde_02_feedBack_sizemode = 0;
                comb_tilde_02_feedBack_wrap = 0;
                comb_tilde_02_feedBack_reader = 0;
                comb_tilde_02_feedBack_writer = 0;
                comb_tilde_02_setupDone = false;
                comb_tilde_03_feedForward__maxdelay = 0;
                comb_tilde_03_feedForward_sizemode = 0;
                comb_tilde_03_feedForward_wrap = 0;
                comb_tilde_03_feedForward_reader = 0;
                comb_tilde_03_feedForward_writer = 0;
                comb_tilde_03_feedBack__maxdelay = 0;
                comb_tilde_03_feedBack_sizemode = 0;
                comb_tilde_03_feedBack_wrap = 0;
                comb_tilde_03_feedBack_reader = 0;
                comb_tilde_03_feedBack_writer = 0;
                comb_tilde_03_setupDone = false;
                comb_tilde_04_feedForward__maxdelay = 0;
                comb_tilde_04_feedForward_sizemode = 0;
                comb_tilde_04_feedForward_wrap = 0;
                comb_tilde_04_feedForward_reader = 0;
                comb_tilde_04_feedForward_writer = 0;
                comb_tilde_04_feedBack__maxdelay = 0;
                comb_tilde_04_feedBack_sizemode = 0;
                comb_tilde_04_feedBack_wrap = 0;
                comb_tilde_04_feedBack_reader = 0;
                comb_tilde_04_feedBack_writer = 0;
                comb_tilde_04_setupDone = false;
                comb_tilde_05_feedForward__maxdelay = 0;
                comb_tilde_05_feedForward_sizemode = 0;
                comb_tilde_05_feedForward_wrap = 0;
                comb_tilde_05_feedForward_reader = 0;
                comb_tilde_05_feedForward_writer = 0;
                comb_tilde_05_feedBack__maxdelay = 0;
                comb_tilde_05_feedBack_sizemode = 0;
                comb_tilde_05_feedBack_wrap = 0;
                comb_tilde_05_feedBack_reader = 0;
                comb_tilde_05_feedBack_writer = 0;
                comb_tilde_05_setupDone = false;
                comb_tilde_06_feedForward__maxdelay = 0;
                comb_tilde_06_feedForward_sizemode = 0;
                comb_tilde_06_feedForward_wrap = 0;
                comb_tilde_06_feedForward_reader = 0;
                comb_tilde_06_feedForward_writer = 0;
                comb_tilde_06_feedBack__maxdelay = 0;
                comb_tilde_06_feedBack_sizemode = 0;
                comb_tilde_06_feedBack_wrap = 0;
                comb_tilde_06_feedBack_reader = 0;
                comb_tilde_06_feedBack_writer = 0;
                comb_tilde_06_setupDone = false;
                comb_tilde_07_feedForward__maxdelay = 0;
                comb_tilde_07_feedForward_sizemode = 0;
                comb_tilde_07_feedForward_wrap = 0;
                comb_tilde_07_feedForward_reader = 0;
                comb_tilde_07_feedForward_writer = 0;
                comb_tilde_07_feedBack__maxdelay = 0;
                comb_tilde_07_feedBack_sizemode = 0;
                comb_tilde_07_feedBack_wrap = 0;
                comb_tilde_07_feedBack_reader = 0;
                comb_tilde_07_feedBack_writer = 0;
                comb_tilde_07_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number comb_tilde_01_x;
                number comb_tilde_01_delayTime;
                number comb_tilde_01_gain;
                number comb_tilde_01_ffGain;
                number comb_tilde_01_fbGain;
                number dspexpr_02_in1;
                number dspexpr_02_in2;
                number comb_tilde_02_x;
                number comb_tilde_02_delayTime;
                number comb_tilde_02_gain;
                number comb_tilde_02_ffGain;
                number comb_tilde_02_fbGain;
                number dspexpr_03_in1;
                number dspexpr_03_in2;
                number comb_tilde_03_x;
                number comb_tilde_03_delayTime;
                number comb_tilde_03_gain;
                number comb_tilde_03_ffGain;
                number comb_tilde_03_fbGain;
                number dspexpr_04_in1;
                number dspexpr_04_in2;
                number dspexpr_05_in1;
                number dspexpr_05_in2;
                number comb_tilde_04_x;
                number comb_tilde_04_delayTime;
                number comb_tilde_04_gain;
                number comb_tilde_04_ffGain;
                number comb_tilde_04_fbGain;
                number dspexpr_06_in1;
                number dspexpr_06_in2;
                number dspexpr_07_in1;
                number dspexpr_07_in2;
                number dspexpr_08_in1;
                number dspexpr_08_in2;
                number comb_tilde_05_x;
                number comb_tilde_05_delayTime;
                number comb_tilde_05_gain;
                number comb_tilde_05_ffGain;
                number comb_tilde_05_fbGain;
                number dspexpr_09_in1;
                number dspexpr_09_in2;
                number comb_tilde_06_x;
                number comb_tilde_06_delayTime;
                number comb_tilde_06_gain;
                number comb_tilde_06_ffGain;
                number comb_tilde_06_fbGain;
                number dspexpr_10_in1;
                number dspexpr_10_in2;
                number comb_tilde_07_x;
                number comb_tilde_07_delayTime;
                number comb_tilde_07_gain;
                number comb_tilde_07_ffGain;
                number comb_tilde_07_fbGain;
                number dspexpr_11_in1;
                number dspexpr_11_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef comb_tilde_01_feedForward_buffer;
                Index comb_tilde_01_feedForward__maxdelay;
                Int comb_tilde_01_feedForward_sizemode;
                Index comb_tilde_01_feedForward_wrap;
                Int comb_tilde_01_feedForward_reader;
                Int comb_tilde_01_feedForward_writer;
                Float64BufferRef comb_tilde_01_feedBack_buffer;
                Index comb_tilde_01_feedBack__maxdelay;
                Int comb_tilde_01_feedBack_sizemode;
                Index comb_tilde_01_feedBack_wrap;
                Int comb_tilde_01_feedBack_reader;
                Int comb_tilde_01_feedBack_writer;
                bool comb_tilde_01_setupDone;
                Float64BufferRef comb_tilde_02_feedForward_buffer;
                Index comb_tilde_02_feedForward__maxdelay;
                Int comb_tilde_02_feedForward_sizemode;
                Index comb_tilde_02_feedForward_wrap;
                Int comb_tilde_02_feedForward_reader;
                Int comb_tilde_02_feedForward_writer;
                Float64BufferRef comb_tilde_02_feedBack_buffer;
                Index comb_tilde_02_feedBack__maxdelay;
                Int comb_tilde_02_feedBack_sizemode;
                Index comb_tilde_02_feedBack_wrap;
                Int comb_tilde_02_feedBack_reader;
                Int comb_tilde_02_feedBack_writer;
                bool comb_tilde_02_setupDone;
                Float64BufferRef comb_tilde_03_feedForward_buffer;
                Index comb_tilde_03_feedForward__maxdelay;
                Int comb_tilde_03_feedForward_sizemode;
                Index comb_tilde_03_feedForward_wrap;
                Int comb_tilde_03_feedForward_reader;
                Int comb_tilde_03_feedForward_writer;
                Float64BufferRef comb_tilde_03_feedBack_buffer;
                Index comb_tilde_03_feedBack__maxdelay;
                Int comb_tilde_03_feedBack_sizemode;
                Index comb_tilde_03_feedBack_wrap;
                Int comb_tilde_03_feedBack_reader;
                Int comb_tilde_03_feedBack_writer;
                bool comb_tilde_03_setupDone;
                Float64BufferRef comb_tilde_04_feedForward_buffer;
                Index comb_tilde_04_feedForward__maxdelay;
                Int comb_tilde_04_feedForward_sizemode;
                Index comb_tilde_04_feedForward_wrap;
                Int comb_tilde_04_feedForward_reader;
                Int comb_tilde_04_feedForward_writer;
                Float64BufferRef comb_tilde_04_feedBack_buffer;
                Index comb_tilde_04_feedBack__maxdelay;
                Int comb_tilde_04_feedBack_sizemode;
                Index comb_tilde_04_feedBack_wrap;
                Int comb_tilde_04_feedBack_reader;
                Int comb_tilde_04_feedBack_writer;
                bool comb_tilde_04_setupDone;
                Float64BufferRef comb_tilde_05_feedForward_buffer;
                Index comb_tilde_05_feedForward__maxdelay;
                Int comb_tilde_05_feedForward_sizemode;
                Index comb_tilde_05_feedForward_wrap;
                Int comb_tilde_05_feedForward_reader;
                Int comb_tilde_05_feedForward_writer;
                Float64BufferRef comb_tilde_05_feedBack_buffer;
                Index comb_tilde_05_feedBack__maxdelay;
                Int comb_tilde_05_feedBack_sizemode;
                Index comb_tilde_05_feedBack_wrap;
                Int comb_tilde_05_feedBack_reader;
                Int comb_tilde_05_feedBack_writer;
                bool comb_tilde_05_setupDone;
                Float64BufferRef comb_tilde_06_feedForward_buffer;
                Index comb_tilde_06_feedForward__maxdelay;
                Int comb_tilde_06_feedForward_sizemode;
                Index comb_tilde_06_feedForward_wrap;
                Int comb_tilde_06_feedForward_reader;
                Int comb_tilde_06_feedForward_writer;
                Float64BufferRef comb_tilde_06_feedBack_buffer;
                Index comb_tilde_06_feedBack__maxdelay;
                Int comb_tilde_06_feedBack_sizemode;
                Index comb_tilde_06_feedBack_wrap;
                Int comb_tilde_06_feedBack_reader;
                Int comb_tilde_06_feedBack_writer;
                bool comb_tilde_06_setupDone;
                Float64BufferRef comb_tilde_07_feedForward_buffer;
                Index comb_tilde_07_feedForward__maxdelay;
                Int comb_tilde_07_feedForward_sizemode;
                Index comb_tilde_07_feedForward_wrap;
                Int comb_tilde_07_feedForward_reader;
                Int comb_tilde_07_feedForward_writer;
                Float64BufferRef comb_tilde_07_feedBack_buffer;
                Index comb_tilde_07_feedBack__maxdelay;
                Int comb_tilde_07_feedBack_sizemode;
                Index comb_tilde_07_feedBack_wrap;
                Int comb_tilde_07_feedBack_reader;
                Int comb_tilde_07_feedBack_writer;
                bool comb_tilde_07_setupDone;
                number stackprotect_count;
                DataRef comb_tilde_01_feedForward_bufferobj;
                DataRef comb_tilde_01_feedBack_bufferobj;
                DataRef comb_tilde_02_feedForward_bufferobj;
                DataRef comb_tilde_02_feedBack_bufferobj;
                DataRef comb_tilde_03_feedForward_bufferobj;
                DataRef comb_tilde_03_feedBack_bufferobj;
                DataRef comb_tilde_04_feedForward_bufferobj;
                DataRef comb_tilde_04_feedBack_bufferobj;
                DataRef comb_tilde_05_feedForward_bufferobj;
                DataRef comb_tilde_05_feedBack_bufferobj;
                DataRef comb_tilde_06_feedForward_bufferobj;
                DataRef comb_tilde_06_feedBack_bufferobj;
                DataRef comb_tilde_07_feedForward_bufferobj;
                DataRef comb_tilde_07_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_94 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_100;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_94()
            {
            }
            
            ~RNBOSubpatcher_94()
            {
            }
            
            virtual RNBOSubpatcher_100* getPatcher() const {
                return static_cast<RNBOSubpatcher_100 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Size = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * target_Decay = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * target_Jitter = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * target_Damp = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->noise_tilde_01_perform(this->signals[0], n);
            
                this->lores_01_perform(
                    this->lores_01_cutoff,
                    this->lores_01_resonance,
                    this->signals[0],
                    this->signals[1],
                    n
                );
            
                this->feedbackreader_01_perform(this->signals[0], n);
                this->stackprotect_perform(n);
                this->signalreceive_03_perform(target_Size, this->signals[2], n);
                this->dspexpr_14_perform(this->signals[2], this->dspexpr_14_in2, this->signals[3], n);
                this->dspexpr_12_perform(this->signals[2], this->dspexpr_12_in2, this->signals[4], n);
                this->signaladder_17_perform(in1, this->signals[0], this->signals[0], n);
                this->allpass_tilde_09_perform(this->signals[0], this->signals[4], this->allpass_tilde_09_gain, out1, n);
                this->signalreceive_07_perform(target_Size, this->signals[4], n);
                this->dspexpr_18_perform(this->signals[4], this->dspexpr_18_in2, this->signals[2], n);
                this->mstosamps_tilde_01_perform(this->signals[2], this->signals[5], n);
                this->dspexpr_17_perform(this->signals[4], this->dspexpr_17_in2, this->signals[2], n);
                this->signalreceive_04_perform(target_Decay, this->signals[4], n);
                this->signalreceive_05_perform(target_Jitter, this->signals[6], n);
                this->dspexpr_16_perform(this->signals[1], this->signals[6], this->signals[7], n);
                this->dspexpr_13_perform(this->signals[3], this->signals[7], this->signals[6], n);
            
                this->comb_tilde_08_perform(
                    out1,
                    this->signals[6],
                    this->comb_tilde_08_gain,
                    this->comb_tilde_08_ffGain,
                    this->comb_tilde_08_fbGain,
                    this->signals[7],
                    n
                );
            
                this->signalforwarder_20_perform(this->signals[7], out2, n);
                this->signalreceive_06_perform(target_Damp, this->signals[6], n);
                this->onepole_tilde_01_perform(this->signals[7], this->signals[6], this->signals[3], n);
                this->dspexpr_15_perform(this->signals[3], this->signals[4], this->signals[6], n);
            
                this->allpass_tilde_10_perform(
                    this->signals[6],
                    this->signals[2],
                    this->allpass_tilde_10_gain,
                    this->signals[4],
                    n
                );
            
                this->delaytilde_01_perform(this->signals[5], this->signals[4], out4, n);
                this->feedbackwriter_01_perform(out4, n);
                this->signalforwarder_21_perform(this->signals[4], out3, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->feedbacktilde_01_feedbackbuffer = resizeSignal(this->feedbacktilde_01_feedbackbuffer, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->lores_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_09_dspsetup(forceDSPSetup);
                this->comb_tilde_08_dspsetup(forceDSPSetup);
                this->onepole_tilde_01_dspsetup(forceDSPSetup);
                this->allpass_tilde_10_dspsetup(forceDSPSetup);
                this->delaytilde_01_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 4;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->allpass_tilde_09_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->allpass_tilde_09_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->comb_tilde_08_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->comb_tilde_08_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->allpass_tilde_10_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->allpass_tilde_10_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->delaytilde_01_del_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 7;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->allpass_tilde_09_feedForward_buffer = new Float64Buffer(this->allpass_tilde_09_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->allpass_tilde_09_feedBack_buffer = new Float64Buffer(this->allpass_tilde_09_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->allpass_tilde_10_feedForward_buffer = new Float64Buffer(this->allpass_tilde_10_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_10_feedBack_buffer = new Float64Buffer(this->allpass_tilde_10_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_09_feedForward_bufferobj = initDataRef("allpass_tilde_09_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_09_feedBack_bufferobj = initDataRef("allpass_tilde_09_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_08_feedForward_bufferobj = initDataRef("comb_tilde_08_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_08_feedBack_bufferobj = initDataRef("comb_tilde_08_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_10_feedForward_bufferobj = initDataRef("allpass_tilde_10_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_10_feedBack_bufferobj = initDataRef("allpass_tilde_10_feedBack_bufferobj", true, nullptr, "buffer~");
                this->delaytilde_01_del_bufferobj = initDataRef("delaytilde_01_del_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_09_feedForward_bufferobj->setIndex(4);
                this->allpass_tilde_09_feedForward_buffer = new Float64Buffer(this->allpass_tilde_09_feedForward_bufferobj);
                this->allpass_tilde_09_feedBack_bufferobj->setIndex(5);
                this->allpass_tilde_09_feedBack_buffer = new Float64Buffer(this->allpass_tilde_09_feedBack_bufferobj);
                this->comb_tilde_08_feedForward_bufferobj->setIndex(6);
                this->comb_tilde_08_feedForward_buffer = new Float64Buffer(this->comb_tilde_08_feedForward_bufferobj);
                this->comb_tilde_08_feedBack_bufferobj->setIndex(7);
                this->comb_tilde_08_feedBack_buffer = new Float64Buffer(this->comb_tilde_08_feedBack_bufferobj);
                this->allpass_tilde_10_feedForward_bufferobj->setIndex(8);
                this->allpass_tilde_10_feedForward_buffer = new Float64Buffer(this->allpass_tilde_10_feedForward_bufferobj);
                this->allpass_tilde_10_feedBack_bufferobj->setIndex(9);
                this->allpass_tilde_10_feedBack_buffer = new Float64Buffer(this->allpass_tilde_10_feedBack_bufferobj);
                this->delaytilde_01_del_bufferobj->setIndex(10);
                this->delaytilde_01_del_buffer = new Float64Buffer(this->delaytilde_01_del_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 4;
            }
            
            void initializeObjects() {
                this->allpass_tilde_09_feedForward_init();
                this->allpass_tilde_09_feedBack_init();
                this->allpass_tilde_09_init();
                this->comb_tilde_08_feedForward_init();
                this->comb_tilde_08_feedBack_init();
                this->comb_tilde_08_init();
                this->allpass_tilde_10_feedForward_init();
                this->allpass_tilde_10_feedBack_init();
                this->allpass_tilde_10_init();
                this->noise_tilde_01_init();
                this->delaytilde_01_del_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_09_feedForward_buffer = this->allpass_tilde_09_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_09_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_09_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->allpass_tilde_09_feedBack_buffer = this->allpass_tilde_09_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_09_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_09_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_08_feedForward_buffer = this->comb_tilde_08_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_08_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_08_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_08_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_08_feedBack_buffer = this->comb_tilde_08_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_08_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_08_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_08_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->allpass_tilde_10_feedForward_buffer = this->allpass_tilde_10_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_10_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_10_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_10_feedBack_buffer = this->allpass_tilde_10_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_10_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_10_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->delaytilde_01_del_buffer = this->delaytilde_01_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_01_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_01_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_01_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            }
            
            void noise_tilde_01_perform(SampleValue * out1, Index n) {
                auto __noise_tilde_01_state = this->noise_tilde_01_state;
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = xoshiro_next(__noise_tilde_01_state);
                }
            }
            
            void lores_01_perform(
                number cutoff,
                number resonance,
                const SampleValue * input,
                SampleValue * out,
                Index n
            ) {
                RNBO_UNUSED(resonance);
                RNBO_UNUSED(cutoff);
                auto __lores_01_y_2 = this->lores_01_y_2;
                auto __lores_01_y_1 = this->lores_01_y_1;
                auto __lores_01_x_0 = this->lores_01_x_0;
                auto __lores_01_b_0 = this->lores_01_b_0;
                auto __lores_01_a_1 = this->lores_01_a_1;
                auto __lores_01_a_2 = this->lores_01_a_2;
                auto __lores_01_last_freq_calc = this->lores_01_last_freq_calc;
                auto __lores_01_last_res_calc = this->lores_01_last_res_calc;
                auto __lores_01_last_frequency = this->lores_01_last_frequency;
                auto __lores_01_last_resonance = this->lores_01_last_resonance;
            
                for (Index i = 0; i < n; i++) {
                    if (0.995 != __lores_01_last_resonance || 0 != __lores_01_last_frequency) {
                        __lores_01_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                        __lores_01_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                        __lores_01_last_resonance = 0.995;
                        __lores_01_last_frequency = 0;
                    }
            
                    number res_temp = __lores_01_last_res_calc;
                    number freq_temp = __lores_01_last_freq_calc;
                    __lores_01_a_2 = res_temp * res_temp;
                    __lores_01_a_1 = -2.0 * res_temp * freq_temp;
                    __lores_01_b_0 = 1.0 + __lores_01_a_1 + __lores_01_a_2;
                    __lores_01_x_0 = input[(Index)i];
                    number y_0 = __lores_01_x_0 * __lores_01_b_0 - __lores_01_y_1 * __lores_01_a_1 - __lores_01_y_2 * __lores_01_a_2;
                    __lores_01_y_2 = __lores_01_y_1;
                    __lores_01_y_1 = y_0;
                    out[(Index)i] = y_0;
                }
            
                this->lores_01_last_resonance = __lores_01_last_resonance;
                this->lores_01_last_frequency = __lores_01_last_frequency;
                this->lores_01_last_res_calc = __lores_01_last_res_calc;
                this->lores_01_last_freq_calc = __lores_01_last_freq_calc;
                this->lores_01_a_2 = __lores_01_a_2;
                this->lores_01_a_1 = __lores_01_a_1;
                this->lores_01_b_0 = __lores_01_b_0;
                this->lores_01_x_0 = __lores_01_x_0;
                this->lores_01_y_1 = __lores_01_y_1;
                this->lores_01_y_2 = __lores_01_y_2;
            }
            
            void feedbackreader_01_perform(SampleValue * output, Index n) {
                auto& buffer = this->feedbacktilde_01_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = buffer[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_03_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_14_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 149.6;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_12_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 22.58;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_17_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                }
            }
            
            void allpass_tilde_09_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = -0.7;
                    auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_09_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_09_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_09_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_09_feedBack_write(ov);
                    this->allpass_tilde_09_feedForward_step();
                    this->allpass_tilde_09_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signalreceive_07_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_18_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 125;//#map:_###_obj_###_:1
                }
            }
            
            void mstosamps_tilde_01_perform(const Sample * ms, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
                }
            }
            
            void dspexpr_17_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 60.48;//#map:_###_obj_###_:1
                }
            }
            
            void signalreceive_04_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void signalreceive_05_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_16_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_13_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_08_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_08_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_08_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_08_feedForward_write(x[(Index)i]);
                    this->comb_tilde_08_feedBack_write(ov);
                    this->comb_tilde_08_feedForward_step();
                    this->comb_tilde_08_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signalforwarder_20_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalreceive_06_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void onepole_tilde_01_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_01_lastY = this->onepole_tilde_01_lastY;
                auto __onepole_tilde_01_b1 = this->onepole_tilde_01_b1;
                auto __onepole_tilde_01_a0 = this->onepole_tilde_01_a0;
                auto __onepole_tilde_01_needsUpdate = this->onepole_tilde_01_needsUpdate;
                auto __onepole_tilde_01_freq = this->onepole_tilde_01_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_01_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_01_needsUpdate)) {
                        __onepole_tilde_01_freq = freqInHz[(Index)i];
                        __onepole_tilde_01_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_01_a0 = (__onepole_tilde_01_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_01_a0 < 0.00001 ? 0.00001 : __onepole_tilde_01_a0));
                        __onepole_tilde_01_b1 = 1 - __onepole_tilde_01_a0;
                        __onepole_tilde_01_needsUpdate = false;
                    }
            
                    __onepole_tilde_01_lastY = __onepole_tilde_01_a0 * x[(Index)i] + __onepole_tilde_01_b1 * __onepole_tilde_01_lastY;
                    out1[(Index)i] = __onepole_tilde_01_lastY;
                }
            
                this->onepole_tilde_01_freq = __onepole_tilde_01_freq;
                this->onepole_tilde_01_needsUpdate = __onepole_tilde_01_needsUpdate;
                this->onepole_tilde_01_a0 = __onepole_tilde_01_a0;
                this->onepole_tilde_01_b1 = __onepole_tilde_01_b1;
                this->onepole_tilde_01_lastY = __onepole_tilde_01_lastY;
            }
            
            void dspexpr_15_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void allpass_tilde_10_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.5;
                    auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_10_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_10_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_10_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_10_feedBack_write(ov);
                    this->allpass_tilde_10_feedForward_step();
                    this->allpass_tilde_10_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void delaytilde_01_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_01_crossfadeDelay = this->delaytilde_01_crossfadeDelay;
                auto __delaytilde_01_rampInSamples = this->delaytilde_01_rampInSamples;
                auto __delaytilde_01_ramp = this->delaytilde_01_ramp;
                auto __delaytilde_01_lastDelay = this->delaytilde_01_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_01_lastDelay == -1) {
                        __delaytilde_01_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_01_ramp > 0) {
                        number factor = __delaytilde_01_ramp / __delaytilde_01_rampInSamples;
                        output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0) * factor + this->delaytilde_01_del_read(__delaytilde_01_lastDelay, 0) * (1. - factor);
                        __delaytilde_01_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_01_lastDelay) {
                            __delaytilde_01_ramp = __delaytilde_01_rampInSamples;
                            __delaytilde_01_crossfadeDelay = __delaytilde_01_lastDelay;
                            __delaytilde_01_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_01_del_read(__delaytilde_01_crossfadeDelay, 0);
                            __delaytilde_01_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_01_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_01_del_write(input[(Index)i]);
                    this->delaytilde_01_del_step();
                }
            
                this->delaytilde_01_lastDelay = __delaytilde_01_lastDelay;
                this->delaytilde_01_ramp = __delaytilde_01_ramp;
                this->delaytilde_01_crossfadeDelay = __delaytilde_01_crossfadeDelay;
            }
            
            void feedbackwriter_01_perform(const SampleValue * input, Index n) {
                auto& buffer = this->feedbacktilde_01_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    buffer[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_21_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void lores_01_resonance_setter(number v) {
                if (v < 0.0) {
                    v = 0.0;
                } else if (v >= 1.0) {
                    v = 1.0 - 1E-20;
                }
            
                this->lores_01_resonance = v;
            }
            
            void allpass_tilde_09_feedForward_step() {
                this->allpass_tilde_09_feedForward_reader++;
            
                if (this->allpass_tilde_09_feedForward_reader >= (int)(this->allpass_tilde_09_feedForward_buffer->getSize()))
                    this->allpass_tilde_09_feedForward_reader = 0;
            }
            
            number allpass_tilde_09_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? 1 + this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ), this->allpass_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_09_feedForward_buffer->getSize()) + this->allpass_tilde_09_feedForward_reader - ((size > this->allpass_tilde_09_feedForward__maxdelay ? this->allpass_tilde_09_feedForward__maxdelay : (size < (this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer) ? this->allpass_tilde_09_feedForward_reader != this->allpass_tilde_09_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_09_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedForward_wrap))
                );
            }
            
            void allpass_tilde_09_feedForward_write(number v) {
                this->allpass_tilde_09_feedForward_writer = this->allpass_tilde_09_feedForward_reader;
                this->allpass_tilde_09_feedForward_buffer[(Index)this->allpass_tilde_09_feedForward_writer] = v;
            }
            
            number allpass_tilde_09_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_09_feedForward__maxdelay : size);
                number val = this->allpass_tilde_09_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_09_feedForward_write(v);
                this->allpass_tilde_09_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_09_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_09_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_09_feedForward_init() {
                auto result = this->allpass_tilde_09_feedForward_calcSizeInSamples();
                this->allpass_tilde_09_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_09_feedForward_clear() {
                this->allpass_tilde_09_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_09_feedForward_reset() {
                auto result = this->allpass_tilde_09_feedForward_calcSizeInSamples();
                this->allpass_tilde_09_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_09_feedForward_buffer);
                this->allpass_tilde_09_feedForward_wrap = this->allpass_tilde_09_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_09_feedForward_clear();
            
                if (this->allpass_tilde_09_feedForward_reader >= this->allpass_tilde_09_feedForward__maxdelay || this->allpass_tilde_09_feedForward_writer >= this->allpass_tilde_09_feedForward__maxdelay) {
                    this->allpass_tilde_09_feedForward_reader = 0;
                    this->allpass_tilde_09_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_09_feedForward_dspsetup() {
                this->allpass_tilde_09_feedForward_reset();
            }
            
            number allpass_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_09_feedForward_size() {
                return this->allpass_tilde_09_feedForward__maxdelay;
            }
            
            void allpass_tilde_09_feedBack_step() {
                this->allpass_tilde_09_feedBack_reader++;
            
                if (this->allpass_tilde_09_feedBack_reader >= (int)(this->allpass_tilde_09_feedBack_buffer->getSize()))
                    this->allpass_tilde_09_feedBack_reader = 0;
            }
            
            number allpass_tilde_09_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? 1 + this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ), this->allpass_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_09_feedBack_buffer->getSize()) + this->allpass_tilde_09_feedBack_reader - ((size > this->allpass_tilde_09_feedBack__maxdelay ? this->allpass_tilde_09_feedBack__maxdelay : (size < (this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer) ? this->allpass_tilde_09_feedBack_reader != this->allpass_tilde_09_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_09_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_09_feedBack_wrap))
                );
            }
            
            void allpass_tilde_09_feedBack_write(number v) {
                this->allpass_tilde_09_feedBack_writer = this->allpass_tilde_09_feedBack_reader;
                this->allpass_tilde_09_feedBack_buffer[(Index)this->allpass_tilde_09_feedBack_writer] = v;
            }
            
            number allpass_tilde_09_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_09_feedBack__maxdelay : size);
                number val = this->allpass_tilde_09_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_09_feedBack_write(v);
                this->allpass_tilde_09_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_09_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_09_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_09_feedBack_init() {
                auto result = this->allpass_tilde_09_feedBack_calcSizeInSamples();
                this->allpass_tilde_09_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_09_feedBack_clear() {
                this->allpass_tilde_09_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_09_feedBack_reset() {
                auto result = this->allpass_tilde_09_feedBack_calcSizeInSamples();
                this->allpass_tilde_09_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_09_feedBack_buffer);
                this->allpass_tilde_09_feedBack_wrap = this->allpass_tilde_09_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_09_feedBack_clear();
            
                if (this->allpass_tilde_09_feedBack_reader >= this->allpass_tilde_09_feedBack__maxdelay || this->allpass_tilde_09_feedBack_writer >= this->allpass_tilde_09_feedBack__maxdelay) {
                    this->allpass_tilde_09_feedBack_reader = 0;
                    this->allpass_tilde_09_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_09_feedBack_dspsetup() {
                this->allpass_tilde_09_feedBack_reset();
            }
            
            number allpass_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_09_feedBack_size() {
                return this->allpass_tilde_09_feedBack__maxdelay;
            }
            
            void allpass_tilde_09_init() {
                this->allpass_tilde_09_feedForward_init();
                this->allpass_tilde_09_feedBack_init();
            }
            
            void allpass_tilde_09_clear() {
                this->allpass_tilde_09_feedForward_clear();
                this->allpass_tilde_09_feedBack_clear();
            }
            
            void allpass_tilde_09_reset() {
                this->allpass_tilde_09_init();
                this->allpass_tilde_09_clear();
            }
            
            void allpass_tilde_09_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_09_reset();
                this->allpass_tilde_09_setupDone = true;
                this->allpass_tilde_09_feedForward_dspsetup();
                this->allpass_tilde_09_feedBack_dspsetup();
            }
            
            void comb_tilde_08_feedForward_step() {
                this->comb_tilde_08_feedForward_reader++;
            
                if (this->comb_tilde_08_feedForward_reader >= (int)(this->comb_tilde_08_feedForward_buffer->getSize()))
                    this->comb_tilde_08_feedForward_reader = 0;
            }
            
            number comb_tilde_08_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? 1 + this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ), this->comb_tilde_08_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_08_feedForward_buffer->getSize()) + this->comb_tilde_08_feedForward_reader - ((size > this->comb_tilde_08_feedForward__maxdelay ? this->comb_tilde_08_feedForward__maxdelay : (size < (this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer) ? this->comb_tilde_08_feedForward_reader != this->comb_tilde_08_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_08_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedForward_wrap))
                );
            }
            
            void comb_tilde_08_feedForward_write(number v) {
                this->comb_tilde_08_feedForward_writer = this->comb_tilde_08_feedForward_reader;
                this->comb_tilde_08_feedForward_buffer[(Index)this->comb_tilde_08_feedForward_writer] = v;
            }
            
            number comb_tilde_08_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_08_feedForward__maxdelay : size);
                number val = this->comb_tilde_08_feedForward_read(effectiveSize, 0);
                this->comb_tilde_08_feedForward_write(v);
                this->comb_tilde_08_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_08_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_08_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_08_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_08_feedForward_init() {
                auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                this->comb_tilde_08_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_08_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_08_feedForward_clear() {
                this->comb_tilde_08_feedForward_buffer->setZero();
            }
            
            void comb_tilde_08_feedForward_reset() {
                auto result = this->comb_tilde_08_feedForward_calcSizeInSamples();
                this->comb_tilde_08_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_08_feedForward_buffer);
                this->comb_tilde_08_feedForward_wrap = this->comb_tilde_08_feedForward_buffer->getSize() - 1;
                this->comb_tilde_08_feedForward_clear();
            
                if (this->comb_tilde_08_feedForward_reader >= this->comb_tilde_08_feedForward__maxdelay || this->comb_tilde_08_feedForward_writer >= this->comb_tilde_08_feedForward__maxdelay) {
                    this->comb_tilde_08_feedForward_reader = 0;
                    this->comb_tilde_08_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_08_feedForward_dspsetup() {
                this->comb_tilde_08_feedForward_reset();
            }
            
            number comb_tilde_08_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_08_feedForward_size() {
                return this->comb_tilde_08_feedForward__maxdelay;
            }
            
            void comb_tilde_08_feedBack_step() {
                this->comb_tilde_08_feedBack_reader++;
            
                if (this->comb_tilde_08_feedBack_reader >= (int)(this->comb_tilde_08_feedBack_buffer->getSize()))
                    this->comb_tilde_08_feedBack_reader = 0;
            }
            
            number comb_tilde_08_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? 1 + this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ), this->comb_tilde_08_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_08_feedBack_buffer->getSize()) + this->comb_tilde_08_feedBack_reader - ((size > this->comb_tilde_08_feedBack__maxdelay ? this->comb_tilde_08_feedBack__maxdelay : (size < (this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer) ? this->comb_tilde_08_feedBack_reader != this->comb_tilde_08_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_08_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_08_feedBack_wrap))
                );
            }
            
            void comb_tilde_08_feedBack_write(number v) {
                this->comb_tilde_08_feedBack_writer = this->comb_tilde_08_feedBack_reader;
                this->comb_tilde_08_feedBack_buffer[(Index)this->comb_tilde_08_feedBack_writer] = v;
            }
            
            number comb_tilde_08_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_08_feedBack__maxdelay : size);
                number val = this->comb_tilde_08_feedBack_read(effectiveSize, 0);
                this->comb_tilde_08_feedBack_write(v);
                this->comb_tilde_08_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_08_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_08_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_08_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_08_feedBack_init() {
                auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                this->comb_tilde_08_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_08_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_08_feedBack_clear() {
                this->comb_tilde_08_feedBack_buffer->setZero();
            }
            
            void comb_tilde_08_feedBack_reset() {
                auto result = this->comb_tilde_08_feedBack_calcSizeInSamples();
                this->comb_tilde_08_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_08_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_08_feedBack_buffer);
                this->comb_tilde_08_feedBack_wrap = this->comb_tilde_08_feedBack_buffer->getSize() - 1;
                this->comb_tilde_08_feedBack_clear();
            
                if (this->comb_tilde_08_feedBack_reader >= this->comb_tilde_08_feedBack__maxdelay || this->comb_tilde_08_feedBack_writer >= this->comb_tilde_08_feedBack__maxdelay) {
                    this->comb_tilde_08_feedBack_reader = 0;
                    this->comb_tilde_08_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_08_feedBack_dspsetup() {
                this->comb_tilde_08_feedBack_reset();
            }
            
            number comb_tilde_08_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_08_feedBack_size() {
                return this->comb_tilde_08_feedBack__maxdelay;
            }
            
            void comb_tilde_08_init() {
                this->comb_tilde_08_feedForward_init();
                this->comb_tilde_08_feedBack_init();
            }
            
            void comb_tilde_08_clear() {
                this->comb_tilde_08_feedForward_clear();
                this->comb_tilde_08_feedBack_clear();
            }
            
            void comb_tilde_08_reset() {
                this->comb_tilde_08_init();
                this->comb_tilde_08_clear();
            }
            
            void comb_tilde_08_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_08_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_08_reset();
                this->comb_tilde_08_setupDone = true;
                this->comb_tilde_08_feedForward_dspsetup();
                this->comb_tilde_08_feedBack_dspsetup();
            }
            
            void allpass_tilde_10_feedForward_step() {
                this->allpass_tilde_10_feedForward_reader++;
            
                if (this->allpass_tilde_10_feedForward_reader >= (int)(this->allpass_tilde_10_feedForward_buffer->getSize()))
                    this->allpass_tilde_10_feedForward_reader = 0;
            }
            
            number allpass_tilde_10_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? 1 + this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ), this->allpass_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_10_feedForward_buffer->getSize()) + this->allpass_tilde_10_feedForward_reader - ((size > this->allpass_tilde_10_feedForward__maxdelay ? this->allpass_tilde_10_feedForward__maxdelay : (size < (this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer) ? this->allpass_tilde_10_feedForward_reader != this->allpass_tilde_10_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_10_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedForward_wrap))
                );
            }
            
            void allpass_tilde_10_feedForward_write(number v) {
                this->allpass_tilde_10_feedForward_writer = this->allpass_tilde_10_feedForward_reader;
                this->allpass_tilde_10_feedForward_buffer[(Index)this->allpass_tilde_10_feedForward_writer] = v;
            }
            
            number allpass_tilde_10_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_10_feedForward__maxdelay : size);
                number val = this->allpass_tilde_10_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_10_feedForward_write(v);
                this->allpass_tilde_10_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_10_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_10_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_10_feedForward_init() {
                auto result = this->allpass_tilde_10_feedForward_calcSizeInSamples();
                this->allpass_tilde_10_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_10_feedForward_clear() {
                this->allpass_tilde_10_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_10_feedForward_reset() {
                auto result = this->allpass_tilde_10_feedForward_calcSizeInSamples();
                this->allpass_tilde_10_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_10_feedForward_buffer);
                this->allpass_tilde_10_feedForward_wrap = this->allpass_tilde_10_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_10_feedForward_clear();
            
                if (this->allpass_tilde_10_feedForward_reader >= this->allpass_tilde_10_feedForward__maxdelay || this->allpass_tilde_10_feedForward_writer >= this->allpass_tilde_10_feedForward__maxdelay) {
                    this->allpass_tilde_10_feedForward_reader = 0;
                    this->allpass_tilde_10_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_10_feedForward_dspsetup() {
                this->allpass_tilde_10_feedForward_reset();
            }
            
            number allpass_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_10_feedForward_size() {
                return this->allpass_tilde_10_feedForward__maxdelay;
            }
            
            void allpass_tilde_10_feedBack_step() {
                this->allpass_tilde_10_feedBack_reader++;
            
                if (this->allpass_tilde_10_feedBack_reader >= (int)(this->allpass_tilde_10_feedBack_buffer->getSize()))
                    this->allpass_tilde_10_feedBack_reader = 0;
            }
            
            number allpass_tilde_10_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? 1 + this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ), this->allpass_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_10_feedBack_buffer->getSize()) + this->allpass_tilde_10_feedBack_reader - ((size > this->allpass_tilde_10_feedBack__maxdelay ? this->allpass_tilde_10_feedBack__maxdelay : (size < (this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer) ? this->allpass_tilde_10_feedBack_reader != this->allpass_tilde_10_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_10_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_10_feedBack_wrap))
                );
            }
            
            void allpass_tilde_10_feedBack_write(number v) {
                this->allpass_tilde_10_feedBack_writer = this->allpass_tilde_10_feedBack_reader;
                this->allpass_tilde_10_feedBack_buffer[(Index)this->allpass_tilde_10_feedBack_writer] = v;
            }
            
            number allpass_tilde_10_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_10_feedBack__maxdelay : size);
                number val = this->allpass_tilde_10_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_10_feedBack_write(v);
                this->allpass_tilde_10_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_10_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_10_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_10_feedBack_init() {
                auto result = this->allpass_tilde_10_feedBack_calcSizeInSamples();
                this->allpass_tilde_10_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_10_feedBack_clear() {
                this->allpass_tilde_10_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_10_feedBack_reset() {
                auto result = this->allpass_tilde_10_feedBack_calcSizeInSamples();
                this->allpass_tilde_10_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_10_feedBack_buffer);
                this->allpass_tilde_10_feedBack_wrap = this->allpass_tilde_10_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_10_feedBack_clear();
            
                if (this->allpass_tilde_10_feedBack_reader >= this->allpass_tilde_10_feedBack__maxdelay || this->allpass_tilde_10_feedBack_writer >= this->allpass_tilde_10_feedBack__maxdelay) {
                    this->allpass_tilde_10_feedBack_reader = 0;
                    this->allpass_tilde_10_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_10_feedBack_dspsetup() {
                this->allpass_tilde_10_feedBack_reset();
            }
            
            number allpass_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_10_feedBack_size() {
                return this->allpass_tilde_10_feedBack__maxdelay;
            }
            
            void allpass_tilde_10_init() {
                this->allpass_tilde_10_feedForward_init();
                this->allpass_tilde_10_feedBack_init();
            }
            
            void allpass_tilde_10_clear() {
                this->allpass_tilde_10_feedForward_clear();
                this->allpass_tilde_10_feedBack_clear();
            }
            
            void allpass_tilde_10_reset() {
                this->allpass_tilde_10_init();
                this->allpass_tilde_10_clear();
            }
            
            void allpass_tilde_10_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_10_reset();
                this->allpass_tilde_10_setupDone = true;
                this->allpass_tilde_10_feedForward_dspsetup();
                this->allpass_tilde_10_feedBack_dspsetup();
            }
            
            void onepole_tilde_01_reset() {
                this->onepole_tilde_01_lastY = 0;
                this->onepole_tilde_01_a0 = 0;
                this->onepole_tilde_01_b1 = 0;
            }
            
            void onepole_tilde_01_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_01_needsUpdate = true;
                this->onepole_tilde_01_reset();
                this->onepole_tilde_01_setupDone = true;
            }
            
            void lores_01_reset() {
                this->lores_01_y_1 = 0;
                this->lores_01_y_2 = 0;
                this->lores_01_last_resonance = 0;
                this->lores_01_last_frequency = 0;
                this->lores_01_last_res_calc = 0;
                this->lores_01_last_freq_calc = 0;
            }
            
            void lores_01_dspsetup(bool force) {
                if ((bool)(this->lores_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->lores_01_reset();
                this->lores_01_setupDone = true;
            }
            
            void noise_tilde_01_init() {
                this->noise_tilde_01_reset();
            }
            
            void noise_tilde_01_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->noise_tilde_01_state
                );
            }
            
            void delaytilde_01_del_step() {
                this->delaytilde_01_del_reader++;
            
                if (this->delaytilde_01_del_reader >= (int)(this->delaytilde_01_del_buffer->getSize()))
                    this->delaytilde_01_del_reader = 0;
            }
            
            number delaytilde_01_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? 1 + this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ), this->delaytilde_01_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_01_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_01_del_buffer->getSize()) + this->delaytilde_01_del_reader - ((size > this->delaytilde_01_del__maxdelay ? this->delaytilde_01_del__maxdelay : (size < (this->delaytilde_01_del_reader != this->delaytilde_01_del_writer) ? this->delaytilde_01_del_reader != this->delaytilde_01_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_01_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_01_del_wrap))
                );
            }
            
            void delaytilde_01_del_write(number v) {
                this->delaytilde_01_del_writer = this->delaytilde_01_del_reader;
                this->delaytilde_01_del_buffer[(Index)this->delaytilde_01_del_writer] = v;
            }
            
            number delaytilde_01_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_01_del__maxdelay : size);
                number val = this->delaytilde_01_del_read(effectiveSize, 0);
                this->delaytilde_01_del_write(v);
                this->delaytilde_01_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_01_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_01_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_01_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_01_del_init() {
                auto result = this->delaytilde_01_del_calcSizeInSamples();
                this->delaytilde_01_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_01_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_01_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_01_del_clear() {
                this->delaytilde_01_del_buffer->setZero();
            }
            
            void delaytilde_01_del_reset() {
                auto result = this->delaytilde_01_del_calcSizeInSamples();
                this->delaytilde_01_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_01_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_01_del_buffer);
                this->delaytilde_01_del_wrap = this->delaytilde_01_del_buffer->getSize() - 1;
                this->delaytilde_01_del_clear();
            
                if (this->delaytilde_01_del_reader >= this->delaytilde_01_del__maxdelay || this->delaytilde_01_del_writer >= this->delaytilde_01_del__maxdelay) {
                    this->delaytilde_01_del_reader = 0;
                    this->delaytilde_01_del_writer = 0;
                }
            }
            
            void delaytilde_01_del_dspsetup() {
                this->delaytilde_01_del_reset();
            }
            
            number delaytilde_01_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 38400;
            }
            
            number delaytilde_01_del_size() {
                return this->delaytilde_01_del__maxdelay;
            }
            
            void delaytilde_01_dspsetup(bool force) {
                if ((bool)(this->delaytilde_01_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_01_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_01_lastDelay = -1;
                this->delaytilde_01_setupDone = true;
                this->delaytilde_01_del_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_09_x = 0;
                allpass_tilde_09_delayTime = 22.58;
                allpass_tilde_09_gain = -0.7;
                dspexpr_12_in1 = 0;
                dspexpr_12_in2 = 22.58;
                comb_tilde_08_x = 0;
                comb_tilde_08_delayTime = 149.6;
                comb_tilde_08_gain = 0;
                comb_tilde_08_ffGain = 1;
                comb_tilde_08_fbGain = 0;
                dspexpr_13_in1 = 0;
                dspexpr_13_in2 = 0;
                dspexpr_14_in1 = 0;
                dspexpr_14_in2 = 149.6;
                dspexpr_15_in1 = 0;
                dspexpr_15_in2 = 0.5;
                allpass_tilde_10_x = 0;
                allpass_tilde_10_delayTime = 60.48;
                allpass_tilde_10_gain = 0.5;
                onepole_tilde_01_x = 0;
                onepole_tilde_01_freqInHz = 1800;
                dspexpr_16_in1 = 0;
                dspexpr_16_in2 = 20;
                lores_01_cutoff = 0;
                lores_01_resonance = 0.995;
                lores_01_resonance_setter(lores_01_resonance);
                dspexpr_17_in1 = 0;
                dspexpr_17_in2 = 60.48;
                delaytilde_01_delay = 0;
                mstosamps_tilde_01_ms = 0;
                dspexpr_18_in1 = 0;
                dspexpr_18_in2 = 125;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_09_feedForward__maxdelay = 0;
                allpass_tilde_09_feedForward_sizemode = 0;
                allpass_tilde_09_feedForward_wrap = 0;
                allpass_tilde_09_feedForward_reader = 0;
                allpass_tilde_09_feedForward_writer = 0;
                allpass_tilde_09_feedBack__maxdelay = 0;
                allpass_tilde_09_feedBack_sizemode = 0;
                allpass_tilde_09_feedBack_wrap = 0;
                allpass_tilde_09_feedBack_reader = 0;
                allpass_tilde_09_feedBack_writer = 0;
                allpass_tilde_09_setupDone = false;
                comb_tilde_08_feedForward__maxdelay = 0;
                comb_tilde_08_feedForward_sizemode = 0;
                comb_tilde_08_feedForward_wrap = 0;
                comb_tilde_08_feedForward_reader = 0;
                comb_tilde_08_feedForward_writer = 0;
                comb_tilde_08_feedBack__maxdelay = 0;
                comb_tilde_08_feedBack_sizemode = 0;
                comb_tilde_08_feedBack_wrap = 0;
                comb_tilde_08_feedBack_reader = 0;
                comb_tilde_08_feedBack_writer = 0;
                comb_tilde_08_setupDone = false;
                allpass_tilde_10_feedForward__maxdelay = 0;
                allpass_tilde_10_feedForward_sizemode = 0;
                allpass_tilde_10_feedForward_wrap = 0;
                allpass_tilde_10_feedForward_reader = 0;
                allpass_tilde_10_feedForward_writer = 0;
                allpass_tilde_10_feedBack__maxdelay = 0;
                allpass_tilde_10_feedBack_sizemode = 0;
                allpass_tilde_10_feedBack_wrap = 0;
                allpass_tilde_10_feedBack_reader = 0;
                allpass_tilde_10_feedBack_writer = 0;
                allpass_tilde_10_setupDone = false;
                onepole_tilde_01_freq = 0;
                onepole_tilde_01_needsUpdate = false;
                onepole_tilde_01_lastY = 0;
                onepole_tilde_01_a0 = 0;
                onepole_tilde_01_b1 = 0;
                onepole_tilde_01_setupDone = false;
                lores_01_setupDone = false;
                delaytilde_01_lastDelay = -1;
                delaytilde_01_crossfadeDelay = 0;
                delaytilde_01_ramp = 0;
                delaytilde_01_rampInSamples = 0;
                delaytilde_01_del__maxdelay = 0;
                delaytilde_01_del_sizemode = 0;
                delaytilde_01_del_wrap = 0;
                delaytilde_01_del_reader = 0;
                delaytilde_01_del_writer = 0;
                delaytilde_01_setupDone = false;
                feedbacktilde_01_feedbackbuffer = nullptr;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_09_x;
                number allpass_tilde_09_delayTime;
                number allpass_tilde_09_gain;
                number dspexpr_12_in1;
                number dspexpr_12_in2;
                number comb_tilde_08_x;
                number comb_tilde_08_delayTime;
                number comb_tilde_08_gain;
                number comb_tilde_08_ffGain;
                number comb_tilde_08_fbGain;
                number dspexpr_13_in1;
                number dspexpr_13_in2;
                number dspexpr_14_in1;
                number dspexpr_14_in2;
                number dspexpr_15_in1;
                number dspexpr_15_in2;
                number allpass_tilde_10_x;
                number allpass_tilde_10_delayTime;
                number allpass_tilde_10_gain;
                number onepole_tilde_01_x;
                number onepole_tilde_01_freqInHz;
                number dspexpr_16_in1;
                number dspexpr_16_in2;
                number lores_01_cutoff;
                number lores_01_resonance;
                number dspexpr_17_in1;
                number dspexpr_17_in2;
                number delaytilde_01_delay;
                number mstosamps_tilde_01_ms;
                number dspexpr_18_in1;
                number dspexpr_18_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_09_feedForward_buffer;
                Index allpass_tilde_09_feedForward__maxdelay;
                Int allpass_tilde_09_feedForward_sizemode;
                Index allpass_tilde_09_feedForward_wrap;
                Int allpass_tilde_09_feedForward_reader;
                Int allpass_tilde_09_feedForward_writer;
                Float64BufferRef allpass_tilde_09_feedBack_buffer;
                Index allpass_tilde_09_feedBack__maxdelay;
                Int allpass_tilde_09_feedBack_sizemode;
                Index allpass_tilde_09_feedBack_wrap;
                Int allpass_tilde_09_feedBack_reader;
                Int allpass_tilde_09_feedBack_writer;
                bool allpass_tilde_09_setupDone;
                Float64BufferRef comb_tilde_08_feedForward_buffer;
                Index comb_tilde_08_feedForward__maxdelay;
                Int comb_tilde_08_feedForward_sizemode;
                Index comb_tilde_08_feedForward_wrap;
                Int comb_tilde_08_feedForward_reader;
                Int comb_tilde_08_feedForward_writer;
                Float64BufferRef comb_tilde_08_feedBack_buffer;
                Index comb_tilde_08_feedBack__maxdelay;
                Int comb_tilde_08_feedBack_sizemode;
                Index comb_tilde_08_feedBack_wrap;
                Int comb_tilde_08_feedBack_reader;
                Int comb_tilde_08_feedBack_writer;
                bool comb_tilde_08_setupDone;
                Float64BufferRef allpass_tilde_10_feedForward_buffer;
                Index allpass_tilde_10_feedForward__maxdelay;
                Int allpass_tilde_10_feedForward_sizemode;
                Index allpass_tilde_10_feedForward_wrap;
                Int allpass_tilde_10_feedForward_reader;
                Int allpass_tilde_10_feedForward_writer;
                Float64BufferRef allpass_tilde_10_feedBack_buffer;
                Index allpass_tilde_10_feedBack__maxdelay;
                Int allpass_tilde_10_feedBack_sizemode;
                Index allpass_tilde_10_feedBack_wrap;
                Int allpass_tilde_10_feedBack_reader;
                Int allpass_tilde_10_feedBack_writer;
                bool allpass_tilde_10_setupDone;
                number onepole_tilde_01_freq;
                bool onepole_tilde_01_needsUpdate;
                number onepole_tilde_01_lastY;
                number onepole_tilde_01_a0;
                number onepole_tilde_01_b1;
                bool onepole_tilde_01_setupDone;
                number lores_01_b_0;
                number lores_01_a_1;
                number lores_01_a_2;
                number lores_01_x_0;
                number lores_01_y_1;
                number lores_01_y_2;
                number lores_01_last_resonance;
                number lores_01_last_frequency;
                number lores_01_last_res_calc;
                number lores_01_last_freq_calc;
                bool lores_01_setupDone;
                UInt noise_tilde_01_state[4] = { };
                number delaytilde_01_lastDelay;
                number delaytilde_01_crossfadeDelay;
                number delaytilde_01_ramp;
                long delaytilde_01_rampInSamples;
                Float64BufferRef delaytilde_01_del_buffer;
                Index delaytilde_01_del__maxdelay;
                Int delaytilde_01_del_sizemode;
                Index delaytilde_01_del_wrap;
                Int delaytilde_01_del_reader;
                Int delaytilde_01_del_writer;
                bool delaytilde_01_setupDone;
                signal feedbacktilde_01_feedbackbuffer;
                number stackprotect_count;
                DataRef allpass_tilde_09_feedForward_bufferobj;
                DataRef allpass_tilde_09_feedBack_bufferobj;
                DataRef comb_tilde_08_feedForward_bufferobj;
                DataRef comb_tilde_08_feedBack_bufferobj;
                DataRef allpass_tilde_10_feedForward_bufferobj;
                DataRef allpass_tilde_10_feedBack_bufferobj;
                DataRef delaytilde_01_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_95 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_100;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_95()
            {
            }
            
            ~RNBOSubpatcher_95()
            {
            }
            
            virtual RNBOSubpatcher_100* getPatcher() const {
                return static_cast<RNBOSubpatcher_100 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Damp = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                this->stackprotect_perform(n);
                this->signalreceive_08_perform(target_Damp, this->signals[0], n);
                this->onepole_tilde_03_perform(in2, this->signals[0], out2, n);
                this->onepole_tilde_02_perform(in1, this->signals[0], out1, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 1; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->onepole_tilde_03_dspsetup(forceDSPSetup);
                this->onepole_tilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 1;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 0;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void processDataViewUpdate(DataRefIndex , MillisecondTime ) {}
            
            void initialize() {
                this->assign_defaults();
                this->setState();
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 2;
            }
            
            Index getNumOutputChannels() const {
                return 2;
            }
            
            void initializeObjects() {}
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {}
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_08_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void onepole_tilde_03_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_03_lastY = this->onepole_tilde_03_lastY;
                auto __onepole_tilde_03_b1 = this->onepole_tilde_03_b1;
                auto __onepole_tilde_03_a0 = this->onepole_tilde_03_a0;
                auto __onepole_tilde_03_needsUpdate = this->onepole_tilde_03_needsUpdate;
                auto __onepole_tilde_03_freq = this->onepole_tilde_03_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_03_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_03_needsUpdate)) {
                        __onepole_tilde_03_freq = freqInHz[(Index)i];
                        __onepole_tilde_03_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_03_a0 = (__onepole_tilde_03_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_03_a0 < 0.00001 ? 0.00001 : __onepole_tilde_03_a0));
                        __onepole_tilde_03_b1 = 1 - __onepole_tilde_03_a0;
                        __onepole_tilde_03_needsUpdate = false;
                    }
            
                    __onepole_tilde_03_lastY = __onepole_tilde_03_a0 * x[(Index)i] + __onepole_tilde_03_b1 * __onepole_tilde_03_lastY;
                    out1[(Index)i] = __onepole_tilde_03_lastY;
                }
            
                this->onepole_tilde_03_freq = __onepole_tilde_03_freq;
                this->onepole_tilde_03_needsUpdate = __onepole_tilde_03_needsUpdate;
                this->onepole_tilde_03_a0 = __onepole_tilde_03_a0;
                this->onepole_tilde_03_b1 = __onepole_tilde_03_b1;
                this->onepole_tilde_03_lastY = __onepole_tilde_03_lastY;
            }
            
            void onepole_tilde_02_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_02_lastY = this->onepole_tilde_02_lastY;
                auto __onepole_tilde_02_b1 = this->onepole_tilde_02_b1;
                auto __onepole_tilde_02_a0 = this->onepole_tilde_02_a0;
                auto __onepole_tilde_02_needsUpdate = this->onepole_tilde_02_needsUpdate;
                auto __onepole_tilde_02_freq = this->onepole_tilde_02_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_02_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_02_needsUpdate)) {
                        __onepole_tilde_02_freq = freqInHz[(Index)i];
                        __onepole_tilde_02_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_02_a0 = (__onepole_tilde_02_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_02_a0 < 0.00001 ? 0.00001 : __onepole_tilde_02_a0));
                        __onepole_tilde_02_b1 = 1 - __onepole_tilde_02_a0;
                        __onepole_tilde_02_needsUpdate = false;
                    }
            
                    __onepole_tilde_02_lastY = __onepole_tilde_02_a0 * x[(Index)i] + __onepole_tilde_02_b1 * __onepole_tilde_02_lastY;
                    out1[(Index)i] = __onepole_tilde_02_lastY;
                }
            
                this->onepole_tilde_02_freq = __onepole_tilde_02_freq;
                this->onepole_tilde_02_needsUpdate = __onepole_tilde_02_needsUpdate;
                this->onepole_tilde_02_a0 = __onepole_tilde_02_a0;
                this->onepole_tilde_02_b1 = __onepole_tilde_02_b1;
                this->onepole_tilde_02_lastY = __onepole_tilde_02_lastY;
            }
            
            void onepole_tilde_02_reset() {
                this->onepole_tilde_02_lastY = 0;
                this->onepole_tilde_02_a0 = 0;
                this->onepole_tilde_02_b1 = 0;
            }
            
            void onepole_tilde_02_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_02_needsUpdate = true;
                this->onepole_tilde_02_reset();
                this->onepole_tilde_02_setupDone = true;
            }
            
            void onepole_tilde_03_reset() {
                this->onepole_tilde_03_lastY = 0;
                this->onepole_tilde_03_a0 = 0;
                this->onepole_tilde_03_b1 = 0;
            }
            
            void onepole_tilde_03_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_03_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_03_needsUpdate = true;
                this->onepole_tilde_03_reset();
                this->onepole_tilde_03_setupDone = true;
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                onepole_tilde_02_x = 0;
                onepole_tilde_02_freqInHz = 1800;
                onepole_tilde_03_x = 0;
                onepole_tilde_03_freqInHz = 1800;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                onepole_tilde_02_freq = 0;
                onepole_tilde_02_needsUpdate = false;
                onepole_tilde_02_lastY = 0;
                onepole_tilde_02_a0 = 0;
                onepole_tilde_02_b1 = 0;
                onepole_tilde_02_setupDone = false;
                onepole_tilde_03_freq = 0;
                onepole_tilde_03_needsUpdate = false;
                onepole_tilde_03_lastY = 0;
                onepole_tilde_03_a0 = 0;
                onepole_tilde_03_b1 = 0;
                onepole_tilde_03_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number onepole_tilde_02_x;
                number onepole_tilde_02_freqInHz;
                number onepole_tilde_03_x;
                number onepole_tilde_03_freqInHz;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[1];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                number onepole_tilde_02_freq;
                bool onepole_tilde_02_needsUpdate;
                number onepole_tilde_02_lastY;
                number onepole_tilde_02_a0;
                number onepole_tilde_02_b1;
                bool onepole_tilde_02_setupDone;
                number onepole_tilde_03_freq;
                bool onepole_tilde_03_needsUpdate;
                number onepole_tilde_03_lastY;
                number onepole_tilde_03_a0;
                number onepole_tilde_03_b1;
                bool onepole_tilde_03_setupDone;
                number stackprotect_count;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_96 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_100;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_96()
            {
            }
            
            ~RNBOSubpatcher_96()
            {
            }
            
            virtual RNBOSubpatcher_100* getPatcher() const {
                return static_cast<RNBOSubpatcher_100 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index voice() {
                return this->_voiceIndex;
            }
            
            number random(number low, number high) {
                number range = high - low;
                return globalrandom() * range + low;
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Size = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * target_Decay = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * target_Jitter = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * target_Damp = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
                SampleValue * out3 = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
                SampleValue * out4 = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                this->noise_tilde_02_perform(this->signals[0], n);
            
                this->lores_02_perform(
                    this->lores_02_cutoff,
                    this->lores_02_resonance,
                    this->signals[0],
                    this->signals[1],
                    n
                );
            
                this->feedbackreader_02_perform(this->signals[0], n);
                this->stackprotect_perform(n);
                this->signalreceive_09_perform(target_Size, this->signals[2], n);
                this->dspexpr_21_perform(this->signals[2], this->dspexpr_21_in2, this->signals[3], n);
                this->dspexpr_19_perform(this->signals[2], this->dspexpr_19_in2, this->signals[4], n);
                this->signaladder_18_perform(in1, this->signals[0], this->signals[0], n);
                this->allpass_tilde_11_perform(this->signals[0], this->signals[4], this->allpass_tilde_11_gain, out1, n);
                this->signalreceive_13_perform(target_Size, this->signals[4], n);
                this->dspexpr_25_perform(this->signals[4], this->dspexpr_25_in2, this->signals[2], n);
                this->mstosamps_tilde_02_perform(this->signals[2], this->signals[5], n);
                this->dspexpr_24_perform(this->signals[4], this->dspexpr_24_in2, this->signals[2], n);
                this->signalreceive_10_perform(target_Decay, this->signals[4], n);
                this->signalreceive_11_perform(target_Jitter, this->signals[6], n);
                this->dspexpr_23_perform(this->signals[1], this->signals[6], this->signals[7], n);
                this->dspexpr_20_perform(this->signals[3], this->signals[7], this->signals[6], n);
            
                this->comb_tilde_09_perform(
                    out1,
                    this->signals[6],
                    this->comb_tilde_09_gain,
                    this->comb_tilde_09_ffGain,
                    this->comb_tilde_09_fbGain,
                    this->signals[7],
                    n
                );
            
                this->signalforwarder_22_perform(this->signals[7], out2, n);
                this->signalreceive_12_perform(target_Damp, this->signals[6], n);
                this->onepole_tilde_04_perform(this->signals[7], this->signals[6], this->signals[3], n);
                this->dspexpr_22_perform(this->signals[3], this->signals[4], this->signals[6], n);
            
                this->allpass_tilde_12_perform(
                    this->signals[6],
                    this->signals[2],
                    this->allpass_tilde_12_gain,
                    this->signals[4],
                    n
                );
            
                this->delaytilde_02_perform(this->signals[5], this->signals[4], out4, n);
                this->feedbackwriter_02_perform(out4, n);
                this->signalforwarder_23_perform(this->signals[4], out3, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->feedbacktilde_02_feedbackbuffer = resizeSignal(this->feedbacktilde_02_feedbackbuffer, this->maxvs, maxBlockSize);
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->lores_02_dspsetup(forceDSPSetup);
                this->allpass_tilde_11_dspsetup(forceDSPSetup);
                this->comb_tilde_09_dspsetup(forceDSPSetup);
                this->onepole_tilde_04_dspsetup(forceDSPSetup);
                this->allpass_tilde_12_dspsetup(forceDSPSetup);
                this->delaytilde_02_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 4;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->allpass_tilde_11_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->allpass_tilde_11_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->comb_tilde_09_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->comb_tilde_09_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->allpass_tilde_12_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->allpass_tilde_12_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->delaytilde_02_del_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 7;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->allpass_tilde_11_feedForward_buffer = new Float64Buffer(this->allpass_tilde_11_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->allpass_tilde_11_feedBack_buffer = new Float64Buffer(this->allpass_tilde_11_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->allpass_tilde_12_feedForward_buffer = new Float64Buffer(this->allpass_tilde_12_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->allpass_tilde_12_feedBack_buffer = new Float64Buffer(this->allpass_tilde_12_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
                }
            }
            
            void initialize() {
                this->allpass_tilde_11_feedForward_bufferobj = initDataRef("allpass_tilde_11_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_11_feedBack_bufferobj = initDataRef("allpass_tilde_11_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_09_feedForward_bufferobj = initDataRef("comb_tilde_09_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_09_feedBack_bufferobj = initDataRef("comb_tilde_09_feedBack_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_12_feedForward_bufferobj = initDataRef("allpass_tilde_12_feedForward_bufferobj", true, nullptr, "buffer~");
                this->allpass_tilde_12_feedBack_bufferobj = initDataRef("allpass_tilde_12_feedBack_bufferobj", true, nullptr, "buffer~");
                this->delaytilde_02_del_bufferobj = initDataRef("delaytilde_02_del_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->allpass_tilde_11_feedForward_bufferobj->setIndex(4);
                this->allpass_tilde_11_feedForward_buffer = new Float64Buffer(this->allpass_tilde_11_feedForward_bufferobj);
                this->allpass_tilde_11_feedBack_bufferobj->setIndex(5);
                this->allpass_tilde_11_feedBack_buffer = new Float64Buffer(this->allpass_tilde_11_feedBack_bufferobj);
                this->comb_tilde_09_feedForward_bufferobj->setIndex(6);
                this->comb_tilde_09_feedForward_buffer = new Float64Buffer(this->comb_tilde_09_feedForward_bufferobj);
                this->comb_tilde_09_feedBack_bufferobj->setIndex(7);
                this->comb_tilde_09_feedBack_buffer = new Float64Buffer(this->comb_tilde_09_feedBack_bufferobj);
                this->allpass_tilde_12_feedForward_bufferobj->setIndex(8);
                this->allpass_tilde_12_feedForward_buffer = new Float64Buffer(this->allpass_tilde_12_feedForward_bufferobj);
                this->allpass_tilde_12_feedBack_bufferobj->setIndex(9);
                this->allpass_tilde_12_feedBack_buffer = new Float64Buffer(this->allpass_tilde_12_feedBack_bufferobj);
                this->delaytilde_02_del_bufferobj->setIndex(10);
                this->delaytilde_02_del_buffer = new Float64Buffer(this->delaytilde_02_del_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 1;
            }
            
            Index getNumOutputChannels() const {
                return 4;
            }
            
            void initializeObjects() {
                this->allpass_tilde_11_feedForward_init();
                this->allpass_tilde_11_feedBack_init();
                this->allpass_tilde_11_init();
                this->comb_tilde_09_feedForward_init();
                this->comb_tilde_09_feedBack_init();
                this->comb_tilde_09_init();
                this->allpass_tilde_12_feedForward_init();
                this->allpass_tilde_12_feedBack_init();
                this->allpass_tilde_12_init();
                this->noise_tilde_02_init();
                this->delaytilde_02_del_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->allpass_tilde_11_feedForward_buffer = this->allpass_tilde_11_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_11_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_11_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->allpass_tilde_11_feedBack_buffer = this->allpass_tilde_11_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_11_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_11_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_09_feedForward_buffer = this->comb_tilde_09_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_09_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_09_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_09_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_09_feedBack_buffer = this->comb_tilde_09_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_09_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_09_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_09_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->allpass_tilde_12_feedForward_buffer = this->allpass_tilde_12_feedForward_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_12_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_12_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->allpass_tilde_12_feedBack_buffer = this->allpass_tilde_12_feedBack_buffer->allocateIfNeeded();
            
                if (this->allpass_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->allpass_tilde_12_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->allpass_tilde_12_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->delaytilde_02_del_buffer = this->delaytilde_02_del_buffer->allocateIfNeeded();
            
                if (this->delaytilde_02_del_bufferobj->hasRequestedSize()) {
                    if (this->delaytilde_02_del_bufferobj->wantsFill())
                        this->zeroDataRef(this->delaytilde_02_del_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            }
            
            void noise_tilde_02_perform(SampleValue * out1, Index n) {
                auto __noise_tilde_02_state = this->noise_tilde_02_state;
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = xoshiro_next(__noise_tilde_02_state);
                }
            }
            
            void lores_02_perform(
                number cutoff,
                number resonance,
                const SampleValue * input,
                SampleValue * out,
                Index n
            ) {
                RNBO_UNUSED(resonance);
                RNBO_UNUSED(cutoff);
                auto __lores_02_y_2 = this->lores_02_y_2;
                auto __lores_02_y_1 = this->lores_02_y_1;
                auto __lores_02_x_0 = this->lores_02_x_0;
                auto __lores_02_b_0 = this->lores_02_b_0;
                auto __lores_02_a_1 = this->lores_02_a_1;
                auto __lores_02_a_2 = this->lores_02_a_2;
                auto __lores_02_last_freq_calc = this->lores_02_last_freq_calc;
                auto __lores_02_last_res_calc = this->lores_02_last_res_calc;
                auto __lores_02_last_frequency = this->lores_02_last_frequency;
                auto __lores_02_last_resonance = this->lores_02_last_resonance;
            
                for (Index i = 0; i < n; i++) {
                    if (0.995 != __lores_02_last_resonance || 0 != __lores_02_last_frequency) {
                        __lores_02_last_res_calc = rnbo_exp(0.995 * 0.125) * 0.882497;
                        __lores_02_last_freq_calc = rnbo_cos(2.0 * pi01() / this->sr * 0);
                        __lores_02_last_resonance = 0.995;
                        __lores_02_last_frequency = 0;
                    }
            
                    number res_temp = __lores_02_last_res_calc;
                    number freq_temp = __lores_02_last_freq_calc;
                    __lores_02_a_2 = res_temp * res_temp;
                    __lores_02_a_1 = -2.0 * res_temp * freq_temp;
                    __lores_02_b_0 = 1.0 + __lores_02_a_1 + __lores_02_a_2;
                    __lores_02_x_0 = input[(Index)i];
                    number y_0 = __lores_02_x_0 * __lores_02_b_0 - __lores_02_y_1 * __lores_02_a_1 - __lores_02_y_2 * __lores_02_a_2;
                    __lores_02_y_2 = __lores_02_y_1;
                    __lores_02_y_1 = y_0;
                    out[(Index)i] = y_0;
                }
            
                this->lores_02_last_resonance = __lores_02_last_resonance;
                this->lores_02_last_frequency = __lores_02_last_frequency;
                this->lores_02_last_res_calc = __lores_02_last_res_calc;
                this->lores_02_last_freq_calc = __lores_02_last_freq_calc;
                this->lores_02_a_2 = __lores_02_a_2;
                this->lores_02_a_1 = __lores_02_a_1;
                this->lores_02_b_0 = __lores_02_b_0;
                this->lores_02_x_0 = __lores_02_x_0;
                this->lores_02_y_1 = __lores_02_y_1;
                this->lores_02_y_2 = __lores_02_y_2;
            }
            
            void feedbackreader_02_perform(SampleValue * output, Index n) {
                auto& buffer = this->feedbacktilde_02_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = buffer[(Index)i];
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_09_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_21_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 141.7;//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_19_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 30.51;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_18_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i];
                }
            }
            
            void allpass_tilde_11_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = -0.7;
                    auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_11_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_11_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_11_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_11_feedBack_write(ov);
                    this->allpass_tilde_11_feedForward_step();
                    this->allpass_tilde_11_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signalreceive_13_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_25_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 106.28;//#map:_###_obj_###_:1
                }
            }
            
            void mstosamps_tilde_02_perform(const Sample * ms, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = ms[(Index)i] * this->sr * 0.001;
                }
            }
            
            void dspexpr_24_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 89.24;//#map:_###_obj_###_:1
                }
            }
            
            void signalreceive_10_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void signalreceive_11_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_23_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_20_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] + in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_09_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_09_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_09_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_09_feedForward_write(x[(Index)i]);
                    this->comb_tilde_09_feedBack_write(ov);
                    this->comb_tilde_09_feedForward_step();
                    this->comb_tilde_09_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signalforwarder_22_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void signalreceive_12_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void onepole_tilde_04_perform(const Sample * x, const Sample * freqInHz, SampleValue * out1, Index n) {
                auto __onepole_tilde_04_lastY = this->onepole_tilde_04_lastY;
                auto __onepole_tilde_04_b1 = this->onepole_tilde_04_b1;
                auto __onepole_tilde_04_a0 = this->onepole_tilde_04_a0;
                auto __onepole_tilde_04_needsUpdate = this->onepole_tilde_04_needsUpdate;
                auto __onepole_tilde_04_freq = this->onepole_tilde_04_freq;
                Index i;
            
                for (i = 0; i < n; i++) {
                    if (__onepole_tilde_04_freq != freqInHz[(Index)i] || (bool)(__onepole_tilde_04_needsUpdate)) {
                        __onepole_tilde_04_freq = freqInHz[(Index)i];
                        __onepole_tilde_04_a0 = 1 - rnbo_exp(-6.28318530717958647692 * freqInHz[(Index)i] / this->sr);
                        __onepole_tilde_04_a0 = (__onepole_tilde_04_a0 > 0.99999 ? 0.99999 : (__onepole_tilde_04_a0 < 0.00001 ? 0.00001 : __onepole_tilde_04_a0));
                        __onepole_tilde_04_b1 = 1 - __onepole_tilde_04_a0;
                        __onepole_tilde_04_needsUpdate = false;
                    }
            
                    __onepole_tilde_04_lastY = __onepole_tilde_04_a0 * x[(Index)i] + __onepole_tilde_04_b1 * __onepole_tilde_04_lastY;
                    out1[(Index)i] = __onepole_tilde_04_lastY;
                }
            
                this->onepole_tilde_04_freq = __onepole_tilde_04_freq;
                this->onepole_tilde_04_needsUpdate = __onepole_tilde_04_needsUpdate;
                this->onepole_tilde_04_a0 = __onepole_tilde_04_a0;
                this->onepole_tilde_04_b1 = __onepole_tilde_04_b1;
                this->onepole_tilde_04_lastY = __onepole_tilde_04_lastY;
            }
            
            void dspexpr_22_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void allpass_tilde_12_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __gain = 0.5;
                    auto delayTimeinSamps = this->mstosamps(delayTime[(Index)i]);
                    delayTimeinSamps = (delayTimeinSamps > 44100 ? 44100 : (delayTimeinSamps < 0 ? 0 : delayTimeinSamps));
                    __gain = (__gain > 0.99 ? 0.99 : (__gain < 0 ? 0 : __gain));
                    number ff = this->allpass_tilde_12_feedForward_read(delayTimeinSamps, 0);
                    number fb = this->allpass_tilde_12_feedBack_read(delayTimeinSamps, 0);
                    number ov = ff + (x[(Index)i] - fb) * (__gain * -1.0);
                    fixdenorm(ov);
                    this->allpass_tilde_12_feedForward_write(x[(Index)i]);
                    this->allpass_tilde_12_feedBack_write(ov);
                    this->allpass_tilde_12_feedForward_step();
                    this->allpass_tilde_12_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void delaytilde_02_perform(
                const Sample * delay,
                const SampleValue * input,
                SampleValue * output,
                Index n
            ) {
                auto __delaytilde_02_crossfadeDelay = this->delaytilde_02_crossfadeDelay;
                auto __delaytilde_02_rampInSamples = this->delaytilde_02_rampInSamples;
                auto __delaytilde_02_ramp = this->delaytilde_02_ramp;
                auto __delaytilde_02_lastDelay = this->delaytilde_02_lastDelay;
            
                for (Index i = 0; i < n; i++) {
                    if (__delaytilde_02_lastDelay == -1) {
                        __delaytilde_02_lastDelay = delay[(Index)i];
                    }
            
                    if (__delaytilde_02_ramp > 0) {
                        number factor = __delaytilde_02_ramp / __delaytilde_02_rampInSamples;
                        output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0) * factor + this->delaytilde_02_del_read(__delaytilde_02_lastDelay, 0) * (1. - factor);
                        __delaytilde_02_ramp--;
                    } else {
                        number effectiveDelay = delay[(Index)i];
            
                        if (effectiveDelay != __delaytilde_02_lastDelay) {
                            __delaytilde_02_ramp = __delaytilde_02_rampInSamples;
                            __delaytilde_02_crossfadeDelay = __delaytilde_02_lastDelay;
                            __delaytilde_02_lastDelay = effectiveDelay;
                            output[(Index)i] = this->delaytilde_02_del_read(__delaytilde_02_crossfadeDelay, 0);
                            __delaytilde_02_ramp--;
                        } else {
                            output[(Index)i] = this->delaytilde_02_del_read(effectiveDelay, 0);
                        }
                    }
            
                    this->delaytilde_02_del_write(input[(Index)i]);
                    this->delaytilde_02_del_step();
                }
            
                this->delaytilde_02_lastDelay = __delaytilde_02_lastDelay;
                this->delaytilde_02_ramp = __delaytilde_02_ramp;
                this->delaytilde_02_crossfadeDelay = __delaytilde_02_crossfadeDelay;
            }
            
            void feedbackwriter_02_perform(const SampleValue * input, Index n) {
                auto& buffer = this->feedbacktilde_02_feedbackbuffer;
            
                for (Index i = 0; i < n; i++) {
                    buffer[(Index)i] = input[(Index)i];
                }
            }
            
            void signalforwarder_23_perform(const SampleValue * input, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = input[(Index)i];
                }
            }
            
            void lores_02_resonance_setter(number v) {
                if (v < 0.0) {
                    v = 0.0;
                } else if (v >= 1.0) {
                    v = 1.0 - 1E-20;
                }
            
                this->lores_02_resonance = v;
            }
            
            void allpass_tilde_11_feedForward_step() {
                this->allpass_tilde_11_feedForward_reader++;
            
                if (this->allpass_tilde_11_feedForward_reader >= (int)(this->allpass_tilde_11_feedForward_buffer->getSize()))
                    this->allpass_tilde_11_feedForward_reader = 0;
            }
            
            number allpass_tilde_11_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? 1 + this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ), this->allpass_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_11_feedForward_buffer->getSize()) + this->allpass_tilde_11_feedForward_reader - ((size > this->allpass_tilde_11_feedForward__maxdelay ? this->allpass_tilde_11_feedForward__maxdelay : (size < (this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer) ? this->allpass_tilde_11_feedForward_reader != this->allpass_tilde_11_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_11_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedForward_wrap))
                );
            }
            
            void allpass_tilde_11_feedForward_write(number v) {
                this->allpass_tilde_11_feedForward_writer = this->allpass_tilde_11_feedForward_reader;
                this->allpass_tilde_11_feedForward_buffer[(Index)this->allpass_tilde_11_feedForward_writer] = v;
            }
            
            number allpass_tilde_11_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_11_feedForward__maxdelay : size);
                number val = this->allpass_tilde_11_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_11_feedForward_write(v);
                this->allpass_tilde_11_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_11_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_11_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_11_feedForward_init() {
                auto result = this->allpass_tilde_11_feedForward_calcSizeInSamples();
                this->allpass_tilde_11_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_11_feedForward_clear() {
                this->allpass_tilde_11_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_11_feedForward_reset() {
                auto result = this->allpass_tilde_11_feedForward_calcSizeInSamples();
                this->allpass_tilde_11_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_11_feedForward_buffer);
                this->allpass_tilde_11_feedForward_wrap = this->allpass_tilde_11_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_11_feedForward_clear();
            
                if (this->allpass_tilde_11_feedForward_reader >= this->allpass_tilde_11_feedForward__maxdelay || this->allpass_tilde_11_feedForward_writer >= this->allpass_tilde_11_feedForward__maxdelay) {
                    this->allpass_tilde_11_feedForward_reader = 0;
                    this->allpass_tilde_11_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_11_feedForward_dspsetup() {
                this->allpass_tilde_11_feedForward_reset();
            }
            
            number allpass_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_11_feedForward_size() {
                return this->allpass_tilde_11_feedForward__maxdelay;
            }
            
            void allpass_tilde_11_feedBack_step() {
                this->allpass_tilde_11_feedBack_reader++;
            
                if (this->allpass_tilde_11_feedBack_reader >= (int)(this->allpass_tilde_11_feedBack_buffer->getSize()))
                    this->allpass_tilde_11_feedBack_reader = 0;
            }
            
            number allpass_tilde_11_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? 1 + this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ), this->allpass_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_11_feedBack_buffer->getSize()) + this->allpass_tilde_11_feedBack_reader - ((size > this->allpass_tilde_11_feedBack__maxdelay ? this->allpass_tilde_11_feedBack__maxdelay : (size < (this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer) ? this->allpass_tilde_11_feedBack_reader != this->allpass_tilde_11_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_11_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_11_feedBack_wrap))
                );
            }
            
            void allpass_tilde_11_feedBack_write(number v) {
                this->allpass_tilde_11_feedBack_writer = this->allpass_tilde_11_feedBack_reader;
                this->allpass_tilde_11_feedBack_buffer[(Index)this->allpass_tilde_11_feedBack_writer] = v;
            }
            
            number allpass_tilde_11_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_11_feedBack__maxdelay : size);
                number val = this->allpass_tilde_11_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_11_feedBack_write(v);
                this->allpass_tilde_11_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_11_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_11_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_11_feedBack_init() {
                auto result = this->allpass_tilde_11_feedBack_calcSizeInSamples();
                this->allpass_tilde_11_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_11_feedBack_clear() {
                this->allpass_tilde_11_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_11_feedBack_reset() {
                auto result = this->allpass_tilde_11_feedBack_calcSizeInSamples();
                this->allpass_tilde_11_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_11_feedBack_buffer);
                this->allpass_tilde_11_feedBack_wrap = this->allpass_tilde_11_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_11_feedBack_clear();
            
                if (this->allpass_tilde_11_feedBack_reader >= this->allpass_tilde_11_feedBack__maxdelay || this->allpass_tilde_11_feedBack_writer >= this->allpass_tilde_11_feedBack__maxdelay) {
                    this->allpass_tilde_11_feedBack_reader = 0;
                    this->allpass_tilde_11_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_11_feedBack_dspsetup() {
                this->allpass_tilde_11_feedBack_reset();
            }
            
            number allpass_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_11_feedBack_size() {
                return this->allpass_tilde_11_feedBack__maxdelay;
            }
            
            void allpass_tilde_11_init() {
                this->allpass_tilde_11_feedForward_init();
                this->allpass_tilde_11_feedBack_init();
            }
            
            void allpass_tilde_11_clear() {
                this->allpass_tilde_11_feedForward_clear();
                this->allpass_tilde_11_feedBack_clear();
            }
            
            void allpass_tilde_11_reset() {
                this->allpass_tilde_11_init();
                this->allpass_tilde_11_clear();
            }
            
            void allpass_tilde_11_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_11_reset();
                this->allpass_tilde_11_setupDone = true;
                this->allpass_tilde_11_feedForward_dspsetup();
                this->allpass_tilde_11_feedBack_dspsetup();
            }
            
            void comb_tilde_09_feedForward_step() {
                this->comb_tilde_09_feedForward_reader++;
            
                if (this->comb_tilde_09_feedForward_reader >= (int)(this->comb_tilde_09_feedForward_buffer->getSize()))
                    this->comb_tilde_09_feedForward_reader = 0;
            }
            
            number comb_tilde_09_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? 1 + this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ), this->comb_tilde_09_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_09_feedForward_buffer->getSize()) + this->comb_tilde_09_feedForward_reader - ((size > this->comb_tilde_09_feedForward__maxdelay ? this->comb_tilde_09_feedForward__maxdelay : (size < (this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer) ? this->comb_tilde_09_feedForward_reader != this->comb_tilde_09_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_09_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedForward_wrap))
                );
            }
            
            void comb_tilde_09_feedForward_write(number v) {
                this->comb_tilde_09_feedForward_writer = this->comb_tilde_09_feedForward_reader;
                this->comb_tilde_09_feedForward_buffer[(Index)this->comb_tilde_09_feedForward_writer] = v;
            }
            
            number comb_tilde_09_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_09_feedForward__maxdelay : size);
                number val = this->comb_tilde_09_feedForward_read(effectiveSize, 0);
                this->comb_tilde_09_feedForward_write(v);
                this->comb_tilde_09_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_09_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_09_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_09_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_09_feedForward_init() {
                auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                this->comb_tilde_09_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_09_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_09_feedForward_clear() {
                this->comb_tilde_09_feedForward_buffer->setZero();
            }
            
            void comb_tilde_09_feedForward_reset() {
                auto result = this->comb_tilde_09_feedForward_calcSizeInSamples();
                this->comb_tilde_09_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_09_feedForward_buffer);
                this->comb_tilde_09_feedForward_wrap = this->comb_tilde_09_feedForward_buffer->getSize() - 1;
                this->comb_tilde_09_feedForward_clear();
            
                if (this->comb_tilde_09_feedForward_reader >= this->comb_tilde_09_feedForward__maxdelay || this->comb_tilde_09_feedForward_writer >= this->comb_tilde_09_feedForward__maxdelay) {
                    this->comb_tilde_09_feedForward_reader = 0;
                    this->comb_tilde_09_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_09_feedForward_dspsetup() {
                this->comb_tilde_09_feedForward_reset();
            }
            
            number comb_tilde_09_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_09_feedForward_size() {
                return this->comb_tilde_09_feedForward__maxdelay;
            }
            
            void comb_tilde_09_feedBack_step() {
                this->comb_tilde_09_feedBack_reader++;
            
                if (this->comb_tilde_09_feedBack_reader >= (int)(this->comb_tilde_09_feedBack_buffer->getSize()))
                    this->comb_tilde_09_feedBack_reader = 0;
            }
            
            number comb_tilde_09_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? 1 + this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ), this->comb_tilde_09_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_09_feedBack_buffer->getSize()) + this->comb_tilde_09_feedBack_reader - ((size > this->comb_tilde_09_feedBack__maxdelay ? this->comb_tilde_09_feedBack__maxdelay : (size < (this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer) ? this->comb_tilde_09_feedBack_reader != this->comb_tilde_09_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_09_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_09_feedBack_wrap))
                );
            }
            
            void comb_tilde_09_feedBack_write(number v) {
                this->comb_tilde_09_feedBack_writer = this->comb_tilde_09_feedBack_reader;
                this->comb_tilde_09_feedBack_buffer[(Index)this->comb_tilde_09_feedBack_writer] = v;
            }
            
            number comb_tilde_09_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_09_feedBack__maxdelay : size);
                number val = this->comb_tilde_09_feedBack_read(effectiveSize, 0);
                this->comb_tilde_09_feedBack_write(v);
                this->comb_tilde_09_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_09_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_09_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_09_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_09_feedBack_init() {
                auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                this->comb_tilde_09_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_09_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_09_feedBack_clear() {
                this->comb_tilde_09_feedBack_buffer->setZero();
            }
            
            void comb_tilde_09_feedBack_reset() {
                auto result = this->comb_tilde_09_feedBack_calcSizeInSamples();
                this->comb_tilde_09_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_09_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_09_feedBack_buffer);
                this->comb_tilde_09_feedBack_wrap = this->comb_tilde_09_feedBack_buffer->getSize() - 1;
                this->comb_tilde_09_feedBack_clear();
            
                if (this->comb_tilde_09_feedBack_reader >= this->comb_tilde_09_feedBack__maxdelay || this->comb_tilde_09_feedBack_writer >= this->comb_tilde_09_feedBack__maxdelay) {
                    this->comb_tilde_09_feedBack_reader = 0;
                    this->comb_tilde_09_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_09_feedBack_dspsetup() {
                this->comb_tilde_09_feedBack_reset();
            }
            
            number comb_tilde_09_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_09_feedBack_size() {
                return this->comb_tilde_09_feedBack__maxdelay;
            }
            
            void comb_tilde_09_init() {
                this->comb_tilde_09_feedForward_init();
                this->comb_tilde_09_feedBack_init();
            }
            
            void comb_tilde_09_clear() {
                this->comb_tilde_09_feedForward_clear();
                this->comb_tilde_09_feedBack_clear();
            }
            
            void comb_tilde_09_reset() {
                this->comb_tilde_09_init();
                this->comb_tilde_09_clear();
            }
            
            void comb_tilde_09_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_09_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_09_reset();
                this->comb_tilde_09_setupDone = true;
                this->comb_tilde_09_feedForward_dspsetup();
                this->comb_tilde_09_feedBack_dspsetup();
            }
            
            void allpass_tilde_12_feedForward_step() {
                this->allpass_tilde_12_feedForward_reader++;
            
                if (this->allpass_tilde_12_feedForward_reader >= (int)(this->allpass_tilde_12_feedForward_buffer->getSize()))
                    this->allpass_tilde_12_feedForward_reader = 0;
            }
            
            number allpass_tilde_12_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? 1 + this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ), this->allpass_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_12_feedForward_buffer->getSize()) + this->allpass_tilde_12_feedForward_reader - ((size > this->allpass_tilde_12_feedForward__maxdelay ? this->allpass_tilde_12_feedForward__maxdelay : (size < (this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer) ? this->allpass_tilde_12_feedForward_reader != this->allpass_tilde_12_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_12_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedForward_wrap))
                );
            }
            
            void allpass_tilde_12_feedForward_write(number v) {
                this->allpass_tilde_12_feedForward_writer = this->allpass_tilde_12_feedForward_reader;
                this->allpass_tilde_12_feedForward_buffer[(Index)this->allpass_tilde_12_feedForward_writer] = v;
            }
            
            number allpass_tilde_12_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_12_feedForward__maxdelay : size);
                number val = this->allpass_tilde_12_feedForward_read(effectiveSize, 0);
                this->allpass_tilde_12_feedForward_write(v);
                this->allpass_tilde_12_feedForward_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_12_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_12_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_12_feedForward_init() {
                auto result = this->allpass_tilde_12_feedForward_calcSizeInSamples();
                this->allpass_tilde_12_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_12_feedForward_clear() {
                this->allpass_tilde_12_feedForward_buffer->setZero();
            }
            
            void allpass_tilde_12_feedForward_reset() {
                auto result = this->allpass_tilde_12_feedForward_calcSizeInSamples();
                this->allpass_tilde_12_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_12_feedForward_buffer);
                this->allpass_tilde_12_feedForward_wrap = this->allpass_tilde_12_feedForward_buffer->getSize() - 1;
                this->allpass_tilde_12_feedForward_clear();
            
                if (this->allpass_tilde_12_feedForward_reader >= this->allpass_tilde_12_feedForward__maxdelay || this->allpass_tilde_12_feedForward_writer >= this->allpass_tilde_12_feedForward__maxdelay) {
                    this->allpass_tilde_12_feedForward_reader = 0;
                    this->allpass_tilde_12_feedForward_writer = 0;
                }
            }
            
            void allpass_tilde_12_feedForward_dspsetup() {
                this->allpass_tilde_12_feedForward_reset();
            }
            
            number allpass_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_12_feedForward_size() {
                return this->allpass_tilde_12_feedForward__maxdelay;
            }
            
            void allpass_tilde_12_feedBack_step() {
                this->allpass_tilde_12_feedBack_reader++;
            
                if (this->allpass_tilde_12_feedBack_reader >= (int)(this->allpass_tilde_12_feedBack_buffer->getSize()))
                    this->allpass_tilde_12_feedBack_reader = 0;
            }
            
            number allpass_tilde_12_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? 1 + this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ), this->allpass_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->allpass_tilde_12_feedBack_buffer->getSize()) + this->allpass_tilde_12_feedBack_reader - ((size > this->allpass_tilde_12_feedBack__maxdelay ? this->allpass_tilde_12_feedBack__maxdelay : (size < (this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer) ? this->allpass_tilde_12_feedBack_reader != this->allpass_tilde_12_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->allpass_tilde_12_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->allpass_tilde_12_feedBack_wrap))
                );
            }
            
            void allpass_tilde_12_feedBack_write(number v) {
                this->allpass_tilde_12_feedBack_writer = this->allpass_tilde_12_feedBack_reader;
                this->allpass_tilde_12_feedBack_buffer[(Index)this->allpass_tilde_12_feedBack_writer] = v;
            }
            
            number allpass_tilde_12_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->allpass_tilde_12_feedBack__maxdelay : size);
                number val = this->allpass_tilde_12_feedBack_read(effectiveSize, 0);
                this->allpass_tilde_12_feedBack_write(v);
                this->allpass_tilde_12_feedBack_step();
                return val;
            }
            
            array<Index, 2> allpass_tilde_12_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->allpass_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->allpass_tilde_12_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void allpass_tilde_12_feedBack_init() {
                auto result = this->allpass_tilde_12_feedBack_calcSizeInSamples();
                this->allpass_tilde_12_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->allpass_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void allpass_tilde_12_feedBack_clear() {
                this->allpass_tilde_12_feedBack_buffer->setZero();
            }
            
            void allpass_tilde_12_feedBack_reset() {
                auto result = this->allpass_tilde_12_feedBack_calcSizeInSamples();
                this->allpass_tilde_12_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->allpass_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->allpass_tilde_12_feedBack_buffer);
                this->allpass_tilde_12_feedBack_wrap = this->allpass_tilde_12_feedBack_buffer->getSize() - 1;
                this->allpass_tilde_12_feedBack_clear();
            
                if (this->allpass_tilde_12_feedBack_reader >= this->allpass_tilde_12_feedBack__maxdelay || this->allpass_tilde_12_feedBack_writer >= this->allpass_tilde_12_feedBack__maxdelay) {
                    this->allpass_tilde_12_feedBack_reader = 0;
                    this->allpass_tilde_12_feedBack_writer = 0;
                }
            }
            
            void allpass_tilde_12_feedBack_dspsetup() {
                this->allpass_tilde_12_feedBack_reset();
            }
            
            number allpass_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number allpass_tilde_12_feedBack_size() {
                return this->allpass_tilde_12_feedBack__maxdelay;
            }
            
            void allpass_tilde_12_init() {
                this->allpass_tilde_12_feedForward_init();
                this->allpass_tilde_12_feedBack_init();
            }
            
            void allpass_tilde_12_clear() {
                this->allpass_tilde_12_feedForward_clear();
                this->allpass_tilde_12_feedBack_clear();
            }
            
            void allpass_tilde_12_reset() {
                this->allpass_tilde_12_init();
                this->allpass_tilde_12_clear();
            }
            
            void allpass_tilde_12_dspsetup(bool force) {
                if ((bool)(this->allpass_tilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->allpass_tilde_12_reset();
                this->allpass_tilde_12_setupDone = true;
                this->allpass_tilde_12_feedForward_dspsetup();
                this->allpass_tilde_12_feedBack_dspsetup();
            }
            
            void onepole_tilde_04_reset() {
                this->onepole_tilde_04_lastY = 0;
                this->onepole_tilde_04_a0 = 0;
                this->onepole_tilde_04_b1 = 0;
            }
            
            void onepole_tilde_04_dspsetup(bool force) {
                if ((bool)(this->onepole_tilde_04_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->onepole_tilde_04_needsUpdate = true;
                this->onepole_tilde_04_reset();
                this->onepole_tilde_04_setupDone = true;
            }
            
            void lores_02_reset() {
                this->lores_02_y_1 = 0;
                this->lores_02_y_2 = 0;
                this->lores_02_last_resonance = 0;
                this->lores_02_last_frequency = 0;
                this->lores_02_last_res_calc = 0;
                this->lores_02_last_freq_calc = 0;
            }
            
            void lores_02_dspsetup(bool force) {
                if ((bool)(this->lores_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->lores_02_reset();
                this->lores_02_setupDone = true;
            }
            
            void noise_tilde_02_init() {
                this->noise_tilde_02_reset();
            }
            
            void noise_tilde_02_reset() {
                xoshiro_reset(
                    systemticks() + this->voice() + this->random(0, 10000),
                    this->noise_tilde_02_state
                );
            }
            
            void delaytilde_02_del_step() {
                this->delaytilde_02_del_reader++;
            
                if (this->delaytilde_02_del_reader >= (int)(this->delaytilde_02_del_buffer->getSize()))
                    this->delaytilde_02_del_reader = 0;
            }
            
            number delaytilde_02_del_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? 1 + this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ), this->delaytilde_02_del_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->delaytilde_02_del_wrap))
                    ));
                }
            
                number r = (int)(this->delaytilde_02_del_buffer->getSize()) + this->delaytilde_02_del_reader - ((size > this->delaytilde_02_del__maxdelay ? this->delaytilde_02_del__maxdelay : (size < (this->delaytilde_02_del_reader != this->delaytilde_02_del_writer) ? this->delaytilde_02_del_reader != this->delaytilde_02_del_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->delaytilde_02_del_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->delaytilde_02_del_wrap))
                );
            }
            
            void delaytilde_02_del_write(number v) {
                this->delaytilde_02_del_writer = this->delaytilde_02_del_reader;
                this->delaytilde_02_del_buffer[(Index)this->delaytilde_02_del_writer] = v;
            }
            
            number delaytilde_02_del_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->delaytilde_02_del__maxdelay : size);
                number val = this->delaytilde_02_del_read(effectiveSize, 0);
                this->delaytilde_02_del_write(v);
                this->delaytilde_02_del_step();
                return val;
            }
            
            array<Index, 2> delaytilde_02_del_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->delaytilde_02_del_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->delaytilde_02_del_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void delaytilde_02_del_init() {
                auto result = this->delaytilde_02_del_calcSizeInSamples();
                this->delaytilde_02_del__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->delaytilde_02_del_buffer->requestSize(requestedSizeInSamples, 1);
                this->delaytilde_02_del_wrap = requestedSizeInSamples - 1;
            }
            
            void delaytilde_02_del_clear() {
                this->delaytilde_02_del_buffer->setZero();
            }
            
            void delaytilde_02_del_reset() {
                auto result = this->delaytilde_02_del_calcSizeInSamples();
                this->delaytilde_02_del__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->delaytilde_02_del_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->delaytilde_02_del_buffer);
                this->delaytilde_02_del_wrap = this->delaytilde_02_del_buffer->getSize() - 1;
                this->delaytilde_02_del_clear();
            
                if (this->delaytilde_02_del_reader >= this->delaytilde_02_del__maxdelay || this->delaytilde_02_del_writer >= this->delaytilde_02_del__maxdelay) {
                    this->delaytilde_02_del_reader = 0;
                    this->delaytilde_02_del_writer = 0;
                }
            }
            
            void delaytilde_02_del_dspsetup() {
                this->delaytilde_02_del_reset();
            }
            
            number delaytilde_02_del_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 38400;
            }
            
            number delaytilde_02_del_size() {
                return this->delaytilde_02_del__maxdelay;
            }
            
            void delaytilde_02_dspsetup(bool force) {
                if ((bool)(this->delaytilde_02_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->delaytilde_02_rampInSamples = (long)(this->mstosamps(0));
                this->delaytilde_02_lastDelay = -1;
                this->delaytilde_02_setupDone = true;
                this->delaytilde_02_del_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                allpass_tilde_11_x = 0;
                allpass_tilde_11_delayTime = 30.51;
                allpass_tilde_11_gain = -0.7;
                dspexpr_19_in1 = 0;
                dspexpr_19_in2 = 30.51;
                comb_tilde_09_x = 0;
                comb_tilde_09_delayTime = 141.7;
                comb_tilde_09_gain = 0;
                comb_tilde_09_ffGain = 1;
                comb_tilde_09_fbGain = 0;
                dspexpr_20_in1 = 0;
                dspexpr_20_in2 = 0;
                dspexpr_21_in1 = 0;
                dspexpr_21_in2 = 141.7;
                dspexpr_22_in1 = 0;
                dspexpr_22_in2 = 0.5;
                allpass_tilde_12_x = 0;
                allpass_tilde_12_delayTime = 89.24;
                allpass_tilde_12_gain = 0.5;
                onepole_tilde_04_x = 0;
                onepole_tilde_04_freqInHz = 1800;
                dspexpr_23_in1 = 0;
                dspexpr_23_in2 = 20;
                lores_02_cutoff = 0;
                lores_02_resonance = 0.995;
                lores_02_resonance_setter(lores_02_resonance);
                dspexpr_24_in1 = 0;
                dspexpr_24_in2 = 89.24;
                delaytilde_02_delay = 0;
                mstosamps_tilde_02_ms = 0;
                dspexpr_25_in1 = 0;
                dspexpr_25_in2 = 106.28;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                allpass_tilde_11_feedForward__maxdelay = 0;
                allpass_tilde_11_feedForward_sizemode = 0;
                allpass_tilde_11_feedForward_wrap = 0;
                allpass_tilde_11_feedForward_reader = 0;
                allpass_tilde_11_feedForward_writer = 0;
                allpass_tilde_11_feedBack__maxdelay = 0;
                allpass_tilde_11_feedBack_sizemode = 0;
                allpass_tilde_11_feedBack_wrap = 0;
                allpass_tilde_11_feedBack_reader = 0;
                allpass_tilde_11_feedBack_writer = 0;
                allpass_tilde_11_setupDone = false;
                comb_tilde_09_feedForward__maxdelay = 0;
                comb_tilde_09_feedForward_sizemode = 0;
                comb_tilde_09_feedForward_wrap = 0;
                comb_tilde_09_feedForward_reader = 0;
                comb_tilde_09_feedForward_writer = 0;
                comb_tilde_09_feedBack__maxdelay = 0;
                comb_tilde_09_feedBack_sizemode = 0;
                comb_tilde_09_feedBack_wrap = 0;
                comb_tilde_09_feedBack_reader = 0;
                comb_tilde_09_feedBack_writer = 0;
                comb_tilde_09_setupDone = false;
                allpass_tilde_12_feedForward__maxdelay = 0;
                allpass_tilde_12_feedForward_sizemode = 0;
                allpass_tilde_12_feedForward_wrap = 0;
                allpass_tilde_12_feedForward_reader = 0;
                allpass_tilde_12_feedForward_writer = 0;
                allpass_tilde_12_feedBack__maxdelay = 0;
                allpass_tilde_12_feedBack_sizemode = 0;
                allpass_tilde_12_feedBack_wrap = 0;
                allpass_tilde_12_feedBack_reader = 0;
                allpass_tilde_12_feedBack_writer = 0;
                allpass_tilde_12_setupDone = false;
                onepole_tilde_04_freq = 0;
                onepole_tilde_04_needsUpdate = false;
                onepole_tilde_04_lastY = 0;
                onepole_tilde_04_a0 = 0;
                onepole_tilde_04_b1 = 0;
                onepole_tilde_04_setupDone = false;
                lores_02_setupDone = false;
                delaytilde_02_lastDelay = -1;
                delaytilde_02_crossfadeDelay = 0;
                delaytilde_02_ramp = 0;
                delaytilde_02_rampInSamples = 0;
                delaytilde_02_del__maxdelay = 0;
                delaytilde_02_del_sizemode = 0;
                delaytilde_02_del_wrap = 0;
                delaytilde_02_del_reader = 0;
                delaytilde_02_del_writer = 0;
                delaytilde_02_setupDone = false;
                feedbacktilde_02_feedbackbuffer = nullptr;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number allpass_tilde_11_x;
                number allpass_tilde_11_delayTime;
                number allpass_tilde_11_gain;
                number dspexpr_19_in1;
                number dspexpr_19_in2;
                number comb_tilde_09_x;
                number comb_tilde_09_delayTime;
                number comb_tilde_09_gain;
                number comb_tilde_09_ffGain;
                number comb_tilde_09_fbGain;
                number dspexpr_20_in1;
                number dspexpr_20_in2;
                number dspexpr_21_in1;
                number dspexpr_21_in2;
                number dspexpr_22_in1;
                number dspexpr_22_in2;
                number allpass_tilde_12_x;
                number allpass_tilde_12_delayTime;
                number allpass_tilde_12_gain;
                number onepole_tilde_04_x;
                number onepole_tilde_04_freqInHz;
                number dspexpr_23_in1;
                number dspexpr_23_in2;
                number lores_02_cutoff;
                number lores_02_resonance;
                number dspexpr_24_in1;
                number dspexpr_24_in2;
                number delaytilde_02_delay;
                number mstosamps_tilde_02_ms;
                number dspexpr_25_in1;
                number dspexpr_25_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef allpass_tilde_11_feedForward_buffer;
                Index allpass_tilde_11_feedForward__maxdelay;
                Int allpass_tilde_11_feedForward_sizemode;
                Index allpass_tilde_11_feedForward_wrap;
                Int allpass_tilde_11_feedForward_reader;
                Int allpass_tilde_11_feedForward_writer;
                Float64BufferRef allpass_tilde_11_feedBack_buffer;
                Index allpass_tilde_11_feedBack__maxdelay;
                Int allpass_tilde_11_feedBack_sizemode;
                Index allpass_tilde_11_feedBack_wrap;
                Int allpass_tilde_11_feedBack_reader;
                Int allpass_tilde_11_feedBack_writer;
                bool allpass_tilde_11_setupDone;
                Float64BufferRef comb_tilde_09_feedForward_buffer;
                Index comb_tilde_09_feedForward__maxdelay;
                Int comb_tilde_09_feedForward_sizemode;
                Index comb_tilde_09_feedForward_wrap;
                Int comb_tilde_09_feedForward_reader;
                Int comb_tilde_09_feedForward_writer;
                Float64BufferRef comb_tilde_09_feedBack_buffer;
                Index comb_tilde_09_feedBack__maxdelay;
                Int comb_tilde_09_feedBack_sizemode;
                Index comb_tilde_09_feedBack_wrap;
                Int comb_tilde_09_feedBack_reader;
                Int comb_tilde_09_feedBack_writer;
                bool comb_tilde_09_setupDone;
                Float64BufferRef allpass_tilde_12_feedForward_buffer;
                Index allpass_tilde_12_feedForward__maxdelay;
                Int allpass_tilde_12_feedForward_sizemode;
                Index allpass_tilde_12_feedForward_wrap;
                Int allpass_tilde_12_feedForward_reader;
                Int allpass_tilde_12_feedForward_writer;
                Float64BufferRef allpass_tilde_12_feedBack_buffer;
                Index allpass_tilde_12_feedBack__maxdelay;
                Int allpass_tilde_12_feedBack_sizemode;
                Index allpass_tilde_12_feedBack_wrap;
                Int allpass_tilde_12_feedBack_reader;
                Int allpass_tilde_12_feedBack_writer;
                bool allpass_tilde_12_setupDone;
                number onepole_tilde_04_freq;
                bool onepole_tilde_04_needsUpdate;
                number onepole_tilde_04_lastY;
                number onepole_tilde_04_a0;
                number onepole_tilde_04_b1;
                bool onepole_tilde_04_setupDone;
                number lores_02_b_0;
                number lores_02_a_1;
                number lores_02_a_2;
                number lores_02_x_0;
                number lores_02_y_1;
                number lores_02_y_2;
                number lores_02_last_resonance;
                number lores_02_last_frequency;
                number lores_02_last_res_calc;
                number lores_02_last_freq_calc;
                bool lores_02_setupDone;
                UInt noise_tilde_02_state[4] = { };
                number delaytilde_02_lastDelay;
                number delaytilde_02_crossfadeDelay;
                number delaytilde_02_ramp;
                long delaytilde_02_rampInSamples;
                Float64BufferRef delaytilde_02_del_buffer;
                Index delaytilde_02_del__maxdelay;
                Int delaytilde_02_del_sizemode;
                Index delaytilde_02_del_wrap;
                Int delaytilde_02_del_reader;
                Int delaytilde_02_del_writer;
                bool delaytilde_02_setupDone;
                signal feedbacktilde_02_feedbackbuffer;
                number stackprotect_count;
                DataRef allpass_tilde_11_feedForward_bufferobj;
                DataRef allpass_tilde_11_feedBack_bufferobj;
                DataRef comb_tilde_09_feedForward_bufferobj;
                DataRef comb_tilde_09_feedBack_bufferobj;
                DataRef allpass_tilde_12_feedForward_bufferobj;
                DataRef allpass_tilde_12_feedBack_bufferobj;
                DataRef delaytilde_02_del_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    class RNBOSubpatcher_97 : public PatcherInterfaceImpl {
            
            friend class RNBOSubpatcher_100;
            friend class rnbomatic;
            
            public:
            
            RNBOSubpatcher_97()
            {
            }
            
            ~RNBOSubpatcher_97()
            {
            }
            
            virtual RNBOSubpatcher_100* getPatcher() const {
                return static_cast<RNBOSubpatcher_100 *>(_parentPatcher);
            }
            
            rnbomatic* getTopLevelPatcher() {
                return this->getPatcher()->getTopLevelPatcher();
            }
            
            void cancelClockEvents()
            {
            }
            
            inline number linearinterp(number frac, number x, number y) {
                return x + (y - x) * frac;
            }
            
            inline number cubicinterp(number a, number w, number x, number y, number z) {
                number a1 = 1. + a;
                number aa = a * a1;
                number b = 1. - a;
                number b1 = 2. - a;
                number bb = b * b1;
                number fw = -.1666667 * bb * a;
                number fx = .5 * bb * a1;
                number fy = .5 * aa * b1;
                number fz = -.1666667 * aa * b;
                return w * fw + x * fx + y * fy + z * fz;
            }
            
            inline number fastcubicinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = z - y - w + x;
                number f1 = w - x - f0;
                number f2 = y - w;
                number f3 = x;
                return f0 * a * a2 + f1 * a2 + f2 * a + f3;
            }
            
            inline number splineinterp(number a, number w, number x, number y, number z) {
                number a2 = a * a;
                number f0 = -0.5 * w + 1.5 * x - 1.5 * y + 0.5 * z;
                number f1 = w - 2.5 * x + 2 * y - 0.5 * z;
                number f2 = -0.5 * w + 0.5 * y;
                return f0 * a * a2 + f1 * a2 + f2 * a + x;
            }
            
            inline number spline6interp(number a, number y0, number y1, number y2, number y3, number y4, number y5) {
                number ym2py2 = y0 + y4;
                number ym1py1 = y1 + y3;
                number y2mym2 = y4 - y0;
                number y1mym1 = y3 - y1;
                number sixthym1py1 = (number)1 / (number)6.0 * ym1py1;
                number c0 = (number)1 / (number)120.0 * ym2py2 + (number)13 / (number)60.0 * ym1py1 + (number)11 / (number)20.0 * y2;
                number c1 = (number)1 / (number)24.0 * y2mym2 + (number)5 / (number)12.0 * y1mym1;
                number c2 = (number)1 / (number)12.0 * ym2py2 + sixthym1py1 - (number)1 / (number)2.0 * y2;
                number c3 = (number)1 / (number)12.0 * y2mym2 - (number)1 / (number)6.0 * y1mym1;
                number c4 = (number)1 / (number)24.0 * ym2py2 - sixthym1py1 + (number)1 / (number)4.0 * y2;
                number c5 = (number)1 / (number)120.0 * (y5 - y0) + (number)1 / (number)24.0 * (y1 - y4) + (number)1 / (number)12.0 * (y3 - y2);
                return ((((c5 * a + c4) * a + c3) * a + c2) * a + c1) * a + c0;
            }
            
            inline number cosT8(number r) {
                number t84 = 56.0;
                number t83 = 1680.0;
                number t82 = 20160.0;
                number t81 = 2.4801587302e-05;
                number t73 = 42.0;
                number t72 = 840.0;
                number t71 = 1.9841269841e-04;
            
                if (r < 0.785398163397448309615660845819875721 && r > -0.785398163397448309615660845819875721) {
                    number rr = r * r;
                    return 1.0 - rr * t81 * (t82 - rr * (t83 - rr * (t84 - rr)));
                } else if (r > 0.0) {
                    r -= 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return -r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                } else {
                    r += 1.57079632679489661923132169163975144;
                    number rr = r * r;
                    return r * (1.0 - t71 * rr * (t72 - rr * (t73 - rr)));
                }
            }
            
            inline number cosineinterp(number frac, number x, number y) {
                number a2 = (1.0 - this->cosT8(frac * 3.14159265358979323846)) / (number)2.0;
                return x * (1.0 - a2) + y * a2;
            }
            
            number mstosamps(MillisecondTime ms) {
                return ms * this->sr * 0.001;
            }
            
            number samplerate() const {
                return this->sr;
            }
            
            Index vectorsize() const {
                return this->vs;
            }
            
            number maximum(number x, number y) {
                return (x < y ? y : x);
            }
            
            Index getNumMidiInputPorts() const {
                return 0;
            }
            
            void processMidiEvent(MillisecondTime , int , ConstByteArray , Index ) {}
            
            Index getNumMidiOutputPorts() const {
                return 0;
            }
            
            void process(
                const SampleValue * const* inputs,
                Index numInputs,
                SampleValue * const* outputs,
                Index numOutputs,
                Index n
            ) {
                this->vs = n;
                this->updateTime(this->getEngine()->getCurrentTime());
                const SampleValue * target_Size = (numInputs >= 8 && inputs[7] ? inputs[7] : this->zeroBuffer);
                const SampleValue * target_Diff = (numInputs >= 9 && inputs[8] ? inputs[8] : this->zeroBuffer);
                SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
                const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
                const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
                const SampleValue * in3 = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
                const SampleValue * in4 = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
                const SampleValue * in5 = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
                const SampleValue * in6 = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
                const SampleValue * in7 = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
                this->stackprotect_perform(n);
                this->signalreceive_14_perform(target_Size, this->signals[0], n);
                this->signalreceive_15_perform(target_Diff, this->signals[1], n);
                this->dspexpr_30_perform(this->signals[0], this->signals[1], this->signals[2], n);
                this->dspexpr_34_perform(this->signals[2], this->dspexpr_34_in2, this->signals[1], n);
            
                this->comb_tilde_15_perform(
                    in6,
                    this->signals[1],
                    this->comb_tilde_15_gain,
                    this->comb_tilde_15_ffGain,
                    this->comb_tilde_15_fbGain,
                    this->signals[0],
                    n
                );
            
                this->dspexpr_33_perform(this->signals[2], this->dspexpr_33_in2, this->signals[1], n);
            
                this->comb_tilde_14_perform(
                    in5,
                    this->signals[1],
                    this->comb_tilde_14_gain,
                    this->comb_tilde_14_ffGain,
                    this->comb_tilde_14_fbGain,
                    this->signals[3],
                    n
                );
            
                this->dspexpr_31_perform(this->signals[2], this->dspexpr_31_in2, this->signals[1], n);
            
                this->comb_tilde_13_perform(
                    in4,
                    this->signals[1],
                    this->comb_tilde_13_gain,
                    this->comb_tilde_13_ffGain,
                    this->comb_tilde_13_fbGain,
                    this->signals[4],
                    n
                );
            
                this->dspexpr_28_perform(this->signals[2], this->dspexpr_28_in2, this->signals[1], n);
            
                this->comb_tilde_12_perform(
                    in3,
                    this->signals[1],
                    this->comb_tilde_12_gain,
                    this->comb_tilde_12_ffGain,
                    this->comb_tilde_12_fbGain,
                    this->signals[5],
                    n
                );
            
                this->dspexpr_27_perform(this->signals[2], this->dspexpr_27_in2, this->signals[1], n);
            
                this->comb_tilde_11_perform(
                    in2,
                    this->signals[1],
                    this->comb_tilde_11_gain,
                    this->comb_tilde_11_ffGain,
                    this->comb_tilde_11_fbGain,
                    this->signals[6],
                    n
                );
            
                this->dspexpr_26_perform(this->signals[2], this->dspexpr_26_in2, this->signals[1], n);
            
                this->comb_tilde_10_perform(
                    in1,
                    this->signals[1],
                    this->comb_tilde_10_gain,
                    this->comb_tilde_10_ffGain,
                    this->comb_tilde_10_fbGain,
                    this->signals[7],
                    n
                );
            
                this->dspexpr_35_perform(this->signals[2], this->dspexpr_35_in2, this->signals[1], n);
            
                this->comb_tilde_16_perform(
                    in7,
                    this->signals[1],
                    this->comb_tilde_16_gain,
                    this->comb_tilde_16_ffGain,
                    this->comb_tilde_16_fbGain,
                    this->signals[2],
                    n
                );
            
                this->signaladder_19_perform(
                    this->signals[5],
                    this->signals[3],
                    this->signals[0],
                    this->signals[2],
                    this->signals[2],
                    n
                );
            
                this->dspexpr_32_perform(this->signals[2], this->dspexpr_32_in2, this->signals[1], n);
            
                this->signaladder_20_perform(
                    this->signals[7],
                    this->signals[6],
                    this->signals[4],
                    this->signals[1],
                    this->signals[1],
                    n
                );
            
                this->dspexpr_29_perform(this->signals[1], this->dspexpr_29_in2, out1, n);
                this->audioProcessSampleCount += this->vs;
            }
            
            void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
                if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
                    Index i;
            
                    for (i = 0; i < 8; i++) {
                        this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
                    }
            
                    this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
                    this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
                    this->didAllocateSignals = true;
                }
            
                const bool sampleRateChanged = sampleRate != this->sr;
                const bool maxvsChanged = maxBlockSize != this->maxvs;
                const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
            
                if (sampleRateChanged || maxvsChanged) {
                    this->vs = maxBlockSize;
                    this->maxvs = maxBlockSize;
                    this->sr = sampleRate;
                    this->invsr = 1 / sampleRate;
                }
            
                this->comb_tilde_15_dspsetup(forceDSPSetup);
                this->comb_tilde_14_dspsetup(forceDSPSetup);
                this->comb_tilde_13_dspsetup(forceDSPSetup);
                this->comb_tilde_12_dspsetup(forceDSPSetup);
                this->comb_tilde_11_dspsetup(forceDSPSetup);
                this->comb_tilde_10_dspsetup(forceDSPSetup);
                this->comb_tilde_16_dspsetup(forceDSPSetup);
            
                if (sampleRateChanged)
                    this->onSampleRateChanged(sampleRate);
            }
            
            void setProbingTarget(MessageTag id) {
                switch (id) {
                default:
                    {
                    this->setProbingIndex(-1);
                    break;
                    }
                }
            }
            
            void setProbingIndex(ProbingIndex ) {}
            
            Index getProbingChannels(MessageTag outletId) const {
                RNBO_UNUSED(outletId);
                return 0;
            }
            
            Index getIsMuted()  {
                return this->isMuted;
            }
            
            void setIsMuted(Index v)  {
                this->isMuted = v;
            }
            
            void onSampleRateChanged(double ) {}
            
            Index getPatcherSerial() const {
                return 0;
            }
            
            void getState(PatcherStateInterface& ) {}
            
            void setState() {}
            
            void getPreset(PatcherStateInterface& ) {}
            
            void setParameterValue(ParameterIndex , ParameterValue , MillisecondTime ) {}
            
            void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValue(index, value, time);
            }
            
            void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
                this->setParameterValue(index, this->getParameterValue(index), time);
            }
            
            void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
                this->setParameterValueNormalized(index, value, time);
            }
            
            ParameterValue getParameterValue(ParameterIndex index)  {
                switch (index) {
                default:
                    {
                    return 0;
                    }
                }
            }
            
            ParameterIndex getNumSignalInParameters() const {
                return 2;
            }
            
            ParameterIndex getNumSignalOutParameters() const {
                return 0;
            }
            
            ParameterIndex getNumParameters() const {
                return 0;
            }
            
            ConstCharPointer getParameterName(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            ConstCharPointer getParameterId(ParameterIndex index) const {
                switch (index) {
                default:
                    {
                    return "bogus";
                    }
                }
            }
            
            void getParameterInfo(ParameterIndex , ParameterInfo * ) const {}
            
            void sendParameter(ParameterIndex index, bool ignoreValue) {
                this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
            }
            
            void setParameterOffset(ParameterIndex offset) {
                this->parameterOffset = offset;
            }
            
            ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
                if (steps == 1) {
                    if (normalizedValue > 0) {
                        normalizedValue = 1.;
                    }
                } else {
                    ParameterValue oneStep = (number)1. / (steps - 1);
                    ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
                    normalizedValue = numberOfSteps * oneStep;
                }
            
                return normalizedValue;
            }
            
            ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
                switch (index) {
                default:
                    {
                    return value;
                    }
                }
            }
            
            void scheduleParamInit(ParameterIndex index, Index order) {
                this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
            }
            
            void processClockEvent(MillisecondTime , ClockId , bool , ParameterValue ) {}
            
            void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
            
            void processOutletEvent(
                EngineLink* sender,
                OutletIndex index,
                ParameterValue value,
                MillisecondTime time
            ) {
                this->updateTime(time);
                this->processOutletAtCurrentTime(sender, index, value);
            }
            
            void processNumMessage(MessageTag , MessageTag , MillisecondTime , number ) {}
            
            void processListMessage(MessageTag , MessageTag , MillisecondTime , const list& ) {}
            
            void processBangMessage(MessageTag , MessageTag , MillisecondTime ) {}
            
            MessageTagInfo resolveTag(MessageTag tag) const {
                switch (tag) {
            
                }
            
                return nullptr;
            }
            
            DataRef* getDataRef(DataRefIndex index)  {
                switch (index) {
                case 4:
                    {
                    return addressOf(this->comb_tilde_10_feedForward_bufferobj);
                    break;
                    }
                case 5:
                    {
                    return addressOf(this->comb_tilde_10_feedBack_bufferobj);
                    break;
                    }
                case 6:
                    {
                    return addressOf(this->comb_tilde_11_feedForward_bufferobj);
                    break;
                    }
                case 7:
                    {
                    return addressOf(this->comb_tilde_11_feedBack_bufferobj);
                    break;
                    }
                case 8:
                    {
                    return addressOf(this->comb_tilde_12_feedForward_bufferobj);
                    break;
                    }
                case 9:
                    {
                    return addressOf(this->comb_tilde_12_feedBack_bufferobj);
                    break;
                    }
                case 10:
                    {
                    return addressOf(this->comb_tilde_13_feedForward_bufferobj);
                    break;
                    }
                case 11:
                    {
                    return addressOf(this->comb_tilde_13_feedBack_bufferobj);
                    break;
                    }
                case 12:
                    {
                    return addressOf(this->comb_tilde_14_feedForward_bufferobj);
                    break;
                    }
                case 13:
                    {
                    return addressOf(this->comb_tilde_14_feedBack_bufferobj);
                    break;
                    }
                case 14:
                    {
                    return addressOf(this->comb_tilde_15_feedForward_bufferobj);
                    break;
                    }
                case 15:
                    {
                    return addressOf(this->comb_tilde_15_feedBack_bufferobj);
                    break;
                    }
                case 16:
                    {
                    return addressOf(this->comb_tilde_16_feedForward_bufferobj);
                    break;
                    }
                case 17:
                    {
                    return addressOf(this->comb_tilde_16_feedBack_bufferobj);
                    break;
                    }
                default:
                    {
                    return nullptr;
                    }
                }
            }
            
            DataRefIndex getNumDataRefs() const {
                return 14;
            }
            
            void fillDataRef(DataRefIndex , DataRef& ) {}
            
            void zeroDataRef(DataRef& ref) {
                ref->setZero();
            }
            
            void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
                this->updateTime(time);
            
                if (index == 4) {
                    this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                }
            
                if (index == 5) {
                    this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                }
            
                if (index == 6) {
                    this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                }
            
                if (index == 7) {
                    this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                }
            
                if (index == 8) {
                    this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                }
            
                if (index == 9) {
                    this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                }
            
                if (index == 10) {
                    this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                }
            
                if (index == 11) {
                    this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                }
            
                if (index == 12) {
                    this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                }
            
                if (index == 13) {
                    this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                }
            
                if (index == 14) {
                    this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
                }
            
                if (index == 15) {
                    this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
                }
            
                if (index == 16) {
                    this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
                }
            
                if (index == 17) {
                    this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
                }
            }
            
            void initialize() {
                this->comb_tilde_10_feedForward_bufferobj = initDataRef("comb_tilde_10_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_10_feedBack_bufferobj = initDataRef("comb_tilde_10_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_11_feedForward_bufferobj = initDataRef("comb_tilde_11_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_11_feedBack_bufferobj = initDataRef("comb_tilde_11_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_12_feedForward_bufferobj = initDataRef("comb_tilde_12_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_12_feedBack_bufferobj = initDataRef("comb_tilde_12_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_13_feedForward_bufferobj = initDataRef("comb_tilde_13_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_13_feedBack_bufferobj = initDataRef("comb_tilde_13_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_14_feedForward_bufferobj = initDataRef("comb_tilde_14_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_14_feedBack_bufferobj = initDataRef("comb_tilde_14_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_15_feedForward_bufferobj = initDataRef("comb_tilde_15_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_15_feedBack_bufferobj = initDataRef("comb_tilde_15_feedBack_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_16_feedForward_bufferobj = initDataRef("comb_tilde_16_feedForward_bufferobj", true, nullptr, "buffer~");
                this->comb_tilde_16_feedBack_bufferobj = initDataRef("comb_tilde_16_feedBack_bufferobj", true, nullptr, "buffer~");
                this->assign_defaults();
                this->setState();
                this->comb_tilde_10_feedForward_bufferobj->setIndex(4);
                this->comb_tilde_10_feedForward_buffer = new Float64Buffer(this->comb_tilde_10_feedForward_bufferobj);
                this->comb_tilde_10_feedBack_bufferobj->setIndex(5);
                this->comb_tilde_10_feedBack_buffer = new Float64Buffer(this->comb_tilde_10_feedBack_bufferobj);
                this->comb_tilde_11_feedForward_bufferobj->setIndex(6);
                this->comb_tilde_11_feedForward_buffer = new Float64Buffer(this->comb_tilde_11_feedForward_bufferobj);
                this->comb_tilde_11_feedBack_bufferobj->setIndex(7);
                this->comb_tilde_11_feedBack_buffer = new Float64Buffer(this->comb_tilde_11_feedBack_bufferobj);
                this->comb_tilde_12_feedForward_bufferobj->setIndex(8);
                this->comb_tilde_12_feedForward_buffer = new Float64Buffer(this->comb_tilde_12_feedForward_bufferobj);
                this->comb_tilde_12_feedBack_bufferobj->setIndex(9);
                this->comb_tilde_12_feedBack_buffer = new Float64Buffer(this->comb_tilde_12_feedBack_bufferobj);
                this->comb_tilde_13_feedForward_bufferobj->setIndex(10);
                this->comb_tilde_13_feedForward_buffer = new Float64Buffer(this->comb_tilde_13_feedForward_bufferobj);
                this->comb_tilde_13_feedBack_bufferobj->setIndex(11);
                this->comb_tilde_13_feedBack_buffer = new Float64Buffer(this->comb_tilde_13_feedBack_bufferobj);
                this->comb_tilde_14_feedForward_bufferobj->setIndex(12);
                this->comb_tilde_14_feedForward_buffer = new Float64Buffer(this->comb_tilde_14_feedForward_bufferobj);
                this->comb_tilde_14_feedBack_bufferobj->setIndex(13);
                this->comb_tilde_14_feedBack_buffer = new Float64Buffer(this->comb_tilde_14_feedBack_bufferobj);
                this->comb_tilde_15_feedForward_bufferobj->setIndex(14);
                this->comb_tilde_15_feedForward_buffer = new Float64Buffer(this->comb_tilde_15_feedForward_bufferobj);
                this->comb_tilde_15_feedBack_bufferobj->setIndex(15);
                this->comb_tilde_15_feedBack_buffer = new Float64Buffer(this->comb_tilde_15_feedBack_bufferobj);
                this->comb_tilde_16_feedForward_bufferobj->setIndex(16);
                this->comb_tilde_16_feedForward_buffer = new Float64Buffer(this->comb_tilde_16_feedForward_bufferobj);
                this->comb_tilde_16_feedBack_bufferobj->setIndex(17);
                this->comb_tilde_16_feedBack_buffer = new Float64Buffer(this->comb_tilde_16_feedBack_bufferobj);
            }
            
            protected:
            
            number msToSamps(MillisecondTime ms, number sampleRate) {
                return ms * sampleRate * 0.001;
            }
            
            MillisecondTime sampsToMs(SampleIndex samps) {
                return samps * (this->invsr * 1000);
            }
            
            Index getMaxBlockSize() const {
                return this->maxvs;
            }
            
            number getSampleRate() const {
                return this->sr;
            }
            
            bool hasFixedVectorSize() const {
                return false;
            }
            
            Index getNumInputChannels() const {
                return 7;
            }
            
            Index getNumOutputChannels() const {
                return 1;
            }
            
            void initializeObjects() {
                this->comb_tilde_10_feedForward_init();
                this->comb_tilde_10_feedBack_init();
                this->comb_tilde_10_init();
                this->comb_tilde_11_feedForward_init();
                this->comb_tilde_11_feedBack_init();
                this->comb_tilde_11_init();
                this->comb_tilde_12_feedForward_init();
                this->comb_tilde_12_feedBack_init();
                this->comb_tilde_12_init();
                this->comb_tilde_13_feedForward_init();
                this->comb_tilde_13_feedBack_init();
                this->comb_tilde_13_init();
                this->comb_tilde_14_feedForward_init();
                this->comb_tilde_14_feedBack_init();
                this->comb_tilde_14_init();
                this->comb_tilde_15_feedForward_init();
                this->comb_tilde_15_feedBack_init();
                this->comb_tilde_15_init();
                this->comb_tilde_16_feedForward_init();
                this->comb_tilde_16_feedBack_init();
                this->comb_tilde_16_init();
            }
            
            void sendOutlet(OutletIndex index, ParameterValue value) {
                this->getEngine()->sendOutlet(this, index, value);
            }
            
            void startup() {}
            
            void allocateDataRefs() {
                this->comb_tilde_10_feedForward_buffer = this->comb_tilde_10_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_10_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_10_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_10_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(4);
                }
            
                this->comb_tilde_10_feedBack_buffer = this->comb_tilde_10_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_10_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_10_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_10_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(5);
                }
            
                this->comb_tilde_11_feedForward_buffer = this->comb_tilde_11_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_11_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_11_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_11_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(6);
                }
            
                this->comb_tilde_11_feedBack_buffer = this->comb_tilde_11_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_11_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_11_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_11_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(7);
                }
            
                this->comb_tilde_12_feedForward_buffer = this->comb_tilde_12_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_12_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_12_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_12_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(8);
                }
            
                this->comb_tilde_12_feedBack_buffer = this->comb_tilde_12_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_12_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_12_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_12_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(9);
                }
            
                this->comb_tilde_13_feedForward_buffer = this->comb_tilde_13_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_13_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_13_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_13_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(10);
                }
            
                this->comb_tilde_13_feedBack_buffer = this->comb_tilde_13_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_13_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_13_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_13_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(11);
                }
            
                this->comb_tilde_14_feedForward_buffer = this->comb_tilde_14_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_14_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_14_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_14_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(12);
                }
            
                this->comb_tilde_14_feedBack_buffer = this->comb_tilde_14_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_14_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_14_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_14_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(13);
                }
            
                this->comb_tilde_15_feedForward_buffer = this->comb_tilde_15_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_15_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_15_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_15_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(14);
                }
            
                this->comb_tilde_15_feedBack_buffer = this->comb_tilde_15_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_15_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_15_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_15_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(15);
                }
            
                this->comb_tilde_16_feedForward_buffer = this->comb_tilde_16_feedForward_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_16_feedForward_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_16_feedForward_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_16_feedForward_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(16);
                }
            
                this->comb_tilde_16_feedBack_buffer = this->comb_tilde_16_feedBack_buffer->allocateIfNeeded();
            
                if (this->comb_tilde_16_feedBack_bufferobj->hasRequestedSize()) {
                    if (this->comb_tilde_16_feedBack_bufferobj->wantsFill())
                        this->zeroDataRef(this->comb_tilde_16_feedBack_bufferobj);
            
                    this->getEngine()->sendDataRefUpdated(17);
                }
            }
            
            void stackprotect_perform(Index n) {
                RNBO_UNUSED(n);
                auto __stackprotect_count = this->stackprotect_count;
                __stackprotect_count = 0;
                this->stackprotect_count = __stackprotect_count;
            }
            
            void signalreceive_14_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void signalreceive_15_perform(const SampleValue * receive, SampleValue * output, Index n) {
                for (Index i = 0; i < n; i++) {
                    output[(Index)i] = receive[(Index)i];
                }
            }
            
            void dspexpr_30_perform(const Sample * in1, const Sample * in2, SampleValue * out1, Index n) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * in2[(Index)i];//#map:_###_obj_###_:1
                }
            }
            
            void dspexpr_34_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 27;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_15_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_15_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_15_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_15_feedForward_write(x[(Index)i]);
                    this->comb_tilde_15_feedBack_write(ov);
                    this->comb_tilde_15_feedForward_step();
                    this->comb_tilde_15_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_33_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 35;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_14_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_14_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_14_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_14_feedForward_write(x[(Index)i]);
                    this->comb_tilde_14_feedBack_write(ov);
                    this->comb_tilde_14_feedForward_step();
                    this->comb_tilde_14_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_31_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 3;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_13_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_13_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_13_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_13_feedForward_write(x[(Index)i]);
                    this->comb_tilde_13_feedBack_write(ov);
                    this->comb_tilde_13_feedForward_step();
                    this->comb_tilde_13_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_28_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 55;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_12_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_12_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_12_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_12_feedForward_write(x[(Index)i]);
                    this->comb_tilde_12_feedBack_write(ov);
                    this->comb_tilde_12_feedForward_step();
                    this->comb_tilde_12_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_27_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 135;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_11_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_11_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_11_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_11_feedForward_write(x[(Index)i]);
                    this->comb_tilde_11_feedBack_write(ov);
                    this->comb_tilde_11_feedForward_step();
                    this->comb_tilde_11_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_26_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 110;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_10_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_10_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_10_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_10_feedForward_write(x[(Index)i]);
                    this->comb_tilde_10_feedBack_write(ov);
                    this->comb_tilde_10_feedForward_step();
                    this->comb_tilde_10_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void dspexpr_35_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 52;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_16_perform(
                const Sample * x,
                const Sample * delayTime,
                number gain,
                number ffGain,
                number fbGain,
                SampleValue * out1,
                Index n
            ) {
                RNBO_UNUSED(fbGain);
                RNBO_UNUSED(ffGain);
                RNBO_UNUSED(gain);
                Index i;
            
                for (i = 0; i < n; i++) {
                    number __fbGain = 0;
                    number __ffGain = 1;
                    number __gain = 0;
                    number __delayTime = delayTime[(Index)i];
                    __delayTime = this->mstosamps(__delayTime);
                    __delayTime = (__delayTime > this->sr ? this->sr : (__delayTime < 0 ? 0 : __delayTime));
                    __gain = (__gain > 1 ? 1 : (__gain < 0 ? 0 : __gain));
                    __ffGain = (__ffGain > 0.99 ? 0.99 : (__ffGain < 0 ? 0 : __ffGain));
                    __fbGain = (__fbGain > 0.99 ? 0.99 : (__fbGain < 0 ? 0 : __fbGain));
                    number tmp = x[(Index)i] * __gain;
                    number ff = this->comb_tilde_16_feedForward_read(__delayTime, 0);
                    number fb = this->comb_tilde_16_feedBack_read(__delayTime, 0);
                    number ov = tmp + ff * __ffGain + fb * __fbGain;
                    fixdenorm(ov);
                    this->comb_tilde_16_feedForward_write(x[(Index)i]);
                    this->comb_tilde_16_feedBack_write(ov);
                    this->comb_tilde_16_feedForward_step();
                    this->comb_tilde_16_feedBack_step();
                    out1[(Index)i] = ov;
                }
            }
            
            void signaladder_19_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_32_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * -1;//#map:_###_obj_###_:1
                }
            }
            
            void signaladder_20_perform(
                const SampleValue * in1,
                const SampleValue * in2,
                const SampleValue * in3,
                const SampleValue * in4,
                SampleValue * out,
                Index n
            ) {
                Index i;
            
                for (i = 0; i < n; i++) {
                    out[(Index)i] = in1[(Index)i] + in2[(Index)i] + in3[(Index)i] + in4[(Index)i];
                }
            }
            
            void dspexpr_29_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
                RNBO_UNUSED(in2);
                Index i;
            
                for (i = 0; i < n; i++) {
                    out1[(Index)i] = in1[(Index)i] * 0.355;//#map:_###_obj_###_:1
                }
            }
            
            void comb_tilde_10_feedForward_step() {
                this->comb_tilde_10_feedForward_reader++;
            
                if (this->comb_tilde_10_feedForward_reader >= (int)(this->comb_tilde_10_feedForward_buffer->getSize()))
                    this->comb_tilde_10_feedForward_reader = 0;
            }
            
            number comb_tilde_10_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? 1 + this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ), this->comb_tilde_10_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_10_feedForward_buffer->getSize()) + this->comb_tilde_10_feedForward_reader - ((size > this->comb_tilde_10_feedForward__maxdelay ? this->comb_tilde_10_feedForward__maxdelay : (size < (this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer) ? this->comb_tilde_10_feedForward_reader != this->comb_tilde_10_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_10_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedForward_wrap))
                );
            }
            
            void comb_tilde_10_feedForward_write(number v) {
                this->comb_tilde_10_feedForward_writer = this->comb_tilde_10_feedForward_reader;
                this->comb_tilde_10_feedForward_buffer[(Index)this->comb_tilde_10_feedForward_writer] = v;
            }
            
            number comb_tilde_10_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_10_feedForward__maxdelay : size);
                number val = this->comb_tilde_10_feedForward_read(effectiveSize, 0);
                this->comb_tilde_10_feedForward_write(v);
                this->comb_tilde_10_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_10_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_10_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_10_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_10_feedForward_init() {
                auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                this->comb_tilde_10_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_10_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_10_feedForward_clear() {
                this->comb_tilde_10_feedForward_buffer->setZero();
            }
            
            void comb_tilde_10_feedForward_reset() {
                auto result = this->comb_tilde_10_feedForward_calcSizeInSamples();
                this->comb_tilde_10_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_10_feedForward_buffer);
                this->comb_tilde_10_feedForward_wrap = this->comb_tilde_10_feedForward_buffer->getSize() - 1;
                this->comb_tilde_10_feedForward_clear();
            
                if (this->comb_tilde_10_feedForward_reader >= this->comb_tilde_10_feedForward__maxdelay || this->comb_tilde_10_feedForward_writer >= this->comb_tilde_10_feedForward__maxdelay) {
                    this->comb_tilde_10_feedForward_reader = 0;
                    this->comb_tilde_10_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_10_feedForward_dspsetup() {
                this->comb_tilde_10_feedForward_reset();
            }
            
            number comb_tilde_10_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_10_feedForward_size() {
                return this->comb_tilde_10_feedForward__maxdelay;
            }
            
            void comb_tilde_10_feedBack_step() {
                this->comb_tilde_10_feedBack_reader++;
            
                if (this->comb_tilde_10_feedBack_reader >= (int)(this->comb_tilde_10_feedBack_buffer->getSize()))
                    this->comb_tilde_10_feedBack_reader = 0;
            }
            
            number comb_tilde_10_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? 1 + this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ), this->comb_tilde_10_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_10_feedBack_buffer->getSize()) + this->comb_tilde_10_feedBack_reader - ((size > this->comb_tilde_10_feedBack__maxdelay ? this->comb_tilde_10_feedBack__maxdelay : (size < (this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer) ? this->comb_tilde_10_feedBack_reader != this->comb_tilde_10_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_10_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_10_feedBack_wrap))
                );
            }
            
            void comb_tilde_10_feedBack_write(number v) {
                this->comb_tilde_10_feedBack_writer = this->comb_tilde_10_feedBack_reader;
                this->comb_tilde_10_feedBack_buffer[(Index)this->comb_tilde_10_feedBack_writer] = v;
            }
            
            number comb_tilde_10_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_10_feedBack__maxdelay : size);
                number val = this->comb_tilde_10_feedBack_read(effectiveSize, 0);
                this->comb_tilde_10_feedBack_write(v);
                this->comb_tilde_10_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_10_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_10_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_10_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_10_feedBack_init() {
                auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                this->comb_tilde_10_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_10_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_10_feedBack_clear() {
                this->comb_tilde_10_feedBack_buffer->setZero();
            }
            
            void comb_tilde_10_feedBack_reset() {
                auto result = this->comb_tilde_10_feedBack_calcSizeInSamples();
                this->comb_tilde_10_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_10_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_10_feedBack_buffer);
                this->comb_tilde_10_feedBack_wrap = this->comb_tilde_10_feedBack_buffer->getSize() - 1;
                this->comb_tilde_10_feedBack_clear();
            
                if (this->comb_tilde_10_feedBack_reader >= this->comb_tilde_10_feedBack__maxdelay || this->comb_tilde_10_feedBack_writer >= this->comb_tilde_10_feedBack__maxdelay) {
                    this->comb_tilde_10_feedBack_reader = 0;
                    this->comb_tilde_10_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_10_feedBack_dspsetup() {
                this->comb_tilde_10_feedBack_reset();
            }
            
            number comb_tilde_10_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_10_feedBack_size() {
                return this->comb_tilde_10_feedBack__maxdelay;
            }
            
            void comb_tilde_10_init() {
                this->comb_tilde_10_feedForward_init();
                this->comb_tilde_10_feedBack_init();
            }
            
            void comb_tilde_10_clear() {
                this->comb_tilde_10_feedForward_clear();
                this->comb_tilde_10_feedBack_clear();
            }
            
            void comb_tilde_10_reset() {
                this->comb_tilde_10_init();
                this->comb_tilde_10_clear();
            }
            
            void comb_tilde_10_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_10_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_10_reset();
                this->comb_tilde_10_setupDone = true;
                this->comb_tilde_10_feedForward_dspsetup();
                this->comb_tilde_10_feedBack_dspsetup();
            }
            
            void comb_tilde_11_feedForward_step() {
                this->comb_tilde_11_feedForward_reader++;
            
                if (this->comb_tilde_11_feedForward_reader >= (int)(this->comb_tilde_11_feedForward_buffer->getSize()))
                    this->comb_tilde_11_feedForward_reader = 0;
            }
            
            number comb_tilde_11_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? 1 + this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ), this->comb_tilde_11_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_11_feedForward_buffer->getSize()) + this->comb_tilde_11_feedForward_reader - ((size > this->comb_tilde_11_feedForward__maxdelay ? this->comb_tilde_11_feedForward__maxdelay : (size < (this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer) ? this->comb_tilde_11_feedForward_reader != this->comb_tilde_11_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_11_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedForward_wrap))
                );
            }
            
            void comb_tilde_11_feedForward_write(number v) {
                this->comb_tilde_11_feedForward_writer = this->comb_tilde_11_feedForward_reader;
                this->comb_tilde_11_feedForward_buffer[(Index)this->comb_tilde_11_feedForward_writer] = v;
            }
            
            number comb_tilde_11_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_11_feedForward__maxdelay : size);
                number val = this->comb_tilde_11_feedForward_read(effectiveSize, 0);
                this->comb_tilde_11_feedForward_write(v);
                this->comb_tilde_11_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_11_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_11_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_11_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_11_feedForward_init() {
                auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                this->comb_tilde_11_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_11_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_11_feedForward_clear() {
                this->comb_tilde_11_feedForward_buffer->setZero();
            }
            
            void comb_tilde_11_feedForward_reset() {
                auto result = this->comb_tilde_11_feedForward_calcSizeInSamples();
                this->comb_tilde_11_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_11_feedForward_buffer);
                this->comb_tilde_11_feedForward_wrap = this->comb_tilde_11_feedForward_buffer->getSize() - 1;
                this->comb_tilde_11_feedForward_clear();
            
                if (this->comb_tilde_11_feedForward_reader >= this->comb_tilde_11_feedForward__maxdelay || this->comb_tilde_11_feedForward_writer >= this->comb_tilde_11_feedForward__maxdelay) {
                    this->comb_tilde_11_feedForward_reader = 0;
                    this->comb_tilde_11_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_11_feedForward_dspsetup() {
                this->comb_tilde_11_feedForward_reset();
            }
            
            number comb_tilde_11_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_11_feedForward_size() {
                return this->comb_tilde_11_feedForward__maxdelay;
            }
            
            void comb_tilde_11_feedBack_step() {
                this->comb_tilde_11_feedBack_reader++;
            
                if (this->comb_tilde_11_feedBack_reader >= (int)(this->comb_tilde_11_feedBack_buffer->getSize()))
                    this->comb_tilde_11_feedBack_reader = 0;
            }
            
            number comb_tilde_11_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? 1 + this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ), this->comb_tilde_11_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_11_feedBack_buffer->getSize()) + this->comb_tilde_11_feedBack_reader - ((size > this->comb_tilde_11_feedBack__maxdelay ? this->comb_tilde_11_feedBack__maxdelay : (size < (this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer) ? this->comb_tilde_11_feedBack_reader != this->comb_tilde_11_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_11_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_11_feedBack_wrap))
                );
            }
            
            void comb_tilde_11_feedBack_write(number v) {
                this->comb_tilde_11_feedBack_writer = this->comb_tilde_11_feedBack_reader;
                this->comb_tilde_11_feedBack_buffer[(Index)this->comb_tilde_11_feedBack_writer] = v;
            }
            
            number comb_tilde_11_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_11_feedBack__maxdelay : size);
                number val = this->comb_tilde_11_feedBack_read(effectiveSize, 0);
                this->comb_tilde_11_feedBack_write(v);
                this->comb_tilde_11_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_11_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_11_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_11_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_11_feedBack_init() {
                auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                this->comb_tilde_11_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_11_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_11_feedBack_clear() {
                this->comb_tilde_11_feedBack_buffer->setZero();
            }
            
            void comb_tilde_11_feedBack_reset() {
                auto result = this->comb_tilde_11_feedBack_calcSizeInSamples();
                this->comb_tilde_11_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_11_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_11_feedBack_buffer);
                this->comb_tilde_11_feedBack_wrap = this->comb_tilde_11_feedBack_buffer->getSize() - 1;
                this->comb_tilde_11_feedBack_clear();
            
                if (this->comb_tilde_11_feedBack_reader >= this->comb_tilde_11_feedBack__maxdelay || this->comb_tilde_11_feedBack_writer >= this->comb_tilde_11_feedBack__maxdelay) {
                    this->comb_tilde_11_feedBack_reader = 0;
                    this->comb_tilde_11_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_11_feedBack_dspsetup() {
                this->comb_tilde_11_feedBack_reset();
            }
            
            number comb_tilde_11_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_11_feedBack_size() {
                return this->comb_tilde_11_feedBack__maxdelay;
            }
            
            void comb_tilde_11_init() {
                this->comb_tilde_11_feedForward_init();
                this->comb_tilde_11_feedBack_init();
            }
            
            void comb_tilde_11_clear() {
                this->comb_tilde_11_feedForward_clear();
                this->comb_tilde_11_feedBack_clear();
            }
            
            void comb_tilde_11_reset() {
                this->comb_tilde_11_init();
                this->comb_tilde_11_clear();
            }
            
            void comb_tilde_11_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_11_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_11_reset();
                this->comb_tilde_11_setupDone = true;
                this->comb_tilde_11_feedForward_dspsetup();
                this->comb_tilde_11_feedBack_dspsetup();
            }
            
            void comb_tilde_12_feedForward_step() {
                this->comb_tilde_12_feedForward_reader++;
            
                if (this->comb_tilde_12_feedForward_reader >= (int)(this->comb_tilde_12_feedForward_buffer->getSize()))
                    this->comb_tilde_12_feedForward_reader = 0;
            }
            
            number comb_tilde_12_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? 1 + this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ), this->comb_tilde_12_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_12_feedForward_buffer->getSize()) + this->comb_tilde_12_feedForward_reader - ((size > this->comb_tilde_12_feedForward__maxdelay ? this->comb_tilde_12_feedForward__maxdelay : (size < (this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer) ? this->comb_tilde_12_feedForward_reader != this->comb_tilde_12_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_12_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedForward_wrap))
                );
            }
            
            void comb_tilde_12_feedForward_write(number v) {
                this->comb_tilde_12_feedForward_writer = this->comb_tilde_12_feedForward_reader;
                this->comb_tilde_12_feedForward_buffer[(Index)this->comb_tilde_12_feedForward_writer] = v;
            }
            
            number comb_tilde_12_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_12_feedForward__maxdelay : size);
                number val = this->comb_tilde_12_feedForward_read(effectiveSize, 0);
                this->comb_tilde_12_feedForward_write(v);
                this->comb_tilde_12_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_12_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_12_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_12_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_12_feedForward_init() {
                auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                this->comb_tilde_12_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_12_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_12_feedForward_clear() {
                this->comb_tilde_12_feedForward_buffer->setZero();
            }
            
            void comb_tilde_12_feedForward_reset() {
                auto result = this->comb_tilde_12_feedForward_calcSizeInSamples();
                this->comb_tilde_12_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_12_feedForward_buffer);
                this->comb_tilde_12_feedForward_wrap = this->comb_tilde_12_feedForward_buffer->getSize() - 1;
                this->comb_tilde_12_feedForward_clear();
            
                if (this->comb_tilde_12_feedForward_reader >= this->comb_tilde_12_feedForward__maxdelay || this->comb_tilde_12_feedForward_writer >= this->comb_tilde_12_feedForward__maxdelay) {
                    this->comb_tilde_12_feedForward_reader = 0;
                    this->comb_tilde_12_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_12_feedForward_dspsetup() {
                this->comb_tilde_12_feedForward_reset();
            }
            
            number comb_tilde_12_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_12_feedForward_size() {
                return this->comb_tilde_12_feedForward__maxdelay;
            }
            
            void comb_tilde_12_feedBack_step() {
                this->comb_tilde_12_feedBack_reader++;
            
                if (this->comb_tilde_12_feedBack_reader >= (int)(this->comb_tilde_12_feedBack_buffer->getSize()))
                    this->comb_tilde_12_feedBack_reader = 0;
            }
            
            number comb_tilde_12_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? 1 + this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ), this->comb_tilde_12_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_12_feedBack_buffer->getSize()) + this->comb_tilde_12_feedBack_reader - ((size > this->comb_tilde_12_feedBack__maxdelay ? this->comb_tilde_12_feedBack__maxdelay : (size < (this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer) ? this->comb_tilde_12_feedBack_reader != this->comb_tilde_12_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_12_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_12_feedBack_wrap))
                );
            }
            
            void comb_tilde_12_feedBack_write(number v) {
                this->comb_tilde_12_feedBack_writer = this->comb_tilde_12_feedBack_reader;
                this->comb_tilde_12_feedBack_buffer[(Index)this->comb_tilde_12_feedBack_writer] = v;
            }
            
            number comb_tilde_12_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_12_feedBack__maxdelay : size);
                number val = this->comb_tilde_12_feedBack_read(effectiveSize, 0);
                this->comb_tilde_12_feedBack_write(v);
                this->comb_tilde_12_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_12_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_12_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_12_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_12_feedBack_init() {
                auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                this->comb_tilde_12_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_12_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_12_feedBack_clear() {
                this->comb_tilde_12_feedBack_buffer->setZero();
            }
            
            void comb_tilde_12_feedBack_reset() {
                auto result = this->comb_tilde_12_feedBack_calcSizeInSamples();
                this->comb_tilde_12_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_12_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_12_feedBack_buffer);
                this->comb_tilde_12_feedBack_wrap = this->comb_tilde_12_feedBack_buffer->getSize() - 1;
                this->comb_tilde_12_feedBack_clear();
            
                if (this->comb_tilde_12_feedBack_reader >= this->comb_tilde_12_feedBack__maxdelay || this->comb_tilde_12_feedBack_writer >= this->comb_tilde_12_feedBack__maxdelay) {
                    this->comb_tilde_12_feedBack_reader = 0;
                    this->comb_tilde_12_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_12_feedBack_dspsetup() {
                this->comb_tilde_12_feedBack_reset();
            }
            
            number comb_tilde_12_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_12_feedBack_size() {
                return this->comb_tilde_12_feedBack__maxdelay;
            }
            
            void comb_tilde_12_init() {
                this->comb_tilde_12_feedForward_init();
                this->comb_tilde_12_feedBack_init();
            }
            
            void comb_tilde_12_clear() {
                this->comb_tilde_12_feedForward_clear();
                this->comb_tilde_12_feedBack_clear();
            }
            
            void comb_tilde_12_reset() {
                this->comb_tilde_12_init();
                this->comb_tilde_12_clear();
            }
            
            void comb_tilde_12_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_12_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_12_reset();
                this->comb_tilde_12_setupDone = true;
                this->comb_tilde_12_feedForward_dspsetup();
                this->comb_tilde_12_feedBack_dspsetup();
            }
            
            void comb_tilde_13_feedForward_step() {
                this->comb_tilde_13_feedForward_reader++;
            
                if (this->comb_tilde_13_feedForward_reader >= (int)(this->comb_tilde_13_feedForward_buffer->getSize()))
                    this->comb_tilde_13_feedForward_reader = 0;
            }
            
            number comb_tilde_13_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? 1 + this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ), this->comb_tilde_13_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_13_feedForward_buffer->getSize()) + this->comb_tilde_13_feedForward_reader - ((size > this->comb_tilde_13_feedForward__maxdelay ? this->comb_tilde_13_feedForward__maxdelay : (size < (this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer) ? this->comb_tilde_13_feedForward_reader != this->comb_tilde_13_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_13_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedForward_wrap))
                );
            }
            
            void comb_tilde_13_feedForward_write(number v) {
                this->comb_tilde_13_feedForward_writer = this->comb_tilde_13_feedForward_reader;
                this->comb_tilde_13_feedForward_buffer[(Index)this->comb_tilde_13_feedForward_writer] = v;
            }
            
            number comb_tilde_13_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_13_feedForward__maxdelay : size);
                number val = this->comb_tilde_13_feedForward_read(effectiveSize, 0);
                this->comb_tilde_13_feedForward_write(v);
                this->comb_tilde_13_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_13_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_13_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_13_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_13_feedForward_init() {
                auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                this->comb_tilde_13_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_13_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_13_feedForward_clear() {
                this->comb_tilde_13_feedForward_buffer->setZero();
            }
            
            void comb_tilde_13_feedForward_reset() {
                auto result = this->comb_tilde_13_feedForward_calcSizeInSamples();
                this->comb_tilde_13_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_13_feedForward_buffer);
                this->comb_tilde_13_feedForward_wrap = this->comb_tilde_13_feedForward_buffer->getSize() - 1;
                this->comb_tilde_13_feedForward_clear();
            
                if (this->comb_tilde_13_feedForward_reader >= this->comb_tilde_13_feedForward__maxdelay || this->comb_tilde_13_feedForward_writer >= this->comb_tilde_13_feedForward__maxdelay) {
                    this->comb_tilde_13_feedForward_reader = 0;
                    this->comb_tilde_13_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_13_feedForward_dspsetup() {
                this->comb_tilde_13_feedForward_reset();
            }
            
            number comb_tilde_13_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_13_feedForward_size() {
                return this->comb_tilde_13_feedForward__maxdelay;
            }
            
            void comb_tilde_13_feedBack_step() {
                this->comb_tilde_13_feedBack_reader++;
            
                if (this->comb_tilde_13_feedBack_reader >= (int)(this->comb_tilde_13_feedBack_buffer->getSize()))
                    this->comb_tilde_13_feedBack_reader = 0;
            }
            
            number comb_tilde_13_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? 1 + this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ), this->comb_tilde_13_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_13_feedBack_buffer->getSize()) + this->comb_tilde_13_feedBack_reader - ((size > this->comb_tilde_13_feedBack__maxdelay ? this->comb_tilde_13_feedBack__maxdelay : (size < (this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer) ? this->comb_tilde_13_feedBack_reader != this->comb_tilde_13_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_13_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_13_feedBack_wrap))
                );
            }
            
            void comb_tilde_13_feedBack_write(number v) {
                this->comb_tilde_13_feedBack_writer = this->comb_tilde_13_feedBack_reader;
                this->comb_tilde_13_feedBack_buffer[(Index)this->comb_tilde_13_feedBack_writer] = v;
            }
            
            number comb_tilde_13_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_13_feedBack__maxdelay : size);
                number val = this->comb_tilde_13_feedBack_read(effectiveSize, 0);
                this->comb_tilde_13_feedBack_write(v);
                this->comb_tilde_13_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_13_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_13_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_13_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_13_feedBack_init() {
                auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                this->comb_tilde_13_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_13_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_13_feedBack_clear() {
                this->comb_tilde_13_feedBack_buffer->setZero();
            }
            
            void comb_tilde_13_feedBack_reset() {
                auto result = this->comb_tilde_13_feedBack_calcSizeInSamples();
                this->comb_tilde_13_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_13_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_13_feedBack_buffer);
                this->comb_tilde_13_feedBack_wrap = this->comb_tilde_13_feedBack_buffer->getSize() - 1;
                this->comb_tilde_13_feedBack_clear();
            
                if (this->comb_tilde_13_feedBack_reader >= this->comb_tilde_13_feedBack__maxdelay || this->comb_tilde_13_feedBack_writer >= this->comb_tilde_13_feedBack__maxdelay) {
                    this->comb_tilde_13_feedBack_reader = 0;
                    this->comb_tilde_13_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_13_feedBack_dspsetup() {
                this->comb_tilde_13_feedBack_reset();
            }
            
            number comb_tilde_13_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_13_feedBack_size() {
                return this->comb_tilde_13_feedBack__maxdelay;
            }
            
            void comb_tilde_13_init() {
                this->comb_tilde_13_feedForward_init();
                this->comb_tilde_13_feedBack_init();
            }
            
            void comb_tilde_13_clear() {
                this->comb_tilde_13_feedForward_clear();
                this->comb_tilde_13_feedBack_clear();
            }
            
            void comb_tilde_13_reset() {
                this->comb_tilde_13_init();
                this->comb_tilde_13_clear();
            }
            
            void comb_tilde_13_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_13_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_13_reset();
                this->comb_tilde_13_setupDone = true;
                this->comb_tilde_13_feedForward_dspsetup();
                this->comb_tilde_13_feedBack_dspsetup();
            }
            
            void comb_tilde_14_feedForward_step() {
                this->comb_tilde_14_feedForward_reader++;
            
                if (this->comb_tilde_14_feedForward_reader >= (int)(this->comb_tilde_14_feedForward_buffer->getSize()))
                    this->comb_tilde_14_feedForward_reader = 0;
            }
            
            number comb_tilde_14_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? 1 + this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ), this->comb_tilde_14_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_14_feedForward_buffer->getSize()) + this->comb_tilde_14_feedForward_reader - ((size > this->comb_tilde_14_feedForward__maxdelay ? this->comb_tilde_14_feedForward__maxdelay : (size < (this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer) ? this->comb_tilde_14_feedForward_reader != this->comb_tilde_14_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_14_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedForward_wrap))
                );
            }
            
            void comb_tilde_14_feedForward_write(number v) {
                this->comb_tilde_14_feedForward_writer = this->comb_tilde_14_feedForward_reader;
                this->comb_tilde_14_feedForward_buffer[(Index)this->comb_tilde_14_feedForward_writer] = v;
            }
            
            number comb_tilde_14_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_14_feedForward__maxdelay : size);
                number val = this->comb_tilde_14_feedForward_read(effectiveSize, 0);
                this->comb_tilde_14_feedForward_write(v);
                this->comb_tilde_14_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_14_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_14_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_14_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_14_feedForward_init() {
                auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                this->comb_tilde_14_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_14_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_14_feedForward_clear() {
                this->comb_tilde_14_feedForward_buffer->setZero();
            }
            
            void comb_tilde_14_feedForward_reset() {
                auto result = this->comb_tilde_14_feedForward_calcSizeInSamples();
                this->comb_tilde_14_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_14_feedForward_buffer);
                this->comb_tilde_14_feedForward_wrap = this->comb_tilde_14_feedForward_buffer->getSize() - 1;
                this->comb_tilde_14_feedForward_clear();
            
                if (this->comb_tilde_14_feedForward_reader >= this->comb_tilde_14_feedForward__maxdelay || this->comb_tilde_14_feedForward_writer >= this->comb_tilde_14_feedForward__maxdelay) {
                    this->comb_tilde_14_feedForward_reader = 0;
                    this->comb_tilde_14_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_14_feedForward_dspsetup() {
                this->comb_tilde_14_feedForward_reset();
            }
            
            number comb_tilde_14_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_14_feedForward_size() {
                return this->comb_tilde_14_feedForward__maxdelay;
            }
            
            void comb_tilde_14_feedBack_step() {
                this->comb_tilde_14_feedBack_reader++;
            
                if (this->comb_tilde_14_feedBack_reader >= (int)(this->comb_tilde_14_feedBack_buffer->getSize()))
                    this->comb_tilde_14_feedBack_reader = 0;
            }
            
            number comb_tilde_14_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? 1 + this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ), this->comb_tilde_14_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_14_feedBack_buffer->getSize()) + this->comb_tilde_14_feedBack_reader - ((size > this->comb_tilde_14_feedBack__maxdelay ? this->comb_tilde_14_feedBack__maxdelay : (size < (this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer) ? this->comb_tilde_14_feedBack_reader != this->comb_tilde_14_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_14_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_14_feedBack_wrap))
                );
            }
            
            void comb_tilde_14_feedBack_write(number v) {
                this->comb_tilde_14_feedBack_writer = this->comb_tilde_14_feedBack_reader;
                this->comb_tilde_14_feedBack_buffer[(Index)this->comb_tilde_14_feedBack_writer] = v;
            }
            
            number comb_tilde_14_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_14_feedBack__maxdelay : size);
                number val = this->comb_tilde_14_feedBack_read(effectiveSize, 0);
                this->comb_tilde_14_feedBack_write(v);
                this->comb_tilde_14_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_14_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_14_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_14_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_14_feedBack_init() {
                auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                this->comb_tilde_14_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_14_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_14_feedBack_clear() {
                this->comb_tilde_14_feedBack_buffer->setZero();
            }
            
            void comb_tilde_14_feedBack_reset() {
                auto result = this->comb_tilde_14_feedBack_calcSizeInSamples();
                this->comb_tilde_14_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_14_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_14_feedBack_buffer);
                this->comb_tilde_14_feedBack_wrap = this->comb_tilde_14_feedBack_buffer->getSize() - 1;
                this->comb_tilde_14_feedBack_clear();
            
                if (this->comb_tilde_14_feedBack_reader >= this->comb_tilde_14_feedBack__maxdelay || this->comb_tilde_14_feedBack_writer >= this->comb_tilde_14_feedBack__maxdelay) {
                    this->comb_tilde_14_feedBack_reader = 0;
                    this->comb_tilde_14_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_14_feedBack_dspsetup() {
                this->comb_tilde_14_feedBack_reset();
            }
            
            number comb_tilde_14_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_14_feedBack_size() {
                return this->comb_tilde_14_feedBack__maxdelay;
            }
            
            void comb_tilde_14_init() {
                this->comb_tilde_14_feedForward_init();
                this->comb_tilde_14_feedBack_init();
            }
            
            void comb_tilde_14_clear() {
                this->comb_tilde_14_feedForward_clear();
                this->comb_tilde_14_feedBack_clear();
            }
            
            void comb_tilde_14_reset() {
                this->comb_tilde_14_init();
                this->comb_tilde_14_clear();
            }
            
            void comb_tilde_14_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_14_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_14_reset();
                this->comb_tilde_14_setupDone = true;
                this->comb_tilde_14_feedForward_dspsetup();
                this->comb_tilde_14_feedBack_dspsetup();
            }
            
            void comb_tilde_15_feedForward_step() {
                this->comb_tilde_15_feedForward_reader++;
            
                if (this->comb_tilde_15_feedForward_reader >= (int)(this->comb_tilde_15_feedForward_buffer->getSize()))
                    this->comb_tilde_15_feedForward_reader = 0;
            }
            
            number comb_tilde_15_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? 1 + this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ), this->comb_tilde_15_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_15_feedForward_buffer->getSize()) + this->comb_tilde_15_feedForward_reader - ((size > this->comb_tilde_15_feedForward__maxdelay ? this->comb_tilde_15_feedForward__maxdelay : (size < (this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer) ? this->comb_tilde_15_feedForward_reader != this->comb_tilde_15_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_15_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedForward_wrap))
                );
            }
            
            void comb_tilde_15_feedForward_write(number v) {
                this->comb_tilde_15_feedForward_writer = this->comb_tilde_15_feedForward_reader;
                this->comb_tilde_15_feedForward_buffer[(Index)this->comb_tilde_15_feedForward_writer] = v;
            }
            
            number comb_tilde_15_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_15_feedForward__maxdelay : size);
                number val = this->comb_tilde_15_feedForward_read(effectiveSize, 0);
                this->comb_tilde_15_feedForward_write(v);
                this->comb_tilde_15_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_15_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_15_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_15_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_15_feedForward_init() {
                auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
                this->comb_tilde_15_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_15_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_15_feedForward_clear() {
                this->comb_tilde_15_feedForward_buffer->setZero();
            }
            
            void comb_tilde_15_feedForward_reset() {
                auto result = this->comb_tilde_15_feedForward_calcSizeInSamples();
                this->comb_tilde_15_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_15_feedForward_buffer);
                this->comb_tilde_15_feedForward_wrap = this->comb_tilde_15_feedForward_buffer->getSize() - 1;
                this->comb_tilde_15_feedForward_clear();
            
                if (this->comb_tilde_15_feedForward_reader >= this->comb_tilde_15_feedForward__maxdelay || this->comb_tilde_15_feedForward_writer >= this->comb_tilde_15_feedForward__maxdelay) {
                    this->comb_tilde_15_feedForward_reader = 0;
                    this->comb_tilde_15_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_15_feedForward_dspsetup() {
                this->comb_tilde_15_feedForward_reset();
            }
            
            number comb_tilde_15_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_15_feedForward_size() {
                return this->comb_tilde_15_feedForward__maxdelay;
            }
            
            void comb_tilde_15_feedBack_step() {
                this->comb_tilde_15_feedBack_reader++;
            
                if (this->comb_tilde_15_feedBack_reader >= (int)(this->comb_tilde_15_feedBack_buffer->getSize()))
                    this->comb_tilde_15_feedBack_reader = 0;
            }
            
            number comb_tilde_15_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? 1 + this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ), this->comb_tilde_15_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_15_feedBack_buffer->getSize()) + this->comb_tilde_15_feedBack_reader - ((size > this->comb_tilde_15_feedBack__maxdelay ? this->comb_tilde_15_feedBack__maxdelay : (size < (this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer) ? this->comb_tilde_15_feedBack_reader != this->comb_tilde_15_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_15_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_15_feedBack_wrap))
                );
            }
            
            void comb_tilde_15_feedBack_write(number v) {
                this->comb_tilde_15_feedBack_writer = this->comb_tilde_15_feedBack_reader;
                this->comb_tilde_15_feedBack_buffer[(Index)this->comb_tilde_15_feedBack_writer] = v;
            }
            
            number comb_tilde_15_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_15_feedBack__maxdelay : size);
                number val = this->comb_tilde_15_feedBack_read(effectiveSize, 0);
                this->comb_tilde_15_feedBack_write(v);
                this->comb_tilde_15_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_15_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_15_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_15_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_15_feedBack_init() {
                auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
                this->comb_tilde_15_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_15_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_15_feedBack_clear() {
                this->comb_tilde_15_feedBack_buffer->setZero();
            }
            
            void comb_tilde_15_feedBack_reset() {
                auto result = this->comb_tilde_15_feedBack_calcSizeInSamples();
                this->comb_tilde_15_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_15_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_15_feedBack_buffer);
                this->comb_tilde_15_feedBack_wrap = this->comb_tilde_15_feedBack_buffer->getSize() - 1;
                this->comb_tilde_15_feedBack_clear();
            
                if (this->comb_tilde_15_feedBack_reader >= this->comb_tilde_15_feedBack__maxdelay || this->comb_tilde_15_feedBack_writer >= this->comb_tilde_15_feedBack__maxdelay) {
                    this->comb_tilde_15_feedBack_reader = 0;
                    this->comb_tilde_15_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_15_feedBack_dspsetup() {
                this->comb_tilde_15_feedBack_reset();
            }
            
            number comb_tilde_15_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_15_feedBack_size() {
                return this->comb_tilde_15_feedBack__maxdelay;
            }
            
            void comb_tilde_15_init() {
                this->comb_tilde_15_feedForward_init();
                this->comb_tilde_15_feedBack_init();
            }
            
            void comb_tilde_15_clear() {
                this->comb_tilde_15_feedForward_clear();
                this->comb_tilde_15_feedBack_clear();
            }
            
            void comb_tilde_15_reset() {
                this->comb_tilde_15_init();
                this->comb_tilde_15_clear();
            }
            
            void comb_tilde_15_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_15_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_15_reset();
                this->comb_tilde_15_setupDone = true;
                this->comb_tilde_15_feedForward_dspsetup();
                this->comb_tilde_15_feedBack_dspsetup();
            }
            
            void comb_tilde_16_feedForward_step() {
                this->comb_tilde_16_feedForward_reader++;
            
                if (this->comb_tilde_16_feedForward_reader >= (int)(this->comb_tilde_16_feedForward_buffer->getSize()))
                    this->comb_tilde_16_feedForward_reader = 0;
            }
            
            number comb_tilde_16_feedForward_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? 1 + this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ), this->comb_tilde_16_feedForward_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_16_feedForward_buffer->getSize()) + this->comb_tilde_16_feedForward_reader - ((size > this->comb_tilde_16_feedForward__maxdelay ? this->comb_tilde_16_feedForward__maxdelay : (size < (this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer) ? this->comb_tilde_16_feedForward_reader != this->comb_tilde_16_feedForward_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_16_feedForward_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedForward_wrap))
                );
            }
            
            void comb_tilde_16_feedForward_write(number v) {
                this->comb_tilde_16_feedForward_writer = this->comb_tilde_16_feedForward_reader;
                this->comb_tilde_16_feedForward_buffer[(Index)this->comb_tilde_16_feedForward_writer] = v;
            }
            
            number comb_tilde_16_feedForward_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_16_feedForward__maxdelay : size);
                number val = this->comb_tilde_16_feedForward_read(effectiveSize, 0);
                this->comb_tilde_16_feedForward_write(v);
                this->comb_tilde_16_feedForward_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_16_feedForward_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_16_feedForward_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_16_feedForward_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_16_feedForward_init() {
                auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
                this->comb_tilde_16_feedForward__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedForward_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_16_feedForward_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_16_feedForward_clear() {
                this->comb_tilde_16_feedForward_buffer->setZero();
            }
            
            void comb_tilde_16_feedForward_reset() {
                auto result = this->comb_tilde_16_feedForward_calcSizeInSamples();
                this->comb_tilde_16_feedForward__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedForward_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_16_feedForward_buffer);
                this->comb_tilde_16_feedForward_wrap = this->comb_tilde_16_feedForward_buffer->getSize() - 1;
                this->comb_tilde_16_feedForward_clear();
            
                if (this->comb_tilde_16_feedForward_reader >= this->comb_tilde_16_feedForward__maxdelay || this->comb_tilde_16_feedForward_writer >= this->comb_tilde_16_feedForward__maxdelay) {
                    this->comb_tilde_16_feedForward_reader = 0;
                    this->comb_tilde_16_feedForward_writer = 0;
                }
            }
            
            void comb_tilde_16_feedForward_dspsetup() {
                this->comb_tilde_16_feedForward_reset();
            }
            
            number comb_tilde_16_feedForward_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_16_feedForward_size() {
                return this->comb_tilde_16_feedForward__maxdelay;
            }
            
            void comb_tilde_16_feedBack_step() {
                this->comb_tilde_16_feedBack_reader++;
            
                if (this->comb_tilde_16_feedBack_reader >= (int)(this->comb_tilde_16_feedBack_buffer->getSize()))
                    this->comb_tilde_16_feedBack_reader = 0;
            }
            
            number comb_tilde_16_feedBack_read(number size, Int interp) {
                if (interp == 0) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    long index2 = (long)(index1 + 1);
            
                    return this->linearinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 1) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->cubicinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 6) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->fastcubicinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 2) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
            
                    return this->splineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 7) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? 1 + this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
                    Index index3 = (Index)(index2 + 1);
                    Index index4 = (Index)(index3 + 1);
                    Index index5 = (Index)(index4 + 1);
                    Index index6 = (Index)(index5 + 1);
            
                    return this->spline6interp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index3 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index4 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index5 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index6 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                } else if (interp == 3) {
                    number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                    long index1 = (long)(rnbo_floor(r));
                    number frac = r - index1;
                    Index index2 = (Index)(index1 + 1);
            
                    return this->cosineinterp(frac, this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ), this->comb_tilde_16_feedBack_buffer->getSample(
                        0,
                        (Index)((BinOpInt)((BinOpInt)index2 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                    ));
                }
            
                number r = (int)(this->comb_tilde_16_feedBack_buffer->getSize()) + this->comb_tilde_16_feedBack_reader - ((size > this->comb_tilde_16_feedBack__maxdelay ? this->comb_tilde_16_feedBack__maxdelay : (size < (this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer) ? this->comb_tilde_16_feedBack_reader != this->comb_tilde_16_feedBack_writer : size)));
                long index1 = (long)(rnbo_floor(r));
            
                return this->comb_tilde_16_feedBack_buffer->getSample(
                    0,
                    (Index)((BinOpInt)((BinOpInt)index1 & (BinOpInt)this->comb_tilde_16_feedBack_wrap))
                );
            }
            
            void comb_tilde_16_feedBack_write(number v) {
                this->comb_tilde_16_feedBack_writer = this->comb_tilde_16_feedBack_reader;
                this->comb_tilde_16_feedBack_buffer[(Index)this->comb_tilde_16_feedBack_writer] = v;
            }
            
            number comb_tilde_16_feedBack_next(number v, int size) {
                number effectiveSize = (size == -1 ? this->comb_tilde_16_feedBack__maxdelay : size);
                number val = this->comb_tilde_16_feedBack_read(effectiveSize, 0);
                this->comb_tilde_16_feedBack_write(v);
                this->comb_tilde_16_feedBack_step();
                return val;
            }
            
            array<Index, 2> comb_tilde_16_feedBack_calcSizeInSamples() {
                number sizeInSamples = 0;
                Index allocatedSizeInSamples = 0;
            
                {
                    sizeInSamples = this->comb_tilde_16_feedBack_evaluateSizeExpr(this->samplerate(), this->vectorsize());
                    this->comb_tilde_16_feedBack_sizemode = 0;
                }
            
                sizeInSamples = rnbo_floor(sizeInSamples);
                sizeInSamples = this->maximum(sizeInSamples, 2);
                allocatedSizeInSamples = (Index)(sizeInSamples);
                allocatedSizeInSamples = nextpoweroftwo(allocatedSizeInSamples);
                return {sizeInSamples, allocatedSizeInSamples};
            }
            
            void comb_tilde_16_feedBack_init() {
                auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
                this->comb_tilde_16_feedBack__maxdelay = result[0];
                Index requestedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedBack_buffer->requestSize(requestedSizeInSamples, 1);
                this->comb_tilde_16_feedBack_wrap = requestedSizeInSamples - 1;
            }
            
            void comb_tilde_16_feedBack_clear() {
                this->comb_tilde_16_feedBack_buffer->setZero();
            }
            
            void comb_tilde_16_feedBack_reset() {
                auto result = this->comb_tilde_16_feedBack_calcSizeInSamples();
                this->comb_tilde_16_feedBack__maxdelay = result[0];
                Index allocatedSizeInSamples = (Index)(result[1]);
                this->comb_tilde_16_feedBack_buffer->setSize(allocatedSizeInSamples);
                updateDataRef(this, this->comb_tilde_16_feedBack_buffer);
                this->comb_tilde_16_feedBack_wrap = this->comb_tilde_16_feedBack_buffer->getSize() - 1;
                this->comb_tilde_16_feedBack_clear();
            
                if (this->comb_tilde_16_feedBack_reader >= this->comb_tilde_16_feedBack__maxdelay || this->comb_tilde_16_feedBack_writer >= this->comb_tilde_16_feedBack__maxdelay) {
                    this->comb_tilde_16_feedBack_reader = 0;
                    this->comb_tilde_16_feedBack_writer = 0;
                }
            }
            
            void comb_tilde_16_feedBack_dspsetup() {
                this->comb_tilde_16_feedBack_reset();
            }
            
            number comb_tilde_16_feedBack_evaluateSizeExpr(number samplerate, number vectorsize) {
                RNBO_UNUSED(vectorsize);
                RNBO_UNUSED(samplerate);
                return 44100;
            }
            
            number comb_tilde_16_feedBack_size() {
                return this->comb_tilde_16_feedBack__maxdelay;
            }
            
            void comb_tilde_16_init() {
                this->comb_tilde_16_feedForward_init();
                this->comb_tilde_16_feedBack_init();
            }
            
            void comb_tilde_16_clear() {
                this->comb_tilde_16_feedForward_clear();
                this->comb_tilde_16_feedBack_clear();
            }
            
            void comb_tilde_16_reset() {
                this->comb_tilde_16_init();
                this->comb_tilde_16_clear();
            }
            
            void comb_tilde_16_dspsetup(bool force) {
                if ((bool)(this->comb_tilde_16_setupDone) && (bool)(!(bool)(force)))
                    return;
            
                this->comb_tilde_16_reset();
                this->comb_tilde_16_setupDone = true;
                this->comb_tilde_16_feedForward_dspsetup();
                this->comb_tilde_16_feedBack_dspsetup();
            }
            
            bool stackprotect_check() {
                this->stackprotect_count++;
            
                if (this->stackprotect_count > 128) {
                    console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
                    return true;
                }
            
                return false;
            }
            
            void updateTime(MillisecondTime time) {
                this->_currentTime = time;
                this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
            
                if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
                    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
            
                if (this->sampleOffsetIntoNextAudioBuffer < 0)
                    this->sampleOffsetIntoNextAudioBuffer = 0;
            }
            
            void assign_defaults()
            {
                comb_tilde_10_x = 0;
                comb_tilde_10_delayTime = 110;
                comb_tilde_10_gain = 0;
                comb_tilde_10_ffGain = 1;
                comb_tilde_10_fbGain = 0;
                dspexpr_26_in1 = 0;
                dspexpr_26_in2 = 110;
                comb_tilde_11_x = 0;
                comb_tilde_11_delayTime = 135;
                comb_tilde_11_gain = 0;
                comb_tilde_11_ffGain = 1;
                comb_tilde_11_fbGain = 0;
                dspexpr_27_in1 = 0;
                dspexpr_27_in2 = 135;
                comb_tilde_12_x = 0;
                comb_tilde_12_delayTime = 55;
                comb_tilde_12_gain = 0;
                comb_tilde_12_ffGain = 1;
                comb_tilde_12_fbGain = 0;
                dspexpr_28_in1 = 0;
                dspexpr_28_in2 = 55;
                dspexpr_29_in1 = 0;
                dspexpr_29_in2 = 0.355;
                comb_tilde_13_x = 0;
                comb_tilde_13_delayTime = 3;
                comb_tilde_13_gain = 0;
                comb_tilde_13_ffGain = 1;
                comb_tilde_13_fbGain = 0;
                dspexpr_30_in1 = 0;
                dspexpr_30_in2 = 0;
                dspexpr_31_in1 = 0;
                dspexpr_31_in2 = 3;
                dspexpr_32_in1 = 0;
                dspexpr_32_in2 = -1;
                comb_tilde_14_x = 0;
                comb_tilde_14_delayTime = 35;
                comb_tilde_14_gain = 0;
                comb_tilde_14_ffGain = 1;
                comb_tilde_14_fbGain = 0;
                dspexpr_33_in1 = 0;
                dspexpr_33_in2 = 35;
                comb_tilde_15_x = 0;
                comb_tilde_15_delayTime = 27;
                comb_tilde_15_gain = 0;
                comb_tilde_15_ffGain = 1;
                comb_tilde_15_fbGain = 0;
                dspexpr_34_in1 = 0;
                dspexpr_34_in2 = 27;
                comb_tilde_16_x = 0;
                comb_tilde_16_delayTime = 52;
                comb_tilde_16_gain = 0;
                comb_tilde_16_ffGain = 1;
                comb_tilde_16_fbGain = 0;
                dspexpr_35_in1 = 0;
                dspexpr_35_in2 = 52;
                _currentTime = 0;
                audioProcessSampleCount = 0;
                sampleOffsetIntoNextAudioBuffer = 0;
                zeroBuffer = nullptr;
                dummyBuffer = nullptr;
                signals[0] = nullptr;
                signals[1] = nullptr;
                signals[2] = nullptr;
                signals[3] = nullptr;
                signals[4] = nullptr;
                signals[5] = nullptr;
                signals[6] = nullptr;
                signals[7] = nullptr;
                didAllocateSignals = 0;
                vs = 0;
                maxvs = 0;
                sr = 44100;
                invsr = 0.00002267573696;
                comb_tilde_10_feedForward__maxdelay = 0;
                comb_tilde_10_feedForward_sizemode = 0;
                comb_tilde_10_feedForward_wrap = 0;
                comb_tilde_10_feedForward_reader = 0;
                comb_tilde_10_feedForward_writer = 0;
                comb_tilde_10_feedBack__maxdelay = 0;
                comb_tilde_10_feedBack_sizemode = 0;
                comb_tilde_10_feedBack_wrap = 0;
                comb_tilde_10_feedBack_reader = 0;
                comb_tilde_10_feedBack_writer = 0;
                comb_tilde_10_setupDone = false;
                comb_tilde_11_feedForward__maxdelay = 0;
                comb_tilde_11_feedForward_sizemode = 0;
                comb_tilde_11_feedForward_wrap = 0;
                comb_tilde_11_feedForward_reader = 0;
                comb_tilde_11_feedForward_writer = 0;
                comb_tilde_11_feedBack__maxdelay = 0;
                comb_tilde_11_feedBack_sizemode = 0;
                comb_tilde_11_feedBack_wrap = 0;
                comb_tilde_11_feedBack_reader = 0;
                comb_tilde_11_feedBack_writer = 0;
                comb_tilde_11_setupDone = false;
                comb_tilde_12_feedForward__maxdelay = 0;
                comb_tilde_12_feedForward_sizemode = 0;
                comb_tilde_12_feedForward_wrap = 0;
                comb_tilde_12_feedForward_reader = 0;
                comb_tilde_12_feedForward_writer = 0;
                comb_tilde_12_feedBack__maxdelay = 0;
                comb_tilde_12_feedBack_sizemode = 0;
                comb_tilde_12_feedBack_wrap = 0;
                comb_tilde_12_feedBack_reader = 0;
                comb_tilde_12_feedBack_writer = 0;
                comb_tilde_12_setupDone = false;
                comb_tilde_13_feedForward__maxdelay = 0;
                comb_tilde_13_feedForward_sizemode = 0;
                comb_tilde_13_feedForward_wrap = 0;
                comb_tilde_13_feedForward_reader = 0;
                comb_tilde_13_feedForward_writer = 0;
                comb_tilde_13_feedBack__maxdelay = 0;
                comb_tilde_13_feedBack_sizemode = 0;
                comb_tilde_13_feedBack_wrap = 0;
                comb_tilde_13_feedBack_reader = 0;
                comb_tilde_13_feedBack_writer = 0;
                comb_tilde_13_setupDone = false;
                comb_tilde_14_feedForward__maxdelay = 0;
                comb_tilde_14_feedForward_sizemode = 0;
                comb_tilde_14_feedForward_wrap = 0;
                comb_tilde_14_feedForward_reader = 0;
                comb_tilde_14_feedForward_writer = 0;
                comb_tilde_14_feedBack__maxdelay = 0;
                comb_tilde_14_feedBack_sizemode = 0;
                comb_tilde_14_feedBack_wrap = 0;
                comb_tilde_14_feedBack_reader = 0;
                comb_tilde_14_feedBack_writer = 0;
                comb_tilde_14_setupDone = false;
                comb_tilde_15_feedForward__maxdelay = 0;
                comb_tilde_15_feedForward_sizemode = 0;
                comb_tilde_15_feedForward_wrap = 0;
                comb_tilde_15_feedForward_reader = 0;
                comb_tilde_15_feedForward_writer = 0;
                comb_tilde_15_feedBack__maxdelay = 0;
                comb_tilde_15_feedBack_sizemode = 0;
                comb_tilde_15_feedBack_wrap = 0;
                comb_tilde_15_feedBack_reader = 0;
                comb_tilde_15_feedBack_writer = 0;
                comb_tilde_15_setupDone = false;
                comb_tilde_16_feedForward__maxdelay = 0;
                comb_tilde_16_feedForward_sizemode = 0;
                comb_tilde_16_feedForward_wrap = 0;
                comb_tilde_16_feedForward_reader = 0;
                comb_tilde_16_feedForward_writer = 0;
                comb_tilde_16_feedBack__maxdelay = 0;
                comb_tilde_16_feedBack_sizemode = 0;
                comb_tilde_16_feedBack_wrap = 0;
                comb_tilde_16_feedBack_reader = 0;
                comb_tilde_16_feedBack_writer = 0;
                comb_tilde_16_setupDone = false;
                stackprotect_count = 0;
                _voiceIndex = 0;
                _noteNumber = 0;
                isMuted = 1;
                parameterOffset = 0;
            }
            
            // member variables
            
                number comb_tilde_10_x;
                number comb_tilde_10_delayTime;
                number comb_tilde_10_gain;
                number comb_tilde_10_ffGain;
                number comb_tilde_10_fbGain;
                number dspexpr_26_in1;
                number dspexpr_26_in2;
                number comb_tilde_11_x;
                number comb_tilde_11_delayTime;
                number comb_tilde_11_gain;
                number comb_tilde_11_ffGain;
                number comb_tilde_11_fbGain;
                number dspexpr_27_in1;
                number dspexpr_27_in2;
                number comb_tilde_12_x;
                number comb_tilde_12_delayTime;
                number comb_tilde_12_gain;
                number comb_tilde_12_ffGain;
                number comb_tilde_12_fbGain;
                number dspexpr_28_in1;
                number dspexpr_28_in2;
                number dspexpr_29_in1;
                number dspexpr_29_in2;
                number comb_tilde_13_x;
                number comb_tilde_13_delayTime;
                number comb_tilde_13_gain;
                number comb_tilde_13_ffGain;
                number comb_tilde_13_fbGain;
                number dspexpr_30_in1;
                number dspexpr_30_in2;
                number dspexpr_31_in1;
                number dspexpr_31_in2;
                number dspexpr_32_in1;
                number dspexpr_32_in2;
                number comb_tilde_14_x;
                number comb_tilde_14_delayTime;
                number comb_tilde_14_gain;
                number comb_tilde_14_ffGain;
                number comb_tilde_14_fbGain;
                number dspexpr_33_in1;
                number dspexpr_33_in2;
                number comb_tilde_15_x;
                number comb_tilde_15_delayTime;
                number comb_tilde_15_gain;
                number comb_tilde_15_ffGain;
                number comb_tilde_15_fbGain;
                number dspexpr_34_in1;
                number dspexpr_34_in2;
                number comb_tilde_16_x;
                number comb_tilde_16_delayTime;
                number comb_tilde_16_gain;
                number comb_tilde_16_ffGain;
                number comb_tilde_16_fbGain;
                number dspexpr_35_in1;
                number dspexpr_35_in2;
                MillisecondTime _currentTime;
                UInt64 audioProcessSampleCount;
                SampleIndex sampleOffsetIntoNextAudioBuffer;
                signal zeroBuffer;
                signal dummyBuffer;
                SampleValue * signals[8];
                bool didAllocateSignals;
                Index vs;
                Index maxvs;
                number sr;
                number invsr;
                Float64BufferRef comb_tilde_10_feedForward_buffer;
                Index comb_tilde_10_feedForward__maxdelay;
                Int comb_tilde_10_feedForward_sizemode;
                Index comb_tilde_10_feedForward_wrap;
                Int comb_tilde_10_feedForward_reader;
                Int comb_tilde_10_feedForward_writer;
                Float64BufferRef comb_tilde_10_feedBack_buffer;
                Index comb_tilde_10_feedBack__maxdelay;
                Int comb_tilde_10_feedBack_sizemode;
                Index comb_tilde_10_feedBack_wrap;
                Int comb_tilde_10_feedBack_reader;
                Int comb_tilde_10_feedBack_writer;
                bool comb_tilde_10_setupDone;
                Float64BufferRef comb_tilde_11_feedForward_buffer;
                Index comb_tilde_11_feedForward__maxdelay;
                Int comb_tilde_11_feedForward_sizemode;
                Index comb_tilde_11_feedForward_wrap;
                Int comb_tilde_11_feedForward_reader;
                Int comb_tilde_11_feedForward_writer;
                Float64BufferRef comb_tilde_11_feedBack_buffer;
                Index comb_tilde_11_feedBack__maxdelay;
                Int comb_tilde_11_feedBack_sizemode;
                Index comb_tilde_11_feedBack_wrap;
                Int comb_tilde_11_feedBack_reader;
                Int comb_tilde_11_feedBack_writer;
                bool comb_tilde_11_setupDone;
                Float64BufferRef comb_tilde_12_feedForward_buffer;
                Index comb_tilde_12_feedForward__maxdelay;
                Int comb_tilde_12_feedForward_sizemode;
                Index comb_tilde_12_feedForward_wrap;
                Int comb_tilde_12_feedForward_reader;
                Int comb_tilde_12_feedForward_writer;
                Float64BufferRef comb_tilde_12_feedBack_buffer;
                Index comb_tilde_12_feedBack__maxdelay;
                Int comb_tilde_12_feedBack_sizemode;
                Index comb_tilde_12_feedBack_wrap;
                Int comb_tilde_12_feedBack_reader;
                Int comb_tilde_12_feedBack_writer;
                bool comb_tilde_12_setupDone;
                Float64BufferRef comb_tilde_13_feedForward_buffer;
                Index comb_tilde_13_feedForward__maxdelay;
                Int comb_tilde_13_feedForward_sizemode;
                Index comb_tilde_13_feedForward_wrap;
                Int comb_tilde_13_feedForward_reader;
                Int comb_tilde_13_feedForward_writer;
                Float64BufferRef comb_tilde_13_feedBack_buffer;
                Index comb_tilde_13_feedBack__maxdelay;
                Int comb_tilde_13_feedBack_sizemode;
                Index comb_tilde_13_feedBack_wrap;
                Int comb_tilde_13_feedBack_reader;
                Int comb_tilde_13_feedBack_writer;
                bool comb_tilde_13_setupDone;
                Float64BufferRef comb_tilde_14_feedForward_buffer;
                Index comb_tilde_14_feedForward__maxdelay;
                Int comb_tilde_14_feedForward_sizemode;
                Index comb_tilde_14_feedForward_wrap;
                Int comb_tilde_14_feedForward_reader;
                Int comb_tilde_14_feedForward_writer;
                Float64BufferRef comb_tilde_14_feedBack_buffer;
                Index comb_tilde_14_feedBack__maxdelay;
                Int comb_tilde_14_feedBack_sizemode;
                Index comb_tilde_14_feedBack_wrap;
                Int comb_tilde_14_feedBack_reader;
                Int comb_tilde_14_feedBack_writer;
                bool comb_tilde_14_setupDone;
                Float64BufferRef comb_tilde_15_feedForward_buffer;
                Index comb_tilde_15_feedForward__maxdelay;
                Int comb_tilde_15_feedForward_sizemode;
                Index comb_tilde_15_feedForward_wrap;
                Int comb_tilde_15_feedForward_reader;
                Int comb_tilde_15_feedForward_writer;
                Float64BufferRef comb_tilde_15_feedBack_buffer;
                Index comb_tilde_15_feedBack__maxdelay;
                Int comb_tilde_15_feedBack_sizemode;
                Index comb_tilde_15_feedBack_wrap;
                Int comb_tilde_15_feedBack_reader;
                Int comb_tilde_15_feedBack_writer;
                bool comb_tilde_15_setupDone;
                Float64BufferRef comb_tilde_16_feedForward_buffer;
                Index comb_tilde_16_feedForward__maxdelay;
                Int comb_tilde_16_feedForward_sizemode;
                Index comb_tilde_16_feedForward_wrap;
                Int comb_tilde_16_feedForward_reader;
                Int comb_tilde_16_feedForward_writer;
                Float64BufferRef comb_tilde_16_feedBack_buffer;
                Index comb_tilde_16_feedBack__maxdelay;
                Int comb_tilde_16_feedBack_sizemode;
                Index comb_tilde_16_feedBack_wrap;
                Int comb_tilde_16_feedBack_reader;
                Int comb_tilde_16_feedBack_writer;
                bool comb_tilde_16_setupDone;
                number stackprotect_count;
                DataRef comb_tilde_10_feedForward_bufferobj;
                DataRef comb_tilde_10_feedBack_bufferobj;
                DataRef comb_tilde_11_feedForward_bufferobj;
                DataRef comb_tilde_11_feedBack_bufferobj;
                DataRef comb_tilde_12_feedForward_bufferobj;
                DataRef comb_tilde_12_feedBack_bufferobj;
                DataRef comb_tilde_13_feedForward_bufferobj;
                DataRef comb_tilde_13_feedBack_bufferobj;
                DataRef comb_tilde_14_feedForward_bufferobj;
                DataRef comb_tilde_14_feedBack_bufferobj;
                DataRef comb_tilde_15_feedForward_bufferobj;
                DataRef comb_tilde_15_feedBack_bufferobj;
                DataRef comb_tilde_16_feedForward_bufferobj;
                DataRef comb_tilde_16_feedBack_bufferobj;
                Index _voiceIndex;
                Int _noteNumber;
                Index isMuted;
                ParameterIndex parameterOffset;
            
    };
    
    RNBOSubpatcher_100()
    {
    }
    
    ~RNBOSubpatcher_100()
    {
        delete this->p_09;
        delete this->p_10;
        delete this->p_11;
        delete this->p_12;
        delete this->p_13;
        delete this->p_14;
        delete this->p_15;
        delete this->p_16;
    }
    
    virtual rnbomatic* getPatcher() const {
        return static_cast<rnbomatic *>(_parentPatcher);
    }
    
    rnbomatic* getTopLevelPatcher() {
        return this->getPatcher()->getTopLevelPatcher();
    }
    
    void cancelClockEvents()
    {
        getEngine()->flushClockEvents(this, 892732297, false);
        getEngine()->flushClockEvents(this, -871642103, false);
        getEngine()->flushClockEvents(this, 848255507, false);
        getEngine()->flushClockEvents(this, 1935387534, false);
        getEngine()->flushClockEvents(this, -444440180, false);
        getEngine()->flushClockEvents(this, -62043057, false);
        getEngine()->flushClockEvents(this, -1621164530, false);
        getEngine()->flushClockEvents(this, 732284170, false);
        getEngine()->flushClockEvents(this, -1494586265, false);
        getEngine()->flushClockEvents(this, 1114681293, false);
        getEngine()->flushClockEvents(this, -2003561653, false);
    }
    
    SampleIndex currentsampletime() {
        return this->audioProcessSampleCount + this->sampleOffsetIntoNextAudioBuffer;
    }
    
    number mstosamps(MillisecondTime ms) {
        return ms * this->sr * 0.001;
    }
    
    inline number safediv(number num, number denom) {
        return (denom == 0.0 ? 0.0 : num / denom);
    }
    
    number safepow(number base, number exponent) {
        return fixnan(rnbo_pow(base, exponent));
    }
    
    number scale(
        number x,
        number lowin,
        number hiin,
        number lowout,
        number highout,
        number pow
    ) {
        auto inscale = this->safediv(1., hiin - lowin);
        number outdiff = highout - lowout;
        number value = (x - lowin) * inscale;
    
        if (pow != 1) {
            if (value > 0)
                value = this->safepow(value, pow);
            else
                value = -this->safepow(-value, pow);
        }
    
        value = value * outdiff + lowout;
        return value;
    }
    
    number samplerate() const {
        return this->sr;
    }
    
    number maximum(number x, number y) {
        return (x < y ? y : x);
    }
    
    MillisecondTime currenttime() {
        return this->_currentTime;
    }
    
    Index voice() {
        return this->_voiceIndex;
    }
    
    number random(number low, number high) {
        number range = high - low;
        return globalrandom() * range + low;
    }
    
    number fold(number x, number low, number high) {
        number lo;
        number hi;
    
        if (low == high) {
            return low;
        }
    
        if (low > high) {
            hi = low;
            lo = high;
        } else {
            lo = low;
            hi = high;
        }
    
        number range = hi - lo;
        int numWraps = 0;
    
        if (x >= hi) {
            x -= range;
    
            if (x >= hi) {
                numWraps = (x - lo) / range;
                x -= range * numWraps;
            }
    
            numWraps++;
        } else if (x < lo) {
            x += range;
    
            if (x < lo) {
                numWraps = (x - lo) / range - 1;
                x -= range * numWraps;
            }
    
            numWraps--;
        }
    
        if ((BinOpInt)((BinOpInt)numWraps & (BinOpInt)1))
            x = hi + lo - x;
    
        return x;
    }
    
    ParameterValue fromnormalized(ParameterIndex index, ParameterValue normalizedValue) {
        return this->convertFromNormalizedParameterValue(index, normalizedValue);
    }
    
    Index getNumMidiInputPorts() const {
        return 1;
    }
    
    void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
        this->updateTime(time);
        this->ctlin_01_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_02_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_03_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_04_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_05_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
        this->ctlin_06_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
    }
    
    Index getNumMidiOutputPorts() const {
        return 0;
    }
    
    void process(
        const SampleValue * const* inputs,
        Index numInputs,
        SampleValue * const* outputs,
        Index numOutputs,
        Index n
    ) {
        this->vs = n;
        this->updateTime(this->getEngine()->getCurrentTime());
        SampleValue * source_Decay = (numOutputs >= 3 && outputs[2] ? outputs[2] : this->dummyBuffer);
        SampleValue * source_Jitter = (numOutputs >= 4 && outputs[3] ? outputs[3] : this->dummyBuffer);
        SampleValue * source_Damp = (numOutputs >= 5 && outputs[4] ? outputs[4] : this->dummyBuffer);
        SampleValue * source_Diff = (numOutputs >= 6 && outputs[5] ? outputs[5] : this->dummyBuffer);
        SampleValue * source_Size = (numOutputs >= 7 && outputs[6] ? outputs[6] : this->dummyBuffer);
        const SampleValue * target_Size = (numInputs >= 3 && inputs[2] ? inputs[2] : this->zeroBuffer);
        const SampleValue * target_Diff = (numInputs >= 4 && inputs[3] ? inputs[3] : this->zeroBuffer);
        const SampleValue * target_Decay = (numInputs >= 5 && inputs[4] ? inputs[4] : this->zeroBuffer);
        const SampleValue * target_Jitter = (numInputs >= 6 && inputs[5] ? inputs[5] : this->zeroBuffer);
        const SampleValue * target_Damp = (numInputs >= 7 && inputs[6] ? inputs[6] : this->zeroBuffer);
        SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
        SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
        const SampleValue * in1 = (numInputs >= 1 && inputs[0] ? inputs[0] : this->zeroBuffer);
        const SampleValue * in2 = (numInputs >= 2 && inputs[1] ? inputs[1] : this->zeroBuffer);
        this->linetilde_02_perform(this->signals[0], n);
        this->signalsend_01_perform(this->signals[0], this->signals[1], n);
        this->signalforwarder_01_perform(this->signals[1], source_Decay, n);
        this->linetilde_03_perform(this->signals[0], n);
        this->linetilde_04_perform(this->signals[2], n);
        this->signalsend_02_perform(this->signals[2], this->signals[3], n);
        this->signalforwarder_02_perform(this->signals[3], source_Jitter, n);
        this->linetilde_05_perform(this->signals[2], n);
        this->signalsend_03_perform(this->signals[2], this->signals[4], n);
        this->signalforwarder_03_perform(this->signals[4], source_Damp, n);
    
        this->cycle_tilde_06_perform(
            this->cycle_tilde_06_frequency,
            this->cycle_tilde_06_phase_offset,
            this->signals[2],
            this->dummyBuffer,
            n
        );
    
        this->scopetilde_01_perform(this->signals[2], this->zeroBuffer, n);
        this->numbertilde_07_perform(this->signals[2], this->dummyBuffer, n);
        this->linetilde_06_perform(this->signals[2], n);
        this->signalsend_04_perform(this->signals[2], this->signals[5], n);
        this->signalforwarder_04_perform(this->signals[5], source_Diff, n);
        this->linetilde_07_perform(this->signals[2], n);
        this->signalsend_05_perform(this->signals[2], this->signals[6], n);
        this->signalforwarder_05_perform(this->signals[6], source_Size, n);
        this->stackprotect_perform(n);
        this->signaladder_02_perform(target_Damp, this->signals[4], this->signals[8], n);
        this->p_14_perform(this->signals[8], in1, in2, this->signals[2], this->signals[7], n);
        this->p_11_perform(this->signals[2], this->signals[7], this->signals[9], this->signals[10], n);
        this->signaladder_03_perform(target_Size, this->signals[6], this->signals[13], n);
        this->signaladder_04_perform(target_Decay, this->signals[1], this->signals[14], n);
        this->signaladder_05_perform(target_Jitter, this->signals[3], this->signals[15], n);
        this->signaladder_06_perform(target_Damp, this->signals[4], this->signals[16], n);
    
        this->p_13_perform(
            this->signals[13],
            this->signals[14],
            this->signals[15],
            this->signals[16],
            this->signals[9],
            this->signals[7],
            this->signals[2],
            this->signals[11],
            this->signals[12],
            n
        );
    
        this->signaladder_07_perform(target_Size, this->signals[6], this->signals[20], n);
        this->signaladder_08_perform(target_Decay, this->signals[1], this->signals[1], n);
        this->signaladder_09_perform(target_Jitter, this->signals[3], this->signals[3], n);
        this->signaladder_10_perform(target_Damp, this->signals[4], this->signals[4], n);
    
        this->p_15_perform(
            this->signals[20],
            this->signals[1],
            this->signals[3],
            this->signals[4],
            this->signals[10],
            this->signals[9],
            this->signals[17],
            this->signals[18],
            this->signals[19],
            n
        );
    
        this->p_10_perform(
            this->signals[7],
            this->signals[2],
            this->signals[11],
            this->signals[12],
            this->signals[9],
            this->signals[17],
            this->signals[18],
            this->signals[19],
            this->signals[10],
            this->signals[21],
            this->signals[22],
            this->signals[23],
            this->signals[24],
            this->signals[25],
            this->signals[26],
            this->signals[27],
            this->signals[28],
            this->signals[29],
            this->signals[30],
            this->signals[31],
            this->signals[32],
            this->signals[33],
            n
        );
    
        this->signaladder_11_perform(target_Size, this->signals[6], this->signals[18], n);
        this->signaladder_12_perform(target_Diff, this->signals[5], this->signals[17], n);
    
        this->p_12_perform(
            this->signals[18],
            this->signals[17],
            this->signals[10],
            this->signals[21],
            this->signals[22],
            this->signals[23],
            this->signals[24],
            this->signals[25],
            this->signals[26],
            this->signals[19],
            n
        );
    
        this->signaladder_13_perform(target_Size, this->signals[6], this->signals[6], n);
        this->signaladder_14_perform(target_Diff, this->signals[5], this->signals[5], n);
    
        this->p_16_perform(
            this->signals[6],
            this->signals[5],
            this->signals[27],
            this->signals[28],
            this->signals[29],
            this->signals[30],
            this->signals[31],
            this->signals[32],
            this->signals[33],
            this->signals[26],
            n
        );
    
        this->p_09_perform(
            in1,
            in2,
            this->signals[19],
            this->signals[26],
            this->signals[0],
            out1,
            out2,
            n
        );
    
        this->audioProcessSampleCount += this->vs;
    }
    
    void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
        if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
            Index i;
    
            for (i = 0; i < 34; i++) {
                this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
            }
    
            this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
            this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
            this->didAllocateSignals = true;
        }
    
        const bool sampleRateChanged = sampleRate != this->sr;
        const bool maxvsChanged = maxBlockSize != this->maxvs;
        const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;
    
        if (sampleRateChanged || maxvsChanged) {
            this->vs = maxBlockSize;
            this->maxvs = maxBlockSize;
            this->sr = sampleRate;
            this->invsr = 1 / sampleRate;
        }
    
        this->cycle_tilde_06_dspsetup(forceDSPSetup);
        this->scopetilde_01_dspsetup(forceDSPSetup);
        this->numbertilde_07_dspsetup(forceDSPSetup);
        this->p_09->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_10->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_11->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_12->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_13->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_14->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_15->prepareToProcess(sampleRate, maxBlockSize, force);
        this->p_16->prepareToProcess(sampleRate, maxBlockSize, force);
    
        if (sampleRateChanged)
            this->onSampleRateChanged(sampleRate);
    }
    
    void setProbingTarget(MessageTag id) {
        switch (id) {
        default:
            {
            this->setProbingIndex(-1);
            break;
            }
        }
    }
    
    void setProbingIndex(ProbingIndex ) {}
    
    Index getProbingChannels(MessageTag outletId) const {
        RNBO_UNUSED(outletId);
        return 0;
    }
    
    Index getIsMuted()  {
        return this->isMuted;
    }
    
    void setIsMuted(Index v)  {
        this->isMuted = v;
    }
    
    void onSampleRateChanged(double ) {}
    
    void processTempoEvent(MillisecondTime time, Tempo tempo) {
        this->updateTime(time);
        this->p_09->processTempoEvent(time, tempo);
        this->p_10->processTempoEvent(time, tempo);
        this->p_11->processTempoEvent(time, tempo);
        this->p_12->processTempoEvent(time, tempo);
        this->p_13->processTempoEvent(time, tempo);
        this->p_14->processTempoEvent(time, tempo);
        this->p_15->processTempoEvent(time, tempo);
        this->p_16->processTempoEvent(time, tempo);
    }
    
    void processTransportEvent(MillisecondTime time, TransportState state) {
        this->updateTime(time);
        this->p_09->processTransportEvent(time, state);
        this->p_10->processTransportEvent(time, state);
        this->p_11->processTransportEvent(time, state);
        this->p_12->processTransportEvent(time, state);
        this->p_13->processTransportEvent(time, state);
        this->p_14->processTransportEvent(time, state);
        this->p_15->processTransportEvent(time, state);
        this->p_16->processTransportEvent(time, state);
        this->metro_01_onTransportChanged(state);
    }
    
    void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
        this->updateTime(time);
        this->p_09->processBeatTimeEvent(time, beattime);
        this->p_10->processBeatTimeEvent(time, beattime);
        this->p_11->processBeatTimeEvent(time, beattime);
        this->p_12->processBeatTimeEvent(time, beattime);
        this->p_13->processBeatTimeEvent(time, beattime);
        this->p_14->processBeatTimeEvent(time, beattime);
        this->p_15->processBeatTimeEvent(time, beattime);
        this->p_16->processBeatTimeEvent(time, beattime);
        this->metro_01_onBeatTimeChanged(beattime);
    }
    
    void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
        this->updateTime(time);
        this->p_09->processTimeSignatureEvent(time, numerator, denominator);
        this->p_10->processTimeSignatureEvent(time, numerator, denominator);
        this->p_11->processTimeSignatureEvent(time, numerator, denominator);
        this->p_12->processTimeSignatureEvent(time, numerator, denominator);
        this->p_13->processTimeSignatureEvent(time, numerator, denominator);
        this->p_14->processTimeSignatureEvent(time, numerator, denominator);
        this->p_15->processTimeSignatureEvent(time, numerator, denominator);
        this->p_16->processTimeSignatureEvent(time, numerator, denominator);
    }
    
    void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
        this->updateTime(time);
        this->p_09->processBBUEvent(time, bars, beats, units);
        this->p_10->processBBUEvent(time, bars, beats, units);
        this->p_11->processBBUEvent(time, bars, beats, units);
        this->p_12->processBBUEvent(time, bars, beats, units);
        this->p_13->processBBUEvent(time, bars, beats, units);
        this->p_14->processBBUEvent(time, bars, beats, units);
        this->p_15->processBBUEvent(time, bars, beats, units);
        this->p_16->processBBUEvent(time, bars, beats, units);
    }
    
    Index getPatcherSerial() const {
        return 0;
    }
    
    void getState(PatcherStateInterface& ) {}
    
    void setState() {
        this->p_09 = new RNBOSubpatcher_90();
        this->p_09->setEngineAndPatcher(this->getEngine(), this);
        this->p_09->initialize();
        this->p_09->setParameterOffset(this->getParameterOffset(this->p_09));
        this->p_10 = new RNBOSubpatcher_91();
        this->p_10->setEngineAndPatcher(this->getEngine(), this);
        this->p_10->initialize();
        this->p_10->setParameterOffset(this->getParameterOffset(this->p_10));
        this->p_11 = new RNBOSubpatcher_92();
        this->p_11->setEngineAndPatcher(this->getEngine(), this);
        this->p_11->initialize();
        this->p_11->setParameterOffset(this->getParameterOffset(this->p_11));
        this->p_12 = new RNBOSubpatcher_93();
        this->p_12->setEngineAndPatcher(this->getEngine(), this);
        this->p_12->initialize();
        this->p_12->setParameterOffset(this->getParameterOffset(this->p_12));
        this->p_13 = new RNBOSubpatcher_94();
        this->p_13->setEngineAndPatcher(this->getEngine(), this);
        this->p_13->initialize();
        this->p_13->setParameterOffset(this->getParameterOffset(this->p_13));
        this->p_14 = new RNBOSubpatcher_95();
        this->p_14->setEngineAndPatcher(this->getEngine(), this);
        this->p_14->initialize();
        this->p_14->setParameterOffset(this->getParameterOffset(this->p_14));
        this->p_15 = new RNBOSubpatcher_96();
        this->p_15->setEngineAndPatcher(this->getEngine(), this);
        this->p_15->initialize();
        this->p_15->setParameterOffset(this->getParameterOffset(this->p_15));
        this->p_16 = new RNBOSubpatcher_97();
        this->p_16->setEngineAndPatcher(this->getEngine(), this);
        this->p_16->initialize();
        this->p_16->setParameterOffset(this->getParameterOffset(this->p_16));
    }
    
    void getPreset(PatcherStateInterface& preset) {
        this->param_03_getPresetValue(getSubState(preset, "decay"));
        this->param_04_getPresetValue(getSubState(preset, "DecayLFO"));
        this->param_05_getPresetValue(getSubState(preset, "mix"));
        this->param_06_getPresetValue(getSubState(preset, "jitter"));
        this->param_07_getPresetValue(getSubState(preset, "damp"));
        this->param_08_getPresetValue(getSubState(preset, "size"));
        this->param_09_getPresetValue(getSubState(preset, "diff"));
        this->param_10_getPresetValue(getSubState(preset, "SizeRandom"));
        this->p_09->getPreset(getSubState(getSubState(preset, "__sps"), "Mix~"));
        this->p_10->getPreset(getSubState(getSubState(preset, "__sps"), "Shuffle~"));
        this->p_11->getPreset(getSubState(getSubState(preset, "__sps"), "Blur~"));
        this->p_12->getPreset(getSubState(getSubState(preset, "__sps"), "CombL~"));
        this->p_13->getPreset(getSubState(getSubState(preset, "__sps"), "RoomA~"));
        this->p_14->getPreset(getSubState(getSubState(preset, "__sps"), "Damp~"));
        this->p_15->getPreset(getSubState(getSubState(preset, "__sps"), "RoomB~"));
        this->p_16->getPreset(getSubState(getSubState(preset, "__sps"), "CombR~"));
    }
    
    void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
        this->updateTime(time);
    
        switch (index) {
        case 0:
            {
            this->param_03_value_set(v);
            break;
            }
        case 1:
            {
            this->param_04_value_set(v);
            break;
            }
        case 2:
            {
            this->param_05_value_set(v);
            break;
            }
        case 3:
            {
            this->param_06_value_set(v);
            break;
            }
        case 4:
            {
            this->param_07_value_set(v);
            break;
            }
        case 5:
            {
            this->param_08_value_set(v);
            break;
            }
        case 6:
            {
            this->param_09_value_set(v);
            break;
            }
        case 7:
            {
            this->param_10_value_set(v);
            break;
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                this->p_09->setParameterValue(index, v, time);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                this->p_10->setParameterValue(index, v, time);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                this->p_11->setParameterValue(index, v, time);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                this->p_12->setParameterValue(index, v, time);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                this->p_13->setParameterValue(index, v, time);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                this->p_14->setParameterValue(index, v, time);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                this->p_15->setParameterValue(index, v, time);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                this->p_16->setParameterValue(index, v, time);
    
            break;
            }
        }
    }
    
    void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValue(index, value, time);
    }
    
    void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
        this->setParameterValue(index, this->getParameterValue(index), time);
    }
    
    void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
        this->setParameterValueNormalized(index, value, time);
    }
    
    ParameterValue getParameterValue(ParameterIndex index)  {
        switch (index) {
        case 0:
            {
            return this->param_03_value;
            }
        case 1:
            {
            return this->param_04_value;
            }
        case 2:
            {
            return this->param_05_value;
            }
        case 3:
            {
            return this->param_06_value;
            }
        case 4:
            {
            return this->param_07_value;
            }
        case 5:
            {
            return this->param_08_value;
            }
        case 6:
            {
            return this->param_09_value;
            }
        case 7:
            {
            return this->param_10_value;
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterValue(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterValue(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterValue(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterValue(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterValue(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterValue(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterValue(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterValue(index);
    
            return 0;
            }
        }
    }
    
    ParameterIndex getNumSignalInParameters() const {
        return 5;
    }
    
    ParameterIndex getNumSignalOutParameters() const {
        return 5;
    }
    
    ParameterIndex getNumParameters() const {
        return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters() + this->p_16->getNumParameters();
    }
    
    ConstCharPointer getParameterName(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "decay";
            }
        case 1:
            {
            return "DecayLFO";
            }
        case 2:
            {
            return "mix";
            }
        case 3:
            {
            return "jitter";
            }
        case 4:
            {
            return "damp";
            }
        case 5:
            {
            return "size";
            }
        case 6:
            {
            return "diff";
            }
        case 7:
            {
            return "SizeRandom";
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterName(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterName(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterName(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterName(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterName(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterName(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterName(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterName(index);
    
            return "bogus";
            }
        }
    }
    
    ConstCharPointer getParameterId(ParameterIndex index) const {
        switch (index) {
        case 0:
            {
            return "Verb/decay";
            }
        case 1:
            {
            return "Verb/DecayLFO";
            }
        case 2:
            {
            return "Verb/mix";
            }
        case 3:
            {
            return "Verb/jitter";
            }
        case 4:
            {
            return "Verb/damp";
            }
        case 5:
            {
            return "Verb/size";
            }
        case 6:
            {
            return "Verb/diff";
            }
        case 7:
            {
            return "Verb/SizeRandom";
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->getParameterId(index);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->getParameterId(index);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->getParameterId(index);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->getParameterId(index);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->getParameterId(index);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->getParameterId(index);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->getParameterId(index);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->getParameterId(index);
    
            return "bogus";
            }
        }
    }
    
    void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
        {
            switch (index) {
            case 0:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Decay";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 1:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 2:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Mix";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 3:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Jitter";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 4:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Damp";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 5:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Size";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 6:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 50;
                info->min = 0;
                info->max = 100;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "Diff";
                info->unit = "%";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            case 7:
                {
                info->type = ParameterTypeNumber;
                info->initialValue = 0;
                info->min = 0;
                info->max = 1;
                info->exponent = 1;
                info->steps = 0;
                info->debug = false;
                info->saveable = true;
                info->transmittable = true;
                info->initialized = true;
                info->visible = true;
                info->displayName = "";
                info->unit = "";
                info->ioType = IOTypeUndefined;
                info->signalIndex = INVALID_INDEX;
                break;
                }
            default:
                {
                index -= 8;
    
                if (index < this->p_09->getNumParameters())
                    this->p_09->getParameterInfo(index, info);
    
                index -= this->p_09->getNumParameters();
    
                if (index < this->p_10->getNumParameters())
                    this->p_10->getParameterInfo(index, info);
    
                index -= this->p_10->getNumParameters();
    
                if (index < this->p_11->getNumParameters())
                    this->p_11->getParameterInfo(index, info);
    
                index -= this->p_11->getNumParameters();
    
                if (index < this->p_12->getNumParameters())
                    this->p_12->getParameterInfo(index, info);
    
                index -= this->p_12->getNumParameters();
    
                if (index < this->p_13->getNumParameters())
                    this->p_13->getParameterInfo(index, info);
    
                index -= this->p_13->getNumParameters();
    
                if (index < this->p_14->getNumParameters())
                    this->p_14->getParameterInfo(index, info);
    
                index -= this->p_14->getNumParameters();
    
                if (index < this->p_15->getNumParameters())
                    this->p_15->getParameterInfo(index, info);
    
                index -= this->p_15->getNumParameters();
    
                if (index < this->p_16->getNumParameters())
                    this->p_16->getParameterInfo(index, info);
    
                break;
                }
            }
        }
    }
    
    void sendParameter(ParameterIndex index, bool ignoreValue) {
        this->getPatcher()->sendParameter(index + this->parameterOffset, ignoreValue);
    }
    
    ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
        if (subpatcher == this->p_09)
            return 8;
    
        if (subpatcher == this->p_10)
            return 8 + this->p_09->getNumParameters();
    
        if (subpatcher == this->p_11)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters();
    
        if (subpatcher == this->p_12)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters();
    
        if (subpatcher == this->p_13)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters();
    
        if (subpatcher == this->p_14)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters();
    
        if (subpatcher == this->p_15)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters();
    
        if (subpatcher == this->p_16)
            return 8 + this->p_09->getNumParameters() + this->p_10->getNumParameters() + this->p_11->getNumParameters() + this->p_12->getNumParameters() + this->p_13->getNumParameters() + this->p_14->getNumParameters() + this->p_15->getNumParameters();
    
        return 0;
    }
    
    void setParameterOffset(ParameterIndex offset) {
        this->parameterOffset = offset;
    }
    
    ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
        if (steps == 1) {
            if (normalizedValue > 0) {
                normalizedValue = 1.;
            }
        } else {
            ParameterValue oneStep = (number)1. / (steps - 1);
            ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
            normalizedValue = numberOfSteps * oneStep;
        }
    
        return normalizedValue;
    }
    
    ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 1:
        case 7:
            {
            {
                value = (value < 0 ? 0 : (value > 1 ? 1 : value));
                ParameterValue normalizedValue = (value - 0) / (1 - 0);
                return normalizedValue;
            }
            }
        case 0:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
            {
            {
                value = (value < 0 ? 0 : (value > 100 ? 100 : value));
                ParameterValue normalizedValue = (value - 0) / (100 - 0);
                return normalizedValue;
            }
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->convertToNormalizedParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertToNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
        value = (value < 0 ? 0 : (value > 1 ? 1 : value));
    
        switch (index) {
        case 1:
        case 7:
            {
            {
                {
                    return 0 + value * (1 - 0);
                }
            }
            }
        case 0:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
            {
            {
                {
                    return 0 + value * (100 - 0);
                }
            }
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->convertFromNormalizedParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->convertFromNormalizedParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
        switch (index) {
        case 0:
            {
            return this->param_03_value_constrain(value);
            }
        case 1:
            {
            return this->param_04_value_constrain(value);
            }
        case 2:
            {
            return this->param_05_value_constrain(value);
            }
        case 3:
            {
            return this->param_06_value_constrain(value);
            }
        case 4:
            {
            return this->param_07_value_constrain(value);
            }
        case 5:
            {
            return this->param_08_value_constrain(value);
            }
        case 6:
            {
            return this->param_09_value_constrain(value);
            }
        case 7:
            {
            return this->param_10_value_constrain(value);
            }
        default:
            {
            index -= 8;
    
            if (index < this->p_09->getNumParameters())
                return this->p_09->constrainParameterValue(index, value);
    
            index -= this->p_09->getNumParameters();
    
            if (index < this->p_10->getNumParameters())
                return this->p_10->constrainParameterValue(index, value);
    
            index -= this->p_10->getNumParameters();
    
            if (index < this->p_11->getNumParameters())
                return this->p_11->constrainParameterValue(index, value);
    
            index -= this->p_11->getNumParameters();
    
            if (index < this->p_12->getNumParameters())
                return this->p_12->constrainParameterValue(index, value);
    
            index -= this->p_12->getNumParameters();
    
            if (index < this->p_13->getNumParameters())
                return this->p_13->constrainParameterValue(index, value);
    
            index -= this->p_13->getNumParameters();
    
            if (index < this->p_14->getNumParameters())
                return this->p_14->constrainParameterValue(index, value);
    
            index -= this->p_14->getNumParameters();
    
            if (index < this->p_15->getNumParameters())
                return this->p_15->constrainParameterValue(index, value);
    
            index -= this->p_15->getNumParameters();
    
            if (index < this->p_16->getNumParameters())
                return this->p_16->constrainParameterValue(index, value);
    
            return value;
            }
        }
    }
    
    void scheduleParamInit(ParameterIndex index, Index order) {
        this->getPatcher()->scheduleParamInit(index + this->parameterOffset, order);
    }
    
    void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
        RNBO_UNUSED(hasValue);
        this->updateTime(time);
    
        switch (index) {
        case 892732297:
            {
            this->loadmess_02_startupbang_bang();
            break;
            }
        case -871642103:
            {
            this->loadbang_05_startupbang_bang();
            break;
            }
        case 848255507:
            {
            this->line_05_tick_set(value);
            break;
            }
        case 1935387534:
            {
            this->metro_01_tick_bang();
            break;
            }
        case -444440180:
            {
            this->linetilde_02_target_bang();
            break;
            }
        case -62043057:
            {
            this->linetilde_03_target_bang();
            break;
            }
        case -1621164530:
            {
            this->linetilde_04_target_bang();
            break;
            }
        case 732284170:
            {
            this->linetilde_05_target_bang();
            break;
            }
        case -1494586265:
            {
            this->numbertilde_07_value_set(value);
            break;
            }
        case 1114681293:
            {
            this->linetilde_06_target_bang();
            break;
            }
        case -2003561653:
            {
            this->linetilde_07_target_bang();
            break;
            }
        }
    }
    
    void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}
    
    void processOutletEvent(
        EngineLink* sender,
        OutletIndex index,
        ParameterValue value,
        MillisecondTime time
    ) {
        this->updateTime(time);
        this->processOutletAtCurrentTime(sender, index, value);
    }
    
    void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("valin"):
            {
            if (TAG("Verb/number_obj-26") == objectId)
                this->numberobj_25_valin_set(payload);
    
            if (TAG("Verb/number_obj-2") == objectId)
                this->numberobj_26_valin_set(payload);
    
            if (TAG("Verb/number_obj-119") == objectId)
                this->numberobj_27_valin_set(payload);
    
            if (TAG("Verb/number_obj-67") == objectId)
                this->numberobj_28_valin_set(payload);
    
            if (TAG("Verb/number_obj-3") == objectId)
                this->numberobj_29_valin_set(payload);
    
            if (TAG("Verb/number_obj-54") == objectId)
                this->numberobj_30_valin_set(payload);
    
            if (TAG("Verb/number_obj-97") == objectId)
                this->numberobj_31_valin_set(payload);
    
            if (TAG("Verb/number_obj-9") == objectId)
                this->numberobj_32_valin_set(payload);
    
            if (TAG("Verb/number_obj-42") == objectId)
                this->numberobj_33_valin_set(payload);
    
            if (TAG("Verb/number_obj-21") == objectId)
                this->numberobj_34_valin_set(payload);
    
            if (TAG("Verb/number_obj-23") == objectId)
                this->numberobj_35_valin_set(payload);
    
            if (TAG("Verb/number_obj-16") == objectId)
                this->numberobj_36_valin_set(payload);
    
            if (TAG("Verb/number_obj-18") == objectId)
                this->numberobj_37_valin_set(payload);
    
            if (TAG("Verb/number_obj-151") == objectId)
                this->numberobj_38_valin_set(payload);
    
            if (TAG("Verb/toggle_obj-74") == objectId)
                this->toggle_01_valin_set(payload);
    
            if (TAG("Verb/number_obj-147") == objectId)
                this->numberobj_39_valin_set(payload);
    
            break;
            }
        case TAG("format"):
            {
            if (TAG("Verb/number_obj-26") == objectId)
                this->numberobj_25_format_set(payload);
    
            if (TAG("Verb/number_obj-2") == objectId)
                this->numberobj_26_format_set(payload);
    
            if (TAG("Verb/number_obj-119") == objectId)
                this->numberobj_27_format_set(payload);
    
            if (TAG("Verb/number_obj-67") == objectId)
                this->numberobj_28_format_set(payload);
    
            if (TAG("Verb/number_obj-3") == objectId)
                this->numberobj_29_format_set(payload);
    
            if (TAG("Verb/number_obj-54") == objectId)
                this->numberobj_30_format_set(payload);
    
            if (TAG("Verb/number_obj-97") == objectId)
                this->numberobj_31_format_set(payload);
    
            if (TAG("Verb/number_obj-9") == objectId)
                this->numberobj_32_format_set(payload);
    
            if (TAG("Verb/number_obj-42") == objectId)
                this->numberobj_33_format_set(payload);
    
            if (TAG("Verb/number_obj-21") == objectId)
                this->numberobj_34_format_set(payload);
    
            if (TAG("Verb/number_obj-23") == objectId)
                this->numberobj_35_format_set(payload);
    
            if (TAG("Verb/number_obj-16") == objectId)
                this->numberobj_36_format_set(payload);
    
            if (TAG("Verb/number_obj-18") == objectId)
                this->numberobj_37_format_set(payload);
    
            if (TAG("Verb/number_obj-151") == objectId)
                this->numberobj_38_format_set(payload);
    
            if (TAG("Verb/number_obj-147") == objectId)
                this->numberobj_39_format_set(payload);
    
            break;
            }
        case TAG("sig"):
            {
            if (TAG("Verb/number~_obj-38") == objectId)
                this->numbertilde_07_sig_number_set(payload);
    
            break;
            }
        case TAG("mode"):
            {
            if (TAG("Verb/number~_obj-38") == objectId)
                this->numbertilde_07_mode_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Verb/message_obj-82") == objectId)
                this->message_55_listin_number_set(payload);
    
            if (TAG("Verb/message_obj-80") == objectId)
                this->message_56_listin_number_set(payload);
    
            if (TAG("Verb/message_obj-155") == objectId)
                this->message_57_listin_number_set(payload);
    
            if (TAG("Verb/message_obj-148") == objectId)
                this->message_58_listin_number_set(payload);
    
            break;
            }
        }
    
        this->p_09->processNumMessage(tag, objectId, time, payload);
        this->p_10->processNumMessage(tag, objectId, time, payload);
        this->p_11->processNumMessage(tag, objectId, time, payload);
        this->p_12->processNumMessage(tag, objectId, time, payload);
        this->p_13->processNumMessage(tag, objectId, time, payload);
        this->p_14->processNumMessage(tag, objectId, time, payload);
        this->p_15->processNumMessage(tag, objectId, time, payload);
        this->p_16->processNumMessage(tag, objectId, time, payload);
    }
    
    void processListMessage(
        MessageTag tag,
        MessageTag objectId,
        MillisecondTime time,
        const list& payload
    ) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("sig"):
            {
            if (TAG("Verb/number~_obj-38") == objectId)
                this->numbertilde_07_sig_list_set(payload);
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Verb/message_obj-82") == objectId)
                this->message_55_listin_list_set(payload);
    
            if (TAG("Verb/message_obj-80") == objectId)
                this->message_56_listin_list_set(payload);
    
            if (TAG("Verb/message_obj-155") == objectId)
                this->message_57_listin_list_set(payload);
    
            if (TAG("Verb/message_obj-148") == objectId)
                this->message_58_listin_list_set(payload);
    
            break;
            }
        }
    
        this->p_09->processListMessage(tag, objectId, time, payload);
        this->p_10->processListMessage(tag, objectId, time, payload);
        this->p_11->processListMessage(tag, objectId, time, payload);
        this->p_12->processListMessage(tag, objectId, time, payload);
        this->p_13->processListMessage(tag, objectId, time, payload);
        this->p_14->processListMessage(tag, objectId, time, payload);
        this->p_15->processListMessage(tag, objectId, time, payload);
        this->p_16->processListMessage(tag, objectId, time, payload);
    }
    
    void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
        this->updateTime(time);
    
        switch (tag) {
        case TAG("startupbang"):
            {
            if (TAG("Verb/loadmess_obj-12") == objectId)
                this->loadmess_02_startupbang_bang();
    
            if (TAG("Verb/loadbang_obj-19") == objectId)
                this->loadbang_05_startupbang_bang();
    
            break;
            }
        case TAG("listin"):
            {
            if (TAG("Verb/message_obj-82") == objectId)
                this->message_55_listin_bang_bang();
    
            if (TAG("Verb/message_obj-80") == objectId)
                this->message_56_listin_bang_bang();
    
            if (TAG("Verb/message_obj-155") == objectId)
                this->message_57_listin_bang_bang();
    
            if (TAG("Verb/message_obj-148") == objectId)
                this->message_58_listin_bang_bang();
    
            break;
            }
        case TAG("bangin"):
            {
            if (TAG("Verb/button_obj-76") == objectId)
                this->button_13_bangin_bang();
    
            break;
            }
        }
    
        this->p_09->processBangMessage(tag, objectId, time);
        this->p_10->processBangMessage(tag, objectId, time);
        this->p_11->processBangMessage(tag, objectId, time);
        this->p_12->processBangMessage(tag, objectId, time);
        this->p_13->processBangMessage(tag, objectId, time);
        this->p_14->processBangMessage(tag, objectId, time);
        this->p_15->processBangMessage(tag, objectId, time);
        this->p_16->processBangMessage(tag, objectId, time);
    }
    
    MessageTagInfo resolveTag(MessageTag tag) const {
        switch (tag) {
        case TAG("valout"):
            {
            return "valout";
            }
        case TAG("Verb/number_obj-26"):
            {
            return "Verb/number_obj-26";
            }
        case TAG("setup"):
            {
            return "setup";
            }
        case TAG("Verb/number_obj-2"):
            {
            return "Verb/number_obj-2";
            }
        case TAG("Verb/number_obj-119"):
            {
            return "Verb/number_obj-119";
            }
        case TAG("Verb/number_obj-67"):
            {
            return "Verb/number_obj-67";
            }
        case TAG("Verb/number_obj-3"):
            {
            return "Verb/number_obj-3";
            }
        case TAG("Verb/number_obj-54"):
            {
            return "Verb/number_obj-54";
            }
        case TAG("Verb/number_obj-97"):
            {
            return "Verb/number_obj-97";
            }
        case TAG("Verb/number_obj-9"):
            {
            return "Verb/number_obj-9";
            }
        case TAG("monitor"):
            {
            return "monitor";
            }
        case TAG("Verb/number~_obj-38"):
            {
            return "Verb/number~_obj-38";
            }
        case TAG("assign"):
            {
            return "assign";
            }
        case TAG("Verb/number_obj-42"):
            {
            return "Verb/number_obj-42";
            }
        case TAG("Verb/number_obj-21"):
            {
            return "Verb/number_obj-21";
            }
        case TAG("Verb/number_obj-23"):
            {
            return "Verb/number_obj-23";
            }
        case TAG("Verb/number_obj-16"):
            {
            return "Verb/number_obj-16";
            }
        case TAG("Verb/number_obj-18"):
            {
            return "Verb/number_obj-18";
            }
        case TAG("Verb/scope~_obj-40"):
            {
            return "Verb/scope~_obj-40";
            }
        case TAG("Verb/number_obj-151"):
            {
            return "Verb/number_obj-151";
            }
        case TAG("listout"):
            {
            return "listout";
            }
        case TAG("Verb/message_obj-82"):
            {
            return "Verb/message_obj-82";
            }
        case TAG("Verb/toggle_obj-74"):
            {
            return "Verb/toggle_obj-74";
            }
        case TAG("Verb/message_obj-80"):
            {
            return "Verb/message_obj-80";
            }
        case TAG("Verb/message_obj-155"):
            {
            return "Verb/message_obj-155";
            }
        case TAG("Verb/number_obj-147"):
            {
            return "Verb/number_obj-147";
            }
        case TAG("bangout"):
            {
            return "bangout";
            }
        case TAG("Verb/button_obj-76"):
            {
            return "Verb/button_obj-76";
            }
        case TAG("Verb/message_obj-148"):
            {
            return "Verb/message_obj-148";
            }
        case TAG("valin"):
            {
            return "valin";
            }
        case TAG("format"):
            {
            return "format";
            }
        case TAG("startupbang"):
            {
            return "startupbang";
            }
        case TAG("Verb/loadmess_obj-12"):
            {
            return "Verb/loadmess_obj-12";
            }
        case TAG("sig"):
            {
            return "sig";
            }
        case TAG("mode"):
            {
            return "mode";
            }
        case TAG("Verb/loadbang_obj-19"):
            {
            return "Verb/loadbang_obj-19";
            }
        case TAG("listin"):
            {
            return "listin";
            }
        case TAG("bangin"):
            {
            return "bangin";
            }
        }
    
        auto subpatchResult_0 = this->p_09->resolveTag(tag);
    
        if (subpatchResult_0)
            return subpatchResult_0;
    
        auto subpatchResult_1 = this->p_10->resolveTag(tag);
    
        if (subpatchResult_1)
            return subpatchResult_1;
    
        auto subpatchResult_2 = this->p_11->resolveTag(tag);
    
        if (subpatchResult_2)
            return subpatchResult_2;
    
        auto subpatchResult_3 = this->p_12->resolveTag(tag);
    
        if (subpatchResult_3)
            return subpatchResult_3;
    
        auto subpatchResult_4 = this->p_13->resolveTag(tag);
    
        if (subpatchResult_4)
            return subpatchResult_4;
    
        auto subpatchResult_5 = this->p_14->resolveTag(tag);
    
        if (subpatchResult_5)
            return subpatchResult_5;
    
        auto subpatchResult_6 = this->p_15->resolveTag(tag);
    
        if (subpatchResult_6)
            return subpatchResult_6;
    
        auto subpatchResult_7 = this->p_16->resolveTag(tag);
    
        if (subpatchResult_7)
            return subpatchResult_7;
    
        return nullptr;
    }
    
    DataRef* getDataRef(DataRefIndex index)  {
        switch (index) {
        case 3:
            {
            return addressOf(this->liststore_06_storage_storageobj);
            break;
            }
        default:
            {
            return nullptr;
            }
        }
    }
    
    DataRefIndex getNumDataRefs() const {
        return 1;
    }
    
    void fillDataRef(DataRefIndex , DataRef& ) {}
    
    void zeroDataRef(DataRef& ref) {
        ref->setZero();
    }
    
    void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
        this->updateTime(time);
    
        if (index == 1) {
            this->cycle_tilde_06_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
            this->cycle_tilde_06_bufferUpdated();
        }
    
        if (index == 3) {
            this->liststore_06_storage_storage = new Float64Buffer(this->liststore_06_storage_storageobj);
        }
    
        this->p_09->processDataViewUpdate(index, time);
        this->p_10->processDataViewUpdate(index, time);
        this->p_11->processDataViewUpdate(index, time);
        this->p_12->processDataViewUpdate(index, time);
        this->p_13->processDataViewUpdate(index, time);
        this->p_14->processDataViewUpdate(index, time);
        this->p_15->processDataViewUpdate(index, time);
        this->p_16->processDataViewUpdate(index, time);
    }
    
    void initialize() {
        this->liststore_06_storage_storageobj = initDataRef("liststore_06_storage_storageobj", true, nullptr, "buffer~");
        this->assign_defaults();
        this->setState();
        this->cycle_tilde_06_buffer = new Float64Buffer(this->getPatcher()->RNBODefaultSinus);
        this->liststore_06_storage_storageobj->setIndex(3);
        this->liststore_06_storage_storage = new Float64Buffer(this->liststore_06_storage_storageobj);
    }
    
    protected:
    
    void param_03_value_set(number v) {
        v = this->param_03_value_constrain(v);
        this->param_03_value = v;
        this->sendParameter(0, false);
    
        if (this->param_03_value != this->param_03_lastValue) {
            this->getEngine()->presetTouched();
            this->param_03_lastValue = this->param_03_value;
        }
    
        this->numberobj_26_value_set(v);
    }
    
    void param_04_value_set(number v) {
        v = this->param_04_value_constrain(v);
        this->param_04_value = v;
        this->sendParameter(1, false);
    
        if (this->param_04_value != this->param_04_lastValue) {
            this->getEngine()->presetTouched();
            this->param_04_lastValue = this->param_04_value;
        }
    
        this->gate_01_onoff_set(v);
    }
    
    void param_05_value_set(number v) {
        v = this->param_05_value_constrain(v);
        this->param_05_value = v;
        this->sendParameter(2, false);
    
        if (this->param_05_value != this->param_05_lastValue) {
            this->getEngine()->presetTouched();
            this->param_05_lastValue = this->param_05_value;
        }
    
        this->numberobj_29_value_set(v);
    }
    
    void param_06_value_set(number v) {
        v = this->param_06_value_constrain(v);
        this->param_06_value = v;
        this->sendParameter(3, false);
    
        if (this->param_06_value != this->param_06_lastValue) {
            this->getEngine()->presetTouched();
            this->param_06_lastValue = this->param_06_value;
        }
    
        this->numberobj_30_value_set(v);
    }
    
    void param_07_value_set(number v) {
        v = this->param_07_value_constrain(v);
        this->param_07_value = v;
        this->sendParameter(4, false);
    
        if (this->param_07_value != this->param_07_lastValue) {
            this->getEngine()->presetTouched();
            this->param_07_lastValue = this->param_07_value;
        }
    
        this->numberobj_32_value_set(v);
    }
    
    void param_08_value_set(number v) {
        v = this->param_08_value_constrain(v);
        this->param_08_value = v;
        this->sendParameter(5, false);
    
        if (this->param_08_value != this->param_08_lastValue) {
            this->getEngine()->presetTouched();
            this->param_08_lastValue = this->param_08_value;
        }
    
        this->numberobj_35_value_set(v);
    }
    
    void param_09_value_set(number v) {
        v = this->param_09_value_constrain(v);
        this->param_09_value = v;
        this->sendParameter(6, false);
    
        if (this->param_09_value != this->param_09_lastValue) {
            this->getEngine()->presetTouched();
            this->param_09_lastValue = this->param_09_value;
        }
    
        this->numberobj_37_value_set(v);
    }
    
    void param_10_value_set(number v) {
        v = this->param_10_value_constrain(v);
        this->param_10_value = v;
        this->sendParameter(7, false);
    
        if (this->param_10_value != this->param_10_lastValue) {
            this->getEngine()->presetTouched();
            this->param_10_lastValue = this->param_10_value;
        }
    
        this->gate_02_onoff_set(v);
    }
    
    void numberobj_25_valin_set(number v) {
        this->numberobj_25_value_set(v);
    }
    
    void numberobj_25_format_set(number v) {
        this->numberobj_25_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_26_valin_set(number v) {
        this->numberobj_26_value_set(v);
    }
    
    void numberobj_26_format_set(number v) {
        this->numberobj_26_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_14_out1_bang_bang() {
        this->numberobj_26_value_bang();
    }
    
    void eventinlet_14_out1_number_set(number v) {
        this->numberobj_26_value_set(v);
    }
    
    void eventinlet_14_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_26_value_set(converted);
        }
    }
    
    void numberobj_27_valin_set(number v) {
        this->numberobj_27_value_set(v);
    }
    
    void numberobj_27_format_set(number v) {
        this->numberobj_27_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_28_valin_set(number v) {
        this->numberobj_28_value_set(v);
    }
    
    void numberobj_28_format_set(number v) {
        this->numberobj_28_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_29_valin_set(number v) {
        this->numberobj_29_value_set(v);
    }
    
    void numberobj_29_format_set(number v) {
        this->numberobj_29_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_30_valin_set(number v) {
        this->numberobj_30_value_set(v);
    }
    
    void numberobj_30_format_set(number v) {
        this->numberobj_30_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_31_valin_set(number v) {
        this->numberobj_31_value_set(v);
    }
    
    void numberobj_31_format_set(number v) {
        this->numberobj_31_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_32_valin_set(number v) {
        this->numberobj_32_value_set(v);
    }
    
    void numberobj_32_format_set(number v) {
        this->numberobj_32_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_15_out1_bang_bang() {}
    
    void eventinlet_15_out1_number_set(number ) {}
    
    void eventinlet_15_out1_list_set(const list& ) {}
    
    void loadmess_02_startupbang_bang() {
        this->loadmess_02_message_bang();
    }
    
    void numbertilde_07_sig_number_set(number v) {
        this->numbertilde_07_outValue = v;
    }
    
    void numbertilde_07_sig_list_set(const list& v) {
        this->numbertilde_07_outValue = v[0];
    }
    
    void numbertilde_07_mode_set(number v) {
        if (v == 1) {
            this->numbertilde_07_currentMode = 0;
        } else if (v == 2) {
            this->numbertilde_07_currentMode = 1;
        }
    }
    
    void numberobj_33_valin_set(number v) {
        this->numberobj_33_value_set(v);
    }
    
    void numberobj_33_format_set(number v) {
        this->numberobj_33_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_34_valin_set(number v) {
        this->numberobj_34_value_set(v);
    }
    
    void numberobj_34_format_set(number v) {
        this->numberobj_34_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_35_valin_set(number v) {
        this->numberobj_35_value_set(v);
    }
    
    void numberobj_35_format_set(number v) {
        this->numberobj_35_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_36_valin_set(number v) {
        this->numberobj_36_value_set(v);
    }
    
    void numberobj_36_format_set(number v) {
        this->numberobj_36_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void numberobj_37_valin_set(number v) {
        this->numberobj_37_value_set(v);
    }
    
    void numberobj_37_format_set(number v) {
        this->numberobj_37_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void eventinlet_16_out1_bang_bang() {}
    
    void eventinlet_16_out1_number_set(number ) {}
    
    void eventinlet_16_out1_list_set(const list& ) {}
    
    void eventinlet_17_out1_bang_bang() {
        this->numberobj_35_value_bang();
    }
    
    void eventinlet_17_out1_number_set(number v) {
        this->numberobj_35_value_set(v);
    }
    
    void eventinlet_17_out1_list_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_35_value_set(converted);
        }
    }
    
    void loadbang_05_startupbang_bang() {
        this->loadbang_05_output_bang();
    }
    
    void line_05_tick_set(number v) {
        this->line_05_output_set(v);
    
        if ((bool)(this->line_05_isFinished(v))) {
            this->line_05_slope = 0;
            this->line_05_startValue = v;
            this->line_05_startPendingRamp();
        } else {
            this->line_05_scheduleNext();
        }
    }
    
    void numberobj_38_valin_set(number v) {
        this->numberobj_38_value_set(v);
    }
    
    void numberobj_38_format_set(number v) {
        this->numberobj_38_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void message_55_listin_list_set(const list& v) {
        this->message_55_set_set(v);
    }
    
    void message_55_listin_number_set(number v) {
        this->message_55_set_set(v);
    }
    
    void message_55_listin_bang_bang() {
        this->message_55_trigger_bang();
    }
    
    void toggle_01_valin_set(number v) {
        this->toggle_01_value_number_set(v);
    }
    
    void metro_01_tick_bang() {
        this->metro_01_tickout_bang();
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(this->metro_01_on)) {
            this->metro_01_last = this->currenttime();
    
            {
                this->metro_01_next = this->metro_01_last + this->metro_01_interval;
                this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_01_interval + this->_currentTime);;
            }
        }
    }
    
    void message_56_listin_list_set(const list& v) {
        this->message_56_set_set(v);
    }
    
    void message_56_listin_number_set(number v) {
        this->message_56_set_set(v);
    }
    
    void message_56_listin_bang_bang() {
        this->message_56_trigger_bang();
    }
    
    void message_57_listin_list_set(const list& v) {
        this->message_57_set_set(v);
    }
    
    void message_57_listin_number_set(number v) {
        this->message_57_set_set(v);
    }
    
    void message_57_listin_bang_bang() {
        this->message_57_trigger_bang();
    }
    
    void numberobj_39_valin_set(number v) {
        this->numberobj_39_value_set(v);
    }
    
    void numberobj_39_format_set(number v) {
        this->numberobj_39_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
    }
    
    void button_13_bangin_bang() {
        this->button_13_bangval_bang();
    }
    
    void message_58_listin_list_set(const list& v) {
        this->message_58_set_set(v);
    }
    
    void message_58_listin_number_set(number v) {
        this->message_58_set_set(v);
    }
    
    void message_58_listin_bang_bang() {
        this->message_58_trigger_bang();
    }
    
    void linetilde_02_target_bang() {}
    
    void linetilde_03_target_bang() {}
    
    void linetilde_04_target_bang() {}
    
    void linetilde_05_target_bang() {}
    
    void numbertilde_07_value_set(number v) {
        {
            list converted = {v};
            this->scale_04_input_set(converted);
        }
    }
    
    void linetilde_06_target_bang() {}
    
    void linetilde_07_target_bang() {}
    
    number msToSamps(MillisecondTime ms, number sampleRate) {
        return ms * sampleRate * 0.001;
    }
    
    MillisecondTime sampsToMs(SampleIndex samps) {
        return samps * (this->invsr * 1000);
    }
    
    Index getMaxBlockSize() const {
        return this->maxvs;
    }
    
    number getSampleRate() const {
        return this->sr;
    }
    
    bool hasFixedVectorSize() const {
        return false;
    }
    
    Index getNumInputChannels() const {
        return 2;
    }
    
    Index getNumOutputChannels() const {
        return 2;
    }
    
    void initializeObjects() {
        this->numberobj_25_init();
        this->numberobj_26_init();
        this->numberobj_27_init();
        this->numberobj_28_init();
        this->numberobj_29_init();
        this->numberobj_30_init();
        this->numberobj_31_init();
        this->numberobj_32_init();
        this->numbertilde_07_init();
        this->numberobj_33_init();
        this->numberobj_34_init();
        this->numberobj_35_init();
        this->numberobj_36_init();
        this->numberobj_37_init();
        this->numberobj_38_init();
        this->message_55_init();
        this->liststore_06_storage_init();
        this->drunk_01_nz_init();
        this->message_56_init();
        this->message_57_init();
        this->numberobj_39_init();
        this->message_58_init();
        this->p_09->initializeObjects();
        this->p_10->initializeObjects();
        this->p_11->initializeObjects();
        this->p_12->initializeObjects();
        this->p_13->initializeObjects();
        this->p_14->initializeObjects();
        this->p_15->initializeObjects();
        this->p_16->initializeObjects();
    }
    
    void sendOutlet(OutletIndex index, ParameterValue value) {
        this->getEngine()->sendOutlet(this, index, value);
    }
    
    void startup() {
        this->updateTime(this->getEngine()->getCurrentTime());
        this->p_09->startup();
        this->p_10->startup();
        this->p_11->startup();
        this->p_12->startup();
        this->p_13->startup();
        this->p_14->startup();
        this->p_15->startup();
        this->p_16->startup();
        this->getEngine()->scheduleClockEvent(this, 892732297, 0 + this->_currentTime);;
        this->getEngine()->scheduleClockEvent(this, -871642103, 0 + this->_currentTime);;
    
        {
            this->drunk_01_nz_seed(this->drunk_01_seed);
        }
    
        this->drunk_01_lastValue = this->drunk_01_size * 0.5;
    
        if ((bool)(this->metro_01_on))
            this->metro_01_on_set(1);
    
        {
            this->scheduleParamInit(0, 4);
        }
    
        {
            this->scheduleParamInit(1, 0);
        }
    
        {
            this->scheduleParamInit(2, 6);
        }
    
        {
            this->scheduleParamInit(3, 5);
        }
    
        {
            this->scheduleParamInit(4, 1);
        }
    
        {
            this->scheduleParamInit(5, 3);
        }
    
        {
            this->scheduleParamInit(6, 2);
        }
    
        {
            this->scheduleParamInit(7, 0);
        }
    }
    
    void allocateDataRefs() {
        this->p_09->allocateDataRefs();
        this->p_10->allocateDataRefs();
        this->p_11->allocateDataRefs();
        this->p_12->allocateDataRefs();
        this->p_13->allocateDataRefs();
        this->p_14->allocateDataRefs();
        this->p_15->allocateDataRefs();
        this->p_16->allocateDataRefs();
        this->cycle_tilde_06_buffer->requestSize(16384, 1);
        this->cycle_tilde_06_buffer->setSampleRate(this->sr);
        this->cycle_tilde_06_buffer = this->cycle_tilde_06_buffer->allocateIfNeeded();
        this->liststore_06_storage_storage = this->liststore_06_storage_storage->allocateIfNeeded();
    
        if (this->liststore_06_storage_storageobj->hasRequestedSize()) {
            if (this->liststore_06_storage_storageobj->wantsFill())
                this->zeroDataRef(this->liststore_06_storage_storageobj);
    
            this->getEngine()->sendDataRefUpdated(3);
        }
    }
    
    number param_03_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_02_time_set(number v) {
        this->linetilde_02_time = v;
    }
    
    void linetilde_02_segments_set(const list& v) {
        this->linetilde_02_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_02_time == 0) {
                this->linetilde_02_activeRamps->length = 0;
                this->linetilde_02_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_02_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_02_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_02_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_02_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_02_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_02_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_02_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_02_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_02_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_02_activeRamps->push(lastRampValue);
                    this->linetilde_02_activeRamps->push(0);
                    this->linetilde_02_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_02_keepramp)) {
                            this->linetilde_02_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_02_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_02_activeRamps->push(destinationValue);
                    this->linetilde_02_activeRamps->push(inc);
                    this->linetilde_02_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_25_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_02_segments_set(converted);
        }
    }
    
    void numberobj_25_value_set(number v) {
        this->numberobj_25_value_setter(v);
        v = this->numberobj_25_value;
        number localvalue = v;
    
        if (this->numberobj_25_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-26"), localvalue, this->_currentTime);
        this->numberobj_25_output_set(localvalue);
    }
    
    void scale_01_out_set(const list& v) {
        this->scale_01_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_25_value_set(converted);
        }
    }
    
    void scale_01_input_set(const list& v) {
        this->scale_01_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_01_inlow,
                this->scale_01_inhigh,
                this->scale_01_outlow,
                this->scale_01_outhigh,
                this->scale_01_power
            ));
        }
    
        this->scale_01_out_set(tmp);
    }
    
    void numberobj_26_output_set(number v) {
        {
            list converted = {v};
            this->scale_01_input_set(converted);
        }
    }
    
    void numberobj_26_value_set(number v) {
        this->numberobj_26_value_setter(v);
        v = this->numberobj_26_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_26_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-2"), localvalue, this->_currentTime);
        this->numberobj_26_output_set(localvalue);
    }
    
    number param_04_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0 ? 0 : v));
        return v;
    }
    
    void gate_01_onoff_set(number v) {
        this->gate_01_onoff = v;
    }
    
    number param_05_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_03_time_set(number v) {
        this->linetilde_03_time = v;
    }
    
    void linetilde_03_segments_set(const list& v) {
        this->linetilde_03_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_03_time == 0) {
                this->linetilde_03_activeRamps->length = 0;
                this->linetilde_03_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_03_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_03_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_03_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_03_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_03_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_03_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_03_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_03_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_03_activeRamps->push(lastRampValue);
                    this->linetilde_03_activeRamps->push(0);
                    this->linetilde_03_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_03_keepramp)) {
                            this->linetilde_03_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_03_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_03_activeRamps->push(destinationValue);
                    this->linetilde_03_activeRamps->push(inc);
                    this->linetilde_03_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_27_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_03_segments_set(converted);
        }
    }
    
    void numberobj_27_value_set(number v) {
        this->numberobj_27_value_setter(v);
        v = this->numberobj_27_value;
        number localvalue = v;
    
        if (this->numberobj_27_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-119"), localvalue, this->_currentTime);
        this->numberobj_27_output_set(localvalue);
    }
    
    void expr_09_out1_set(number v) {
        this->expr_09_out1 = v;
        this->numberobj_27_value_set(this->expr_09_out1);
    }
    
    void expr_09_in1_set(number in1) {
        this->expr_09_in1 = in1;
    
        this->expr_09_out1_set(
            (this->expr_09_in2 == 0 ? 0 : (this->expr_09_in2 == 0. ? 0. : this->expr_09_in1 / this->expr_09_in2))
        );//#map:Verb//_obj-120:1
    }
    
    void numberobj_29_output_set(number v) {
        this->expr_09_in1_set(v);
    }
    
    void numberobj_29_value_set(number v) {
        this->numberobj_29_value_setter(v);
        v = this->numberobj_29_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_29_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-3"), localvalue, this->_currentTime);
        this->numberobj_29_output_set(localvalue);
    }
    
    number param_06_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_04_time_set(number v) {
        this->linetilde_04_time = v;
    }
    
    void linetilde_04_segments_set(const list& v) {
        this->linetilde_04_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_04_time == 0) {
                this->linetilde_04_activeRamps->length = 0;
                this->linetilde_04_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_04_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_04_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_04_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_04_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_04_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_04_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_04_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_04_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_04_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_04_activeRamps->push(lastRampValue);
                    this->linetilde_04_activeRamps->push(0);
                    this->linetilde_04_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_04_keepramp)) {
                            this->linetilde_04_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_04_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_04_activeRamps->push(destinationValue);
                    this->linetilde_04_activeRamps->push(inc);
                    this->linetilde_04_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_28_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_04_segments_set(converted);
        }
    }
    
    void numberobj_28_value_set(number v) {
        this->numberobj_28_value_setter(v);
        v = this->numberobj_28_value;
        number localvalue = v;
    
        if (this->numberobj_28_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-67"), localvalue, this->_currentTime);
        this->numberobj_28_output_set(localvalue);
    }
    
    void scale_02_out_set(const list& v) {
        this->scale_02_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_28_value_set(converted);
        }
    }
    
    void scale_02_input_set(const list& v) {
        this->scale_02_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_02_inlow,
                this->scale_02_inhigh,
                this->scale_02_outlow,
                this->scale_02_outhigh,
                this->scale_02_power
            ));
        }
    
        this->scale_02_out_set(tmp);
    }
    
    void numberobj_30_output_set(number v) {
        {
            list converted = {v};
            this->scale_02_input_set(converted);
        }
    }
    
    void numberobj_30_value_set(number v) {
        this->numberobj_30_value_setter(v);
        v = this->numberobj_30_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_30_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-54"), localvalue, this->_currentTime);
        this->numberobj_30_output_set(localvalue);
    }
    
    number param_07_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_05_time_set(number v) {
        this->linetilde_05_time = v;
    }
    
    void linetilde_05_segments_set(const list& v) {
        this->linetilde_05_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_05_time == 0) {
                this->linetilde_05_activeRamps->length = 0;
                this->linetilde_05_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_05_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_05_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_05_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_05_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_05_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_05_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_05_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_05_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_05_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_05_activeRamps->push(lastRampValue);
                    this->linetilde_05_activeRamps->push(0);
                    this->linetilde_05_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_05_keepramp)) {
                            this->linetilde_05_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_05_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_05_activeRamps->push(destinationValue);
                    this->linetilde_05_activeRamps->push(inc);
                    this->linetilde_05_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_31_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_05_segments_set(converted);
        }
    }
    
    void numberobj_31_value_set(number v) {
        this->numberobj_31_value_setter(v);
        v = this->numberobj_31_value;
        number localvalue = v;
    
        if (this->numberobj_31_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-97"), localvalue, this->_currentTime);
        this->numberobj_31_output_set(localvalue);
    }
    
    void scale_03_out_set(const list& v) {
        this->scale_03_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_31_value_set(converted);
        }
    }
    
    void scale_03_input_set(const list& v) {
        this->scale_03_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_03_inlow,
                this->scale_03_inhigh,
                this->scale_03_outlow,
                this->scale_03_outhigh,
                this->scale_03_power
            ));
        }
    
        this->scale_03_out_set(tmp);
    }
    
    void numberobj_32_output_set(number v) {
        {
            list converted = {v};
            this->scale_03_input_set(converted);
        }
    }
    
    void numberobj_32_value_set(number v) {
        this->numberobj_32_value_setter(v);
        v = this->numberobj_32_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-9"), localvalue, this->_currentTime);
        this->numberobj_32_output_set(localvalue);
    }
    
    number param_08_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_07_time_set(number v) {
        this->linetilde_07_time = v;
    }
    
    void linetilde_07_segments_set(const list& v) {
        this->linetilde_07_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_07_time == 0) {
                this->linetilde_07_activeRamps->length = 0;
                this->linetilde_07_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_07_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_07_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_07_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_07_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_07_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_07_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_07_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_07_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_07_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_07_activeRamps->push(lastRampValue);
                    this->linetilde_07_activeRamps->push(0);
                    this->linetilde_07_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_07_keepramp)) {
                            this->linetilde_07_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_07_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_07_activeRamps->push(destinationValue);
                    this->linetilde_07_activeRamps->push(inc);
                    this->linetilde_07_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_34_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_07_segments_set(converted);
        }
    }
    
    void numberobj_34_value_set(number v) {
        this->numberobj_34_value_setter(v);
        v = this->numberobj_34_value;
        number localvalue = v;
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-21"), localvalue, this->_currentTime);
        this->numberobj_34_output_set(localvalue);
    }
    
    void scale_05_out_set(const list& v) {
        this->scale_05_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_34_value_set(converted);
        }
    }
    
    void scale_05_input_set(const list& v) {
        this->scale_05_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_05_inlow,
                this->scale_05_inhigh,
                this->scale_05_outlow,
                this->scale_05_outhigh,
                this->scale_05_power
            ));
        }
    
        this->scale_05_out_set(tmp);
    }
    
    void numberobj_35_output_set(number v) {
        {
            list converted = {v};
            this->scale_05_input_set(converted);
        }
    }
    
    void numberobj_35_value_set(number v) {
        this->numberobj_35_value_setter(v);
        v = this->numberobj_35_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-23"), localvalue, this->_currentTime);
        this->numberobj_35_output_set(localvalue);
    }
    
    number param_09_value_constrain(number v) const {
        v = (v > 100 ? 100 : (v < 0 ? 0 : v));
        return v;
    }
    
    void linetilde_06_time_set(number v) {
        this->linetilde_06_time = v;
    }
    
    void linetilde_06_segments_set(const list& v) {
        this->linetilde_06_segments = jsCreateListCopy(v);
    
        if ((bool)(v->length)) {
            if (v->length == 1 && this->linetilde_06_time == 0) {
                this->linetilde_06_activeRamps->length = 0;
                this->linetilde_06_currentValue = v[0];
            } else {
                auto currentTime = this->currentsampletime();
                number lastRampValue = this->linetilde_06_currentValue;
                number rampEnd = currentTime - this->sampleOffsetIntoNextAudioBuffer;
    
                for (Index i = 0; i < this->linetilde_06_activeRamps->length; i += 3) {
                    rampEnd = this->linetilde_06_activeRamps[(Index)(i + 2)];
    
                    if (rampEnd > currentTime) {
                        this->linetilde_06_activeRamps[(Index)(i + 2)] = currentTime;
                        number diff = rampEnd - currentTime;
                        number valueDiff = diff * this->linetilde_06_activeRamps[(Index)(i + 1)];
                        lastRampValue = this->linetilde_06_activeRamps[(Index)i] - valueDiff;
                        this->linetilde_06_activeRamps[(Index)i] = lastRampValue;
                        this->linetilde_06_activeRamps->length = i + 3;
                        rampEnd = currentTime;
                    } else {
                        lastRampValue = this->linetilde_06_activeRamps[(Index)i];
                    }
                }
    
                if (rampEnd < currentTime) {
                    this->linetilde_06_activeRamps->push(lastRampValue);
                    this->linetilde_06_activeRamps->push(0);
                    this->linetilde_06_activeRamps->push(currentTime);
                }
    
                number lastRampEnd = currentTime;
    
                for (Index i = 0; i < v->length; i += 2) {
                    number destinationValue = v[(Index)i];
                    number inc = 0;
                    number rampTimeInSamples;
    
                    if (v->length > i + 1) {
                        rampTimeInSamples = this->mstosamps(v[(Index)(i + 1)]);
    
                        if ((bool)(this->linetilde_06_keepramp)) {
                            this->linetilde_06_time_set(v[(Index)(i + 1)]);
                        }
                    } else {
                        rampTimeInSamples = this->mstosamps(this->linetilde_06_time);
                    }
    
                    if (rampTimeInSamples <= 0) {
                        rampTimeInSamples = 1;
                    }
    
                    inc = (destinationValue - lastRampValue) / rampTimeInSamples;
                    lastRampEnd += rampTimeInSamples;
                    this->linetilde_06_activeRamps->push(destinationValue);
                    this->linetilde_06_activeRamps->push(inc);
                    this->linetilde_06_activeRamps->push(lastRampEnd);
                    lastRampValue = destinationValue;
                }
            }
        }
    }
    
    void numberobj_36_output_set(number v) {
        {
            list converted = {v};
            this->linetilde_06_segments_set(converted);
        }
    }
    
    void numberobj_36_value_set(number v) {
        this->numberobj_36_value_setter(v);
        v = this->numberobj_36_value;
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-16"), localvalue, this->_currentTime);
        this->numberobj_36_output_set(localvalue);
    }
    
    void expr_14_out1_set(number v) {
        this->expr_14_out1 = v;
        this->numberobj_36_value_set(this->expr_14_out1);
    }
    
    void expr_14_in1_set(number in1) {
        this->expr_14_in1 = in1;
    
        this->expr_14_out1_set(
            (this->expr_14_in2 == 0 ? 0 : (this->expr_14_in2 == 0. ? 0. : this->expr_14_in1 / this->expr_14_in2))
        );//#map:Verb//_obj-17:1
    }
    
    void numberobj_37_output_set(number v) {
        this->expr_14_in1_set(v);
    }
    
    void numberobj_37_value_set(number v) {
        this->numberobj_37_value_setter(v);
        v = this->numberobj_37_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-18"), localvalue, this->_currentTime);
        this->numberobj_37_output_set(localvalue);
    }
    
    number param_10_value_constrain(number v) const {
        v = (v > 1 ? 1 : (v < 0 ? 0 : v));
        return v;
    }
    
    void gate_02_onoff_set(number v) {
        this->gate_02_onoff = v;
    }
    
    void numberobj_26_value_bang() {
        number v = this->numberobj_26_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_26_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-2"), localvalue, this->_currentTime);
        this->numberobj_26_output_set(localvalue);
    }
    
    void loadmess_02_message_bang() {
        list v = this->loadmess_02_message;
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_29_value_set(converted);
        }
    }
    
    void cycle_tilde_06_frequency_set(number v) {
        this->cycle_tilde_06_frequency = v;
    }
    
    void numberobj_33_output_set(number v) {
        this->cycle_tilde_06_frequency_set(v);
    }
    
    void numberobj_33_value_set(number v) {
        this->numberobj_33_value_setter(v);
        v = this->numberobj_33_value;
        number localvalue = v;
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-42"), localvalue, this->_currentTime);
        this->numberobj_33_output_set(localvalue);
    }
    
    void numberobj_35_value_bang() {
        number v = this->numberobj_35_value;
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-23"), localvalue, this->_currentTime);
        this->numberobj_35_output_set(localvalue);
    }
    
    void metro_01_on_set(number v) {
        this->metro_01_on = v;
        this->getEngine()->flushClockEvents(this, 1935387534, false);;
    
        if ((bool)(v)) {
            {
                this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
            }
        }
    }
    
    void toggle_01_output_set(number v) {
        this->metro_01_on_set(v);
    }
    
    void toggle_01_value_number_set(number v) {
        this->toggle_01_value_number_setter(v);
        v = this->toggle_01_value_number;
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/toggle_obj-74"), v, this->_currentTime);
        this->toggle_01_output_set(v);
    }
    
    void toggle_01_value_bang_bang() {
        number val = (this->toggle_01_value_number == 1 ? 0 : 1);
        this->toggle_01_value_number_set(val);
    }
    
    void loadbang_05_output_bang() {
        this->toggle_01_value_bang_bang();
    }
    
    void eventoutlet_12_in1_number_set(number v) {
        this->getPatcher()->updateTime(this->_currentTime);
        this->getPatcher()->p_19_out3_number_set(v);
    }
    
    void gate_02_out1_number_set(number v) {
        this->gate_02_out1_number = v;
        this->numberobj_35_value_set(v);
    }
    
    void gate_02_input_number_set(number v) {
        if (this->gate_02_onoff == 1)
            this->gate_02_out1_number_set(v);
    }
    
    void line_05_output_set(number v) {
        this->line_05_output = v;
        this->eventoutlet_12_in1_number_set(v);
        this->gate_02_input_number_set(v);
    }
    
    number line_05_time_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        return v;
    }
    
    void line_05_time_set(number v) {
        v = this->line_05_time_constrain(v);
        this->line_05_time = v;
    }
    
    void line_05_end_bang() {}
    
    void pack_09_in2_set(number v) {
        this->pack_09_in2 = v;
    }
    
    void message_56_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->pack_09_in2_set(converted);
        }
    }
    
    void message_56_trigger_bang() {
        this->message_56_out_set(this->message_56_set);
    }
    
    void line_05_stop_bang() {
        this->getEngine()->flushClockEvents(this, 848255507, false);;
        this->line_05_pendingRamps->length = 0;
        this->line_05_startValue = this->line_05_output;
        this->line_05_slope = 0;
        this->line_05__time = 0;
        this->line_05_time_set(0);
    }
    
    number line_05_grain_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        return v;
    }
    
    void line_05_grain_set(number v) {
        v = this->line_05_grain_constrain(v);
        this->line_05_grain = v;
    
        if ((bool)(!(bool)(this->line_05_isFinished(this->line_05_startValue)))) {
            this->getEngine()->flushClockEvents(this, 848255507, false);;
            this->line_05_scheduleNext();
        }
    }
    
    void line_05_target_set(const list& v) {
        this->line_05_target = jsCreateListCopy(v);
        this->line_05_pendingRamps->length = 0;
    
        if (v->length == 1) {
            this->line_05__time = this->line_05_time;
            this->line_05_time_set(0);
    
            if ((bool)(this->line_05__time)) {
                this->line_05_startRamp(v[0], this->line_05__time);
            } else {
                this->line_05_output_set(v[0]);
                this->line_05_startValue = v[0];
                this->line_05_stop_bang();
            }
        } else if (v->length == 2) {
            this->line_05_time_set(0);
            this->line_05__time = (v[1] < 0 ? 0 : v[1]);
            this->line_05_startRamp(v[0], this->line_05__time);
        } else if (v->length == 3) {
            this->line_05_time_set(0);
            this->line_05_grain_set(v[2]);
            this->line_05__time = (v[1] < 0 ? 0 : v[1]);
            this->line_05_startRamp(v[0], this->line_05__time);
        } else {
            this->line_05_time_set(0);
            this->line_05_pendingRamps = jsCreateListCopy(v);
            this->line_05_startPendingRamp();
        }
    }
    
    void listjoin_05_out1_set(const list& v) {
        this->line_05_target_set(v);
    }
    
    void listjoin_05_in1_set(const list& _in1) {
        RNBO_UNUSED(_in1);
        list in1 = createListCopy(_in1);
        this->listjoin_05_in1 = jsCreateListCopy(in1);
        auto in2 = this->listjoin_05_in2;
    
        {
            this->listjoin_05_out1_set(in1->concat(in2));
            return;
        }
    }
    
    void pack_09_out_set(const list& v) {
        this->listjoin_05_in1_set(v);
    }
    
    void pack_09_in1_set(number v) {
        this->pack_09_in1 = v;
        list array = list(0, 0);
        array[0] = this->pack_09_in1;
        array[1] = this->pack_09_in2;
        this->pack_09_out_set(array);
    }
    
    void numberobj_38_output_set(number v) {
        this->message_56_trigger_bang();
        this->pack_09_in1_set(v);
    }
    
    void numberobj_38_value_set(number v) {
        this->numberobj_38_value_setter(v);
        v = this->numberobj_38_value;
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-151"), localvalue, this->_currentTime);
        this->numberobj_38_output_set(localvalue);
    }
    
    void message_55_set_set(const list& v) {
        this->message_55_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Verb/message_obj-82"), v, this->_currentTime);
    }
    
    void liststore_06_out3_set(number ) {}
    
    void liststore_06_out1_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_38_value_set(converted);
        }
    }
    
    void liststore_06_out2_bang() {}
    
    void liststore_06_lookupidx_set(number v) {
        this->liststore_06_lookupidx = v;
        list val = this->liststore_06_storage_lookup(v);
        this->liststore_06_out3_set(v);
    
        if ((bool)(val->length)) {
            this->liststore_06_out1_set(this->liststore_06_storage_lookup(v));
        } else {
            this->liststore_06_out2_bang();
        }
    }
    
    void liststore_06_storeidx_set(number v) {
        this->liststore_06_storeidx = v;
    }
    
    void message_55_out_set(const list& v) {
        {
            if (v->length > 2)
                this->liststore_06_storeidx_set(v[2]);
    
            number converted = (v->length > 0 ? v[0] : 0);
            this->liststore_06_lookupidx_set(converted);
        }
    }
    
    void message_55_trigger_bang() {
        this->message_55_out_set(this->message_55_set);
    }
    
    void pack_10_in2_set(number v) {
        this->pack_10_in2 = v;
    }
    
    void message_58_out_set(const list& v) {
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->pack_10_in2_set(converted);
        }
    }
    
    void message_58_trigger_bang() {
        this->message_58_out_set(this->message_58_set);
    }
    
    void listjoin_05_in2_set(const list& v) {
        this->listjoin_05_in2 = jsCreateListCopy(v);
    }
    
    void pack_10_out_set(const list& v) {
        this->listjoin_05_in2_set(v);
    }
    
    void pack_10_in1_set(number v) {
        this->pack_10_in1 = v;
        list array = list(0, 0);
        array[0] = this->pack_10_in1;
        array[1] = this->pack_10_in2;
        this->pack_10_out_set(array);
    }
    
    void numberobj_39_output_set(number v) {
        this->message_58_trigger_bang();
        this->pack_10_in1_set(v);
    }
    
    void numberobj_39_value_set(number v) {
        this->numberobj_39_value_setter(v);
        v = this->numberobj_39_value;
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->getEngine()->sendNumMessage(TAG("valout"), TAG("Verb/number_obj-147"), localvalue, this->_currentTime);
        this->numberobj_39_output_set(localvalue);
    }
    
    void liststore_06_storelist_set(const list& v) {
        this->liststore_06_storelist = jsCreateListCopy(v);
        this->liststore_06_storage_store(this->liststore_06_storeidx, v);
    }
    
    void trigger_06_out3_set(const list& v) {
        this->liststore_06_storelist_set(v);
    }
    
    void counter_03_output_set(number v) {
        this->counter_03_output = v;
        this->liststore_06_storeidx_set(v);
    
        {
            list converted = {v};
            this->message_55_set_set(converted);
        }
    }
    
    void counter_03_overflow_bang_bang() {}
    
    number counter_03_overflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_03_overflow_number_set(number v) {
        v = this->counter_03_overflow_number_constrain(v);
        this->counter_03_overflow_number = v;
    }
    
    void counter_03_carry_set(number v) {
        this->counter_03_carry = v;
    }
    
    void counter_03_underflow_bang_bang() {}
    
    number counter_03_underflow_number_constrain(number v) const {
        if (v < 0)
            v = 0;
    
        if (v > 1)
            v = 1;
    
        return v;
    }
    
    void counter_03_underflow_number_set(number v) {
        v = this->counter_03_underflow_number_constrain(v);
        this->counter_03_underflow_number = v;
    }
    
    void counter_03_input_bang() {
        this->counter_03_output_set(this->counter_03_count);
        this->counter_03_inc();
    
        if (this->counter_03_count > this->counter_03_maximum) {
            if (this->counter_03_direction == 2) {
                this->counter_03_phase = !(bool)(this->counter_03_phase);
                this->counter_03_count = this->counter_03_maximum;
                this->counter_03_inc();
            } else
                this->counter_03_count = this->counter_03_minimum;
    
            if ((bool)(!(bool)(this->counter_03_overflow_number))) {
                if (this->counter_03_carryflag == 1)
                    this->counter_03_overflow_bang_bang();
                else
                    this->counter_03_overflow_number_set(1);
            }
    
            this->counter_03_carry_set(this->counter_03_carry + 1);
        } else if ((bool)(this->counter_03_overflow_number) && this->counter_03_carryflag == 0)
            this->counter_03_overflow_number_set(0);
    
        if (this->counter_03_count < this->counter_03_minimum) {
            if (this->counter_03_direction == 2) {
                this->counter_03_phase = !(bool)(this->counter_03_phase);
                this->counter_03_count = this->counter_03_minimum;
                this->counter_03_inc();
            } else
                this->counter_03_count = this->counter_03_maximum;
    
            if ((bool)(!(bool)(this->counter_03_underflow_number))) {
                if (this->counter_03_carryflag == 1)
                    this->counter_03_underflow_bang_bang();
                else
                    this->counter_03_underflow_number_set(1);
            }
    
            this->counter_03_carry_set(this->counter_03_carry + 1);
        } else if ((bool)(this->counter_03_underflow_number) && this->counter_03_carryflag == 0)
            this->counter_03_underflow_number_set(0);
    }
    
    void trigger_06_out2_bang() {
        this->counter_03_input_bang();
    }
    
    void trigger_06_out1_bang() {
        this->message_55_trigger_bang();
    }
    
    void trigger_06_input_list_set(const list& v) {
        this->trigger_06_out3_set(v);
        this->trigger_06_out2_bang();
        this->trigger_06_out1_bang();
    }
    
    void scale_06_out_set(const list& v) {
        this->scale_06_out = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_39_value_set(converted);
        }
    
        this->trigger_06_input_list_set(v);
    }
    
    void scale_06_input_set(const list& v) {
        this->scale_06_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_06_inlow,
                this->scale_06_inhigh,
                this->scale_06_outlow,
                this->scale_06_outhigh,
                this->scale_06_power
            ));
        }
    
        this->scale_06_out_set(tmp);
    }
    
    void drunk_01_out_set(number v) {
        this->drunk_01_out = v;
    
        {
            list converted = {v};
            this->scale_06_input_set(converted);
        }
    }
    
    void drunk_01_trigger_bang_bang() {
        {
            this->drunk_01_lastValue = this->drunk_01_getDoubleRandom();
        }
    
        this->drunk_01_out_set(this->drunk_01_lastValue);
    }
    
    void metro_01_tickout_bang() {
        this->drunk_01_trigger_bang_bang();
    }
    
    void message_56_set_set(const list& v) {
        this->message_56_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Verb/message_obj-80"), v, this->_currentTime);
    }
    
    void message_57_set_set(const list& v) {
        this->message_57_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Verb/message_obj-155"), v, this->_currentTime);
    }
    
    void message_57_out_set(const list& ) {}
    
    void message_57_trigger_bang() {
        this->message_57_out_set(this->message_57_set);
    }
    
    void button_13_output_bang() {
        this->drunk_01_trigger_bang_bang();
    }
    
    void button_13_bangval_bang() {
        this->getEngine()->sendBangMessage(TAG("bangout"), TAG("Verb/button_obj-76"), this->_currentTime);;
        this->button_13_output_bang();
    }
    
    void message_58_set_set(const list& v) {
        this->message_58_set = jsCreateListCopy(v);
        this->getEngine()->sendListMessage(TAG("listout"), TAG("Verb/message_obj-148"), v, this->_currentTime);
    }
    
    void ctlin_01_outchannel_set(number ) {}
    
    void ctlin_01_outcontroller_set(number ) {}
    
    void fromnormalized_01_output_set(number v) {
        this->param_03_value_set(v);
    }
    
    void fromnormalized_01_input_set(number v) {
        this->fromnormalized_01_output_set(this->fromnormalized(0, v));
    }
    
    void expr_08_out1_set(number v) {
        this->expr_08_out1 = v;
        this->fromnormalized_01_input_set(this->expr_08_out1);
    }
    
    void expr_08_in1_set(number in1) {
        this->expr_08_in1 = in1;
        this->expr_08_out1_set(this->expr_08_in1 * this->expr_08_in2);//#map:expr_08:1
    }
    
    void ctlin_01_value_set(number v) {
        this->expr_08_in1_set(v);
    }
    
    void ctlin_01_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_01_channel || this->ctlin_01_channel == -1) && (data[1] == this->ctlin_01_controller || this->ctlin_01_controller == -1)) {
            this->ctlin_01_outchannel_set(channel);
            this->ctlin_01_outcontroller_set(data[1]);
            this->ctlin_01_value_set(data[2]);
            this->ctlin_01_status = 0;
        }
    }
    
    void ctlin_02_outchannel_set(number ) {}
    
    void ctlin_02_outcontroller_set(number ) {}
    
    void fromnormalized_02_output_set(number v) {
        this->param_05_value_set(v);
    }
    
    void fromnormalized_02_input_set(number v) {
        this->fromnormalized_02_output_set(this->fromnormalized(2, v));
    }
    
    void expr_10_out1_set(number v) {
        this->expr_10_out1 = v;
        this->fromnormalized_02_input_set(this->expr_10_out1);
    }
    
    void expr_10_in1_set(number in1) {
        this->expr_10_in1 = in1;
        this->expr_10_out1_set(this->expr_10_in1 * this->expr_10_in2);//#map:expr_10:1
    }
    
    void ctlin_02_value_set(number v) {
        this->expr_10_in1_set(v);
    }
    
    void ctlin_02_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_02_channel || this->ctlin_02_channel == -1) && (data[1] == this->ctlin_02_controller || this->ctlin_02_controller == -1)) {
            this->ctlin_02_outchannel_set(channel);
            this->ctlin_02_outcontroller_set(data[1]);
            this->ctlin_02_value_set(data[2]);
            this->ctlin_02_status = 0;
        }
    }
    
    void ctlin_03_outchannel_set(number ) {}
    
    void ctlin_03_outcontroller_set(number ) {}
    
    void fromnormalized_03_output_set(number v) {
        this->param_06_value_set(v);
    }
    
    void fromnormalized_03_input_set(number v) {
        this->fromnormalized_03_output_set(this->fromnormalized(3, v));
    }
    
    void expr_11_out1_set(number v) {
        this->expr_11_out1 = v;
        this->fromnormalized_03_input_set(this->expr_11_out1);
    }
    
    void expr_11_in1_set(number in1) {
        this->expr_11_in1 = in1;
        this->expr_11_out1_set(this->expr_11_in1 * this->expr_11_in2);//#map:expr_11:1
    }
    
    void ctlin_03_value_set(number v) {
        this->expr_11_in1_set(v);
    }
    
    void ctlin_03_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_03_channel || this->ctlin_03_channel == -1) && (data[1] == this->ctlin_03_controller || this->ctlin_03_controller == -1)) {
            this->ctlin_03_outchannel_set(channel);
            this->ctlin_03_outcontroller_set(data[1]);
            this->ctlin_03_value_set(data[2]);
            this->ctlin_03_status = 0;
        }
    }
    
    void ctlin_04_outchannel_set(number ) {}
    
    void ctlin_04_outcontroller_set(number ) {}
    
    void fromnormalized_04_output_set(number v) {
        this->param_07_value_set(v);
    }
    
    void fromnormalized_04_input_set(number v) {
        this->fromnormalized_04_output_set(this->fromnormalized(4, v));
    }
    
    void expr_12_out1_set(number v) {
        this->expr_12_out1 = v;
        this->fromnormalized_04_input_set(this->expr_12_out1);
    }
    
    void expr_12_in1_set(number in1) {
        this->expr_12_in1 = in1;
        this->expr_12_out1_set(this->expr_12_in1 * this->expr_12_in2);//#map:expr_12:1
    }
    
    void ctlin_04_value_set(number v) {
        this->expr_12_in1_set(v);
    }
    
    void ctlin_04_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_04_channel || this->ctlin_04_channel == -1) && (data[1] == this->ctlin_04_controller || this->ctlin_04_controller == -1)) {
            this->ctlin_04_outchannel_set(channel);
            this->ctlin_04_outcontroller_set(data[1]);
            this->ctlin_04_value_set(data[2]);
            this->ctlin_04_status = 0;
        }
    }
    
    void ctlin_05_outchannel_set(number ) {}
    
    void ctlin_05_outcontroller_set(number ) {}
    
    void fromnormalized_05_output_set(number v) {
        this->param_08_value_set(v);
    }
    
    void fromnormalized_05_input_set(number v) {
        this->fromnormalized_05_output_set(this->fromnormalized(5, v));
    }
    
    void expr_13_out1_set(number v) {
        this->expr_13_out1 = v;
        this->fromnormalized_05_input_set(this->expr_13_out1);
    }
    
    void expr_13_in1_set(number in1) {
        this->expr_13_in1 = in1;
        this->expr_13_out1_set(this->expr_13_in1 * this->expr_13_in2);//#map:expr_13:1
    }
    
    void ctlin_05_value_set(number v) {
        this->expr_13_in1_set(v);
    }
    
    void ctlin_05_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_05_channel || this->ctlin_05_channel == -1) && (data[1] == this->ctlin_05_controller || this->ctlin_05_controller == -1)) {
            this->ctlin_05_outchannel_set(channel);
            this->ctlin_05_outcontroller_set(data[1]);
            this->ctlin_05_value_set(data[2]);
            this->ctlin_05_status = 0;
        }
    }
    
    void ctlin_06_outchannel_set(number ) {}
    
    void ctlin_06_outcontroller_set(number ) {}
    
    void fromnormalized_06_output_set(number v) {
        this->param_09_value_set(v);
    }
    
    void fromnormalized_06_input_set(number v) {
        this->fromnormalized_06_output_set(this->fromnormalized(6, v));
    }
    
    void expr_15_out1_set(number v) {
        this->expr_15_out1 = v;
        this->fromnormalized_06_input_set(this->expr_15_out1);
    }
    
    void expr_15_in1_set(number in1) {
        this->expr_15_in1 = in1;
        this->expr_15_out1_set(this->expr_15_in1 * this->expr_15_in2);//#map:expr_15:1
    }
    
    void ctlin_06_value_set(number v) {
        this->expr_15_in1_set(v);
    }
    
    void ctlin_06_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
        RNBO_UNUSED(length);
        RNBO_UNUSED(port);
    
        if (status == 0xB0 && (channel == this->ctlin_06_channel || this->ctlin_06_channel == -1) && (data[1] == this->ctlin_06_controller || this->ctlin_06_controller == -1)) {
            this->ctlin_06_outchannel_set(channel);
            this->ctlin_06_outcontroller_set(data[1]);
            this->ctlin_06_value_set(data[2]);
            this->ctlin_06_status = 0;
        }
    }
    
    void linetilde_02_perform(SampleValue * out, Index n) {
        auto __linetilde_02_time = this->linetilde_02_time;
        auto __linetilde_02_keepramp = this->linetilde_02_keepramp;
        auto __linetilde_02_currentValue = this->linetilde_02_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_02_activeRamps->length)) {
            while ((bool)(this->linetilde_02_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_02_activeRamps[0];
                number inc = this->linetilde_02_activeRamps[1];
                number rampTimeInSamples = this->linetilde_02_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_02_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_02_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_02_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -444440180,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_02_keepramp))) {
                            __linetilde_02_time = 0;
                        }
                    }
                }
    
                __linetilde_02_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_02_currentValue;
            i++;
        }
    
        this->linetilde_02_currentValue = __linetilde_02_currentValue;
        this->linetilde_02_time = __linetilde_02_time;
    }
    
    void signalsend_01_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_01_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void linetilde_03_perform(SampleValue * out, Index n) {
        auto __linetilde_03_time = this->linetilde_03_time;
        auto __linetilde_03_keepramp = this->linetilde_03_keepramp;
        auto __linetilde_03_currentValue = this->linetilde_03_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_03_activeRamps->length)) {
            while ((bool)(this->linetilde_03_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_03_activeRamps[0];
                number inc = this->linetilde_03_activeRamps[1];
                number rampTimeInSamples = this->linetilde_03_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_03_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_03_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_03_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -62043057,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_03_keepramp))) {
                            __linetilde_03_time = 0;
                        }
                    }
                }
    
                __linetilde_03_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_03_currentValue;
            i++;
        }
    
        this->linetilde_03_currentValue = __linetilde_03_currentValue;
        this->linetilde_03_time = __linetilde_03_time;
    }
    
    void linetilde_04_perform(SampleValue * out, Index n) {
        auto __linetilde_04_time = this->linetilde_04_time;
        auto __linetilde_04_keepramp = this->linetilde_04_keepramp;
        auto __linetilde_04_currentValue = this->linetilde_04_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_04_activeRamps->length)) {
            while ((bool)(this->linetilde_04_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_04_activeRamps[0];
                number inc = this->linetilde_04_activeRamps[1];
                number rampTimeInSamples = this->linetilde_04_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_04_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_04_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_04_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -1621164530,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_04_keepramp))) {
                            __linetilde_04_time = 0;
                        }
                    }
                }
    
                __linetilde_04_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_04_currentValue;
            i++;
        }
    
        this->linetilde_04_currentValue = __linetilde_04_currentValue;
        this->linetilde_04_time = __linetilde_04_time;
    }
    
    void signalsend_02_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_02_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void linetilde_05_perform(SampleValue * out, Index n) {
        auto __linetilde_05_time = this->linetilde_05_time;
        auto __linetilde_05_keepramp = this->linetilde_05_keepramp;
        auto __linetilde_05_currentValue = this->linetilde_05_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_05_activeRamps->length)) {
            while ((bool)(this->linetilde_05_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_05_activeRamps[0];
                number inc = this->linetilde_05_activeRamps[1];
                number rampTimeInSamples = this->linetilde_05_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_05_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_05_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_05_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            732284170,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_05_keepramp))) {
                            __linetilde_05_time = 0;
                        }
                    }
                }
    
                __linetilde_05_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_05_currentValue;
            i++;
        }
    
        this->linetilde_05_currentValue = __linetilde_05_currentValue;
        this->linetilde_05_time = __linetilde_05_time;
    }
    
    void signalsend_03_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_03_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void cycle_tilde_06_perform(
        number frequency,
        number phase_offset,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        RNBO_UNUSED(phase_offset);
        auto __cycle_tilde_06_f2i = this->cycle_tilde_06_f2i;
        auto __cycle_tilde_06_buffer = this->cycle_tilde_06_buffer;
        auto __cycle_tilde_06_phasei = this->cycle_tilde_06_phasei;
        Index i;
    
        for (i = 0; i < n; i++) {
            {
                uint32_t uint_phase;
    
                {
                    {
                        uint_phase = __cycle_tilde_06_phasei;
                    }
                }
    
                uint32_t idx = (uint32_t)(uint32_rshift(uint_phase, 18));
                number frac = ((BinOpInt)((BinOpInt)uint_phase & (BinOpInt)262143)) * 3.81471181759574e-6;
                number y0 = __cycle_tilde_06_buffer[(Index)idx];
                number y1 = __cycle_tilde_06_buffer[(Index)((BinOpInt)(idx + 1) & (BinOpInt)16383)];
                number y = y0 + frac * (y1 - y0);
    
                {
                    uint32_t pincr = (uint32_t)(uint32_trunc(frequency * __cycle_tilde_06_f2i));
                    __cycle_tilde_06_phasei = uint32_add(__cycle_tilde_06_phasei, pincr);
                }
    
                out1[(Index)i] = y;
                out2[(Index)i] = uint_phase * 0.232830643653869629e-9;
                continue;
            }
        }
    
        this->cycle_tilde_06_phasei = __cycle_tilde_06_phasei;
    }
    
    void scopetilde_01_perform(const SampleValue * x, const SampleValue * y, Index n) {
        auto __scopetilde_01_ysign = this->scopetilde_01_ysign;
        auto __scopetilde_01_ymonitorvalue = this->scopetilde_01_ymonitorvalue;
        auto __scopetilde_01_xsign = this->scopetilde_01_xsign;
        auto __scopetilde_01_xmonitorvalue = this->scopetilde_01_xmonitorvalue;
        auto __scopetilde_01_mode = this->scopetilde_01_mode;
    
        for (Index i = 0; i < n; i++) {
            number xval = x[(Index)i];
            number yval = y[(Index)i];
    
            if (__scopetilde_01_mode == 1) {
                number xabsval = rnbo_abs(xval);
    
                if (xabsval > __scopetilde_01_xmonitorvalue) {
                    __scopetilde_01_xmonitorvalue = xabsval;
                    __scopetilde_01_xsign = (xval < 0 ? -1 : 1);
                }
    
                number yabsval = rnbo_abs(yval);
    
                if (yabsval > __scopetilde_01_ymonitorvalue) {
                    __scopetilde_01_ymonitorvalue = yabsval;
                    __scopetilde_01_ysign = (yval < 0 ? -1 : 1);
                }
            } else {
                __scopetilde_01_xmonitorvalue = xval;
                __scopetilde_01_xsign = 1;
                __scopetilde_01_ymonitorvalue = yval;
                __scopetilde_01_ysign = 1;
            }
    
            this->scopetilde_01_effectiveCount--;
    
            if (this->scopetilde_01_effectiveCount <= 0) {
                this->scopetilde_01_updateEffectiveCount();
                this->scopetilde_01_monitorbuffer->push(__scopetilde_01_xmonitorvalue * __scopetilde_01_xsign);
    
                if (__scopetilde_01_mode == 1)
                    __scopetilde_01_xmonitorvalue = 0;
    
                if (this->scopetilde_01_monitorbuffer->length >= 128 * (1 + 0)) {
                    this->getEngine()->sendListMessage(
                        TAG("monitor"),
                        TAG("Verb/scope~_obj-40"),
                        this->scopetilde_01_monitorbuffer,
                        this->_currentTime
                    );;
    
                    this->scopetilde_01_monitorbuffer->length = 0;
                }
            }
        }
    
        this->scopetilde_01_xmonitorvalue = __scopetilde_01_xmonitorvalue;
        this->scopetilde_01_xsign = __scopetilde_01_xsign;
        this->scopetilde_01_ymonitorvalue = __scopetilde_01_ymonitorvalue;
        this->scopetilde_01_ysign = __scopetilde_01_ysign;
    }
    
    void gate_01_out1_list_set(const list& v) {
        this->gate_01_out1_list = jsCreateListCopy(v);
    
        {
            number converted = (v->length > 0 ? v[0] : 0);
            this->numberobj_26_value_set(converted);
        }
    }
    
    void gate_01_input_list_set(const list& v) {
        if (this->gate_01_onoff == 1)
            this->gate_01_out1_list_set(v);
    }
    
    void scale_04_out_set(const list& v) {
        this->scale_04_out = jsCreateListCopy(v);
        this->gate_01_input_list_set(v);
    }
    
    void scale_04_input_set(const list& v) {
        this->scale_04_input = jsCreateListCopy(v);
        list tmp = {};
    
        for (Index i = 0; i < v->length; i++) {
            tmp->push(this->scale(
                v[(Index)i],
                this->scale_04_inlow,
                this->scale_04_inhigh,
                this->scale_04_outlow,
                this->scale_04_outhigh,
                this->scale_04_power
            ));
        }
    
        this->scale_04_out_set(tmp);
    }
    
    void numbertilde_07_perform(const SampleValue * input_signal, SampleValue * output, Index n) {
        auto __numbertilde_07_currentIntervalInSamples = this->numbertilde_07_currentIntervalInSamples;
        auto __numbertilde_07_lastValue = this->numbertilde_07_lastValue;
        auto __numbertilde_07_currentInterval = this->numbertilde_07_currentInterval;
        auto __numbertilde_07_rampInSamples = this->numbertilde_07_rampInSamples;
        auto __numbertilde_07_outValue = this->numbertilde_07_outValue;
        auto __numbertilde_07_currentMode = this->numbertilde_07_currentMode;
        number monitorvalue = input_signal[0];
    
        for (Index i = 0; i < n; i++) {
            if (__numbertilde_07_currentMode == 0) {
                output[(Index)i] = this->numbertilde_07_smooth_next(
                    __numbertilde_07_outValue,
                    __numbertilde_07_rampInSamples,
                    __numbertilde_07_rampInSamples
                );
            } else {
                output[(Index)i] = input_signal[(Index)i];
            }
        }
    
        __numbertilde_07_currentInterval -= n;
    
        if (monitorvalue != __numbertilde_07_lastValue && __numbertilde_07_currentInterval <= 0) {
            __numbertilde_07_currentInterval = __numbertilde_07_currentIntervalInSamples;
    
            this->getEngine()->scheduleClockEventWithValue(
                this,
                -1494586265,
                this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                monitorvalue
            );;
    
            __numbertilde_07_lastValue = monitorvalue;
    
            this->getEngine()->sendListMessage(
                TAG("monitor"),
                TAG("Verb/number~_obj-38"),
                {monitorvalue},
                this->_currentTime
            );;
        }
    
        this->numbertilde_07_currentInterval = __numbertilde_07_currentInterval;
        this->numbertilde_07_lastValue = __numbertilde_07_lastValue;
    }
    
    void linetilde_06_perform(SampleValue * out, Index n) {
        auto __linetilde_06_time = this->linetilde_06_time;
        auto __linetilde_06_keepramp = this->linetilde_06_keepramp;
        auto __linetilde_06_currentValue = this->linetilde_06_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_06_activeRamps->length)) {
            while ((bool)(this->linetilde_06_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_06_activeRamps[0];
                number inc = this->linetilde_06_activeRamps[1];
                number rampTimeInSamples = this->linetilde_06_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_06_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_06_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_06_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            1114681293,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_06_keepramp))) {
                            __linetilde_06_time = 0;
                        }
                    }
                }
    
                __linetilde_06_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_06_currentValue;
            i++;
        }
    
        this->linetilde_06_currentValue = __linetilde_06_currentValue;
        this->linetilde_06_time = __linetilde_06_time;
    }
    
    void signalsend_04_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_04_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void linetilde_07_perform(SampleValue * out, Index n) {
        auto __linetilde_07_time = this->linetilde_07_time;
        auto __linetilde_07_keepramp = this->linetilde_07_keepramp;
        auto __linetilde_07_currentValue = this->linetilde_07_currentValue;
        Index i = 0;
    
        if ((bool)(this->linetilde_07_activeRamps->length)) {
            while ((bool)(this->linetilde_07_activeRamps->length) && i < n) {
                number destinationValue = this->linetilde_07_activeRamps[0];
                number inc = this->linetilde_07_activeRamps[1];
                number rampTimeInSamples = this->linetilde_07_activeRamps[2] - this->audioProcessSampleCount - i;
                number val = __linetilde_07_currentValue;
    
                while (rampTimeInSamples > 0 && i < n) {
                    out[(Index)i] = val;
                    val += inc;
                    i++;
                    rampTimeInSamples--;
                }
    
                if (rampTimeInSamples <= 0) {
                    val = destinationValue;
                    this->linetilde_07_activeRamps->splice(0, 3);
    
                    if ((bool)(!(bool)(this->linetilde_07_activeRamps->length))) {
                        this->getEngine()->scheduleClockEventWithValue(
                            this,
                            -2003561653,
                            this->sampsToMs((SampleIndex)(this->vs)) + this->_currentTime,
                            0
                        );;
    
                        if ((bool)(!(bool)(__linetilde_07_keepramp))) {
                            __linetilde_07_time = 0;
                        }
                    }
                }
    
                __linetilde_07_currentValue = val;
            }
        }
    
        while (i < n) {
            out[(Index)i] = __linetilde_07_currentValue;
            i++;
        }
    
        this->linetilde_07_currentValue = __linetilde_07_currentValue;
        this->linetilde_07_time = __linetilde_07_time;
    }
    
    void signalsend_05_perform(const SampleValue * input, SampleValue * send, Index n) {
        for (Index i = 0; i < n; i++) {
            send[(Index)i] = input[(Index)i];
        }
    }
    
    void signalforwarder_05_perform(const SampleValue * input, SampleValue * output, Index n) {
        for (Index i = 0; i < n; i++) {
            output[(Index)i] = input[(Index)i];
        }
    }
    
    void stackprotect_perform(Index n) {
        RNBO_UNUSED(n);
        auto __stackprotect_count = this->stackprotect_count;
        __stackprotect_count = 0;
        this->stackprotect_count = __stackprotect_count;
    }
    
    void signaladder_02_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_14_perform(
        const SampleValue * target_Damp,
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Damp~
        ConstSampleArray<3> ins = {in1, in2, target_Damp};
    
        SampleArray<2> outs = {out1, out2};
        this->p_14->process(ins, 3, outs, 2, n);
    }
    
    void p_11_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Blur~
        ConstSampleArray<2> ins = {in1, in2};
    
        SampleArray<2> outs = {out1, out2};
        this->p_11->process(ins, 2, outs, 2, n);
    }
    
    void signaladder_03_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_04_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_05_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_06_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_13_perform(
        const SampleValue * target_Size,
        const SampleValue * target_Decay,
        const SampleValue * target_Jitter,
        const SampleValue * target_Damp,
        const SampleValue * in1,
        SampleValue * out1,
        SampleValue * out2,
        SampleValue * out3,
        SampleValue * out4,
        Index n
    ) {
        // subpatcher: RoomA~
        ConstSampleArray<5> ins = {in1, target_Size, target_Decay, target_Jitter, target_Damp};
    
        SampleArray<4> outs = {out1, out2, out3, out4};
        this->p_13->process(ins, 5, outs, 4, n);
    }
    
    void signaladder_07_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_08_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_09_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_10_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_15_perform(
        const SampleValue * target_Size,
        const SampleValue * target_Decay,
        const SampleValue * target_Jitter,
        const SampleValue * target_Damp,
        const SampleValue * in1,
        SampleValue * out1,
        SampleValue * out2,
        SampleValue * out3,
        SampleValue * out4,
        Index n
    ) {
        // subpatcher: RoomB~
        ConstSampleArray<5> ins = {in1, target_Size, target_Decay, target_Jitter, target_Damp};
    
        SampleArray<4> outs = {out1, out2, out3, out4};
        this->p_15->process(ins, 5, outs, 4, n);
    }
    
    void p_10_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        const SampleValue * in7,
        const SampleValue * in8,
        SampleValue * out1,
        SampleValue * out2,
        SampleValue * out3,
        SampleValue * out4,
        SampleValue * out5,
        SampleValue * out6,
        SampleValue * out7,
        SampleValue * out8,
        SampleValue * out9,
        SampleValue * out10,
        SampleValue * out11,
        SampleValue * out12,
        SampleValue * out13,
        SampleValue * out14,
        Index n
    ) {
        // subpatcher: Shuffle~
        ConstSampleArray<8> ins = {in1, in2, in3, in4, in5, in6, in7, in8};
    
        SampleArray<14> outs = {
            out1,
            out2,
            out3,
            out4,
            out5,
            out6,
            out7,
            out8,
            out9,
            out10,
            out11,
            out12,
            out13,
            out14
        };
    
        this->p_10->process(ins, 8, outs, 14, n);
    }
    
    void signaladder_11_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_12_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_12_perform(
        const SampleValue * target_Size,
        const SampleValue * target_Diff,
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        const SampleValue * in7,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: CombL~
        ConstSampleArray<9> ins = {in1, in2, in3, in4, in5, in6, in7, target_Size, target_Diff};
    
        SampleArray<1> outs = {out1};
        this->p_12->process(ins, 9, outs, 1, n);
    }
    
    void signaladder_13_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void signaladder_14_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        SampleValue * out,
        Index n
    ) {
        Index i;
    
        for (i = 0; i < n; i++) {
            out[(Index)i] = in1[(Index)i] + in2[(Index)i];
        }
    }
    
    void p_16_perform(
        const SampleValue * target_Size,
        const SampleValue * target_Diff,
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        const SampleValue * in6,
        const SampleValue * in7,
        SampleValue * out1,
        Index n
    ) {
        // subpatcher: CombR~
        ConstSampleArray<9> ins = {in1, in2, in3, in4, in5, in6, in7, target_Size, target_Diff};
    
        SampleArray<1> outs = {out1};
        this->p_16->process(ins, 9, outs, 1, n);
    }
    
    void p_09_perform(
        const SampleValue * in1,
        const SampleValue * in2,
        const SampleValue * in3,
        const SampleValue * in4,
        const SampleValue * in5,
        SampleValue * out1,
        SampleValue * out2,
        Index n
    ) {
        // subpatcher: Mix~
        ConstSampleArray<5> ins = {in1, in2, in3, in4, in5};
    
        SampleArray<2> outs = {out1, out2};
        this->p_09->process(ins, 5, outs, 2, n);
    }
    
    void numberobj_25_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_25_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_25_value = localvalue;
    }
    
    void numberobj_26_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_26_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_26_value = localvalue;
    }
    
    void numberobj_27_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_27_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_27_value = localvalue;
    }
    
    void numberobj_28_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_28_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_28_value = localvalue;
    }
    
    void numberobj_29_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_29_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_29_value = localvalue;
    }
    
    void numberobj_30_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_30_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_30_value = localvalue;
    }
    
    void numberobj_31_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_31_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_31_value = localvalue;
    }
    
    void numberobj_32_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_32_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_32_value = localvalue;
    }
    
    void numberobj_33_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_33_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_33_value = localvalue;
    }
    
    void numberobj_34_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_34_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_34_value = localvalue;
    }
    
    void numberobj_35_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_35_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_35_value = localvalue;
    }
    
    void numberobj_36_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_36_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_36_value = localvalue;
    }
    
    void numberobj_37_value_setter(number v) {
        number localvalue = v;
    
        if ((bool)(true) && localvalue < 0) {
            localvalue = 0;
        }
    
        if ((bool)(true) && localvalue > 100) {
            localvalue = 100;
        }
    
        if (this->numberobj_37_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_37_value = localvalue;
    }
    
    void numberobj_38_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_38_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_38_value = localvalue;
    }
    
    void toggle_01_value_number_setter(number v) {
        this->toggle_01_value_number = (v != 0 ? 1 : 0);
    }
    
    void drunk_01_size_setter(number v) {
        this->drunk_01_size = this->maximum(rnbo_floor(v), 1);
    }
    
    void drunk_01_stepsize_setter(number v) {
        this->drunk_01_stepsize = this->maximum(v, 1);
    }
    
    void metro_01_interval_setter(number v) {
        this->metro_01_interval = (v > 0 ? v : 0);
    }
    
    void numberobj_39_value_setter(number v) {
        number localvalue = v;
    
        if (this->numberobj_39_currentFormat != 6) {
            localvalue = trunc(localvalue);
        }
    
        this->numberobj_39_value = localvalue;
    }
    
    void numberobj_25_init() {
        this->numberobj_25_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-26"), 1, this->_currentTime);
    }
    
    void numberobj_25_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_25_value;
    }
    
    void numberobj_25_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_25_value_set(preset["value"]);
    }
    
    void numberobj_26_init() {
        this->numberobj_26_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-2"), 1, this->_currentTime);
    }
    
    void numberobj_26_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_26_value;
    }
    
    void numberobj_26_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_26_value_set(preset["value"]);
    }
    
    void param_03_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_03_value;
    }
    
    void param_03_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_03_value_set(preset["value"]);
    }
    
    void param_04_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_04_value;
    }
    
    void param_04_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_04_value_set(preset["value"]);
    }
    
    void numberobj_27_init() {
        this->numberobj_27_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-119"), 1, this->_currentTime);
    }
    
    void numberobj_27_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_27_value;
    }
    
    void numberobj_27_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_27_value_set(preset["value"]);
    }
    
    void numberobj_28_init() {
        this->numberobj_28_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-67"), 1, this->_currentTime);
    }
    
    void numberobj_28_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_28_value;
    }
    
    void numberobj_28_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_28_value_set(preset["value"]);
    }
    
    void numberobj_29_init() {
        this->numberobj_29_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-3"), 1, this->_currentTime);
    }
    
    void numberobj_29_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_29_value;
    }
    
    void numberobj_29_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_29_value_set(preset["value"]);
    }
    
    void param_05_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_05_value;
    }
    
    void param_05_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_05_value_set(preset["value"]);
    }
    
    void numberobj_30_init() {
        this->numberobj_30_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-54"), 1, this->_currentTime);
    }
    
    void numberobj_30_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_30_value;
    }
    
    void numberobj_30_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_30_value_set(preset["value"]);
    }
    
    void param_06_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_06_value;
    }
    
    void param_06_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_06_value_set(preset["value"]);
    }
    
    void numberobj_31_init() {
        this->numberobj_31_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-97"), 1, this->_currentTime);
    }
    
    void numberobj_31_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_31_value;
    }
    
    void numberobj_31_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_31_value_set(preset["value"]);
    }
    
    void numberobj_32_init() {
        this->numberobj_32_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-9"), 1, this->_currentTime);
    }
    
    void numberobj_32_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_32_value;
    }
    
    void numberobj_32_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_32_value_set(preset["value"]);
    }
    
    void param_07_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_07_value;
    }
    
    void param_07_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_07_value_set(preset["value"]);
    }
    
    number numbertilde_07_smooth_d_next(number x) {
        number temp = (number)(x - this->numbertilde_07_smooth_d_prev);
        this->numbertilde_07_smooth_d_prev = x;
        return temp;
    }
    
    void numbertilde_07_smooth_d_dspsetup() {
        this->numbertilde_07_smooth_d_reset();
    }
    
    void numbertilde_07_smooth_d_reset() {
        this->numbertilde_07_smooth_d_prev = 0;
    }
    
    number numbertilde_07_smooth_next(number x, number up, number down) {
        if (this->numbertilde_07_smooth_d_next(x) != 0.) {
            if (x > this->numbertilde_07_smooth_prev) {
                number _up = up;
    
                if (_up < 1)
                    _up = 1;
    
                this->numbertilde_07_smooth_index = _up;
                this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _up;
            } else if (x < this->numbertilde_07_smooth_prev) {
                number _down = down;
    
                if (_down < 1)
                    _down = 1;
    
                this->numbertilde_07_smooth_index = _down;
                this->numbertilde_07_smooth_increment = (x - this->numbertilde_07_smooth_prev) / _down;
            }
        }
    
        if (this->numbertilde_07_smooth_index > 0) {
            this->numbertilde_07_smooth_prev += this->numbertilde_07_smooth_increment;
            this->numbertilde_07_smooth_index -= 1;
        } else {
            this->numbertilde_07_smooth_prev = x;
        }
    
        return this->numbertilde_07_smooth_prev;
    }
    
    void numbertilde_07_smooth_reset() {
        this->numbertilde_07_smooth_prev = 0;
        this->numbertilde_07_smooth_index = 0;
        this->numbertilde_07_smooth_increment = 0;
        this->numbertilde_07_smooth_d_reset();
    }
    
    void numbertilde_07_init() {
        this->numbertilde_07_currentMode = 1;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number~_obj-38"), 1, this->_currentTime);
    }
    
    void numbertilde_07_dspsetup(bool force) {
        if ((bool)(this->numbertilde_07_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->numbertilde_07_currentIntervalInSamples = this->mstosamps(100);
        this->numbertilde_07_currentInterval = this->numbertilde_07_currentIntervalInSamples;
        this->numbertilde_07_rampInSamples = this->mstosamps(this->numbertilde_07_ramp);
        this->numbertilde_07_setupDone = true;
        this->numbertilde_07_smooth_d_dspsetup();
    }
    
    void numberobj_33_init() {
        this->numberobj_33_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-42"), 1, this->_currentTime);
    }
    
    void numberobj_33_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_33_value;
    }
    
    void numberobj_33_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_33_value_set(preset["value"]);
    }
    
    number cycle_tilde_06_ph_next(number freq, number reset) {
        {
            {
                if (reset >= 0.)
                    this->cycle_tilde_06_ph_currentPhase = reset;
            }
        }
    
        number pincr = freq * this->cycle_tilde_06_ph_conv;
    
        if (this->cycle_tilde_06_ph_currentPhase < 0.)
            this->cycle_tilde_06_ph_currentPhase = 1. + this->cycle_tilde_06_ph_currentPhase;
    
        if (this->cycle_tilde_06_ph_currentPhase > 1.)
            this->cycle_tilde_06_ph_currentPhase = this->cycle_tilde_06_ph_currentPhase - 1.;
    
        number tmp = this->cycle_tilde_06_ph_currentPhase;
        this->cycle_tilde_06_ph_currentPhase += pincr;
        return tmp;
    }
    
    void cycle_tilde_06_ph_reset() {
        this->cycle_tilde_06_ph_currentPhase = 0;
    }
    
    void cycle_tilde_06_ph_dspsetup() {
        this->cycle_tilde_06_ph_conv = (number)1 / this->sr;
    }
    
    void cycle_tilde_06_dspsetup(bool force) {
        if ((bool)(this->cycle_tilde_06_setupDone) && (bool)(!(bool)(force)))
            return;
    
        this->cycle_tilde_06_phasei = 0;
        this->cycle_tilde_06_f2i = (number)4294967296 / this->samplerate();
        this->cycle_tilde_06_wrap = (long)(this->cycle_tilde_06_buffer->getSize()) - 1;
        this->cycle_tilde_06_setupDone = true;
        this->cycle_tilde_06_ph_dspsetup();
    }
    
    void cycle_tilde_06_bufferUpdated() {
        this->cycle_tilde_06_wrap = (long)(this->cycle_tilde_06_buffer->getSize()) - 1;
    }
    
    void numberobj_34_init() {
        this->numberobj_34_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-21"), 1, this->_currentTime);
    }
    
    void numberobj_34_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_34_value;
    }
    
    void numberobj_34_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_34_value_set(preset["value"]);
    }
    
    void numberobj_35_init() {
        this->numberobj_35_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-23"), 1, this->_currentTime);
    }
    
    void numberobj_35_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_35_value;
    }
    
    void numberobj_35_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_35_value_set(preset["value"]);
    }
    
    void param_08_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_08_value;
    }
    
    void param_08_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_08_value_set(preset["value"]);
    }
    
    void numberobj_36_init() {
        this->numberobj_36_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-16"), 1, this->_currentTime);
    }
    
    void numberobj_36_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_36_value;
    }
    
    void numberobj_36_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_36_value_set(preset["value"]);
    }
    
    void numberobj_37_init() {
        this->numberobj_37_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-18"), 1, this->_currentTime);
    }
    
    void numberobj_37_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_37_value;
    }
    
    void numberobj_37_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_37_value_set(preset["value"]);
    }
    
    void param_09_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_09_value;
    }
    
    void param_09_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_09_value_set(preset["value"]);
    }
    
    void scopetilde_01_updateEffectiveCount() {
        number effectiveCount = 256 * 1 + 256 * 0;
        this->scopetilde_01_effectiveCount = this->maximum(effectiveCount, 256);
    }
    
    void scopetilde_01_dspsetup(bool force) {
        if ((bool)(this->scopetilde_01_setupDone) && (bool)(!(bool)(force)))
            return;
    
        {
            this->scopetilde_01_mode = 1;
        }
    
        this->getEngine()->sendListMessage(
            TAG("setup"),
            TAG("Verb/scope~_obj-40"),
            {1, 1, this->samplerate(), 0, 1, 0, 0, 128, this->scopetilde_01_mode},
            this->_currentTime
        );;
    
        this->scopetilde_01_updateEffectiveCount();
        this->scopetilde_01_setupDone = true;
    }
    
    void param_10_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->param_10_value;
    }
    
    void param_10_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->param_10_value_set(preset["value"]);
    }
    
    bool line_05_isFinished(number value) {
        return value == this->line_05_currentTarget && this->currenttime() - this->line_05_startTime >= this->line_05__time;
    }
    
    number line_05_valueAtTime(MillisecondTime time) {
        return this->line_05_startValue + this->line_05_slope * (time - this->line_05_startTime);
    }
    
    void line_05_scheduleNext() {
        MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
        number nextTime = currentTime + this->line_05_grain;
        number nextValue;
    
        if (nextTime - this->line_05_startTime >= this->line_05__time || this->line_05_grain == 0) {
            nextTime = this->line_05_startTime + this->line_05__time;
            nextValue = this->line_05_currentTarget;
        } else {
            nextValue = this->line_05_valueAtTime(nextTime);
        }
    
        this->getEngine()->scheduleClockEventWithValue(this, 848255507, nextTime - currentTime + this->_currentTime, nextValue);;
    }
    
    void line_05_startRamp(number target, MillisecondTime time) {
        MillisecondTime currentTime = (MillisecondTime)(this->currenttime());
        this->line_05_startValue = this->line_05_valueAtTime(currentTime);
        this->line_05_startTime = currentTime;
        this->line_05_currentTarget = target;
        this->getEngine()->flushClockEvents(this, 848255507, false);;
        number rise = target - this->line_05_startValue;
        this->line_05_slope = rise / time;
        this->line_05_scheduleNext();
    }
    
    void line_05_startPendingRamp() {
        if (this->line_05_pendingRamps->length < 2) {
            this->line_05_pendingRamps->length = 0;
            this->line_05__time = 0;
            this->line_05_time_set(0);
            this->line_05_end_bang();
            return;
        }
    
        if (this->line_05_pendingRamps->length > 1) {
            number target = this->line_05_pendingRamps->shift();
            this->line_05__time = this->line_05_pendingRamps->shift();
            this->line_05__time = (this->line_05__time < 0 ? 0 : this->line_05__time);
            this->line_05_startRamp(target, this->line_05__time);
        }
    }
    
    void numberobj_38_init() {
        this->numberobj_38_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-151"), 1, this->_currentTime);
    }
    
    void numberobj_38_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_38_value;
    }
    
    void numberobj_38_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_38_value_set(preset["value"]);
    }
    
    void message_55_init() {
        this->message_55_set_set({0});
    }
    
    list liststore_06_storage_next(number index) {
        return this->liststore_06_storage_lookup(index);
    }
    
    list liststore_06_storage_lookup(number index) {
        list tmp1 = {};
        int64_t idx = (int64_t)(index);
    
        if (index >= 0 && index < this->liststore_06_storage__slotcount) {
            number entrylength = this->liststore_06_storage_storage[(Index)(idx * this->liststore_06_storage__entrysize)];
    
            if (entrylength > 0) {
                for (number i = 0; i < entrylength; i++) {
                    tmp1->push(
                        this->liststore_06_storage_storage[(Index)(idx * this->liststore_06_storage__entrysize + i + 1)]
                    );
                }
            }
        }
    
        return tmp1;
    }
    
    void liststore_06_storage_store(number index, list value) {
        int64_t idx = (int64_t)(index);
    
        if (index >= 0 && index < this->liststore_06_storage__slotcount) {
            number entrylength = value->length;
            this->liststore_06_storage_storage[(Index)(idx * this->liststore_06_storage__entrysize)] = entrylength;
    
            if (entrylength > 0) {
                for (number i = 0; i < entrylength; i++) {
                    this->liststore_06_storage_storage[(Index)(idx * this->liststore_06_storage__entrysize + i + 1)] = value[(Index)i];
                }
            }
        }
    }
    
    void liststore_06_storage_init() {
        this->liststore_06_storage__entrysize = 1 + 1;
        this->liststore_06_storage__slotcount = 2;
        int64_t storagesize = (int64_t)(2 * this->liststore_06_storage__entrysize);
        this->liststore_06_storage_storage->requestSize((Index)(storagesize), 1);
    }
    
    void liststore_06_storage_clear() {
        this->liststore_06_storage_storage->setZero();
    }
    
    void liststore_06_storage_reset() {
        this->liststore_06_storage_init();
        this->liststore_06_storage_clear();
    }
    
    void toggle_01_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->toggle_01_value_number;
    }
    
    void toggle_01_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->toggle_01_value_number_set(preset["value"]);
    }
    
    void drunk_01_nz_reset() {
        xoshiro_reset(
            systemticks() + this->voice() + this->random(0, 10000),
            this->drunk_01_nz_state
        );
    }
    
    void drunk_01_nz_init() {
        this->drunk_01_nz_reset();
    }
    
    void drunk_01_nz_seed(number v) {
        xoshiro_reset(v, this->drunk_01_nz_state);
    }
    
    number drunk_01_nz_next() {
        return xoshiro_next(this->drunk_01_nz_state);
    }
    
    number drunk_01_getDoubleRandom() {
        number r = this->drunk_01_nz_next();
    
        return this->fold(
            this->drunk_01_lastValue + r * (this->drunk_01_stepsize - 1),
            0,
            this->drunk_01_size
        );
    }
    
    void metro_01_onTransportChanged(number ) {}
    
    void metro_01_onBeatTimeChanged(number ) {}
    
    void counter_03_inc() {
        this->counter_03_count = ((bool)(this->counter_03_phase) ? this->counter_03_count + 1 : this->counter_03_count - 1);
    }
    
    void message_56_init() {
        this->message_56_set_set({0});
    }
    
    void message_57_init() {
        this->message_57_set_set({});
    }
    
    void numberobj_39_init() {
        this->numberobj_39_currentFormat = 6;
        this->getEngine()->sendNumMessage(TAG("setup"), TAG("Verb/number_obj-147"), 1, this->_currentTime);
    }
    
    void numberobj_39_getPresetValue(PatcherStateInterface& preset) {
        preset["value"] = this->numberobj_39_value;
    }
    
    void numberobj_39_setPresetValue(PatcherStateInterface& preset) {
        if ((bool)(stateIsEmpty(preset)))
            return;
    
        this->numberobj_39_value_set(preset["value"]);
    }
    
    void message_58_init() {
        this->message_58_set_set({1000});
    }
    
    bool stackprotect_check() {
        this->stackprotect_count++;
    
        if (this->stackprotect_count > 128) {
            console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
            return true;
        }
    
        return false;
    }
    
    void updateTime(MillisecondTime time) {
        this->_currentTime = time;
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));
    
        if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
            this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;
    
        if (this->sampleOffsetIntoNextAudioBuffer < 0)
            this->sampleOffsetIntoNextAudioBuffer = 0;
    }
    
    void assign_defaults()
    {
        p_09_target = 0;
        linetilde_02_time = 50;
        linetilde_02_keepramp = 1;
        numberobj_25_value = 0;
        numberobj_25_value_setter(numberobj_25_value);
        scale_01_inlow = 0;
        scale_01_inhigh = 100;
        scale_01_outlow = 0.05;
        scale_01_outhigh = 0.99;
        scale_01_power = 1;
        numberobj_26_value = 0;
        numberobj_26_value_setter(numberobj_26_value);
        param_03_value = 50;
        p_10_target = 0;
        p_11_target = 0;
        p_12_target = 0;
        p_13_target = 0;
        p_14_target = 0;
        p_15_target = 0;
        param_04_value = 0;
        gate_01_onoff = 0;
        gate_01_out1_number = 0;
        p_16_target = 0;
        numberobj_27_value = 0;
        numberobj_27_value_setter(numberobj_27_value);
        expr_09_in1 = 0;
        expr_09_in2 = 100;
        expr_09_out1 = 0;
        linetilde_03_time = 10;
        linetilde_03_keepramp = 1;
        numberobj_28_value = 0;
        numberobj_28_value_setter(numberobj_28_value);
        scale_02_inlow = 0;
        scale_02_inhigh = 100;
        scale_02_outlow = 0;
        scale_02_outhigh = 50;
        scale_02_power = 1.322;
        numberobj_29_value = 0;
        numberobj_29_value_setter(numberobj_29_value);
        param_05_value = 50;
        linetilde_04_time = 50;
        linetilde_04_keepramp = 1;
        numberobj_30_value = 0;
        numberobj_30_value_setter(numberobj_30_value);
        param_06_value = 50;
        linetilde_05_time = 50;
        linetilde_05_keepramp = 1;
        numberobj_31_value = 0;
        numberobj_31_value_setter(numberobj_31_value);
        scale_03_inlow = 0;
        scale_03_inhigh = 100;
        scale_03_outlow = 12000;
        scale_03_outhigh = 300;
        scale_03_power = 0.333333;
        numberobj_32_value = 0;
        numberobj_32_value_setter(numberobj_32_value);
        param_07_value = 50;
        loadmess_02_message = { 60 };
        numbertilde_07_input_number = 0;
        numbertilde_07_ramp = 0;
        numberobj_33_value = 0;
        numberobj_33_value_setter(numberobj_33_value);
        cycle_tilde_06_frequency = 0.01;
        cycle_tilde_06_phase_offset = 0;
        scale_04_inlow = -1;
        scale_04_inhigh = 1;
        scale_04_outlow = 50;
        scale_04_outhigh = 80;
        scale_04_power = 1;
        linetilde_06_time = 50;
        linetilde_06_keepramp = 1;
        linetilde_07_time = 50;
        linetilde_07_keepramp = 1;
        numberobj_34_value = 0;
        numberobj_34_value_setter(numberobj_34_value);
        scale_05_inlow = 0;
        scale_05_inhigh = 100;
        scale_05_outlow = 0.01;
        scale_05_outhigh = 1.6;
        scale_05_power = 1;
        numberobj_35_value = 0;
        numberobj_35_value_setter(numberobj_35_value);
        param_08_value = 50;
        numberobj_36_value = 0;
        numberobj_36_value_setter(numberobj_36_value);
        expr_14_in1 = 0;
        expr_14_in2 = 100;
        expr_14_out1 = 0;
        numberobj_37_value = 0;
        numberobj_37_value_setter(numberobj_37_value);
        param_09_value = 50;
        param_10_value = 0;
        gate_02_onoff = 0;
        gate_02_out1_number = 0;
        scale_06_inlow = 0;
        scale_06_inhigh = 100;
        scale_06_outlow = 25;
        scale_06_outhigh = 100;
        scale_06_power = 1;
        line_05_time = 0;
        line_05_grain = 20;
        line_05_output = 0;
        pack_09_in1 = 0;
        pack_09_in2 = 0;
        numberobj_38_value = 0;
        numberobj_38_value_setter(numberobj_38_value);
        liststore_06_lookupidx = 0;
        liststore_06_storeidx = 0;
        toggle_01_value_number = 0;
        toggle_01_value_number_setter(toggle_01_value_number);
        drunk_01_trigger_number = 0;
        drunk_01_size = 100;
        drunk_01_size_setter(drunk_01_size);
        drunk_01_stepsize = 25;
        drunk_01_stepsize_setter(drunk_01_stepsize);
        drunk_01_seed = 1;
        drunk_01_out = 0;
        metro_01_on = 0;
        metro_01_interval = 30000;
        metro_01_interval_setter(metro_01_interval);
        counter_03_carryflag = 0;
        counter_03_direction = 0;
        counter_03_resetnext_number = 0;
        counter_03_resetnow_number = 0;
        counter_03_maximum = 1;
        counter_03_output = 0;
        counter_03_underflow_number = 0;
        counter_03_overflow_number = 0;
        counter_03_carry = 0;
        counter_03_minimum = 0;
        numberobj_39_value = 0;
        numberobj_39_value_setter(numberobj_39_value);
        pack_10_in1 = 0;
        pack_10_in2 = 0;
        ctlin_01_input = 0;
        ctlin_01_controller = 4;
        ctlin_01_channel = -1;
        expr_08_in1 = 0;
        expr_08_in2 = 0.007874015748;
        expr_08_out1 = 0;
        ctlin_02_input = 0;
        ctlin_02_controller = 6;
        ctlin_02_channel = -1;
        expr_10_in1 = 0;
        expr_10_in2 = 0.007874015748;
        expr_10_out1 = 0;
        ctlin_03_input = 0;
        ctlin_03_controller = 5;
        ctlin_03_channel = -1;
        expr_11_in1 = 0;
        expr_11_in2 = 0.007874015748;
        expr_11_out1 = 0;
        ctlin_04_input = 0;
        ctlin_04_controller = 1;
        ctlin_04_channel = -1;
        expr_12_in1 = 0;
        expr_12_in2 = 0.007874015748;
        expr_12_out1 = 0;
        ctlin_05_input = 0;
        ctlin_05_controller = 3;
        ctlin_05_channel = -1;
        expr_13_in1 = 0;
        expr_13_in2 = 0.007874015748;
        expr_13_out1 = 0;
        ctlin_06_input = 0;
        ctlin_06_controller = 2;
        ctlin_06_channel = -1;
        expr_15_in1 = 0;
        expr_15_in2 = 0.007874015748;
        expr_15_out1 = 0;
        _currentTime = 0;
        audioProcessSampleCount = 0;
        sampleOffsetIntoNextAudioBuffer = 0;
        zeroBuffer = nullptr;
        dummyBuffer = nullptr;
        signals[0] = nullptr;
        signals[1] = nullptr;
        signals[2] = nullptr;
        signals[3] = nullptr;
        signals[4] = nullptr;
        signals[5] = nullptr;
        signals[6] = nullptr;
        signals[7] = nullptr;
        signals[8] = nullptr;
        signals[9] = nullptr;
        signals[10] = nullptr;
        signals[11] = nullptr;
        signals[12] = nullptr;
        signals[13] = nullptr;
        signals[14] = nullptr;
        signals[15] = nullptr;
        signals[16] = nullptr;
        signals[17] = nullptr;
        signals[18] = nullptr;
        signals[19] = nullptr;
        signals[20] = nullptr;
        signals[21] = nullptr;
        signals[22] = nullptr;
        signals[23] = nullptr;
        signals[24] = nullptr;
        signals[25] = nullptr;
        signals[26] = nullptr;
        signals[27] = nullptr;
        signals[28] = nullptr;
        signals[29] = nullptr;
        signals[30] = nullptr;
        signals[31] = nullptr;
        signals[32] = nullptr;
        signals[33] = nullptr;
        didAllocateSignals = 0;
        vs = 0;
        maxvs = 0;
        sr = 44100;
        invsr = 0.00002267573696;
        linetilde_02_currentValue = 0;
        numberobj_25_currentFormat = 6;
        numberobj_25_lastValue = 0;
        numberobj_26_currentFormat = 6;
        numberobj_26_lastValue = 0;
        param_03_lastValue = 0;
        param_04_lastValue = 0;
        numberobj_27_currentFormat = 6;
        numberobj_27_lastValue = 0;
        linetilde_03_currentValue = 0;
        numberobj_28_currentFormat = 6;
        numberobj_28_lastValue = 0;
        numberobj_29_currentFormat = 6;
        numberobj_29_lastValue = 0;
        param_05_lastValue = 0;
        linetilde_04_currentValue = 0;
        numberobj_30_currentFormat = 6;
        numberobj_30_lastValue = 0;
        param_06_lastValue = 0;
        linetilde_05_currentValue = 0;
        numberobj_31_currentFormat = 6;
        numberobj_31_lastValue = 0;
        numberobj_32_currentFormat = 6;
        numberobj_32_lastValue = 0;
        param_07_lastValue = 0;
        numbertilde_07_currentInterval = 0;
        numbertilde_07_currentIntervalInSamples = 0;
        numbertilde_07_lastValue = 0;
        numbertilde_07_outValue = 0;
        numbertilde_07_rampInSamples = 0;
        numbertilde_07_currentMode = 0;
        numbertilde_07_smooth_d_prev = 0;
        numbertilde_07_smooth_prev = 0;
        numbertilde_07_smooth_index = 0;
        numbertilde_07_smooth_increment = 0;
        numbertilde_07_setupDone = false;
        numberobj_33_currentFormat = 6;
        numberobj_33_lastValue = 0;
        cycle_tilde_06_wrap = 0;
        cycle_tilde_06_ph_currentPhase = 0;
        cycle_tilde_06_ph_conv = 0;
        cycle_tilde_06_setupDone = false;
        linetilde_06_currentValue = 0;
        linetilde_07_currentValue = 0;
        numberobj_34_currentFormat = 6;
        numberobj_34_lastValue = 0;
        numberobj_35_currentFormat = 6;
        numberobj_35_lastValue = 0;
        param_08_lastValue = 0;
        numberobj_36_currentFormat = 6;
        numberobj_36_lastValue = 0;
        numberobj_37_currentFormat = 6;
        numberobj_37_lastValue = 0;
        param_09_lastValue = 0;
        scopetilde_01_lastValue = 0;
        scopetilde_01_effectiveCount = 256;
        scopetilde_01_xsign = 1;
        scopetilde_01_ysign = 1;
        scopetilde_01_mode = 0;
        scopetilde_01_setupDone = false;
        param_10_lastValue = 0;
        line_05_startTime = 0;
        line_05_startValue = 0;
        line_05_currentTarget = 0;
        line_05_slope = 0;
        line_05__time = 0;
        numberobj_38_currentFormat = 6;
        numberobj_38_lastValue = 0;
        liststore_06_storage__slotcount = 1024;
        liststore_06_storage__entrysize = 65;
        toggle_01_lastValue = 0;
        drunk_01_lastValue = -1;
        metro_01_last = -1;
        metro_01_next = -1;
        counter_03_count = 0;
        counter_03_phase = true;
        numberobj_39_currentFormat = 6;
        numberobj_39_lastValue = 0;
        ctlin_01_status = 0;
        ctlin_01_byte1 = -1;
        ctlin_01_inchan = 0;
        ctlin_02_status = 0;
        ctlin_02_byte1 = -1;
        ctlin_02_inchan = 0;
        ctlin_03_status = 0;
        ctlin_03_byte1 = -1;
        ctlin_03_inchan = 0;
        ctlin_04_status = 0;
        ctlin_04_byte1 = -1;
        ctlin_04_inchan = 0;
        ctlin_05_status = 0;
        ctlin_05_byte1 = -1;
        ctlin_05_inchan = 0;
        ctlin_06_status = 0;
        ctlin_06_byte1 = -1;
        ctlin_06_inchan = 0;
        stackprotect_count = 0;
        _voiceIndex = 0;
        _noteNumber = 0;
        isMuted = 1;
        parameterOffset = 0;
    }
    
    // member variables
    
        number p_09_target;
        list linetilde_02_segments;
        number linetilde_02_time;
        number linetilde_02_keepramp;
        number numberobj_25_value;
        list scale_01_input;
        number scale_01_inlow;
        number scale_01_inhigh;
        number scale_01_outlow;
        number scale_01_outhigh;
        number scale_01_power;
        list scale_01_out;
        number numberobj_26_value;
        number param_03_value;
        number p_10_target;
        number p_11_target;
        number p_12_target;
        number p_13_target;
        number p_14_target;
        number p_15_target;
        number param_04_value;
        number gate_01_onoff;
        number gate_01_out1_number;
        list gate_01_out1_list;
        number p_16_target;
        number numberobj_27_value;
        number expr_09_in1;
        number expr_09_in2;
        number expr_09_out1;
        list linetilde_03_segments;
        number linetilde_03_time;
        number linetilde_03_keepramp;
        number numberobj_28_value;
        list scale_02_input;
        number scale_02_inlow;
        number scale_02_inhigh;
        number scale_02_outlow;
        number scale_02_outhigh;
        number scale_02_power;
        list scale_02_out;
        number numberobj_29_value;
        number param_05_value;
        list linetilde_04_segments;
        number linetilde_04_time;
        number linetilde_04_keepramp;
        number numberobj_30_value;
        number param_06_value;
        list linetilde_05_segments;
        number linetilde_05_time;
        number linetilde_05_keepramp;
        number numberobj_31_value;
        list scale_03_input;
        number scale_03_inlow;
        number scale_03_inhigh;
        number scale_03_outlow;
        number scale_03_outhigh;
        number scale_03_power;
        list scale_03_out;
        number numberobj_32_value;
        number param_07_value;
        list loadmess_02_message;
        number numbertilde_07_input_number;
        number numbertilde_07_ramp;
        number numberobj_33_value;
        number cycle_tilde_06_frequency;
        number cycle_tilde_06_phase_offset;
        list scale_04_input;
        number scale_04_inlow;
        number scale_04_inhigh;
        number scale_04_outlow;
        number scale_04_outhigh;
        number scale_04_power;
        list scale_04_out;
        list linetilde_06_segments;
        number linetilde_06_time;
        number linetilde_06_keepramp;
        list linetilde_07_segments;
        number linetilde_07_time;
        number linetilde_07_keepramp;
        number numberobj_34_value;
        list scale_05_input;
        number scale_05_inlow;
        number scale_05_inhigh;
        number scale_05_outlow;
        number scale_05_outhigh;
        number scale_05_power;
        list scale_05_out;
        number numberobj_35_value;
        number param_08_value;
        number numberobj_36_value;
        number expr_14_in1;
        number expr_14_in2;
        number expr_14_out1;
        number numberobj_37_value;
        number param_09_value;
        number param_10_value;
        number gate_02_onoff;
        number gate_02_out1_number;
        list gate_02_out1_list;
        list scale_06_input;
        number scale_06_inlow;
        number scale_06_inhigh;
        number scale_06_outlow;
        number scale_06_outhigh;
        number scale_06_power;
        list scale_06_out;
        list listjoin_05_in1;
        list listjoin_05_in2;
        list line_05_target;
        number line_05_time;
        number line_05_grain;
        number line_05_output;
        number pack_09_in1;
        number pack_09_in2;
        number numberobj_38_value;
        list message_55_set;
        number liststore_06_lookupidx;
        list liststore_06_storelist;
        number liststore_06_storeidx;
        number toggle_01_value_number;
        number drunk_01_trigger_number;
        number drunk_01_size;
        number drunk_01_stepsize;
        number drunk_01_seed;
        number drunk_01_out;
        number metro_01_on;
        number metro_01_interval;
        Int counter_03_carryflag;
        number counter_03_direction;
        number counter_03_resetnext_number;
        number counter_03_resetnow_number;
        number counter_03_maximum;
        number counter_03_output;
        number counter_03_underflow_number;
        number counter_03_overflow_number;
        number counter_03_carry;
        number counter_03_minimum;
        list message_56_set;
        list message_57_set;
        number numberobj_39_value;
        number pack_10_in1;
        number pack_10_in2;
        list message_58_set;
        number ctlin_01_input;
        number ctlin_01_controller;
        number ctlin_01_channel;
        number expr_08_in1;
        number expr_08_in2;
        number expr_08_out1;
        number ctlin_02_input;
        number ctlin_02_controller;
        number ctlin_02_channel;
        number expr_10_in1;
        number expr_10_in2;
        number expr_10_out1;
        number ctlin_03_input;
        number ctlin_03_controller;
        number ctlin_03_channel;
        number expr_11_in1;
        number expr_11_in2;
        number expr_11_out1;
        number ctlin_04_input;
        number ctlin_04_controller;
        number ctlin_04_channel;
        number expr_12_in1;
        number expr_12_in2;
        number expr_12_out1;
        number ctlin_05_input;
        number ctlin_05_controller;
        number ctlin_05_channel;
        number expr_13_in1;
        number expr_13_in2;
        number expr_13_out1;
        number ctlin_06_input;
        number ctlin_06_controller;
        number ctlin_06_channel;
        number expr_15_in1;
        number expr_15_in2;
        number expr_15_out1;
        MillisecondTime _currentTime;
        UInt64 audioProcessSampleCount;
        SampleIndex sampleOffsetIntoNextAudioBuffer;
        signal zeroBuffer;
        signal dummyBuffer;
        SampleValue * signals[34];
        bool didAllocateSignals;
        Index vs;
        Index maxvs;
        number sr;
        number invsr;
        list linetilde_02_activeRamps;
        number linetilde_02_currentValue;
        Int numberobj_25_currentFormat;
        number numberobj_25_lastValue;
        Int numberobj_26_currentFormat;
        number numberobj_26_lastValue;
        number param_03_lastValue;
        number param_04_lastValue;
        Int numberobj_27_currentFormat;
        number numberobj_27_lastValue;
        list linetilde_03_activeRamps;
        number linetilde_03_currentValue;
        Int numberobj_28_currentFormat;
        number numberobj_28_lastValue;
        Int numberobj_29_currentFormat;
        number numberobj_29_lastValue;
        number param_05_lastValue;
        list linetilde_04_activeRamps;
        number linetilde_04_currentValue;
        Int numberobj_30_currentFormat;
        number numberobj_30_lastValue;
        number param_06_lastValue;
        list linetilde_05_activeRamps;
        number linetilde_05_currentValue;
        Int numberobj_31_currentFormat;
        number numberobj_31_lastValue;
        Int numberobj_32_currentFormat;
        number numberobj_32_lastValue;
        number param_07_lastValue;
        SampleIndex numbertilde_07_currentInterval;
        SampleIndex numbertilde_07_currentIntervalInSamples;
        number numbertilde_07_lastValue;
        number numbertilde_07_outValue;
        number numbertilde_07_rampInSamples;
        Int numbertilde_07_currentMode;
        number numbertilde_07_smooth_d_prev;
        number numbertilde_07_smooth_prev;
        number numbertilde_07_smooth_index;
        number numbertilde_07_smooth_increment;
        bool numbertilde_07_setupDone;
        Int numberobj_33_currentFormat;
        number numberobj_33_lastValue;
        Float64BufferRef cycle_tilde_06_buffer;
        long cycle_tilde_06_wrap;
        uint32_t cycle_tilde_06_phasei;
        SampleValue cycle_tilde_06_f2i;
        number cycle_tilde_06_ph_currentPhase;
        number cycle_tilde_06_ph_conv;
        bool cycle_tilde_06_setupDone;
        list linetilde_06_activeRamps;
        number linetilde_06_currentValue;
        list linetilde_07_activeRamps;
        number linetilde_07_currentValue;
        Int numberobj_34_currentFormat;
        number numberobj_34_lastValue;
        Int numberobj_35_currentFormat;
        number numberobj_35_lastValue;
        number param_08_lastValue;
        Int numberobj_36_currentFormat;
        number numberobj_36_lastValue;
        Int numberobj_37_currentFormat;
        number numberobj_37_lastValue;
        number param_09_lastValue;
        number scopetilde_01_lastValue;
        number scopetilde_01_effectiveCount;
        number scopetilde_01_xmonitorvalue;
        number scopetilde_01_ymonitorvalue;
        list scopetilde_01_monitorbuffer;
        number scopetilde_01_xsign;
        number scopetilde_01_ysign;
        Int scopetilde_01_mode;
        bool scopetilde_01_setupDone;
        number param_10_lastValue;
        MillisecondTime line_05_startTime;
        number line_05_startValue;
        number line_05_currentTarget;
        number line_05_slope;
        MillisecondTime line_05__time;
        list line_05_pendingRamps;
        Int numberobj_38_currentFormat;
        number numberobj_38_lastValue;
        Float64BufferRef liststore_06_storage_storage;
        number liststore_06_storage__slotcount;
        number liststore_06_storage__entrysize;
        number toggle_01_lastValue;
        number drunk_01_lastValue;
        UInt drunk_01_nz_state[4] = { };
        MillisecondTime metro_01_last;
        MillisecondTime metro_01_next;
        number counter_03_count;
        bool counter_03_phase;
        Int numberobj_39_currentFormat;
        number numberobj_39_lastValue;
        int ctlin_01_status;
        int ctlin_01_byte1;
        int ctlin_01_inchan;
        int ctlin_02_status;
        int ctlin_02_byte1;
        int ctlin_02_inchan;
        int ctlin_03_status;
        int ctlin_03_byte1;
        int ctlin_03_inchan;
        int ctlin_04_status;
        int ctlin_04_byte1;
        int ctlin_04_inchan;
        int ctlin_05_status;
        int ctlin_05_byte1;
        int ctlin_05_inchan;
        int ctlin_06_status;
        int ctlin_06_byte1;
        int ctlin_06_inchan;
        number stackprotect_count;
        DataRef liststore_06_storage_storageobj;
        Index _voiceIndex;
        Int _noteNumber;
        Index isMuted;
        ParameterIndex parameterOffset;
        RNBOSubpatcher_90* p_09;
        RNBOSubpatcher_91* p_10;
        RNBOSubpatcher_92* p_11;
        RNBOSubpatcher_93* p_12;
        RNBOSubpatcher_94* p_13;
        RNBOSubpatcher_95* p_14;
        RNBOSubpatcher_96* p_15;
        RNBOSubpatcher_97* p_16;
    
};

rnbomatic()
{
}

~rnbomatic()
{
    delete this->p_17;
    delete this->p_18;
    delete this->p_19;
}

rnbomatic* getTopLevelPatcher() {
    return this;
}

void cancelClockEvents()
{
    getEngine()->flushClockEvents(this, 1935387534, false);
}

template <typename T> void listquicksort(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    if (l < h) {
        Int p = (Int)(this->listpartition(arr, sortindices, l, h, ascending));
        this->listquicksort(arr, sortindices, l, p - 1, ascending);
        this->listquicksort(arr, sortindices, p + 1, h, ascending);
    }
}

template <typename T> Int listpartition(T& arr, T& sortindices, Int l, Int h, bool ascending) {
    number x = arr[(Index)h];
    Int i = (Int)(l - 1);

    for (Int j = (Int)(l); j <= h - 1; j++) {
        bool asc = (bool)((bool)(ascending) && arr[(Index)j] <= x);
        bool desc = (bool)((bool)(!(bool)(ascending)) && arr[(Index)j] >= x);

        if ((bool)(asc) || (bool)(desc)) {
            i++;
            this->listswapelements(arr, i, j);
            this->listswapelements(sortindices, i, j);
        }
    }

    i++;
    this->listswapelements(arr, i, h);
    this->listswapelements(sortindices, i, h);
    return i;
}

template <typename T> void listswapelements(T& arr, Int a, Int b) {
    auto tmp = arr[(Index)a];
    arr[(Index)a] = arr[(Index)b];
    arr[(Index)b] = tmp;
}

Index voice() {
    return this->_voiceIndex;
}

number random(number low, number high) {
    number range = high - low;
    return globalrandom() * range + low;
}

MillisecondTime currenttime() {
    return this->_currentTime;
}

number mstosamps(MillisecondTime ms) {
    return ms * this->sr * 0.001;
}

number maximum(number x, number y) {
    return (x < y ? y : x);
}

MillisecondTime sampstoms(number samps) {
    return samps * 1000 / this->sr;
}

Index getNumMidiInputPorts() const {
    return 1;
}

void processMidiEvent(MillisecondTime time, int port, ConstByteArray data, Index length) {
    this->updateTime(time);
    this->p_19_midihandler(data[0] & 240, (data[0] & 15) + 1, port, data, length);
}

Index getNumMidiOutputPorts() const {
    return 0;
}

void process(
    const SampleValue * const* inputs,
    Index numInputs,
    SampleValue * const* outputs,
    Index numOutputs,
    Index n
) {
    RNBO_UNUSED(numInputs);
    RNBO_UNUSED(inputs);
    this->vs = n;
    this->updateTime(this->getEngine()->getCurrentTime());
    SampleValue * out1 = (numOutputs >= 1 && outputs[0] ? outputs[0] : this->dummyBuffer);
    SampleValue * out2 = (numOutputs >= 2 && outputs[1] ? outputs[1] : this->dummyBuffer);
    this->p_17_perform(this->signals[0], n);
    this->dspexpr_36_perform(this->signals[0], this->dspexpr_36_in2, this->signals[1], n);

    this->p_19_perform(
        this->zeroBuffer,
        this->zeroBuffer,
        this->zeroBuffer,
        this->zeroBuffer,
        this->zeroBuffer,
        this->signals[1],
        this->signals[1],
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        this->dummyBuffer,
        out1,
        out2,
        n
    );

    this->p_18_perform(n);
    this->stackprotect_perform(n);
    this->globaltransport_advance();
    this->audioProcessSampleCount += this->vs;
}

void prepareToProcess(number sampleRate, Index maxBlockSize, bool force) {
    if (this->maxvs < maxBlockSize || !this->didAllocateSignals) {
        Index i;

        for (i = 0; i < 2; i++) {
            this->signals[i] = resizeSignal(this->signals[i], this->maxvs, maxBlockSize);
        }

        this->globaltransport_tempo = resizeSignal(this->globaltransport_tempo, this->maxvs, maxBlockSize);
        this->globaltransport_state = resizeSignal(this->globaltransport_state, this->maxvs, maxBlockSize);
        this->zeroBuffer = resizeSignal(this->zeroBuffer, this->maxvs, maxBlockSize);
        this->dummyBuffer = resizeSignal(this->dummyBuffer, this->maxvs, maxBlockSize);
        this->didAllocateSignals = true;
    }

    const bool sampleRateChanged = sampleRate != this->sr;
    const bool maxvsChanged = maxBlockSize != this->maxvs;
    const bool forceDSPSetup = sampleRateChanged || maxvsChanged || force;

    if (sampleRateChanged || maxvsChanged) {
        this->vs = maxBlockSize;
        this->maxvs = maxBlockSize;
        this->sr = sampleRate;
        this->invsr = 1 / sampleRate;
    }

    this->globaltransport_dspsetup(forceDSPSetup);
    this->p_17->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_18->prepareToProcess(sampleRate, maxBlockSize, force);
    this->p_19->prepareToProcess(sampleRate, maxBlockSize, force);

    if (sampleRateChanged)
        this->onSampleRateChanged(sampleRate);
}

void setProbingTarget(MessageTag id) {
    switch (id) {
    default:
        {
        this->setProbingIndex(-1);
        break;
        }
    }
}

void setProbingIndex(ProbingIndex ) {}

Index getProbingChannels(MessageTag outletId) const {
    RNBO_UNUSED(outletId);
    return 0;
}

DataRef* getDataRef(DataRefIndex index)  {
    switch (index) {
    case 0:
        {
        return addressOf(this->osc_wavetable_buf);
        break;
        }
    case 1:
        {
        return addressOf(this->RNBODefaultSinus);
        break;
        }
    case 2:
        {
        return addressOf(this->RNBODefaultMtofLookupTable256);
        break;
        }
    default:
        {
        return nullptr;
        }
    }
}

DataRefIndex getNumDataRefs() const {
    return 3;
}

void fillRNBODefaultSinus(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        buffer[i] = rnbo_cos(i * 3.14159265358979323846 * 2. / bufsize);
    }
}

void fillRNBODefaultMtofLookupTable256(DataRef& ref) {
    Float64BufferRef buffer;
    buffer = new Float64Buffer(ref);
    number bufsize = buffer->getSize();

    for (Index i = 0; i < bufsize; i++) {
        number midivalue = -256. + (number)512. / (bufsize - 1) * i;
        buffer[i] = rnbo_exp(.057762265 * (midivalue - 69.0));
    }
}

void fillDataRef(DataRefIndex index, DataRef& ref) {
    switch (index) {
    case 1:
        {
        this->fillRNBODefaultSinus(ref);
        break;
        }
    case 2:
        {
        this->fillRNBODefaultMtofLookupTable256(ref);
        break;
        }
    }
}

void zeroDataRef(DataRef& ref) {
    ref->setZero();
}

void processDataViewUpdate(DataRefIndex index, MillisecondTime time) {
    this->p_17->processDataViewUpdate(index, time);
    this->p_18->processDataViewUpdate(index, time);
    this->p_19->processDataViewUpdate(index, time);
}

void initialize() {
    this->osc_wavetable_buf = initDataRef("osc_wavetable_buf", false, "wavetable1.wav", "buffer~");
    this->RNBODefaultSinus = initDataRef("RNBODefaultSinus", true, nullptr, "buffer~");
    this->RNBODefaultMtofLookupTable256 = initDataRef("RNBODefaultMtofLookupTable256", true, nullptr, "buffer~");
    this->assign_defaults();
    this->setState();
    this->osc_wavetable_buf->setIndex(0);
    this->RNBODefaultSinus->setIndex(1);
    this->RNBODefaultMtofLookupTable256->setIndex(2);
    this->initializeObjects();
    this->allocateDataRefs();
    this->startup();
}

Index getIsMuted()  {
    return this->isMuted;
}

void setIsMuted(Index v)  {
    this->isMuted = v;
}

void onSampleRateChanged(double ) {}

void processTempoEvent(MillisecondTime time, Tempo tempo) {
    this->updateTime(time);

    if (this->globaltransport_setTempo(this->_currentTime, tempo, false)) {
        this->p_17->processTempoEvent(time, tempo);
        this->p_18->processTempoEvent(time, tempo);
        this->p_19->processTempoEvent(time, tempo);
    }
}

void processTransportEvent(MillisecondTime time, TransportState state) {
    this->updateTime(time);

    if (this->globaltransport_setState(this->_currentTime, state, false)) {
        this->p_17->processTransportEvent(time, state);
        this->p_18->processTransportEvent(time, state);
        this->p_19->processTransportEvent(time, state);
        this->metro_02_onTransportChanged(state);
    }
}

void processBeatTimeEvent(MillisecondTime time, BeatTime beattime) {
    this->updateTime(time);

    if (this->globaltransport_setBeatTime(this->_currentTime, beattime, false)) {
        this->p_17->processBeatTimeEvent(time, beattime);
        this->p_18->processBeatTimeEvent(time, beattime);
        this->p_19->processBeatTimeEvent(time, beattime);
        this->metro_02_onBeatTimeChanged(beattime);
    }
}

void processTimeSignatureEvent(MillisecondTime time, int numerator, int denominator) {
    this->updateTime(time);

    if (this->globaltransport_setTimeSignature(this->_currentTime, numerator, denominator, false)) {
        this->p_17->processTimeSignatureEvent(time, numerator, denominator);
        this->p_18->processTimeSignatureEvent(time, numerator, denominator);
        this->p_19->processTimeSignatureEvent(time, numerator, denominator);
    }
}

void processBBUEvent(MillisecondTime time, number bars, number beats, number units) {
    this->updateTime(time);

    if (this->globaltransport_setBBU(this->_currentTime, bars, beats, units, false)) {
        this->p_17->processBBUEvent(time, bars, beats, units);
        this->p_18->processBBUEvent(time, bars, beats, units);
        this->p_19->processBBUEvent(time, bars, beats, units);
    }
}

Index getPatcherSerial() const {
    return 0;
}

void getState(PatcherStateInterface& ) {}

void setState() {
    this->p_17 = new RNBOSubpatcher_98();
    this->p_17->setEngineAndPatcher(this->getEngine(), this);
    this->p_17->initialize();
    this->p_17->setParameterOffset(this->getParameterOffset(this->p_17));
    this->p_18 = new RNBOSubpatcher_99();
    this->p_18->setEngineAndPatcher(this->getEngine(), this);
    this->p_18->initialize();
    this->p_18->setParameterOffset(this->getParameterOffset(this->p_18));
    this->p_19 = new RNBOSubpatcher_100();
    this->p_19->setEngineAndPatcher(this->getEngine(), this);
    this->p_19->initialize();
    this->p_19->setParameterOffset(this->getParameterOffset(this->p_19));
}

void getPreset(PatcherStateInterface& preset) {
    preset["__presetid"] = "rnbo";
    this->param_11_getPresetValue(getSubState(preset, "OffOn"));
    this->p_17->getPreset(getSubState(getSubState(preset, "__sps"), "ChInst"));
    this->p_18->getPreset(getSubState(getSubState(preset, "__sps"), "Chords"));
    this->p_19->getPreset(getSubState(getSubState(preset, "__sps"), "Verb"));
}

void setPreset(MillisecondTime time, PatcherStateInterface& preset) {
    this->updateTime(time);
    this->param_11_setPresetValue(getSubState(preset, "OffOn"));
    this->p_17->param_01_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "ChInst"), "sSize"));

    this->p_17->param_02_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "ChInst"), "tablePos")
    );

    this->p_19->param_04_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "DecayLFO"));

    this->p_19->param_10_setPresetValue(
        getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "SizeRandom")
    );

    this->p_19->param_07_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "damp"));
    this->p_19->param_09_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "diff"));
    this->p_19->param_08_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "size"));
    this->p_19->param_03_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "decay"));
    this->p_19->param_06_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "jitter"));
    this->p_19->param_05_setPresetValue(getSubState(getSubState(getSubState(preset, "__sps"), "Verb"), "mix"));
}

void setParameterValue(ParameterIndex index, ParameterValue v, MillisecondTime time) {
    this->updateTime(time);

    switch (index) {
    case 0:
        {
        this->param_11_value_set(v);
        break;
        }
    default:
        {
        index -= 1;

        if (index < this->p_17->getNumParameters())
            this->p_17->setParameterValue(index, v, time);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            this->p_18->setParameterValue(index, v, time);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            this->p_19->setParameterValue(index, v, time);

        break;
        }
    }
}

void processParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValue(index, value, time);
}

void processParameterBangEvent(ParameterIndex index, MillisecondTime time) {
    this->setParameterValue(index, this->getParameterValue(index), time);
}

void processNormalizedParameterEvent(ParameterIndex index, ParameterValue value, MillisecondTime time) {
    this->setParameterValueNormalized(index, value, time);
}

ParameterValue getParameterValue(ParameterIndex index)  {
    switch (index) {
    case 0:
        {
        return this->param_11_value;
        }
    default:
        {
        index -= 1;

        if (index < this->p_17->getNumParameters())
            return this->p_17->getParameterValue(index);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->getParameterValue(index);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->getParameterValue(index);

        return 0;
        }
    }
}

ParameterIndex getNumSignalInParameters() const {
    return 0;
}

ParameterIndex getNumSignalOutParameters() const {
    return 0;
}

ParameterIndex getNumParameters() const {
    return 1 + this->p_17->getNumParameters() + this->p_18->getNumParameters() + this->p_19->getNumParameters();
}

ConstCharPointer getParameterName(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "OffOn";
        }
    default:
        {
        index -= 1;

        if (index < this->p_17->getNumParameters())
            return this->p_17->getParameterName(index);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->getParameterName(index);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->getParameterName(index);

        return "bogus";
        }
    }
}

ConstCharPointer getParameterId(ParameterIndex index) const {
    switch (index) {
    case 0:
        {
        return "OffOn";
        }
    default:
        {
        index -= 1;

        if (index < this->p_17->getNumParameters())
            return this->p_17->getParameterId(index);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->getParameterId(index);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->getParameterId(index);

        return "bogus";
        }
    }
}

void getParameterInfo(ParameterIndex index, ParameterInfo * info) const {
    {
        switch (index) {
        case 0:
            {
            info->type = ParameterTypeNumber;
            info->initialValue = 0;
            info->min = 0;
            info->max = 1;
            info->exponent = 1;
            info->steps = 0;
            info->debug = false;
            info->saveable = true;
            info->transmittable = true;
            info->initialized = true;
            info->visible = true;
            info->displayName = "";
            info->unit = "";
            info->ioType = IOTypeUndefined;
            info->signalIndex = INVALID_INDEX;
            break;
            }
        default:
            {
            index -= 1;

            if (index < this->p_17->getNumParameters())
                this->p_17->getParameterInfo(index, info);

            index -= this->p_17->getNumParameters();

            if (index < this->p_18->getNumParameters())
                this->p_18->getParameterInfo(index, info);

            index -= this->p_18->getNumParameters();

            if (index < this->p_19->getNumParameters())
                this->p_19->getParameterInfo(index, info);

            break;
            }
        }
    }
}

void sendParameter(ParameterIndex index, bool ignoreValue) {
    this->getEngine()->notifyParameterValueChanged(index, (ignoreValue ? 0 : this->getParameterValue(index)), ignoreValue);
}

ParameterIndex getParameterOffset(BaseInterface* subpatcher) const {
    if (subpatcher == this->p_17)
        return 1;

    if (subpatcher == this->p_18)
        return 1 + this->p_17->getNumParameters();

    if (subpatcher == this->p_19)
        return 1 + this->p_17->getNumParameters() + this->p_18->getNumParameters();

    return 0;
}

ParameterValue applyStepsToNormalizedParameterValue(ParameterValue normalizedValue, int steps) const {
    if (steps == 1) {
        if (normalizedValue > 0) {
            normalizedValue = 1.;
        }
    } else {
        ParameterValue oneStep = (number)1. / (steps - 1);
        ParameterValue numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / (number)1) * (number)1;
        normalizedValue = numberOfSteps * oneStep;
    }

    return normalizedValue;
}

ParameterValue convertToNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        {
            value = (value < 0 ? 0 : (value > 1 ? 1 : value));
            ParameterValue normalizedValue = (value - 0) / (1 - 0);
            return normalizedValue;
        }
        }
    default:
        {
        index -= 1;

        if (index < this->p_17->getNumParameters())
            return this->p_17->convertToNormalizedParameterValue(index, value);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->convertToNormalizedParameterValue(index, value);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->convertToNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue convertFromNormalizedParameterValue(ParameterIndex index, ParameterValue value) const {
    value = (value < 0 ? 0 : (value > 1 ? 1 : value));

    switch (index) {
    case 0:
        {
        {
            {
                return 0 + value * (1 - 0);
            }
        }
        }
    default:
        {
        index -= 1;

        if (index < this->p_17->getNumParameters())
            return this->p_17->convertFromNormalizedParameterValue(index, value);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->convertFromNormalizedParameterValue(index, value);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->convertFromNormalizedParameterValue(index, value);

        return value;
        }
    }
}

ParameterValue constrainParameterValue(ParameterIndex index, ParameterValue value) const {
    switch (index) {
    case 0:
        {
        return this->param_11_value_constrain(value);
        }
    default:
        {
        index -= 1;

        if (index < this->p_17->getNumParameters())
            return this->p_17->constrainParameterValue(index, value);

        index -= this->p_17->getNumParameters();

        if (index < this->p_18->getNumParameters())
            return this->p_18->constrainParameterValue(index, value);

        index -= this->p_18->getNumParameters();

        if (index < this->p_19->getNumParameters())
            return this->p_19->constrainParameterValue(index, value);

        return value;
        }
    }
}

void scheduleParamInit(ParameterIndex index, Index order) {
    this->paramInitIndices->push(index);
    this->paramInitOrder->push(order);
}

void processParamInitEvents() {
    this->listquicksort(
        this->paramInitOrder,
        this->paramInitIndices,
        0,
        (int)(this->paramInitOrder->length - 1),
        true
    );

    for (Index i = 0; i < this->paramInitOrder->length; i++) {
        this->getEngine()->scheduleParameterBang(this->paramInitIndices[i], 0);
    }
}

void processClockEvent(MillisecondTime time, ClockId index, bool hasValue, ParameterValue value) {
    RNBO_UNUSED(value);
    RNBO_UNUSED(hasValue);
    this->updateTime(time);

    switch (index) {
    case 1935387534:
        {
        this->metro_02_tick_bang();
        break;
        }
    }
}

void processOutletAtCurrentTime(EngineLink* , OutletIndex , ParameterValue ) {}

void processOutletEvent(
    EngineLink* sender,
    OutletIndex index,
    ParameterValue value,
    MillisecondTime time
) {
    this->updateTime(time);
    this->processOutletAtCurrentTime(sender, index, value);
}

void processNumMessage(MessageTag tag, MessageTag objectId, MillisecondTime time, number payload) {
    this->updateTime(time);

    switch (tag) {
    case TAG("valin"):
        {
        if (TAG("toggle_obj-31") == objectId)
            this->toggle_02_valin_set(payload);

        if (TAG("number_obj-108") == objectId)
            this->numberobj_40_valin_set(payload);

        break;
        }
    case TAG("format"):
        {
        if (TAG("number_obj-108") == objectId)
            this->numberobj_40_format_set(payload);

        break;
        }
    case TAG("listin"):
        {
        if (TAG("message_obj-22") == objectId)
            this->message_59_listin_number_set(payload);

        if (TAG("message_obj-23") == objectId)
            this->message_60_listin_number_set(payload);

        if (TAG("message_obj-24") == objectId)
            this->message_61_listin_number_set(payload);

        if (TAG("message_obj-25") == objectId)
            this->message_62_listin_number_set(payload);

        if (TAG("message_obj-110") == objectId)
            this->message_63_listin_number_set(payload);

        if (TAG("message_obj-115") == objectId)
            this->message_64_listin_number_set(payload);

        break;
        }
    }

    this->p_17->processNumMessage(tag, objectId, time, payload);
    this->p_18->processNumMessage(tag, objectId, time, payload);
    this->p_19->processNumMessage(tag, objectId, time, payload);
}

void processListMessage(
    MessageTag tag,
    MessageTag objectId,
    MillisecondTime time,
    const list& payload
) {
    this->updateTime(time);

    switch (tag) {
    case TAG("listin"):
        {
        if (TAG("message_obj-22") == objectId)
            this->message_59_listin_list_set(payload);

        if (TAG("message_obj-23") == objectId)
            this->message_60_listin_list_set(payload);

        if (TAG("message_obj-24") == objectId)
            this->message_61_listin_list_set(payload);

        if (TAG("message_obj-25") == objectId)
            this->message_62_listin_list_set(payload);

        if (TAG("message_obj-110") == objectId)
            this->message_63_listin_list_set(payload);

        if (TAG("message_obj-115") == objectId)
            this->message_64_listin_list_set(payload);

        break;
        }
    }

    this->p_17->processListMessage(tag, objectId, time, payload);
    this->p_18->processListMessage(tag, objectId, time, payload);
    this->p_19->processListMessage(tag, objectId, time, payload);
}

void processBangMessage(MessageTag tag, MessageTag objectId, MillisecondTime time) {
    this->updateTime(time);

    switch (tag) {
    case TAG("bangin"):
        {
        if (TAG("button_obj-38") == objectId)
            this->button_14_bangin_bang();

        if (TAG("button_obj-40") == objectId)
            this->button_15_bangin_bang();

        if (TAG("button_obj-41") == objectId)
            this->button_16_bangin_bang();

        if (TAG("button_obj-113") == objectId)
            this->button_17_bangin_bang();

        if (TAG("button_obj-58") == objectId)
            this->button_18_bangin_bang();

        if (TAG("button_obj-117") == objectId)
            this->button_19_bangin_bang();

        break;
        }
    case TAG("listin"):
        {
        if (TAG("message_obj-22") == objectId)
            this->message_59_listin_bang_bang();

        if (TAG("message_obj-23") == objectId)
            this->message_60_listin_bang_bang();

        if (TAG("message_obj-24") == objectId)
            this->message_61_listin_bang_bang();

        if (TAG("message_obj-25") == objectId)
            this->message_62_listin_bang_bang();

        if (TAG("message_obj-110") == objectId)
            this->message_63_listin_bang_bang();

        if (TAG("message_obj-115") == objectId)
            this->message_64_listin_bang_bang();

        break;
        }
    }

    this->p_17->processBangMessage(tag, objectId, time);
    this->p_18->processBangMessage(tag, objectId, time);
    this->p_19->processBangMessage(tag, objectId, time);
}

MessageTagInfo resolveTag(MessageTag tag) const {
    switch (tag) {
    case TAG("valout"):
        {
        return "valout";
        }
    case TAG("toggle_obj-31"):
        {
        return "toggle_obj-31";
        }
    case TAG("number_obj-108"):
        {
        return "number_obj-108";
        }
    case TAG("setup"):
        {
        return "setup";
        }
    case TAG("bangout"):
        {
        return "bangout";
        }
    case TAG("button_obj-38"):
        {
        return "button_obj-38";
        }
    case TAG("listout"):
        {
        return "listout";
        }
    case TAG("message_obj-22"):
        {
        return "message_obj-22";
        }
    case TAG("button_obj-40"):
        {
        return "button_obj-40";
        }
    case TAG("message_obj-23"):
        {
        return "message_obj-23";
        }
    case TAG("button_obj-41"):
        {
        return "button_obj-41";
        }
    case TAG("message_obj-24"):
        {
        return "message_obj-24";
        }
    case TAG("button_obj-113"):
        {
        return "button_obj-113";
        }
    case TAG("message_obj-25"):
        {
        return "message_obj-25";
        }
    case TAG("message_obj-110"):
        {
        return "message_obj-110";
        }
    case TAG("button_obj-58"):
        {
        return "button_obj-58";
        }
    case TAG("message_obj-115"):
        {
        return "message_obj-115";
        }
    case TAG("button_obj-117"):
        {
        return "button_obj-117";
        }
    case TAG("valin"):
        {
        return "valin";
        }
    case TAG("format"):
        {
        return "format";
        }
    case TAG("bangin"):
        {
        return "bangin";
        }
    case TAG("listin"):
        {
        return "listin";
        }
    }

    auto subpatchResult_0 = this->p_17->resolveTag(tag);

    if (subpatchResult_0)
        return subpatchResult_0;

    auto subpatchResult_1 = this->p_18->resolveTag(tag);

    if (subpatchResult_1)
        return subpatchResult_1;

    auto subpatchResult_2 = this->p_19->resolveTag(tag);

    if (subpatchResult_2)
        return subpatchResult_2;

    return "";
}

MessageIndex getNumMessages() const {
    return 0;
}

const MessageInfo& getMessageInfo(MessageIndex index) const {
    switch (index) {

    }

    return NullMessageInfo;
}

protected:

void param_11_value_set(number v) {
    v = this->param_11_value_constrain(v);
    this->param_11_value = v;
    this->sendParameter(0, false);

    if (this->param_11_value != this->param_11_lastValue) {
        this->getEngine()->presetTouched();
        this->param_11_lastValue = this->param_11_value;
    }

    this->toggle_02_value_number_set(v);
}

void toggle_02_valin_set(number v) {
    this->toggle_02_value_number_set(v);
}

void numberobj_40_valin_set(number v) {
    this->numberobj_40_value_set(v);
}

void numberobj_40_format_set(number v) {
    this->numberobj_40_currentFormat = trunc((v > 6 ? 6 : (v < 0 ? 0 : v)));
}

void button_14_bangin_bang() {
    this->button_14_bangval_bang();
}

void message_59_listin_list_set(const list& v) {
    this->message_59_set_set(v);
}

void message_59_listin_number_set(number v) {
    this->message_59_set_set(v);
}

void message_59_listin_bang_bang() {
    this->message_59_trigger_bang();
}

void metro_02_tick_bang() {
    this->metro_02_tickout_bang();
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(this->metro_02_on)) {
        this->metro_02_last = this->currenttime();

        {
            this->metro_02_next = this->metro_02_last + this->metro_02_interval;
            this->getEngine()->scheduleClockEvent(this, 1935387534, this->metro_02_interval + this->_currentTime);;
        }
    }
}

void button_15_bangin_bang() {
    this->button_15_bangval_bang();
}

void message_60_listin_list_set(const list& v) {
    this->message_60_set_set(v);
}

void message_60_listin_number_set(number v) {
    this->message_60_set_set(v);
}

void message_60_listin_bang_bang() {
    this->message_60_trigger_bang();
}

void button_16_bangin_bang() {
    this->button_16_bangval_bang();
}

void message_61_listin_list_set(const list& v) {
    this->message_61_set_set(v);
}

void message_61_listin_number_set(number v) {
    this->message_61_set_set(v);
}

void message_61_listin_bang_bang() {
    this->message_61_trigger_bang();
}

void button_17_bangin_bang() {
    this->button_17_bangval_bang();
}

void message_62_listin_list_set(const list& v) {
    this->message_62_set_set(v);
}

void message_62_listin_number_set(number v) {
    this->message_62_set_set(v);
}

void message_62_listin_bang_bang() {
    this->message_62_trigger_bang();
}

void message_63_listin_list_set(const list& v) {
    this->message_63_set_set(v);
}

void message_63_listin_number_set(number v) {
    this->message_63_set_set(v);
}

void message_63_listin_bang_bang() {
    this->message_63_trigger_bang();
}

void button_18_bangin_bang() {
    this->button_18_bangval_bang();
}

void message_64_listin_list_set(const list& v) {
    this->message_64_set_set(v);
}

void message_64_listin_number_set(number v) {
    this->message_64_set_set(v);
}

void message_64_listin_bang_bang() {
    this->message_64_trigger_bang();
}

void button_19_bangin_bang() {
    this->button_19_bangval_bang();
}

number msToSamps(MillisecondTime ms, number sampleRate) {
    return ms * sampleRate * 0.001;
}

MillisecondTime sampsToMs(SampleIndex samps) {
    return samps * (this->invsr * 1000);
}

Index getMaxBlockSize() const {
    return this->maxvs;
}

number getSampleRate() const {
    return this->sr;
}

bool hasFixedVectorSize() const {
    return false;
}

Index getNumInputChannels() const {
    return 0;
}

Index getNumOutputChannels() const {
    return 2;
}

void allocateDataRefs() {
    this->p_17->allocateDataRefs();
    this->p_18->allocateDataRefs();
    this->p_19->allocateDataRefs();

    if (this->osc_wavetable_buf->hasRequestedSize()) {
        if (this->osc_wavetable_buf->wantsFill())
            this->zeroDataRef(this->osc_wavetable_buf);

        this->getEngine()->sendDataRefUpdated(0);
    }

    if (this->RNBODefaultSinus->hasRequestedSize()) {
        if (this->RNBODefaultSinus->wantsFill())
            this->fillRNBODefaultSinus(this->RNBODefaultSinus);

        this->getEngine()->sendDataRefUpdated(1);
    }

    if (this->RNBODefaultMtofLookupTable256->hasRequestedSize()) {
        if (this->RNBODefaultMtofLookupTable256->wantsFill())
            this->fillRNBODefaultMtofLookupTable256(this->RNBODefaultMtofLookupTable256);

        this->getEngine()->sendDataRefUpdated(2);
    }
}

void initializeObjects() {
    this->numberobj_40_init();
    this->message_59_init();
    this->random_03_nz_init();
    this->message_60_init();
    this->message_61_init();
    this->message_62_init();
    this->message_63_init();
    this->message_64_init();
    this->p_17->initializeObjects();
    this->p_18->initializeObjects();
    this->p_19->initializeObjects();
}

void sendOutlet(OutletIndex index, ParameterValue value) {
    this->getEngine()->sendOutlet(this, index, value);
}

void startup() {
    this->updateTime(this->getEngine()->getCurrentTime());
    this->p_17->startup();
    this->p_18->startup();
    this->p_19->startup();

    if ((bool)(this->metro_02_on))
        this->metro_02_on_set(1);

    {
        this->scheduleParamInit(0, 0);
    }

    this->processParamInitEvents();
}

number param_11_value_constrain(number v) const {
    v = (v > 1 ? 1 : (v < 0 ? 0 : v));
    return v;
}

void metro_02_on_set(number v) {
    this->metro_02_on = v;
    this->getEngine()->flushClockEvents(this, 1935387534, false);;

    if ((bool)(v)) {
        {
            this->getEngine()->scheduleClockEvent(this, 1935387534, 0 + this->_currentTime);;
        }
    }
}

void toggle_02_output_set(number v) {
    this->metro_02_on_set(v);
}

void toggle_02_value_number_set(number v) {
    this->toggle_02_value_number_setter(v);
    v = this->toggle_02_value_number;
    this->getEngine()->sendNumMessage(TAG("valout"), TAG("toggle_obj-31"), v, this->_currentTime);
    this->toggle_02_output_set(v);
}

void metro_02_interval_set(number v) {
    this->metro_02_interval_setter(v);
    v = this->metro_02_interval;
}

void message_59_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->metro_02_interval_set(converted);
    }
}

void message_59_trigger_bang() {
    this->message_59_out_set(this->message_59_set);
}

void button_14_output_bang() {
    this->message_59_trigger_bang();
}

void button_14_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-38"), this->_currentTime);;
    this->button_14_output_bang();
}

void select_05_match1_bang() {
    this->button_14_bangval_bang();
}

void message_60_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->metro_02_interval_set(converted);
    }
}

void message_60_trigger_bang() {
    this->message_60_out_set(this->message_60_set);
}

void button_15_output_bang() {
    this->message_60_trigger_bang();
}

void button_15_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-40"), this->_currentTime);;
    this->button_15_output_bang();
}

void select_05_match2_bang() {
    this->button_15_bangval_bang();
}

void message_61_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->metro_02_interval_set(converted);
    }
}

void message_61_trigger_bang() {
    this->message_61_out_set(this->message_61_set);
}

void button_16_output_bang() {
    this->message_61_trigger_bang();
}

void button_16_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-41"), this->_currentTime);;
    this->button_16_output_bang();
}

void select_05_match3_bang() {
    this->button_16_bangval_bang();
}

void message_62_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->metro_02_interval_set(converted);
    }
}

void message_62_trigger_bang() {
    this->message_62_out_set(this->message_62_set);
}

void button_17_output_bang() {
    this->message_62_trigger_bang();
}

void button_17_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-113"), this->_currentTime);;
    this->button_17_output_bang();
}

void select_05_match4_bang() {
    this->button_17_bangval_bang();
}

void message_63_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->metro_02_interval_set(converted);
    }
}

void message_63_trigger_bang() {
    this->message_63_out_set(this->message_63_set);
}

void button_18_output_bang() {
    this->message_63_trigger_bang();
}

void button_18_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-58"), this->_currentTime);;
    this->button_18_output_bang();
}

void select_05_match5_bang() {
    this->button_18_bangval_bang();
}

void message_64_out_set(const list& v) {
    {
        number converted = (v->length > 0 ? v[0] : 0);
        this->metro_02_interval_set(converted);
    }
}

void message_64_trigger_bang() {
    this->message_64_out_set(this->message_64_set);
}

void button_19_output_bang() {
    this->message_64_trigger_bang();
}

void button_19_bangval_bang() {
    this->getEngine()->sendBangMessage(TAG("bangout"), TAG("button_obj-117"), this->_currentTime);;
    this->button_19_output_bang();
}

void select_05_match6_bang() {
    this->button_19_bangval_bang();
}

void select_05_nomatch_number_set(number ) {}

void select_05_input_number_set(number v) {
    if (v == this->select_05_test1)
        this->select_05_match1_bang();
    else if (v == this->select_05_test2)
        this->select_05_match2_bang();
    else if (v == this->select_05_test3)
        this->select_05_match3_bang();
    else if (v == this->select_05_test4)
        this->select_05_match4_bang();
    else if (v == this->select_05_test5)
        this->select_05_match5_bang();
    else if (v == this->select_05_test6)
        this->select_05_match6_bang();
    else
        this->select_05_nomatch_number_set(v);
}

void numberobj_40_output_set(number v) {
    this->select_05_input_number_set(v);
}

void numberobj_40_value_set(number v) {
    this->numberobj_40_value_setter(v);
    v = this->numberobj_40_value;
    number localvalue = v;

    if (this->numberobj_40_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->getEngine()->sendNumMessage(TAG("valout"), TAG("number_obj-108"), localvalue, this->_currentTime);
    this->numberobj_40_output_set(localvalue);
}

void message_59_set_set(const list& v) {
    this->message_59_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-22"), v, this->_currentTime);
}

void random_03_result_set(number v) {
    this->numberobj_40_value_set(v);
}

void random_03_trigger_bang() {
    this->random_03_result_set(rnbo_abs(this->random_03_nz_next()) * this->random_03_limit);
}

void trigger_07_out2_bang() {
    this->random_03_trigger_bang();
}

void p_18_source_currentChord_Index_number_set(number ) {}

void p_17_target_BassBang_bang_bang() {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->receive_01_output_bang_bang();
}

void p_18_source_BassBang_bang_bang() {
    this->p_17_target_BassBang_bang_bang();
}

void p_17_in4_number_set(number v) {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->eventinlet_09_out1_number_set(v);
}

void p_18_out4_number_set(number v) {
    this->p_17_in4_number_set(v);
}

void p_17_target_Bass_list_set(const list& v) {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->receive_02_output_list_set(v);
}

void p_18_source_Bass_list_set(const list& v) {
    this->p_17_target_Bass_list_set(v);
}

void p_17_in3_number_set(number v) {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->eventinlet_08_out1_number_set(v);
}

void p_18_out3_number_set(number v) {
    this->p_17_in3_number_set(v);
}

void p_17_in2_number_set(number v) {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->eventinlet_07_out1_number_set(v);
}

void p_18_out2_number_set(number v) {
    this->p_17_in2_number_set(v);
}

void p_17_in1_number_set(number v) {
    this->p_17->updateTime(this->_currentTime);
    this->p_17->eventinlet_06_out1_number_set(v);
}

void p_18_out1_number_set(number v) {
    this->p_17_in1_number_set(v);
}

void p_18_in1_bang_bang() {
    this->p_18->updateTime(this->_currentTime);
    this->p_18->eventinlet_13_out1_bang_bang();
}

void trigger_07_out1_bang() {
    this->p_18_in1_bang_bang();
}

void trigger_07_input_bang_bang() {
    this->trigger_07_out2_bang();
    this->trigger_07_out1_bang();
}

void metro_02_tickout_bang() {
    this->trigger_07_input_bang_bang();
}

void message_60_set_set(const list& v) {
    this->message_60_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-23"), v, this->_currentTime);
}

void message_61_set_set(const list& v) {
    this->message_61_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-24"), v, this->_currentTime);
}

void message_62_set_set(const list& v) {
    this->message_62_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-25"), v, this->_currentTime);
}

void message_63_set_set(const list& v) {
    this->message_63_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-110"), v, this->_currentTime);
}

void message_64_set_set(const list& v) {
    this->message_64_set = jsCreateListCopy(v);
    this->getEngine()->sendListMessage(TAG("listout"), TAG("message_obj-115"), v, this->_currentTime);
}

void p_19_midihandler(int status, int channel, int port, ConstByteArray data, Index length) {
    RNBO_UNUSED(port);
    RNBO_UNUSED(channel);
    RNBO_UNUSED(status);
    this->p_19->processMidiEvent(_currentTime, 0, data, length);
}

void p_19_out3_number_set(number ) {}

void p_17_perform(SampleValue * out1, Index n) {
    // subpatcher: ChInst
    SampleArray<1> outs = {out1};

    this->p_17->process(nullptr, 0, outs, 1, n);
}

void dspexpr_36_perform(const Sample * in1, number in2, SampleValue * out1, Index n) {
    RNBO_UNUSED(in2);
    Index i;

    for (i = 0; i < n; i++) {
        out1[(Index)i] = in1[(Index)i] * 0.125;//#map:_###_obj_###_:1
    }
}

void p_19_perform(
    const SampleValue * target_Size,
    const SampleValue * target_Diff,
    const SampleValue * target_Decay,
    const SampleValue * target_Jitter,
    const SampleValue * target_Damp,
    const SampleValue * in1,
    const SampleValue * in2,
    SampleValue * source_Decay,
    SampleValue * source_Jitter,
    SampleValue * source_Damp,
    SampleValue * source_Diff,
    SampleValue * source_Size,
    SampleValue * out1,
    SampleValue * out2,
    Index n
) {
    // subpatcher: Verb
    ConstSampleArray<7> ins = {
        in1,
        in2,
        target_Size,
        target_Diff,
        target_Decay,
        target_Jitter,
        target_Damp
    };

    SampleArray<7> outs = {
        out1,
        out2,
        source_Decay,
        source_Jitter,
        source_Damp,
        source_Diff,
        source_Size
    };

    this->p_19->process(ins, 7, outs, 7, n);
}

void p_18_perform(Index n) {
    // subpatcher: Chords
    this->p_18->process(nullptr, 0, nullptr, 0, n);
}

void stackprotect_perform(Index n) {
    RNBO_UNUSED(n);
    auto __stackprotect_count = this->stackprotect_count;
    __stackprotect_count = 0;
    this->stackprotect_count = __stackprotect_count;
}

void toggle_02_value_number_setter(number v) {
    this->toggle_02_value_number = (v != 0 ? 1 : 0);
}

void numberobj_40_value_setter(number v) {
    number localvalue = v;

    if (this->numberobj_40_currentFormat != 6) {
        localvalue = trunc(localvalue);
    }

    this->numberobj_40_value = localvalue;
}

void random_03_limit_setter(number v) {
    if (v >= 0)
        this->random_03_limit = v;
}

void metro_02_interval_setter(number v) {
    this->metro_02_interval = (v > 0 ? v : 0);
}

void param_11_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->param_11_value;
}

void param_11_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->param_11_value_set(preset["value"]);
}

void toggle_02_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->toggle_02_value_number;
}

void toggle_02_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->toggle_02_value_number_set(preset["value"]);
}

void numberobj_40_init() {
    this->numberobj_40_currentFormat = 0;
    this->getEngine()->sendNumMessage(TAG("setup"), TAG("number_obj-108"), 1, this->_currentTime);
}

void numberobj_40_getPresetValue(PatcherStateInterface& preset) {
    preset["value"] = this->numberobj_40_value;
}

void numberobj_40_setPresetValue(PatcherStateInterface& preset) {
    if ((bool)(stateIsEmpty(preset)))
        return;

    this->numberobj_40_value_set(preset["value"]);
}

void message_59_init() {
    this->message_59_set_set({2500});
}

void random_03_nz_reset() {
    xoshiro_reset(
        systemticks() + this->voice() + this->random(0, 10000),
        this->random_03_nz_state
    );
}

void random_03_nz_init() {
    this->random_03_nz_reset();
}

void random_03_nz_seed(number v) {
    xoshiro_reset(v, this->random_03_nz_state);
}

number random_03_nz_next() {
    return xoshiro_next(this->random_03_nz_state);
}

void metro_02_onTransportChanged(number ) {}

void metro_02_onBeatTimeChanged(number ) {}

void message_60_init() {
    this->message_60_set_set({3000});
}

void message_61_init() {
    this->message_61_set_set({4000});
}

void message_62_init() {
    this->message_62_set_set({5000});
}

void message_63_init() {
    this->message_63_set_set({6000});
}

void message_64_init() {
    this->message_64_set_set({8000});
}

Index globaltransport_getSampleOffset(MillisecondTime time) {
    return this->mstosamps(this->maximum(0, time - this->getEngine()->getCurrentTime()));
}

number globaltransport_getTempoAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_tempo[(Index)sampleOffset] : this->globaltransport_lastTempo);
}

number globaltransport_getStateAtSample(SampleIndex sampleOffset) {
    return (sampleOffset >= 0 && sampleOffset < this->vs ? this->globaltransport_state[(Index)sampleOffset] : this->globaltransport_lastState);
}

number globaltransport_getState(MillisecondTime time) {
    return this->globaltransport_getStateAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getTempo(MillisecondTime time) {
    return this->globaltransport_getTempoAtSample(this->globaltransport_getSampleOffset(time));
}

number globaltransport_getBeatTime(MillisecondTime time) {
    number i = 2;

    while (i < this->globaltransport_beatTimeChanges->length && this->globaltransport_beatTimeChanges[(Index)(i + 1)] <= time) {
        i += 2;
    }

    i -= 2;
    number beatTimeBase = this->globaltransport_beatTimeChanges[(Index)i];

    if (this->globaltransport_getState(time) == 0)
        return beatTimeBase;

    number beatTimeBaseMsTime = this->globaltransport_beatTimeChanges[(Index)(i + 1)];
    number diff = time - beatTimeBaseMsTime;
    number diffInBeats = diff * this->globaltransport_getTempo(time) * 0.008 / (number)480;
    return beatTimeBase + diffInBeats;
}

bool globaltransport_setTempo(MillisecondTime time, number tempo, bool notify) {
    if ((bool)(notify)) {
        this->processTempoEvent(time, tempo);
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getTempoAtSample((SampleIndex)(offset)) != tempo) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_tempo, this->vs, tempo, offset);
            this->globaltransport_lastTempo = tempo;
            this->globaltransport_tempoNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setState(MillisecondTime time, number state, bool notify) {
    if ((bool)(notify)) {
        this->processTransportEvent(time, TransportState(state));
        this->globaltransport_notify = true;
    } else {
        Index offset = (Index)(this->globaltransport_getSampleOffset(time));

        if (this->globaltransport_getStateAtSample(offset) != state) {
            this->globaltransport_beatTimeChanges->push(this->globaltransport_getBeatTime(time));
            this->globaltransport_beatTimeChanges->push(time);
            fillSignal(this->globaltransport_state, this->vs, state, offset);
            this->globaltransport_lastState = TransportState(state);
            this->globaltransport_stateNeedsReset = true;
            return true;
        }
    }

    return false;
}

bool globaltransport_setBeatTime(MillisecondTime time, number beattime, bool notify) {
    if ((bool)(notify)) {
        this->processBeatTimeEvent(time, beattime);
        this->globaltransport_notify = true;
        return false;
    } else {
        bool beatTimeHasChanged = false;
        float oldBeatTime = (float)(this->globaltransport_getBeatTime(time));
        float newBeatTime = (float)(beattime);

        if (oldBeatTime != newBeatTime) {
            beatTimeHasChanged = true;
        }

        this->globaltransport_beatTimeChanges->push(beattime);
        this->globaltransport_beatTimeChanges->push(time);
        return beatTimeHasChanged;
    }
}

number globaltransport_getBeatTimeAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBeatTime(this->getEngine()->getCurrentTime() + msOffset);
}

array<number, 2> globaltransport_getTimeSignature(MillisecondTime time) {
    number i = 3;

    while (i < this->globaltransport_timeSignatureChanges->length && this->globaltransport_timeSignatureChanges[(Index)(i + 2)] <= time) {
        i += 3;
    }

    i -= 3;

    return {
        this->globaltransport_timeSignatureChanges[(Index)i],
        this->globaltransport_timeSignatureChanges[(Index)(i + 1)]
    };
}

array<number, 2> globaltransport_getTimeSignatureAtSample(SampleIndex sampleOffset) {
    MillisecondTime msOffset = (MillisecondTime)(this->sampstoms(sampleOffset));
    return this->globaltransport_getTimeSignature(this->getEngine()->getCurrentTime() + msOffset);
}

void globaltransport_setBBUBase(
    MillisecondTime time,
    number numerator,
    number denominator,
    number bars,
    number beats,
    number units
) {
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    bars--;
    beats--;
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;

    while (units > beatLengthInUnits) {
        units -= beatLengthInUnits;
        beats++;
    }

    number targetBeatTime = bars * numerator + beats + units / beatLengthInUnits;
    this->globaltransport_bbuBase = targetBeatTime - beatsIncCurrenttDenom;
}

array<number, 3> globaltransport_getBBU(MillisecondTime time) {
    array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);
    number numerator = currentSig[0];
    number denominator = currentSig[1];
    number beatsInQuarterNotes = this->globaltransport_getBeatTime(time);
    number beatsIncCurrenttDenom = beatsInQuarterNotes * (denominator * 0.25);
    number beatLength = (number)4 / denominator;
    number beatLengthInUnits = beatLength * 480;
    number targetBeatTime = beatsIncCurrenttDenom + this->globaltransport_bbuBase;
    number currentBars = 0;
    number currentBeats = 0;
    number currentUnits = 0;

    if (targetBeatTime >= 0) {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;
        currentBeats = trunc(targetBeatTime);
        targetBeatTime -= currentBeats;
        currentUnits = targetBeatTime * beatLengthInUnits;
    } else {
        currentBars = trunc(targetBeatTime / numerator);
        targetBeatTime -= currentBars * numerator;

        if (targetBeatTime != 0) {
            currentBars -= 1;
            currentBeats = trunc(targetBeatTime);
            targetBeatTime -= currentBeats;
            currentBeats = numerator + currentBeats;
            currentUnits = targetBeatTime * beatLengthInUnits;

            if (currentUnits != 0) {
                currentUnits = beatLengthInUnits + currentUnits;
                currentBeats -= 1;
            }
        }
    }

    return {currentBars + 1, currentBeats + 1, currentUnits};
}

bool globaltransport_setTimeSignature(MillisecondTime time, number numerator, number denominator, bool notify) {
    if ((bool)(notify)) {
        this->processTimeSignatureEvent(time, (int)(numerator), (int)(denominator));
        this->globaltransport_notify = true;
    } else {
        array<number, 2> currentSig = this->globaltransport_getTimeSignature(time);

        if (currentSig[0] != numerator || currentSig[1] != denominator) {
            array<number, 3> bbu = this->globaltransport_getBBU(time);
            this->globaltransport_setBBUBase(time, numerator, denominator, bbu[0], bbu[1], bbu[2]);
            this->globaltransport_timeSignatureChanges->push(numerator);
            this->globaltransport_timeSignatureChanges->push(denominator);
            this->globaltransport_timeSignatureChanges->push(time);
            return true;
        }
    }

    return false;
}

array<number, 3> globaltransport_getBBUAtSample(SampleIndex sampleOffset) {
    auto msOffset = this->sampstoms(sampleOffset);
    return this->globaltransport_getBBU(this->getEngine()->getCurrentTime() + msOffset);
}

bool globaltransport_setBBU(MillisecondTime time, number bars, number beats, number units, bool notify) {
    RNBO_UNUSED(notify);
    array<number, 2> sig = this->globaltransport_getTimeSignature(time);
    number numerator = sig[0];
    number denominator = sig[1];
    this->globaltransport_setBBUBase(time, numerator, denominator, bars, beats, units);
    return true;
}

void globaltransport_advance() {
    if ((bool)(this->globaltransport_tempoNeedsReset)) {
        fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
        this->globaltransport_tempoNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTempoEvent(this->globaltransport_lastTempo);
        }
    }

    if ((bool)(this->globaltransport_stateNeedsReset)) {
        fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
        this->globaltransport_stateNeedsReset = false;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTransportEvent(TransportState(this->globaltransport_lastState));
        }
    }

    if (this->globaltransport_beatTimeChanges->length > 2) {
        this->globaltransport_beatTimeChanges[0] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 2)];
        this->globaltransport_beatTimeChanges[1] = this->globaltransport_beatTimeChanges[(Index)(this->globaltransport_beatTimeChanges->length - 1)];
        this->globaltransport_beatTimeChanges->length = 2;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendBeatTimeEvent(this->globaltransport_beatTimeChanges[0]);
        }
    }

    if (this->globaltransport_timeSignatureChanges->length > 3) {
        this->globaltransport_timeSignatureChanges[0] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 3)];
        this->globaltransport_timeSignatureChanges[1] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 2)];
        this->globaltransport_timeSignatureChanges[2] = this->globaltransport_timeSignatureChanges[(Index)(this->globaltransport_timeSignatureChanges->length - 1)];
        this->globaltransport_timeSignatureChanges->length = 3;

        if ((bool)(this->globaltransport_notify)) {
            this->getEngine()->sendTimeSignatureEvent(
                (int)(this->globaltransport_timeSignatureChanges[0]),
                (int)(this->globaltransport_timeSignatureChanges[1])
            );
        }
    }

    this->globaltransport_notify = false;
}

void globaltransport_dspsetup(bool force) {
    if ((bool)(this->globaltransport_setupDone) && (bool)(!(bool)(force)))
        return;

    fillSignal(this->globaltransport_tempo, this->vs, this->globaltransport_lastTempo);
    this->globaltransport_tempoNeedsReset = false;
    fillSignal(this->globaltransport_state, this->vs, this->globaltransport_lastState);
    this->globaltransport_stateNeedsReset = false;
    this->globaltransport_setupDone = true;
}

bool stackprotect_check() {
    this->stackprotect_count++;

    if (this->stackprotect_count > 128) {
        console->log("STACK OVERFLOW DETECTED - stopped processing branch !");
        return true;
    }

    return false;
}

void updateTime(MillisecondTime time) {
    this->_currentTime = time;
    this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(rnbo_fround(this->msToSamps(time - this->getEngine()->getCurrentTime(), this->sr)));

    if (this->sampleOffsetIntoNextAudioBuffer >= (SampleIndex)(this->vs))
        this->sampleOffsetIntoNextAudioBuffer = (SampleIndex)(this->vs) - 1;

    if (this->sampleOffsetIntoNextAudioBuffer < 0)
        this->sampleOffsetIntoNextAudioBuffer = 0;
}

void assign_defaults()
{
    param_11_value = 0;
    toggle_02_value_number = 0;
    toggle_02_value_number_setter(toggle_02_value_number);
    numberobj_40_value = 0;
    numberobj_40_value_setter(numberobj_40_value);
    select_05_test1 = 0;
    select_05_test2 = 1;
    select_05_test3 = 2;
    select_05_test4 = 3;
    select_05_test5 = 4;
    select_05_test6 = 5;
    random_03_limit = 4;
    random_03_limit_setter(random_03_limit);
    random_03_seed = 0;
    metro_02_on = 0;
    metro_02_interval = 4000;
    metro_02_interval_setter(metro_02_interval);
    dspexpr_36_in1 = 0;
    dspexpr_36_in2 = 0.125;
    p_17_target = 0;
    p_18_target = 0;
    p_19_target = 0;
    _currentTime = 0;
    audioProcessSampleCount = 0;
    sampleOffsetIntoNextAudioBuffer = 0;
    zeroBuffer = nullptr;
    dummyBuffer = nullptr;
    signals[0] = nullptr;
    signals[1] = nullptr;
    didAllocateSignals = 0;
    vs = 0;
    maxvs = 0;
    sr = 44100;
    invsr = 0.00002267573696;
    param_11_lastValue = 0;
    toggle_02_lastValue = 0;
    numberobj_40_currentFormat = 6;
    numberobj_40_lastValue = 0;
    metro_02_last = -1;
    metro_02_next = -1;
    globaltransport_tempo = nullptr;
    globaltransport_tempoNeedsReset = false;
    globaltransport_lastTempo = 120;
    globaltransport_state = nullptr;
    globaltransport_stateNeedsReset = false;
    globaltransport_lastState = 0;
    globaltransport_beatTimeChanges = { 0, 0 };
    globaltransport_timeSignatureChanges = { 4, 4, 0 };
    globaltransport_notify = false;
    globaltransport_bbuBase = 0;
    globaltransport_setupDone = false;
    stackprotect_count = 0;
    _voiceIndex = 0;
    _noteNumber = 0;
    isMuted = 1;
}

// member variables

    number param_11_value;
    number toggle_02_value_number;
    number numberobj_40_value;
    list message_59_set;
    number select_05_test1;
    number select_05_test2;
    number select_05_test3;
    number select_05_test4;
    number select_05_test5;
    number select_05_test6;
    number random_03_limit;
    number random_03_seed;
    number metro_02_on;
    number metro_02_interval;
    number dspexpr_36_in1;
    number dspexpr_36_in2;
    number p_17_target;
    number p_18_target;
    number p_19_target;
    list message_60_set;
    list message_61_set;
    list message_62_set;
    list message_63_set;
    list message_64_set;
    MillisecondTime _currentTime;
    UInt64 audioProcessSampleCount;
    SampleIndex sampleOffsetIntoNextAudioBuffer;
    signal zeroBuffer;
    signal dummyBuffer;
    SampleValue * signals[2];
    bool didAllocateSignals;
    Index vs;
    Index maxvs;
    number sr;
    number invsr;
    number param_11_lastValue;
    number toggle_02_lastValue;
    Int numberobj_40_currentFormat;
    number numberobj_40_lastValue;
    UInt random_03_nz_state[4] = { };
    MillisecondTime metro_02_last;
    MillisecondTime metro_02_next;
    signal globaltransport_tempo;
    bool globaltransport_tempoNeedsReset;
    number globaltransport_lastTempo;
    signal globaltransport_state;
    bool globaltransport_stateNeedsReset;
    number globaltransport_lastState;
    list globaltransport_beatTimeChanges;
    list globaltransport_timeSignatureChanges;
    bool globaltransport_notify;
    number globaltransport_bbuBase;
    bool globaltransport_setupDone;
    number stackprotect_count;
    DataRef osc_wavetable_buf;
    DataRef RNBODefaultSinus;
    DataRef RNBODefaultMtofLookupTable256;
    Index _voiceIndex;
    Int _noteNumber;
    Index isMuted;
    indexlist paramInitIndices;
    indexlist paramInitOrder;
    RNBOSubpatcher_98* p_17;
    RNBOSubpatcher_99* p_18;
    RNBOSubpatcher_100* p_19;

};

PatcherInterface* creaternbomatic()
{
    return new rnbomatic();
}

#ifndef RNBO_NO_PATCHERFACTORY

extern "C" PatcherFactoryFunctionPtr GetPatcherFactoryFunction(PlatformInterface* platformInterface)
#else

extern "C" PatcherFactoryFunctionPtr rnbomaticFactoryFunction(PlatformInterface* platformInterface)
#endif

{
    Platform::set(platformInterface);
    return creaternbomatic;
}

} // end RNBO namespace

